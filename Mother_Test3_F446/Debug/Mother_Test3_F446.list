
Mother_Test3_F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006598  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08006768  08006768  00016768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c30  08006c30  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c38  08006c38  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006c38  08006c38  00016c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c40  08006c40  00016c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000007c  08006cc0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08006cc0  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f513  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe8  00000000  00000000  0002f5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  000315a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00032100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002578b  00000000  00000000  00032ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecb2  00000000  00000000  00058333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d07ef  00000000  00000000  00066fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001377d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  00137824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006750 	.word	0x08006750

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006750 	.word	0x08006750

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	2007      	movs	r0, #7
 8000ec0:	f000 fa02 	bl	80012c8 <bno055_writeData>
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	203d      	movs	r0, #61	; 0x3d
 8000edc:	f000 f9f4 	bl	80012c8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d103      	bne.n	8000eee <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000ee6:	2013      	movs	r0, #19
 8000ee8:	f000 f9e2 	bl	80012b0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000eec:	e002      	b.n	8000ef4 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000eee:	2007      	movs	r0, #7
 8000ef0:	f000 f9de 	bl	80012b0 <bno055_delay>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff ffe3 	bl	8000ecc <bno055_setOperationMode>
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000f0e:	200c      	movs	r0, #12
 8000f10:	f7ff ffdc 	bl	8000ecc <bno055_setOperationMode>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	203f      	movs	r0, #63	; 0x3f
 8000f20:	f000 f9d2 	bl	80012c8 <bno055_writeData>
  bno055_delay(700);
 8000f24:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f28:	f000 f9c2 	bl	80012b0 <bno055_delay>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  bno055_reset();
 8000f36:	f7ff ffef 	bl	8000f18 <bno055_reset>

  uint8_t id = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	2201      	movs	r2, #1
 8000f42:	4619      	mov	r1, r3
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 faab 	bl	80014a0 <bno055_readData>
  if (id != BNO055_ID) {
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2ba0      	cmp	r3, #160	; 0xa0
 8000f4e:	d004      	beq.n	8000f5a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4619      	mov	r1, r3
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <bno055_setup+0x4c>)
 8000f56:	f004 fbf7 	bl	8005748 <iprintf>
  }
  bno055_setPage(0);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff ffa8 	bl	8000eb0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000f60:	2100      	movs	r1, #0
 8000f62:	203f      	movs	r0, #63	; 0x3f
 8000f64:	f000 f9b0 	bl	80012c8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000f68:	f7ff ffc8 	bl	8000efc <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f000 f99f 	bl	80012b0 <bno055_delay>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	08006768 	.word	0x08006768

08000f80 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000f80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f84:	b09e      	sub	sp, #120	; 0x78
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff ff8e 	bl	8000eb0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f98:	2b20      	cmp	r3, #32
 8000f9a:	d108      	bne.n	8000fae <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000f9c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fa7a 	bl	80014a0 <bno055_readData>
 8000fac:	e007      	b.n	8000fbe <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000fae:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fb6:	2206      	movs	r2, #6
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fa71 	bl	80014a0 <bno055_readData>

  double scale = 1;
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b8b      	ldr	r3, [pc, #556]	; (80011f0 <bno055_getVector+0x270>)
 8000fc4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fcc:	2b0e      	cmp	r3, #14
 8000fce:	d109      	bne.n	8000fe4 <bno055_getVector+0x64>
    scale = magScale;
 8000fd0:	4b88      	ldr	r3, [pc, #544]	; (80011f4 <bno055_getVector+0x274>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff faad 	bl	8000534 <__aeabi_ui2d>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000fe2:	e03e      	b.n	8001062 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d007      	beq.n	8000ffc <bno055_getVector+0x7c>
 8000fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ff0:	2b28      	cmp	r3, #40	; 0x28
 8000ff2:	d003      	beq.n	8000ffc <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8000ffa:	d109      	bne.n	8001010 <bno055_getVector+0x90>
    scale = accelScale;
 8000ffc:	4b7e      	ldr	r3, [pc, #504]	; (80011f8 <bno055_getVector+0x278>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fa97 	bl	8000534 <__aeabi_ui2d>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800100e:	e028      	b.n	8001062 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001014:	2b14      	cmp	r3, #20
 8001016:	d109      	bne.n	800102c <bno055_getVector+0xac>
    scale = angularRateScale;
 8001018:	4b78      	ldr	r3, [pc, #480]	; (80011fc <bno055_getVector+0x27c>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa89 	bl	8000534 <__aeabi_ui2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800102a:	e01a      	b.n	8001062 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 800102c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001030:	2b1a      	cmp	r3, #26
 8001032:	d109      	bne.n	8001048 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001034:	4b72      	ldr	r3, [pc, #456]	; (8001200 <bno055_getVector+0x280>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa7b 	bl	8000534 <__aeabi_ui2d>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001046:	e00c      	b.n	8001062 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800104c:	2b20      	cmp	r3, #32
 800104e:	d108      	bne.n	8001062 <bno055_getVector+0xe2>
    scale = quaScale;
 8001050:	4b6c      	ldr	r3, [pc, #432]	; (8001204 <bno055_getVector+0x284>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa6d 	bl	8000534 <__aeabi_ui2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001066:	2220      	movs	r2, #32
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fb64 	bl	8005738 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001074:	2b20      	cmp	r3, #32
 8001076:	d150      	bne.n	800111a <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001078:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21b      	sxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa62 	bl	8000554 <__aeabi_i2d>
 8001090:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001094:	f7ff fbf2 	bl	800087c <__aeabi_ddiv>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80010a0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa4e 	bl	8000554 <__aeabi_i2d>
 80010b8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010bc:	f7ff fbde 	bl	800087c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80010c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa3a 	bl	8000554 <__aeabi_i2d>
 80010e0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010e4:	f7ff fbca 	bl	800087c <__aeabi_ddiv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80010f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21b      	sxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa26 	bl	8000554 <__aeabi_i2d>
 8001108:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800110c:	f7ff fbb6 	bl	800087c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001118:	e03b      	b.n	8001192 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800111a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21b      	sxth	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa11 	bl	8000554 <__aeabi_i2d>
 8001132:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001136:	f7ff fba1 	bl	800087c <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001142:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21b      	sxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f9fd 	bl	8000554 <__aeabi_i2d>
 800115a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800115e:	f7ff fb8d 	bl	800087c <__aeabi_ddiv>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800116a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b21b      	sxth	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9e9 	bl	8000554 <__aeabi_i2d>
 8001182:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001186:	f7ff fb79 	bl	800087c <__aeabi_ddiv>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001192:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001196:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80011aa:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80011ae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011b2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80011b6:	ec49 8b14 	vmov	d4, r8, r9
 80011ba:	ec45 4b15 	vmov	d5, r4, r5
 80011be:	ec41 0b16 	vmov	d6, r0, r1
 80011c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80011c6:	eeb0 0a44 	vmov.f32	s0, s8
 80011ca:	eef0 0a64 	vmov.f32	s1, s9
 80011ce:	eeb0 1a45 	vmov.f32	s2, s10
 80011d2:	eef0 1a65 	vmov.f32	s3, s11
 80011d6:	eeb0 2a46 	vmov.f32	s4, s12
 80011da:	eef0 2a66 	vmov.f32	s5, s13
 80011de:	eeb0 3a47 	vmov.f32	s6, s14
 80011e2:	eef0 3a67 	vmov.f32	s7, s15
 80011e6:	3778      	adds	r7, #120	; 0x78
 80011e8:	46bd      	mov	sp, r7
 80011ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011ee:	bf00      	nop
 80011f0:	3ff00000 	.word	0x3ff00000
 80011f4:	20000006 	.word	0x20000006
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000002 	.word	0x20000002
 8001200:	20000004 	.word	0x20000004
 8001204:	20000008 	.word	0x20000008

08001208 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8001208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800120c:	b090      	sub	sp, #64	; 0x40
 800120e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001210:	201a      	movs	r0, #26
 8001212:	f7ff feb5 	bl	8000f80 <bno055_getVector>
 8001216:	eeb0 4a40 	vmov.f32	s8, s0
 800121a:	eef0 4a60 	vmov.f32	s9, s1
 800121e:	eeb0 5a41 	vmov.f32	s10, s2
 8001222:	eef0 5a61 	vmov.f32	s11, s3
 8001226:	eeb0 6a42 	vmov.f32	s12, s4
 800122a:	eef0 6a62 	vmov.f32	s13, s5
 800122e:	eeb0 7a43 	vmov.f32	s14, s6
 8001232:	eef0 7a63 	vmov.f32	s15, s7
 8001236:	ed87 4b08 	vstr	d4, [r7, #32]
 800123a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800123e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001242:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001246:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800124a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800124e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001252:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001256:	ec49 8b14 	vmov	d4, r8, r9
 800125a:	ec45 4b15 	vmov	d5, r4, r5
 800125e:	ec41 0b16 	vmov	d6, r0, r1
 8001262:	ec43 2b17 	vmov	d7, r2, r3
}
 8001266:	eeb0 0a44 	vmov.f32	s0, s8
 800126a:	eef0 0a64 	vmov.f32	s1, s9
 800126e:	eeb0 1a45 	vmov.f32	s2, s10
 8001272:	eef0 1a65 	vmov.f32	s3, s11
 8001276:	eeb0 2a46 	vmov.f32	s4, s12
 800127a:	eef0 2a66 	vmov.f32	s5, s13
 800127e:	eeb0 3a47 	vmov.f32	s6, s14
 8001282:	eef0 3a67 	vmov.f32	s7, s15
 8001286:	3740      	adds	r7, #64	; 0x40
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001290 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <bno055_assignI2C+0x1c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000098 	.word	0x20000098

080012b0 <bno055_delay>:

void bno055_delay(int time) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fe3c 	bl	8001f38 <HAL_Delay>
#endif
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	460a      	mov	r2, r1
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	4613      	mov	r3, r2
 80012d6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	733b      	strb	r3, [r7, #12]
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80012e0:	4b5a      	ldr	r3, [pc, #360]	; (800144c <bno055_writeData+0x184>)
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	f107 020c 	add.w	r2, r7, #12
 80012e8:	230a      	movs	r3, #10
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2302      	movs	r3, #2
 80012ee:	2150      	movs	r1, #80	; 0x50
 80012f0:	f001 fa1e 	bl	8002730 <HAL_I2C_Master_Transmit>
 80012f4:	4603      	mov	r3, r0
 80012f6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80a0 	beq.w	8001440 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d103      	bne.n	800130e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001306:	4852      	ldr	r0, [pc, #328]	; (8001450 <bno055_writeData+0x188>)
 8001308:	f004 faa4 	bl	8005854 <puts>
 800130c:	e012      	b.n	8001334 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d103      	bne.n	800131c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001314:	484f      	ldr	r0, [pc, #316]	; (8001454 <bno055_writeData+0x18c>)
 8001316:	f004 fa9d 	bl	8005854 <puts>
 800131a:	e00b      	b.n	8001334 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d103      	bne.n	800132a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001322:	484d      	ldr	r0, [pc, #308]	; (8001458 <bno055_writeData+0x190>)
 8001324:	f004 fa96 	bl	8005854 <puts>
 8001328:	e004      	b.n	8001334 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	4619      	mov	r1, r3
 800132e:	484b      	ldr	r0, [pc, #300]	; (800145c <bno055_writeData+0x194>)
 8001330:	f004 fa0a 	bl	8005748 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001334:	4b45      	ldr	r3, [pc, #276]	; (800144c <bno055_writeData+0x184>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f001 fd2b 	bl	8002d94 <HAL_I2C_GetError>
 800133e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d07e      	beq.n	8001444 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d103      	bne.n	8001354 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 800134c:	4844      	ldr	r0, [pc, #272]	; (8001460 <bno055_writeData+0x198>)
 800134e:	f004 fa81 	bl	8005854 <puts>
 8001352:	e021      	b.n	8001398 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d103      	bne.n	8001362 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800135a:	4842      	ldr	r0, [pc, #264]	; (8001464 <bno055_writeData+0x19c>)
 800135c:	f004 fa7a 	bl	8005854 <puts>
 8001360:	e01a      	b.n	8001398 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d103      	bne.n	8001370 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001368:	483f      	ldr	r0, [pc, #252]	; (8001468 <bno055_writeData+0x1a0>)
 800136a:	f004 fa73 	bl	8005854 <puts>
 800136e:	e013      	b.n	8001398 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2b08      	cmp	r3, #8
 8001374:	d103      	bne.n	800137e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001376:	483d      	ldr	r0, [pc, #244]	; (800146c <bno055_writeData+0x1a4>)
 8001378:	f004 fa6c 	bl	8005854 <puts>
 800137c:	e00c      	b.n	8001398 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	2b10      	cmp	r3, #16
 8001382:	d103      	bne.n	800138c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001384:	483a      	ldr	r0, [pc, #232]	; (8001470 <bno055_writeData+0x1a8>)
 8001386:	f004 fa65 	bl	8005854 <puts>
 800138a:	e005      	b.n	8001398 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2b20      	cmp	r3, #32
 8001390:	d102      	bne.n	8001398 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001392:	4838      	ldr	r0, [pc, #224]	; (8001474 <bno055_writeData+0x1ac>)
 8001394:	f004 fa5e 	bl	8005854 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <bno055_writeData+0x184>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fceb 	bl	8002d78 <HAL_I2C_GetState>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d103      	bne.n	80013b4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80013ac:	4832      	ldr	r0, [pc, #200]	; (8001478 <bno055_writeData+0x1b0>)
 80013ae:	f004 fa51 	bl	8005854 <puts>
 80013b2:	e048      	b.n	8001446 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b20      	cmp	r3, #32
 80013b8:	d103      	bne.n	80013c2 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80013ba:	482f      	ldr	r0, [pc, #188]	; (8001478 <bno055_writeData+0x1b0>)
 80013bc:	f004 fa4a 	bl	8005854 <puts>
 80013c0:	e041      	b.n	8001446 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	2b24      	cmp	r3, #36	; 0x24
 80013c6:	d103      	bne.n	80013d0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80013c8:	482c      	ldr	r0, [pc, #176]	; (800147c <bno055_writeData+0x1b4>)
 80013ca:	f004 fa43 	bl	8005854 <puts>
 80013ce:	e03a      	b.n	8001446 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	2b21      	cmp	r3, #33	; 0x21
 80013d4:	d103      	bne.n	80013de <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80013d6:	482a      	ldr	r0, [pc, #168]	; (8001480 <bno055_writeData+0x1b8>)
 80013d8:	f004 fa3c 	bl	8005854 <puts>
 80013dc:	e033      	b.n	8001446 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	2b22      	cmp	r3, #34	; 0x22
 80013e2:	d103      	bne.n	80013ec <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80013e4:	4827      	ldr	r0, [pc, #156]	; (8001484 <bno055_writeData+0x1bc>)
 80013e6:	f004 fa35 	bl	8005854 <puts>
 80013ea:	e02c      	b.n	8001446 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b28      	cmp	r3, #40	; 0x28
 80013f0:	d103      	bne.n	80013fa <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80013f2:	4825      	ldr	r0, [pc, #148]	; (8001488 <bno055_writeData+0x1c0>)
 80013f4:	f004 fa2e 	bl	8005854 <puts>
 80013f8:	e025      	b.n	8001446 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	2b29      	cmp	r3, #41	; 0x29
 80013fe:	d103      	bne.n	8001408 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001400:	4822      	ldr	r0, [pc, #136]	; (800148c <bno055_writeData+0x1c4>)
 8001402:	f004 fa27 	bl	8005854 <puts>
 8001406:	e01e      	b.n	8001446 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	2b2a      	cmp	r3, #42	; 0x2a
 800140c:	d103      	bne.n	8001416 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800140e:	4820      	ldr	r0, [pc, #128]	; (8001490 <bno055_writeData+0x1c8>)
 8001410:	f004 fa20 	bl	8005854 <puts>
 8001414:	e017      	b.n	8001446 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b60      	cmp	r3, #96	; 0x60
 800141a:	d103      	bne.n	8001424 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 800141c:	481d      	ldr	r0, [pc, #116]	; (8001494 <bno055_writeData+0x1cc>)
 800141e:	f004 fa19 	bl	8005854 <puts>
 8001422:	e010      	b.n	8001446 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	2ba0      	cmp	r3, #160	; 0xa0
 8001428:	d103      	bne.n	8001432 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800142a:	481b      	ldr	r0, [pc, #108]	; (8001498 <bno055_writeData+0x1d0>)
 800142c:	f004 fa12 	bl	8005854 <puts>
 8001430:	e009      	b.n	8001446 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2be0      	cmp	r3, #224	; 0xe0
 8001436:	d106      	bne.n	8001446 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001438:	4818      	ldr	r0, [pc, #96]	; (800149c <bno055_writeData+0x1d4>)
 800143a:	f004 fa0b 	bl	8005854 <puts>
 800143e:	e002      	b.n	8001446 <bno055_writeData+0x17e>
    return;
 8001440:	bf00      	nop
 8001442:	e000      	b.n	8001446 <bno055_writeData+0x17e>
    return;
 8001444:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000098 	.word	0x20000098
 8001450:	080067a4 	.word	0x080067a4
 8001454:	080067c8 	.word	0x080067c8
 8001458:	080067f0 	.word	0x080067f0
 800145c:	08006814 	.word	0x08006814
 8001460:	0800682c 	.word	0x0800682c
 8001464:	08006840 	.word	0x08006840
 8001468:	08006854 	.word	0x08006854
 800146c:	08006868 	.word	0x08006868
 8001470:	0800687c 	.word	0x0800687c
 8001474:	08006890 	.word	0x08006890
 8001478:	080068a8 	.word	0x080068a8
 800147c:	080068c0 	.word	0x080068c0
 8001480:	080068d4 	.word	0x080068d4
 8001484:	080068ec 	.word	0x080068ec
 8001488:	08006904 	.word	0x08006904
 800148c:	0800691c 	.word	0x0800691c
 8001490:	0800693c 	.word	0x0800693c
 8001494:	0800695c 	.word	0x0800695c
 8001498:	08006974 	.word	0x08006974
 800149c:	0800698c 	.word	0x0800698c

080014a0 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	4613      	mov	r3, r2
 80014ae:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <bno055_readData+0x40>)
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	1dfa      	adds	r2, r7, #7
 80014b6:	2364      	movs	r3, #100	; 0x64
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	2150      	movs	r1, #80	; 0x50
 80014be:	f001 f937 	bl	8002730 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <bno055_readData+0x40>)
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	79bb      	ldrb	r3, [r7, #6]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	2264      	movs	r2, #100	; 0x64
 80014cc:	9200      	str	r2, [sp, #0]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	2150      	movs	r1, #80	; 0x50
 80014d2:	f001 fa2b 	bl	800292c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000098 	.word	0x20000098

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ea:	f000 fcb3 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ee:	f000 f88d 	bl	800160c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f2:	f000 f957 	bl	80017a4 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80014f6:	f000 f8f3 	bl	80016e0 <_ZL12MX_I2C1_Initv>
  MX_USART6_UART_Init();
 80014fa:	f000 f925 	bl	8001748 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 80014fe:	483a      	ldr	r0, [pc, #232]	; (80015e8 <main+0x104>)
 8001500:	f7ff fec6 	bl	8001290 <bno055_assignI2C>
  bno055_setup();
 8001504:	f7ff fd14 	bl	8000f30 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001508:	f7ff fcff 	bl	8000f0a <bno055_setOperationModeNDOF>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(rotate>1 && rotate<20){
 800150c:	4b37      	ldr	r3, [pc, #220]	; (80015ec <main+0x108>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	dd09      	ble.n	8001528 <main+0x44>
 8001514:	4b35      	ldr	r3, [pc, #212]	; (80015ec <main+0x108>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b13      	cmp	r3, #19
 800151a:	dc05      	bgt.n	8001528 <main+0x44>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	2104      	movs	r1, #4
 8001520:	4833      	ldr	r0, [pc, #204]	; (80015f0 <main+0x10c>)
 8001522:	f000 ffa7 	bl	8002474 <HAL_GPIO_WritePin>
 8001526:	e004      	b.n	8001532 <main+0x4e>
	  }else{
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2104      	movs	r1, #4
 800152c:	4830      	ldr	r0, [pc, #192]	; (80015f0 <main+0x10c>)
 800152e:	f000 ffa1 	bl	8002474 <HAL_GPIO_WritePin>
	  }
	  bno055_vector_t v = bno055_getVectorEuler();
 8001532:	f7ff fe69 	bl	8001208 <bno055_getVectorEuler>
 8001536:	eeb0 4a40 	vmov.f32	s8, s0
 800153a:	eef0 4a60 	vmov.f32	s9, s1
 800153e:	eeb0 5a41 	vmov.f32	s10, s2
 8001542:	eef0 5a61 	vmov.f32	s11, s3
 8001546:	eeb0 6a42 	vmov.f32	s12, s4
 800154a:	eef0 6a62 	vmov.f32	s13, s5
 800154e:	eeb0 7a43 	vmov.f32	s14, s6
 8001552:	eef0 7a63 	vmov.f32	s15, s7
 8001556:	ed87 4b00 	vstr	d4, [r7]
 800155a:	ed87 5b02 	vstr	d5, [r7, #8]
 800155e:	ed87 6b04 	vstr	d6, [r7, #16]
 8001562:	ed87 7b06 	vstr	d7, [r7, #24]
	  rotate = (int)v.x;
 8001566:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff faf5 	bl	8000b5c <__aeabi_d2iz>
 8001572:	4603      	mov	r3, r0
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <main+0x108>)
 8001576:	6013      	str	r3, [r2, #0]
	  motor_A.calcurate(rotate, 90, 50);
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <main+0x108>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b219      	sxth	r1, r3
 800157e:	2332      	movs	r3, #50	; 0x32
 8001580:	225a      	movs	r2, #90	; 0x5a
 8001582:	481c      	ldr	r0, [pc, #112]	; (80015f4 <main+0x110>)
 8001584:	f000 f9a8 	bl	80018d8 <_ZN4MOVE9calcurateEsss>
	  motor_A.set_array(Buf);
 8001588:	491b      	ldr	r1, [pc, #108]	; (80015f8 <main+0x114>)
 800158a:	481a      	ldr	r0, [pc, #104]	; (80015f4 <main+0x110>)
 800158c:	f000 fa50 	bl	8001a30 <_ZN4MOVE9set_arrayEPh>
	  motor_B.calcurate(rotate, 90, 50);
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <main+0x108>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b219      	sxth	r1, r3
 8001596:	2332      	movs	r3, #50	; 0x32
 8001598:	225a      	movs	r2, #90	; 0x5a
 800159a:	4818      	ldr	r0, [pc, #96]	; (80015fc <main+0x118>)
 800159c:	f000 f99c 	bl	80018d8 <_ZN4MOVE9calcurateEsss>
	  motor_B.set_array(Buf);
 80015a0:	4915      	ldr	r1, [pc, #84]	; (80015f8 <main+0x114>)
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <main+0x118>)
 80015a4:	f000 fa44 	bl	8001a30 <_ZN4MOVE9set_arrayEPh>
	  motor_C.calcurate(rotate, 90, 50);
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <main+0x108>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	b219      	sxth	r1, r3
 80015ae:	2332      	movs	r3, #50	; 0x32
 80015b0:	225a      	movs	r2, #90	; 0x5a
 80015b2:	4813      	ldr	r0, [pc, #76]	; (8001600 <main+0x11c>)
 80015b4:	f000 f990 	bl	80018d8 <_ZN4MOVE9calcurateEsss>
	  motor_C.set_array(Buf);
 80015b8:	490f      	ldr	r1, [pc, #60]	; (80015f8 <main+0x114>)
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <main+0x11c>)
 80015bc:	f000 fa38 	bl	8001a30 <_ZN4MOVE9set_arrayEPh>
	  motor_D.calcurate(rotate, 90, 50);
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <main+0x108>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b219      	sxth	r1, r3
 80015c6:	2332      	movs	r3, #50	; 0x32
 80015c8:	225a      	movs	r2, #90	; 0x5a
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <main+0x120>)
 80015cc:	f000 f984 	bl	80018d8 <_ZN4MOVE9calcurateEsss>
	  motor_D.set_array(Buf);
 80015d0:	4909      	ldr	r1, [pc, #36]	; (80015f8 <main+0x114>)
 80015d2:	480c      	ldr	r0, [pc, #48]	; (8001604 <main+0x120>)
 80015d4:	f000 fa2c 	bl	8001a30 <_ZN4MOVE9set_arrayEPh>

	  HAL_UART_Transmit(&huart6, (uint8_t*)&Buf, 12, 100);
 80015d8:	2364      	movs	r3, #100	; 0x64
 80015da:	220c      	movs	r2, #12
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <main+0x114>)
 80015de:	480a      	ldr	r0, [pc, #40]	; (8001608 <main+0x124>)
 80015e0:	f002 fcc1 	bl	8003f66 <HAL_UART_Transmit>
  }
 80015e4:	e792      	b.n	800150c <main+0x28>
 80015e6:	bf00      	nop
 80015e8:	2000009c 	.word	0x2000009c
 80015ec:	20000134 	.word	0x20000134
 80015f0:	40020400 	.word	0x40020400
 80015f4:	20000138 	.word	0x20000138
 80015f8:	20000168 	.word	0x20000168
 80015fc:	20000144 	.word	0x20000144
 8001600:	20000150 	.word	0x20000150
 8001604:	2000015c 	.word	0x2000015c
 8001608:	200000f0 	.word	0x200000f0

0800160c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	; 0x50
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	2234      	movs	r2, #52	; 0x34
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f004 f88c 	bl	8005738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <_Z18SystemClock_Configv+0xcc>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <_Z18SystemClock_Configv+0xcc>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <_Z18SystemClock_Configv+0xcc>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800164c:	2300      	movs	r3, #0
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <_Z18SystemClock_Configv+0xd0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001658:	4a20      	ldr	r2, [pc, #128]	; (80016dc <_Z18SystemClock_Configv+0xd0>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <_Z18SystemClock_Configv+0xd0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800166c:	2302      	movs	r3, #2
 800166e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001670:	2301      	movs	r3, #1
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001674:	2310      	movs	r3, #16
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4618      	mov	r0, r3
 8001682:	f002 f985 	bl	8003990 <HAL_RCC_OscConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf14      	ite	ne
 800168c:	2301      	movne	r3, #1
 800168e:	2300      	moveq	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8001696:	f000 f8c7 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169a:	230f      	movs	r3, #15
 800169c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 fea7 	bl	8003408 <HAL_RCC_ClockConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf14      	ite	ne
 80016c0:	2301      	movne	r3, #1
 80016c2:	2300      	moveq	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80016ca:	f000 f8ad 	bl	8001828 <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	3750      	adds	r7, #80	; 0x50
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000

080016e0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <_ZL12MX_I2C1_Initv+0x5c>)
 80016e6:	4a16      	ldr	r2, [pc, #88]	; (8001740 <_ZL12MX_I2C1_Initv+0x60>)
 80016e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <_ZL12MX_I2C1_Initv+0x5c>)
 80016ec:	4a15      	ldr	r2, [pc, #84]	; (8001744 <_ZL12MX_I2C1_Initv+0x64>)
 80016ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <_ZL12MX_I2C1_Initv+0x5c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <_ZL12MX_I2C1_Initv+0x5c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <_ZL12MX_I2C1_Initv+0x5c>)
 80016fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <_ZL12MX_I2C1_Initv+0x5c>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <_ZL12MX_I2C1_Initv+0x5c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <_ZL12MX_I2C1_Initv+0x5c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <_ZL12MX_I2C1_Initv+0x5c>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800171c:	4807      	ldr	r0, [pc, #28]	; (800173c <_ZL12MX_I2C1_Initv+0x5c>)
 800171e:	f000 fec3 	bl	80024a8 <HAL_I2C_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf14      	ite	ne
 8001728:	2301      	movne	r3, #1
 800172a:	2300      	moveq	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001732:	f000 f879 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000009c 	.word	0x2000009c
 8001740:	40005400 	.word	0x40005400
 8001744:	000186a0 	.word	0x000186a0

08001748 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <_ZL19MX_USART6_UART_Initv+0x54>)
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001750:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001758:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_ZL19MX_USART6_UART_Initv+0x54>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <_ZL19MX_USART6_UART_Initv+0x54>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <_ZL19MX_USART6_UART_Initv+0x54>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800177e:	4807      	ldr	r0, [pc, #28]	; (800179c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001780:	f002 fba4 	bl	8003ecc <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf14      	ite	ne
 800178a:	2301      	movne	r3, #1
 800178c:	2300      	moveq	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001794:	f000 f848 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200000f0 	.word	0x200000f0
 80017a0:	40011400 	.word	0x40011400

080017a4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <_ZL12MX_GPIO_Initv+0x7c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a17      	ldr	r2, [pc, #92]	; (8001820 <_ZL12MX_GPIO_Initv+0x7c>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <_ZL12MX_GPIO_Initv+0x7c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <_ZL12MX_GPIO_Initv+0x7c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a10      	ldr	r2, [pc, #64]	; (8001820 <_ZL12MX_GPIO_Initv+0x7c>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <_ZL12MX_GPIO_Initv+0x7c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2104      	movs	r1, #4
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <_ZL12MX_GPIO_Initv+0x80>)
 80017f8:	f000 fe3c 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017fc:	2304      	movs	r3, #4
 80017fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4619      	mov	r1, r3
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <_ZL12MX_GPIO_Initv+0x80>)
 8001814:	f000 fc9a 	bl	800214c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	40020400 	.word	0x40020400

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	e7fe      	b.n	8001830 <Error_Handler+0x8>
	...

08001834 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d11a      	bne.n	800187a <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184a:	4293      	cmp	r3, r2
 800184c:	d115      	bne.n	800187a <_Z41__static_initialization_and_destruction_0ii+0x46>
MOVE motor_A(0, 45);
 800184e:	222d      	movs	r2, #45	; 0x2d
 8001850:	2100      	movs	r1, #0
 8001852:	480c      	ldr	r0, [pc, #48]	; (8001884 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001854:	f000 f826 	bl	80018a4 <_ZN4MOVEC1Ehs>
MOVE motor_B(1, 135);
 8001858:	2287      	movs	r2, #135	; 0x87
 800185a:	2101      	movs	r1, #1
 800185c:	480a      	ldr	r0, [pc, #40]	; (8001888 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800185e:	f000 f821 	bl	80018a4 <_ZN4MOVEC1Ehs>
MOVE motor_C(2, -135);
 8001862:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8001866:	2102      	movs	r1, #2
 8001868:	4808      	ldr	r0, [pc, #32]	; (800188c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800186a:	f000 f81b 	bl	80018a4 <_ZN4MOVEC1Ehs>
MOVE motor_D(3, -45);
 800186e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8001872:	2103      	movs	r1, #3
 8001874:	4806      	ldr	r0, [pc, #24]	; (8001890 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001876:	f000 f815 	bl	80018a4 <_ZN4MOVEC1Ehs>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000138 	.word	0x20000138
 8001888:	20000144 	.word	0x20000144
 800188c:	20000150 	.word	0x20000150
 8001890:	2000015c 	.word	0x2000015c

08001894 <_GLOBAL__sub_I__bno055_i2c_port>:
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
 8001898:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff ffc9 	bl	8001834 <_Z41__static_initialization_and_destruction_0ii>
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZN4MOVEC1Ehs>:

#include "move.h"

MOVE::MOVE(uint8_t motor_id, int16_t motor_degree){
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
 80018b0:	4613      	mov	r3, r2
 80018b2:	803b      	strh	r3, [r7, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <_ZN4MOVEC1Ehs+0x30>)
 80018b8:	609a      	str	r2, [r3, #8]
    MOTOR_ID = motor_id;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	701a      	strb	r2, [r3, #0]
    MOTOR_DEGREE = motor_degree;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	883a      	ldrh	r2, [r7, #0]
 80018c4:	805a      	strh	r2, [r3, #2]
}
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	3f333333 	.word	0x3f333333

080018d8 <_ZN4MOVE9calcurateEsss>:

void MOVE::calcurate(int16_t gyro_degree, int16_t goal_degree, int16_t goal_speed){
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	4608      	mov	r0, r1
 80018e2:	4611      	mov	r1, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	817b      	strh	r3, [r7, #10]
 80018ea:	460b      	mov	r3, r1
 80018ec:	813b      	strh	r3, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	80fb      	strh	r3, [r7, #6]
    int roll_speed;
    if(gyro_degree > 180){gyro_degree -= 360;}
 80018f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018f6:	2bb4      	cmp	r3, #180	; 0xb4
 80018f8:	dd04      	ble.n	8001904 <_ZN4MOVE9calcurateEsss+0x2c>
 80018fa:	897b      	ldrh	r3, [r7, #10]
 80018fc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001900:	b29b      	uxth	r3, r3
 8001902:	817b      	strh	r3, [r7, #10]

    if (gyro_degree > 0){
 8001904:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001908:	2b00      	cmp	r3, #0
 800190a:	dd15      	ble.n	8001938 <_ZN4MOVE9calcurateEsss+0x60>
        roll_speed = -10 + (-gyro_degree * 2);
 800190c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001910:	1d5a      	adds	r2, r3, #5
 8001912:	4613      	mov	r3, r2
 8001914:	07db      	lsls	r3, r3, #31
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	617b      	str	r3, [r7, #20]
        if (gyro_degree < 6){
 800191c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001920:	2b05      	cmp	r3, #5
 8001922:	dc01      	bgt.n	8001928 <_ZN4MOVE9calcurateEsss+0x50>
            roll_speed = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
        }
        if (roll_speed < -150){
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f113 0f96 	cmn.w	r3, #150	; 0x96
 800192e:	da1e      	bge.n	800196e <_ZN4MOVE9calcurateEsss+0x96>
            roll_speed = -150;
 8001930:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	e01a      	b.n	800196e <_ZN4MOVE9calcurateEsss+0x96>
        }
    }else if (gyro_degree < 0){
 8001938:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800193c:	2b00      	cmp	r3, #0
 800193e:	da14      	bge.n	800196a <_ZN4MOVE9calcurateEsss+0x92>
        roll_speed = 10 + (-gyro_degree * 2);
 8001940:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001944:	1f5a      	subs	r2, r3, #5
 8001946:	4613      	mov	r3, r2
 8001948:	07db      	lsls	r3, r3, #31
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	617b      	str	r3, [r7, #20]
        if (gyro_degree > -6){
 8001950:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001954:	f113 0f05 	cmn.w	r3, #5
 8001958:	db01      	blt.n	800195e <_ZN4MOVE9calcurateEsss+0x86>
            roll_speed = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
        }
        if (roll_speed > 150){
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b96      	cmp	r3, #150	; 0x96
 8001962:	dd04      	ble.n	800196e <_ZN4MOVE9calcurateEsss+0x96>
            roll_speed = 150;
 8001964:	2396      	movs	r3, #150	; 0x96
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e001      	b.n	800196e <_ZN4MOVE9calcurateEsss+0x96>
        }
    }else{
        roll_speed = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
    }

    motor_speed = (int)goal_speed*sin((PI/180)*(goal_degree - MOTOR_DEGREE));
 800196e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdee 	bl	8000554 <__aeabi_i2d>
 8001978:	4604      	mov	r4, r0
 800197a:	460d      	mov	r5, r1
 800197c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001986:	1a9b      	subs	r3, r3, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fde3 	bl	8000554 <__aeabi_i2d>
 800198e:	a326      	add	r3, pc, #152	; (adr r3, 8001a28 <_ZN4MOVE9calcurateEsss+0x150>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fe48 	bl	8000628 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	ec43 2b17 	vmov	d7, r2, r3
 80019a0:	eeb0 0a47 	vmov.f32	s0, s14
 80019a4:	eef0 0a67 	vmov.f32	s1, s15
 80019a8:	f002 fe52 	bl	8004650 <sin>
 80019ac:	ec53 2b10 	vmov	r2, r3, d0
 80019b0:	4620      	mov	r0, r4
 80019b2:	4629      	mov	r1, r5
 80019b4:	f7fe fe38 	bl	8000628 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f8cc 	bl	8000b5c <__aeabi_d2iz>
 80019c4:	4603      	mov	r3, r0
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	809a      	strh	r2, [r3, #4]
    motor_speed = (int)(motor_speed * motor_rate) + (roll_speed * (1 - motor_rate));
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80019e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80019fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a00:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a10:	ee17 3a90 	vmov	r3, s15
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	809a      	strh	r2, [r3, #4]

}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bdb0      	pop	{r4, r5, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	f3af 8000 	nop.w
 8001a28:	171ea105 	.word	0x171ea105
 8001a2c:	3f91df24 	.word	0x3f91df24

08001a30 <_ZN4MOVE9set_arrayEPh>:

void MOVE::set_array(uint8_t *send_array){
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
    send_array[MOTOR_ID*3]=250+MOTOR_ID;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4619      	mov	r1, r3
 8001a44:	460b      	mov	r3, r1
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	440b      	add	r3, r1
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	440b      	add	r3, r1
 8001a50:	3a06      	subs	r2, #6
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
    int16_t send_speed = motor_speed;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	889b      	ldrh	r3, [r3, #4]
 8001a5a:	81fb      	strh	r3, [r7, #14]
    send_speed += 1000;
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	81fb      	strh	r3, [r7, #14]
	for(int i = 1; i <3 ;i++){
 8001a66:	2301      	movs	r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	dc26      	bgt.n	8001abe <_ZN4MOVE9set_arrayEPh+0x8e>
		send_array[MOTOR_ID*3+i] = send_speed%100;
 8001a70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a74:	4a15      	ldr	r2, [pc, #84]	; (8001acc <_ZN4MOVE9set_arrayEPh+0x9c>)
 8001a76:	fb82 1203 	smull	r1, r2, r2, r3
 8001a7a:	1151      	asrs	r1, r2, #5
 8001a7c:	17da      	asrs	r2, r3, #31
 8001a7e:	1a8a      	subs	r2, r1, r2
 8001a80:	2164      	movs	r1, #100	; 0x64
 8001a82:	fb01 f202 	mul.w	r2, r1, r2
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	b219      	sxth	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	441a      	add	r2, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	4413      	add	r3, r2
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b2ca      	uxtb	r2, r1
 8001aa2:	701a      	strb	r2, [r3, #0]
		send_speed = (int)send_speed/100;
 8001aa4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aa8:	4a08      	ldr	r2, [pc, #32]	; (8001acc <_ZN4MOVE9set_arrayEPh+0x9c>)
 8001aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8001aae:	1152      	asrs	r2, r2, #5
 8001ab0:	17db      	asrs	r3, r3, #31
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	81fb      	strh	r3, [r7, #14]
	for(int i = 1; i <3 ;i++){
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	e7d5      	b.n	8001a6a <_ZN4MOVE9set_arrayEPh+0x3a>
	}
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	51eb851f 	.word	0x51eb851f

08001ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_MspInit+0x4c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_MspInit+0x4c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_MspInit+0x4c>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_MspInit+0x4c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_I2C_MspInit+0x84>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d12c      	bne.n	8001b9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b5e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b64:	2312      	movs	r3, #18
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b70:	2304      	movs	r3, #4
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480c      	ldr	r0, [pc, #48]	; (8001bac <HAL_I2C_MspInit+0x8c>)
 8001b7c:	f000 fae6 	bl	800214c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_I2C_MspInit+0x88>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3728      	adds	r7, #40	; 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40005400 	.word	0x40005400
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020400 	.word	0x40020400

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <HAL_UART_MspInit+0x84>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12b      	bne.n	8001c2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bdc:	f043 0320 	orr.w	r3, r3, #32
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c0a:	23c0      	movs	r3, #192	; 0xc0
 8001c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_UART_MspInit+0x8c>)
 8001c26:	f000 fa91 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40011400 	.word	0x40011400
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020800 	.word	0x40020800

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <NMI_Handler+0x4>

08001c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <MemManage_Handler+0x4>

08001c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8c:	f000 f934 	bl	8001ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e00a      	b.n	8001cbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca6:	f3af 8000 	nop.w
 8001caa:	4601      	mov	r1, r0
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	60ba      	str	r2, [r7, #8]
 8001cb2:	b2ca      	uxtb	r2, r1
 8001cb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf0      	blt.n	8001ca6 <_read+0x12>
  }

  return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e009      	b.n	8001cf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	60ba      	str	r2, [r7, #8]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	dbf1      	blt.n	8001ce0 <_write+0x12>
  }
  return len;
 8001cfc:	687b      	ldr	r3, [r7, #4]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_close>:

int _close(int file)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_isatty>:

int _isatty(int file)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <_sbrk+0x5c>)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <_sbrk+0x60>)
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <_sbrk+0x64>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <_sbrk+0x68>)
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d207      	bcs.n	8001db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da0:	f003 fca0 	bl	80056e4 <__errno>
 8001da4:	4603      	mov	r3, r0
 8001da6:	220c      	movs	r2, #12
 8001da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	e009      	b.n	8001dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <_sbrk+0x64>)
 8001dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20020000 	.word	0x20020000
 8001dd0:	00000400 	.word	0x00000400
 8001dd4:	20000174 	.word	0x20000174
 8001dd8:	20000190 	.word	0x20000190

08001ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <SystemInit+0x20>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de6:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <SystemInit+0x20>)
 8001de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e06:	490e      	ldr	r1, [pc, #56]	; (8001e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e08:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e1c:	4c0b      	ldr	r4, [pc, #44]	; (8001e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e2a:	f7ff ffd7 	bl	8001ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f003 fc5f 	bl	80056f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e32:	f7ff fb57 	bl	80014e4 <main>
  bx  lr    
 8001e36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e44:	08006c44 	.word	0x08006c44
  ldr r2, =_sbss
 8001e48:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001e4c:	2000018c 	.word	0x2000018c

08001e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_Init+0x40>)
 8001e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_Init+0x40>)
 8001e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_Init+0x40>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f000 f931 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e82:	200f      	movs	r0, #15
 8001e84:	f000 f808 	bl	8001e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e88:	f7ff fe22 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023c00 	.word	0x40023c00

08001e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_InitTick+0x54>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x58>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f93b 	bl	8002132 <HAL_SYSTICK_Config>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00e      	b.n	8001ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b0f      	cmp	r3, #15
 8001eca:	d80a      	bhi.n	8001ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	f000 f911 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed8:	4a06      	ldr	r2, [pc, #24]	; (8001ef4 <HAL_InitTick+0x5c>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	2000000c 	.word	0x2000000c
 8001ef0:	20000014 	.word	0x20000014
 8001ef4:	20000010 	.word	0x20000010

08001ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x20>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x24>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_IncTick+0x24>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000014 	.word	0x20000014
 8001f1c:	20000178 	.word	0x20000178

08001f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000178 	.word	0x20000178

08001f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff ffee 	bl	8001f20 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d005      	beq.n	8001f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_Delay+0x44>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f5e:	bf00      	nop
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d8f7      	bhi.n	8001f60 <HAL_Delay+0x28>
  {
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000014 	.word	0x20000014

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7ff ff8e 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff47 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210c:	f7ff ff5c 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 8002110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff8e 	bl	8002038 <NVIC_EncodePriority>
 800211c:	4602      	mov	r2, r0
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff5d 	bl	8001fe4 <__NVIC_SetPriority>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ffb0 	bl	80020a0 <SysTick_Config>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e165      	b.n	8002434 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	f040 8154 	bne.w	800242e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d005      	beq.n	800219e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219a:	2b02      	cmp	r3, #2
 800219c:	d130      	bne.n	8002200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 0201 	and.w	r2, r3, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b03      	cmp	r3, #3
 800220a:	d017      	beq.n	800223c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d123      	bne.n	8002290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	08da      	lsrs	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3208      	adds	r2, #8
 8002250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	08da      	lsrs	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3208      	adds	r2, #8
 800228a:	69b9      	ldr	r1, [r7, #24]
 800228c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0203 	and.w	r2, r3, #3
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80ae 	beq.w	800242e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b5d      	ldr	r3, [pc, #372]	; (800244c <HAL_GPIO_Init+0x300>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a5c      	ldr	r2, [pc, #368]	; (800244c <HAL_GPIO_Init+0x300>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	4b5a      	ldr	r3, [pc, #360]	; (800244c <HAL_GPIO_Init+0x300>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ee:	4a58      	ldr	r2, [pc, #352]	; (8002450 <HAL_GPIO_Init+0x304>)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4f      	ldr	r2, [pc, #316]	; (8002454 <HAL_GPIO_Init+0x308>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d025      	beq.n	8002366 <HAL_GPIO_Init+0x21a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4e      	ldr	r2, [pc, #312]	; (8002458 <HAL_GPIO_Init+0x30c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d01f      	beq.n	8002362 <HAL_GPIO_Init+0x216>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4d      	ldr	r2, [pc, #308]	; (800245c <HAL_GPIO_Init+0x310>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d019      	beq.n	800235e <HAL_GPIO_Init+0x212>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_GPIO_Init+0x314>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_GPIO_Init+0x20e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4b      	ldr	r2, [pc, #300]	; (8002464 <HAL_GPIO_Init+0x318>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00d      	beq.n	8002356 <HAL_GPIO_Init+0x20a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4a      	ldr	r2, [pc, #296]	; (8002468 <HAL_GPIO_Init+0x31c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d007      	beq.n	8002352 <HAL_GPIO_Init+0x206>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a49      	ldr	r2, [pc, #292]	; (800246c <HAL_GPIO_Init+0x320>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <HAL_GPIO_Init+0x202>
 800234a:	2306      	movs	r3, #6
 800234c:	e00c      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 800234e:	2307      	movs	r3, #7
 8002350:	e00a      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 8002352:	2305      	movs	r3, #5
 8002354:	e008      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 8002356:	2304      	movs	r3, #4
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 800235a:	2303      	movs	r3, #3
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 800235e:	2302      	movs	r3, #2
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x21c>
 8002366:	2300      	movs	r3, #0
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f002 0203 	and.w	r2, r2, #3
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002378:	4935      	ldr	r1, [pc, #212]	; (8002450 <HAL_GPIO_Init+0x304>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002386:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <HAL_GPIO_Init+0x324>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023aa:	4a31      	ldr	r2, [pc, #196]	; (8002470 <HAL_GPIO_Init+0x324>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b0:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <HAL_GPIO_Init+0x324>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d4:	4a26      	ldr	r2, [pc, #152]	; (8002470 <HAL_GPIO_Init+0x324>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_GPIO_Init+0x324>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_GPIO_Init+0x324>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_GPIO_Init+0x324>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002428:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_GPIO_Init+0x324>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	f67f ae96 	bls.w	8002168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	40013800 	.word	0x40013800
 8002454:	40020000 	.word	0x40020000
 8002458:	40020400 	.word	0x40020400
 800245c:	40020800 	.word	0x40020800
 8002460:	40020c00 	.word	0x40020c00
 8002464:	40021000 	.word	0x40021000
 8002468:	40021400 	.word	0x40021400
 800246c:	40021800 	.word	0x40021800
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	619a      	str	r2, [r3, #24]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e12b      	b.n	8002712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff fb26 	bl	8001b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2224      	movs	r2, #36	; 0x24
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800250a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800250c:	f001 f86e 	bl	80035ec <HAL_RCC_GetPCLK1Freq>
 8002510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4a81      	ldr	r2, [pc, #516]	; (800271c <HAL_I2C_Init+0x274>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d807      	bhi.n	800252c <HAL_I2C_Init+0x84>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a80      	ldr	r2, [pc, #512]	; (8002720 <HAL_I2C_Init+0x278>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e006      	b.n	800253a <HAL_I2C_Init+0x92>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a7d      	ldr	r2, [pc, #500]	; (8002724 <HAL_I2C_Init+0x27c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	bf94      	ite	ls
 8002534:	2301      	movls	r3, #1
 8002536:	2300      	movhi	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0e7      	b.n	8002712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a78      	ldr	r2, [pc, #480]	; (8002728 <HAL_I2C_Init+0x280>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	0c9b      	lsrs	r3, r3, #18
 800254c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a6a      	ldr	r2, [pc, #424]	; (800271c <HAL_I2C_Init+0x274>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d802      	bhi.n	800257c <HAL_I2C_Init+0xd4>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3301      	adds	r3, #1
 800257a:	e009      	b.n	8002590 <HAL_I2C_Init+0xe8>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	4a69      	ldr	r2, [pc, #420]	; (800272c <HAL_I2C_Init+0x284>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	3301      	adds	r3, #1
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	430b      	orrs	r3, r1
 8002596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	495c      	ldr	r1, [pc, #368]	; (800271c <HAL_I2C_Init+0x274>)
 80025ac:	428b      	cmp	r3, r1
 80025ae:	d819      	bhi.n	80025e4 <HAL_I2C_Init+0x13c>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e59      	subs	r1, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025c4:	400b      	ands	r3, r1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_I2C_Init+0x138>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e59      	subs	r1, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025de:	e051      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 80025e0:	2304      	movs	r3, #4
 80025e2:	e04f      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <HAL_I2C_Init+0x168>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e012      	b.n	8002636 <HAL_I2C_Init+0x18e>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e58      	subs	r0, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	0099      	lsls	r1, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	fbb0 f3f3 	udiv	r3, r0, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Init+0x196>
 800263a:	2301      	movs	r3, #1
 800263c:	e022      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10e      	bne.n	8002664 <HAL_I2C_Init+0x1bc>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1e58      	subs	r0, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	440b      	add	r3, r1
 8002654:	fbb0 f3f3 	udiv	r3, r0, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002662:	e00f      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	0099      	lsls	r1, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	fbb0 f3f3 	udiv	r3, r0, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	6809      	ldr	r1, [r1, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6911      	ldr	r1, [r2, #16]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68d2      	ldr	r2, [r2, #12]
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	000186a0 	.word	0x000186a0
 8002720:	001e847f 	.word	0x001e847f
 8002724:	003d08ff 	.word	0x003d08ff
 8002728:	431bde83 	.word	0x431bde83
 800272c:	10624dd3 	.word	0x10624dd3

08002730 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	461a      	mov	r2, r3
 800273c:	460b      	mov	r3, r1
 800273e:	817b      	strh	r3, [r7, #10]
 8002740:	4613      	mov	r3, r2
 8002742:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff fbec 	bl	8001f20 <HAL_GetTick>
 8002748:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b20      	cmp	r3, #32
 8002754:	f040 80e0 	bne.w	8002918 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2319      	movs	r3, #25
 800275e:	2201      	movs	r2, #1
 8002760:	4970      	ldr	r1, [pc, #448]	; (8002924 <HAL_I2C_Master_Transmit+0x1f4>)
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fc72 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	e0d3      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_I2C_Master_Transmit+0x50>
 800277c:	2302      	movs	r3, #2
 800277e:	e0cc      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d007      	beq.n	80027a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2221      	movs	r2, #33	; 0x21
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2210      	movs	r2, #16
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	893a      	ldrh	r2, [r7, #8]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a50      	ldr	r2, [pc, #320]	; (8002928 <HAL_I2C_Master_Transmit+0x1f8>)
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027e8:	8979      	ldrh	r1, [r7, #10]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fadc 	bl	8002dac <I2C_MasterRequestWrite>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e08d      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002814:	e066      	b.n	80028e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	6a39      	ldr	r1, [r7, #32]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fcec 	bl	80031f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00d      	beq.n	8002842 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2b04      	cmp	r3, #4
 800282c:	d107      	bne.n	800283e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e06b      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	781a      	ldrb	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d11b      	bne.n	80028b8 <HAL_I2C_Master_Transmit+0x188>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	d017      	beq.n	80028b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	781a      	ldrb	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	6a39      	ldr	r1, [r7, #32]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fcdc 	bl	800327a <I2C_WaitOnBTFFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d107      	bne.n	80028e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e01a      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d194      	bne.n	8002816 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	00100002 	.word	0x00100002
 8002928:	ffff0000 	.word	0xffff0000

0800292c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	; 0x30
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	461a      	mov	r2, r3
 8002938:	460b      	mov	r3, r1
 800293a:	817b      	strh	r3, [r7, #10]
 800293c:	4613      	mov	r3, r2
 800293e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff faee 	bl	8001f20 <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b20      	cmp	r3, #32
 8002950:	f040 820b 	bne.w	8002d6a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2319      	movs	r3, #25
 800295a:	2201      	movs	r2, #1
 800295c:	497c      	ldr	r1, [pc, #496]	; (8002b50 <HAL_I2C_Master_Receive+0x224>)
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fb74 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800296a:	2302      	movs	r3, #2
 800296c:	e1fe      	b.n	8002d6c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_I2C_Master_Receive+0x50>
 8002978:	2302      	movs	r3, #2
 800297a:	e1f7      	b.n	8002d6c <HAL_I2C_Master_Receive+0x440>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b01      	cmp	r3, #1
 8002990:	d007      	beq.n	80029a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2222      	movs	r2, #34	; 0x22
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2210      	movs	r2, #16
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	893a      	ldrh	r2, [r7, #8]
 80029d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a5c      	ldr	r2, [pc, #368]	; (8002b54 <HAL_I2C_Master_Receive+0x228>)
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029e4:	8979      	ldrh	r1, [r7, #10]
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fa60 	bl	8002eb0 <I2C_MasterRequestRead>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1b8      	b.n	8002d6c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d113      	bne.n	8002a2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	623b      	str	r3, [r7, #32]
 8002a16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e18c      	b.n	8002d44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d11b      	bne.n	8002a6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e16c      	b.n	8002d44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d11b      	bne.n	8002aaa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	e14c      	b.n	8002d44 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ad0:	e138      	b.n	8002d44 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	f200 80f1 	bhi.w	8002cbe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d123      	bne.n	8002b2c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fc07 	bl	80032fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e139      	b.n	8002d6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b2a:	e10b      	b.n	8002d44 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d14e      	bne.n	8002bd2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4906      	ldr	r1, [pc, #24]	; (8002b58 <HAL_I2C_Master_Receive+0x22c>)
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fa84 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e10e      	b.n	8002d6c <HAL_I2C_Master_Receive+0x440>
 8002b4e:	bf00      	nop
 8002b50:	00100002 	.word	0x00100002
 8002b54:	ffff0000 	.word	0xffff0000
 8002b58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd0:	e0b8      	b.n	8002d44 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4966      	ldr	r1, [pc, #408]	; (8002d74 <HAL_I2C_Master_Receive+0x448>)
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fa35 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0bf      	b.n	8002d6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	2200      	movs	r2, #0
 8002c36:	494f      	ldr	r1, [pc, #316]	; (8002d74 <HAL_I2C_Master_Receive+0x448>)
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fa07 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e091      	b.n	8002d6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cbc:	e042      	b.n	8002d44 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fb1a 	bl	80032fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e04c      	b.n	8002d6c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d118      	bne.n	8002d44 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f47f aec2 	bne.w	8002ad2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
  }
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3728      	adds	r7, #40	; 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	00010004 	.word	0x00010004

08002d78 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	b2db      	uxtb	r3, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	460b      	mov	r3, r1
 8002dba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d006      	beq.n	8002dd6 <I2C_MasterRequestWrite+0x2a>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d003      	beq.n	8002dd6 <I2C_MasterRequestWrite+0x2a>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dd4:	d108      	bne.n	8002de8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e00b      	b.n	8002e00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	2b12      	cmp	r3, #18
 8002dee:	d107      	bne.n	8002e00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f91d 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00d      	beq.n	8002e34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e26:	d103      	bne.n	8002e30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e035      	b.n	8002ea0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e3c:	d108      	bne.n	8002e50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e3e:	897b      	ldrh	r3, [r7, #10]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e4c:	611a      	str	r2, [r3, #16]
 8002e4e:	e01b      	b.n	8002e88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e50:	897b      	ldrh	r3, [r7, #10]
 8002e52:	11db      	asrs	r3, r3, #7
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f003 0306 	and.w	r3, r3, #6
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f063 030f 	orn	r3, r3, #15
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	490e      	ldr	r1, [pc, #56]	; (8002ea8 <I2C_MasterRequestWrite+0xfc>)
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f943 	bl	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e010      	b.n	8002ea0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <I2C_MasterRequestWrite+0x100>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f933 	bl	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	00010008 	.word	0x00010008
 8002eac:	00010002 	.word	0x00010002

08002eb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d006      	beq.n	8002eea <I2C_MasterRequestRead+0x3a>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d003      	beq.n	8002eea <I2C_MasterRequestRead+0x3a>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ee8:	d108      	bne.n	8002efc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e00b      	b.n	8002f14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	2b11      	cmp	r3, #17
 8002f02:	d107      	bne.n	8002f14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f893 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00d      	beq.n	8002f48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3a:	d103      	bne.n	8002f44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e079      	b.n	800303c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f50:	d108      	bne.n	8002f64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f52:	897b      	ldrh	r3, [r7, #10]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	e05f      	b.n	8003024 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f64:	897b      	ldrh	r3, [r7, #10]
 8002f66:	11db      	asrs	r3, r3, #7
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 0306 	and.w	r3, r3, #6
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f063 030f 	orn	r3, r3, #15
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4930      	ldr	r1, [pc, #192]	; (8003044 <I2C_MasterRequestRead+0x194>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f8b9 	bl	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e054      	b.n	800303c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4929      	ldr	r1, [pc, #164]	; (8003048 <I2C_MasterRequestRead+0x198>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f8a9 	bl	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e044      	b.n	800303c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f831 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00d      	beq.n	800300c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffe:	d103      	bne.n	8003008 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e017      	b.n	800303c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800300c:	897b      	ldrh	r3, [r7, #10]
 800300e:	11db      	asrs	r3, r3, #7
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 0306 	and.w	r3, r3, #6
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f063 030e 	orn	r3, r3, #14
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4907      	ldr	r1, [pc, #28]	; (8003048 <I2C_MasterRequestRead+0x198>)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f865 	bl	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	00010008 	.word	0x00010008
 8003048:	00010002 	.word	0x00010002

0800304c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800305c:	e025      	b.n	80030aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d021      	beq.n	80030aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fe ff5b 	bl	8001f20 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d116      	bne.n	80030aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e023      	b.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10d      	bne.n	80030d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	e00c      	b.n	80030ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d0b6      	beq.n	800305e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003108:	e051      	b.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003118:	d123      	bne.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003128:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003132:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e046      	b.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d021      	beq.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7fe fed9 	bl	8001f20 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d116      	bne.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e020      	b.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10c      	bne.n	80031d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4013      	ands	r3, r2
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e00b      	b.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	43da      	mvns	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4013      	ands	r3, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d18d      	bne.n	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003204:	e02d      	b.n	8003262 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f8ce 	bl	80033a8 <I2C_IsAcknowledgeFailed>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e02d      	b.n	8003272 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d021      	beq.n	8003262 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321e:	f7fe fe7f 	bl	8001f20 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d116      	bne.n	8003262 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e007      	b.n	8003272 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d1ca      	bne.n	8003206 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003286:	e02d      	b.n	80032e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f88d 	bl	80033a8 <I2C_IsAcknowledgeFailed>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e02d      	b.n	80032f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329e:	d021      	beq.n	80032e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a0:	f7fe fe3e 	bl	8001f20 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d302      	bcc.n	80032b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d116      	bne.n	80032e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f043 0220 	orr.w	r2, r3, #32
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e007      	b.n	80032f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d1ca      	bne.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003308:	e042      	b.n	8003390 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b10      	cmp	r3, #16
 8003316:	d119      	bne.n	800334c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0210 	mvn.w	r2, #16
 8003320:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e029      	b.n	80033a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334c:	f7fe fde8 	bl	8001f20 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	429a      	cmp	r2, r3
 800335a:	d302      	bcc.n	8003362 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d116      	bne.n	8003390 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e007      	b.n	80033a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b40      	cmp	r3, #64	; 0x40
 800339c:	d1b5      	bne.n	800330a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033be:	d11b      	bne.n	80033f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f043 0204 	orr.w	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0cc      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d90c      	bls.n	8003444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0b8      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800345c:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003474:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800347e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b50      	ldr	r3, [pc, #320]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	494d      	ldr	r1, [pc, #308]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d044      	beq.n	8003528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d119      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b3f      	ldr	r3, [pc, #252]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e06f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e067      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4934      	ldr	r1, [pc, #208]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f8:	f7fe fd12 	bl	8001f20 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fe fd0e 	bl	8001f20 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e04f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d20c      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4916      	ldr	r1, [pc, #88]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	490e      	ldr	r1, [pc, #56]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800358e:	f000 f855 	bl	800363c <HAL_RCC_GetSysClockFreq>
 8003592:	4602      	mov	r2, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	490a      	ldr	r1, [pc, #40]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 80035a0:	5ccb      	ldrb	r3, [r1, r3]
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fc72 	bl	8001e98 <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023c00 	.word	0x40023c00
 80035c4:	40023800 	.word	0x40023800
 80035c8:	080069a4 	.word	0x080069a4
 80035cc:	2000000c 	.word	0x2000000c
 80035d0:	20000010 	.word	0x20000010

080035d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	2000000c 	.word	0x2000000c

080035ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035f0:	f7ff fff0 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	0a9b      	lsrs	r3, r3, #10
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	4903      	ldr	r1, [pc, #12]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	080069b4 	.word	0x080069b4

08003614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003618:	f7ff ffdc 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	0b5b      	lsrs	r3, r3, #13
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4903      	ldr	r1, [pc, #12]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	080069b4 	.word	0x080069b4

0800363c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003640:	b0a6      	sub	sp, #152	; 0x98
 8003642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003662:	4bc8      	ldr	r3, [pc, #800]	; (8003984 <HAL_RCC_GetSysClockFreq+0x348>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b0c      	cmp	r3, #12
 800366c:	f200 817e 	bhi.w	800396c <HAL_RCC_GetSysClockFreq+0x330>
 8003670:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003676:	bf00      	nop
 8003678:	080036ad 	.word	0x080036ad
 800367c:	0800396d 	.word	0x0800396d
 8003680:	0800396d 	.word	0x0800396d
 8003684:	0800396d 	.word	0x0800396d
 8003688:	080036b5 	.word	0x080036b5
 800368c:	0800396d 	.word	0x0800396d
 8003690:	0800396d 	.word	0x0800396d
 8003694:	0800396d 	.word	0x0800396d
 8003698:	080036bd 	.word	0x080036bd
 800369c:	0800396d 	.word	0x0800396d
 80036a0:	0800396d 	.word	0x0800396d
 80036a4:	0800396d 	.word	0x0800396d
 80036a8:	08003827 	.word	0x08003827
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ac:	4bb6      	ldr	r3, [pc, #728]	; (8003988 <HAL_RCC_GetSysClockFreq+0x34c>)
 80036ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80036b2:	e15f      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036b4:	4bb5      	ldr	r3, [pc, #724]	; (800398c <HAL_RCC_GetSysClockFreq+0x350>)
 80036b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80036ba:	e15b      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036bc:	4bb1      	ldr	r3, [pc, #708]	; (8003984 <HAL_RCC_GetSysClockFreq+0x348>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c8:	4bae      	ldr	r3, [pc, #696]	; (8003984 <HAL_RCC_GetSysClockFreq+0x348>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d031      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d4:	4bab      	ldr	r3, [pc, #684]	; (8003984 <HAL_RCC_GetSysClockFreq+0x348>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	099b      	lsrs	r3, r3, #6
 80036da:	2200      	movs	r2, #0
 80036dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80036de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e6:	663b      	str	r3, [r7, #96]	; 0x60
 80036e8:	2300      	movs	r3, #0
 80036ea:	667b      	str	r3, [r7, #100]	; 0x64
 80036ec:	4ba7      	ldr	r3, [pc, #668]	; (800398c <HAL_RCC_GetSysClockFreq+0x350>)
 80036ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80036f2:	462a      	mov	r2, r5
 80036f4:	fb03 f202 	mul.w	r2, r3, r2
 80036f8:	2300      	movs	r3, #0
 80036fa:	4621      	mov	r1, r4
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	4413      	add	r3, r2
 8003702:	4aa2      	ldr	r2, [pc, #648]	; (800398c <HAL_RCC_GetSysClockFreq+0x350>)
 8003704:	4621      	mov	r1, r4
 8003706:	fba1 1202 	umull	r1, r2, r1, r2
 800370a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800370c:	460a      	mov	r2, r1
 800370e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003710:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003712:	4413      	add	r3, r2
 8003714:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800371a:	2200      	movs	r2, #0
 800371c:	65bb      	str	r3, [r7, #88]	; 0x58
 800371e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003720:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003724:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003728:	f7fd fa40 	bl	8000bac <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003736:	e064      	b.n	8003802 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003738:	4b92      	ldr	r3, [pc, #584]	; (8003984 <HAL_RCC_GetSysClockFreq+0x348>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	099b      	lsrs	r3, r3, #6
 800373e:	2200      	movs	r2, #0
 8003740:	653b      	str	r3, [r7, #80]	; 0x50
 8003742:	657a      	str	r2, [r7, #84]	; 0x54
 8003744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374a:	64bb      	str	r3, [r7, #72]	; 0x48
 800374c:	2300      	movs	r3, #0
 800374e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003750:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003754:	4622      	mov	r2, r4
 8003756:	462b      	mov	r3, r5
 8003758:	f04f 0000 	mov.w	r0, #0
 800375c:	f04f 0100 	mov.w	r1, #0
 8003760:	0159      	lsls	r1, r3, #5
 8003762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003766:	0150      	lsls	r0, r2, #5
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4621      	mov	r1, r4
 800376e:	1a51      	subs	r1, r2, r1
 8003770:	6139      	str	r1, [r7, #16]
 8003772:	4629      	mov	r1, r5
 8003774:	eb63 0301 	sbc.w	r3, r3, r1
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003786:	4659      	mov	r1, fp
 8003788:	018b      	lsls	r3, r1, #6
 800378a:	4651      	mov	r1, sl
 800378c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003790:	4651      	mov	r1, sl
 8003792:	018a      	lsls	r2, r1, #6
 8003794:	4651      	mov	r1, sl
 8003796:	ebb2 0801 	subs.w	r8, r2, r1
 800379a:	4659      	mov	r1, fp
 800379c:	eb63 0901 	sbc.w	r9, r3, r1
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037b4:	4690      	mov	r8, r2
 80037b6:	4699      	mov	r9, r3
 80037b8:	4623      	mov	r3, r4
 80037ba:	eb18 0303 	adds.w	r3, r8, r3
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	462b      	mov	r3, r5
 80037c2:	eb49 0303 	adc.w	r3, r9, r3
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037d4:	4629      	mov	r1, r5
 80037d6:	028b      	lsls	r3, r1, #10
 80037d8:	4621      	mov	r1, r4
 80037da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037de:	4621      	mov	r1, r4
 80037e0:	028a      	lsls	r2, r1, #10
 80037e2:	4610      	mov	r0, r2
 80037e4:	4619      	mov	r1, r3
 80037e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ea:	2200      	movs	r2, #0
 80037ec:	643b      	str	r3, [r7, #64]	; 0x40
 80037ee:	647a      	str	r2, [r7, #68]	; 0x44
 80037f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037f4:	f7fd f9da 	bl	8000bac <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4613      	mov	r3, r2
 80037fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003802:	4b60      	ldr	r3, [pc, #384]	; (8003984 <HAL_RCC_GetSysClockFreq+0x348>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	0c1b      	lsrs	r3, r3, #16
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	3301      	adds	r3, #1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003814:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003824:	e0a6      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003826:	4b57      	ldr	r3, [pc, #348]	; (8003984 <HAL_RCC_GetSysClockFreq+0x348>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800382e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003832:	4b54      	ldr	r3, [pc, #336]	; (8003984 <HAL_RCC_GetSysClockFreq+0x348>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d02a      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383e:	4b51      	ldr	r3, [pc, #324]	; (8003984 <HAL_RCC_GetSysClockFreq+0x348>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	099b      	lsrs	r3, r3, #6
 8003844:	2200      	movs	r2, #0
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
 8003848:	63fa      	str	r2, [r7, #60]	; 0x3c
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003850:	2100      	movs	r1, #0
 8003852:	4b4e      	ldr	r3, [pc, #312]	; (800398c <HAL_RCC_GetSysClockFreq+0x350>)
 8003854:	fb03 f201 	mul.w	r2, r3, r1
 8003858:	2300      	movs	r3, #0
 800385a:	fb00 f303 	mul.w	r3, r0, r3
 800385e:	4413      	add	r3, r2
 8003860:	4a4a      	ldr	r2, [pc, #296]	; (800398c <HAL_RCC_GetSysClockFreq+0x350>)
 8003862:	fba0 1202 	umull	r1, r2, r0, r2
 8003866:	677a      	str	r2, [r7, #116]	; 0x74
 8003868:	460a      	mov	r2, r1
 800386a:	673a      	str	r2, [r7, #112]	; 0x70
 800386c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800386e:	4413      	add	r3, r2
 8003870:	677b      	str	r3, [r7, #116]	; 0x74
 8003872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003876:	2200      	movs	r2, #0
 8003878:	633b      	str	r3, [r7, #48]	; 0x30
 800387a:	637a      	str	r2, [r7, #52]	; 0x34
 800387c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003880:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003884:	f7fd f992 	bl	8000bac <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4613      	mov	r3, r2
 800388e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003892:	e05b      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003894:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_RCC_GetSysClockFreq+0x348>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	099b      	lsrs	r3, r3, #6
 800389a:	2200      	movs	r2, #0
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
 800389e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a6:	623b      	str	r3, [r7, #32]
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
 80038ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038b0:	4642      	mov	r2, r8
 80038b2:	464b      	mov	r3, r9
 80038b4:	f04f 0000 	mov.w	r0, #0
 80038b8:	f04f 0100 	mov.w	r1, #0
 80038bc:	0159      	lsls	r1, r3, #5
 80038be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c2:	0150      	lsls	r0, r2, #5
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4641      	mov	r1, r8
 80038ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ce:	4649      	mov	r1, r9
 80038d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038e8:	ebb2 040a 	subs.w	r4, r2, sl
 80038ec:	eb63 050b 	sbc.w	r5, r3, fp
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	00eb      	lsls	r3, r5, #3
 80038fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038fe:	00e2      	lsls	r2, r4, #3
 8003900:	4614      	mov	r4, r2
 8003902:	461d      	mov	r5, r3
 8003904:	4643      	mov	r3, r8
 8003906:	18e3      	adds	r3, r4, r3
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	464b      	mov	r3, r9
 800390c:	eb45 0303 	adc.w	r3, r5, r3
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800391e:	4629      	mov	r1, r5
 8003920:	028b      	lsls	r3, r1, #10
 8003922:	4621      	mov	r1, r4
 8003924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003928:	4621      	mov	r1, r4
 800392a:	028a      	lsls	r2, r1, #10
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003934:	2200      	movs	r2, #0
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	61fa      	str	r2, [r7, #28]
 800393a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800393e:	f7fd f935 	bl	8000bac <__aeabi_uldivmod>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4613      	mov	r3, r2
 8003948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800394c:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <HAL_RCC_GetSysClockFreq+0x348>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	0f1b      	lsrs	r3, r3, #28
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800395a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800395e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800396a:	e003      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_GetSysClockFreq+0x34c>)
 800396e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003972:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003974:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003978:	4618      	mov	r0, r3
 800397a:	3798      	adds	r7, #152	; 0x98
 800397c:	46bd      	mov	sp, r7
 800397e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	00f42400 	.word	0x00f42400
 800398c:	017d7840 	.word	0x017d7840

08003990 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e28d      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8083 	beq.w	8003ab6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039b0:	4b94      	ldr	r3, [pc, #592]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d019      	beq.n	80039f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039bc:	4b91      	ldr	r3, [pc, #580]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d106      	bne.n	80039d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039c8:	4b8e      	ldr	r3, [pc, #568]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d4:	d00c      	beq.n	80039f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d6:	4b8b      	ldr	r3, [pc, #556]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d112      	bne.n	8003a08 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e2:	4b88      	ldr	r3, [pc, #544]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ee:	d10b      	bne.n	8003a08 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f0:	4b84      	ldr	r3, [pc, #528]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d05b      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x124>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d157      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e25a      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a10:	d106      	bne.n	8003a20 <HAL_RCC_OscConfig+0x90>
 8003a12:	4b7c      	ldr	r3, [pc, #496]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a7b      	ldr	r2, [pc, #492]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e01d      	b.n	8003a5c <HAL_RCC_OscConfig+0xcc>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0xb4>
 8003a2a:	4b76      	ldr	r3, [pc, #472]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a75      	ldr	r2, [pc, #468]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	4b73      	ldr	r3, [pc, #460]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a72      	ldr	r2, [pc, #456]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	e00b      	b.n	8003a5c <HAL_RCC_OscConfig+0xcc>
 8003a44:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a6e      	ldr	r2, [pc, #440]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a6b      	ldr	r2, [pc, #428]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d013      	beq.n	8003a8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fe fa5c 	bl	8001f20 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a6c:	f7fe fa58 	bl	8001f20 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b64      	cmp	r3, #100	; 0x64
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e21f      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0xdc>
 8003a8a:	e014      	b.n	8003ab6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fa48 	bl	8001f20 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a94:	f7fe fa44 	bl	8001f20 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e20b      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa6:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x104>
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d06f      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ac2:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d017      	beq.n	8003afe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ace:	4b4d      	ldr	r3, [pc, #308]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d105      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ada:	4b4a      	ldr	r3, [pc, #296]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae6:	4b47      	ldr	r3, [pc, #284]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d11c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003af2:	4b44      	ldr	r3, [pc, #272]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d116      	bne.n	8003b2c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afe:	4b41      	ldr	r3, [pc, #260]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_RCC_OscConfig+0x186>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d001      	beq.n	8003b16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e1d3      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b16:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4937      	ldr	r1, [pc, #220]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2a:	e03a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d020      	beq.n	8003b76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b34:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <HAL_RCC_OscConfig+0x278>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3a:	f7fe f9f1 	bl	8001f20 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b42:	f7fe f9ed 	bl	8001f20 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e1b4      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b60:	4b28      	ldr	r3, [pc, #160]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4925      	ldr	r1, [pc, #148]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]
 8003b74:	e015      	b.n	8003ba2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <HAL_RCC_OscConfig+0x278>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fe f9d0 	bl	8001f20 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b84:	f7fe f9cc 	bl	8001f20 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e193      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d036      	beq.n	8003c1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <HAL_RCC_OscConfig+0x27c>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fe f9b0 	bl	8001f20 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc4:	f7fe f9ac 	bl	8001f20 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e173      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x234>
 8003be2:	e01b      	b.n	8003c1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be4:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_RCC_OscConfig+0x27c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bea:	f7fe f999 	bl	8001f20 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf0:	e00e      	b.n	8003c10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf2:	f7fe f995 	bl	8001f20 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d907      	bls.n	8003c10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e15c      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
 8003c04:	40023800 	.word	0x40023800
 8003c08:	42470000 	.word	0x42470000
 8003c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	4b8a      	ldr	r3, [pc, #552]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ea      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8097 	beq.w	8003d58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2e:	4b83      	ldr	r3, [pc, #524]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10f      	bne.n	8003c5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	4b7f      	ldr	r3, [pc, #508]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a7e      	ldr	r2, [pc, #504]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4a:	4b7c      	ldr	r3, [pc, #496]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5a:	4b79      	ldr	r3, [pc, #484]	; (8003e40 <HAL_RCC_OscConfig+0x4b0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d118      	bne.n	8003c98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c66:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x4b0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a75      	ldr	r2, [pc, #468]	; (8003e40 <HAL_RCC_OscConfig+0x4b0>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c72:	f7fe f955 	bl	8001f20 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7a:	f7fe f951 	bl	8001f20 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e118      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	4b6c      	ldr	r3, [pc, #432]	; (8003e40 <HAL_RCC_OscConfig+0x4b0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d106      	bne.n	8003cae <HAL_RCC_OscConfig+0x31e>
 8003ca0:	4b66      	ldr	r3, [pc, #408]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a65      	ldr	r2, [pc, #404]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cac:	e01c      	b.n	8003ce8 <HAL_RCC_OscConfig+0x358>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x340>
 8003cb6:	4b61      	ldr	r3, [pc, #388]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a60      	ldr	r2, [pc, #384]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc2:	4b5e      	ldr	r3, [pc, #376]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	4a5d      	ldr	r2, [pc, #372]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0x358>
 8003cd0:	4b5a      	ldr	r3, [pc, #360]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	4a59      	ldr	r2, [pc, #356]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	6713      	str	r3, [r2, #112]	; 0x70
 8003cdc:	4b57      	ldr	r3, [pc, #348]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	4a56      	ldr	r2, [pc, #344]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003ce2:	f023 0304 	bic.w	r3, r3, #4
 8003ce6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d015      	beq.n	8003d1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fe f916 	bl	8001f20 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf8:	f7fe f912 	bl	8001f20 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e0d7      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0e:	4b4b      	ldr	r3, [pc, #300]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0ee      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x368>
 8003d1a:	e014      	b.n	8003d46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fe f900 	bl	8001f20 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fe f8fc 	bl	8001f20 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e0c1      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3a:	4b40      	ldr	r3, [pc, #256]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1ee      	bne.n	8003d24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4c:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4a3a      	ldr	r2, [pc, #232]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80ad 	beq.w	8003ebc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d62:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d060      	beq.n	8003e30 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d145      	bne.n	8003e02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d76:	4b33      	ldr	r3, [pc, #204]	; (8003e44 <HAL_RCC_OscConfig+0x4b4>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fe f8d0 	bl	8001f20 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fe f8cc 	bl	8001f20 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e093      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	4b29      	ldr	r3, [pc, #164]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	019b      	lsls	r3, r3, #6
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	061b      	lsls	r3, r3, #24
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	071b      	lsls	r3, r3, #28
 8003dce:	491b      	ldr	r1, [pc, #108]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <HAL_RCC_OscConfig+0x4b4>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dda:	f7fe f8a1 	bl	8001f20 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de2:	f7fe f89d 	bl	8001f20 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e064      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x452>
 8003e00:	e05c      	b.n	8003ebc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_RCC_OscConfig+0x4b4>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fe f88a 	bl	8001f20 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fe f886 	bl	8001f20 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e04d      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_OscConfig+0x4ac>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x480>
 8003e2e:	e045      	b.n	8003ebc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e040      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40007000 	.word	0x40007000
 8003e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <HAL_RCC_OscConfig+0x538>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d030      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d129      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d122      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d119      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	3b01      	subs	r3, #1
 8003e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d10f      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d107      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800

08003ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e03f      	b.n	8003f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd fe5c 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	; 0x24
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f929 	bl	8004168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b08a      	sub	sp, #40	; 0x28
 8003f6a:	af02      	add	r7, sp, #8
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d17c      	bne.n	8004080 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_UART_Transmit+0x2c>
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e075      	b.n	8004082 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_UART_Transmit+0x3e>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e06e      	b.n	8004082 <HAL_UART_Transmit+0x11c>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2221      	movs	r2, #33	; 0x21
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fba:	f7fd ffb1 	bl	8001f20 <HAL_GetTick>
 8003fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd4:	d108      	bne.n	8003fe8 <HAL_UART_Transmit+0x82>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d104      	bne.n	8003fe8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	e003      	b.n	8003ff0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ff8:	e02a      	b.n	8004050 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2200      	movs	r2, #0
 8004002:	2180      	movs	r1, #128	; 0x80
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f840 	bl	800408a <UART_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e036      	b.n	8004082 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	3302      	adds	r3, #2
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e007      	b.n	8004042 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	3301      	adds	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1cf      	bne.n	8003ffa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2200      	movs	r2, #0
 8004062:	2140      	movs	r1, #64	; 0x40
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f810 	bl	800408a <UART_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e006      	b.n	8004082 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b090      	sub	sp, #64	; 0x40
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4613      	mov	r3, r2
 8004098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409a:	e050      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d04c      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <UART_WaitOnFlagUntilTimeout+0x30>
 80040aa:	f7fd ff39 	bl	8001f20 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d241      	bcs.n	800413e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	330c      	adds	r3, #12
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040da:	637a      	str	r2, [r7, #52]	; 0x34
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e5      	bne.n	80040ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3314      	adds	r3, #20
 80040f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	613b      	str	r3, [r7, #16]
   return(result);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	63bb      	str	r3, [r7, #56]	; 0x38
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3314      	adds	r3, #20
 800410c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800410e:	623a      	str	r2, [r7, #32]
 8004110:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	69f9      	ldr	r1, [r7, #28]
 8004114:	6a3a      	ldr	r2, [r7, #32]
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	61bb      	str	r3, [r7, #24]
   return(result);
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e5      	bne.n	80040ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e00f      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	429a      	cmp	r2, r3
 800415a:	d09f      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3740      	adds	r7, #64	; 0x40
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800416c:	b0c0      	sub	sp, #256	; 0x100
 800416e:	af00      	add	r7, sp, #0
 8004170:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	68d9      	ldr	r1, [r3, #12]
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	ea40 0301 	orr.w	r3, r0, r1
 8004190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	431a      	orrs	r2, r3
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041c0:	f021 010c 	bic.w	r1, r1, #12
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041ce:	430b      	orrs	r3, r1
 80041d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e2:	6999      	ldr	r1, [r3, #24]
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	ea40 0301 	orr.w	r3, r0, r1
 80041ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b8f      	ldr	r3, [pc, #572]	; (8004434 <UART_SetConfig+0x2cc>)
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d005      	beq.n	8004208 <UART_SetConfig+0xa0>
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b8d      	ldr	r3, [pc, #564]	; (8004438 <UART_SetConfig+0x2d0>)
 8004204:	429a      	cmp	r2, r3
 8004206:	d104      	bne.n	8004212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7ff fa04 	bl	8003614 <HAL_RCC_GetPCLK2Freq>
 800420c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004210:	e003      	b.n	800421a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004212:	f7ff f9eb 	bl	80035ec <HAL_RCC_GetPCLK1Freq>
 8004216:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004224:	f040 810c 	bne.w	8004440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422c:	2200      	movs	r2, #0
 800422e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004232:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800423a:	4622      	mov	r2, r4
 800423c:	462b      	mov	r3, r5
 800423e:	1891      	adds	r1, r2, r2
 8004240:	65b9      	str	r1, [r7, #88]	; 0x58
 8004242:	415b      	adcs	r3, r3
 8004244:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800424a:	4621      	mov	r1, r4
 800424c:	eb12 0801 	adds.w	r8, r2, r1
 8004250:	4629      	mov	r1, r5
 8004252:	eb43 0901 	adc.w	r9, r3, r1
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800426a:	4690      	mov	r8, r2
 800426c:	4699      	mov	r9, r3
 800426e:	4623      	mov	r3, r4
 8004270:	eb18 0303 	adds.w	r3, r8, r3
 8004274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004278:	462b      	mov	r3, r5
 800427a:	eb49 0303 	adc.w	r3, r9, r3
 800427e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800428e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004296:	460b      	mov	r3, r1
 8004298:	18db      	adds	r3, r3, r3
 800429a:	653b      	str	r3, [r7, #80]	; 0x50
 800429c:	4613      	mov	r3, r2
 800429e:	eb42 0303 	adc.w	r3, r2, r3
 80042a2:	657b      	str	r3, [r7, #84]	; 0x54
 80042a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042ac:	f7fc fc7e 	bl	8000bac <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4b61      	ldr	r3, [pc, #388]	; (800443c <UART_SetConfig+0x2d4>)
 80042b6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	011c      	lsls	r4, r3, #4
 80042be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80042d8:	415b      	adcs	r3, r3
 80042da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042e0:	4641      	mov	r1, r8
 80042e2:	eb12 0a01 	adds.w	sl, r2, r1
 80042e6:	4649      	mov	r1, r9
 80042e8:	eb43 0b01 	adc.w	fp, r3, r1
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004300:	4692      	mov	sl, r2
 8004302:	469b      	mov	fp, r3
 8004304:	4643      	mov	r3, r8
 8004306:	eb1a 0303 	adds.w	r3, sl, r3
 800430a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800430e:	464b      	mov	r3, r9
 8004310:	eb4b 0303 	adc.w	r3, fp, r3
 8004314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004324:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800432c:	460b      	mov	r3, r1
 800432e:	18db      	adds	r3, r3, r3
 8004330:	643b      	str	r3, [r7, #64]	; 0x40
 8004332:	4613      	mov	r3, r2
 8004334:	eb42 0303 	adc.w	r3, r2, r3
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
 800433a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800433e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004342:	f7fc fc33 	bl	8000bac <__aeabi_uldivmod>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4611      	mov	r1, r2
 800434c:	4b3b      	ldr	r3, [pc, #236]	; (800443c <UART_SetConfig+0x2d4>)
 800434e:	fba3 2301 	umull	r2, r3, r3, r1
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2264      	movs	r2, #100	; 0x64
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	1acb      	subs	r3, r1, r3
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004362:	4b36      	ldr	r3, [pc, #216]	; (800443c <UART_SetConfig+0x2d4>)
 8004364:	fba3 2302 	umull	r2, r3, r3, r2
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004370:	441c      	add	r4, r3
 8004372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004376:	2200      	movs	r2, #0
 8004378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800437c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	1891      	adds	r1, r2, r2
 800438a:	63b9      	str	r1, [r7, #56]	; 0x38
 800438c:	415b      	adcs	r3, r3
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004394:	4641      	mov	r1, r8
 8004396:	1851      	adds	r1, r2, r1
 8004398:	6339      	str	r1, [r7, #48]	; 0x30
 800439a:	4649      	mov	r1, r9
 800439c:	414b      	adcs	r3, r1
 800439e:	637b      	str	r3, [r7, #52]	; 0x34
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043ac:	4659      	mov	r1, fp
 80043ae:	00cb      	lsls	r3, r1, #3
 80043b0:	4651      	mov	r1, sl
 80043b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b6:	4651      	mov	r1, sl
 80043b8:	00ca      	lsls	r2, r1, #3
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	4642      	mov	r2, r8
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043c8:	464b      	mov	r3, r9
 80043ca:	460a      	mov	r2, r1
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043e8:	460b      	mov	r3, r1
 80043ea:	18db      	adds	r3, r3, r3
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ee:	4613      	mov	r3, r2
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043fe:	f7fc fbd5 	bl	8000bac <__aeabi_uldivmod>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <UART_SetConfig+0x2d4>)
 8004408:	fba3 1302 	umull	r1, r3, r3, r2
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	2164      	movs	r1, #100	; 0x64
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	3332      	adds	r3, #50	; 0x32
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <UART_SetConfig+0x2d4>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	f003 0207 	and.w	r2, r3, #7
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4422      	add	r2, r4
 800442e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004430:	e105      	b.n	800463e <UART_SetConfig+0x4d6>
 8004432:	bf00      	nop
 8004434:	40011000 	.word	0x40011000
 8004438:	40011400 	.word	0x40011400
 800443c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004444:	2200      	movs	r2, #0
 8004446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800444a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800444e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004452:	4642      	mov	r2, r8
 8004454:	464b      	mov	r3, r9
 8004456:	1891      	adds	r1, r2, r2
 8004458:	6239      	str	r1, [r7, #32]
 800445a:	415b      	adcs	r3, r3
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004462:	4641      	mov	r1, r8
 8004464:	1854      	adds	r4, r2, r1
 8004466:	4649      	mov	r1, r9
 8004468:	eb43 0501 	adc.w	r5, r3, r1
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	00eb      	lsls	r3, r5, #3
 8004476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800447a:	00e2      	lsls	r2, r4, #3
 800447c:	4614      	mov	r4, r2
 800447e:	461d      	mov	r5, r3
 8004480:	4643      	mov	r3, r8
 8004482:	18e3      	adds	r3, r4, r3
 8004484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004488:	464b      	mov	r3, r9
 800448a:	eb45 0303 	adc.w	r3, r5, r3
 800448e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800449e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044ae:	4629      	mov	r1, r5
 80044b0:	008b      	lsls	r3, r1, #2
 80044b2:	4621      	mov	r1, r4
 80044b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b8:	4621      	mov	r1, r4
 80044ba:	008a      	lsls	r2, r1, #2
 80044bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044c0:	f7fc fb74 	bl	8000bac <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4b60      	ldr	r3, [pc, #384]	; (800464c <UART_SetConfig+0x4e4>)
 80044ca:	fba3 2302 	umull	r2, r3, r3, r2
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	011c      	lsls	r4, r3, #4
 80044d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044e4:	4642      	mov	r2, r8
 80044e6:	464b      	mov	r3, r9
 80044e8:	1891      	adds	r1, r2, r2
 80044ea:	61b9      	str	r1, [r7, #24]
 80044ec:	415b      	adcs	r3, r3
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f4:	4641      	mov	r1, r8
 80044f6:	1851      	adds	r1, r2, r1
 80044f8:	6139      	str	r1, [r7, #16]
 80044fa:	4649      	mov	r1, r9
 80044fc:	414b      	adcs	r3, r1
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800450c:	4659      	mov	r1, fp
 800450e:	00cb      	lsls	r3, r1, #3
 8004510:	4651      	mov	r1, sl
 8004512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004516:	4651      	mov	r1, sl
 8004518:	00ca      	lsls	r2, r1, #3
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	4603      	mov	r3, r0
 8004520:	4642      	mov	r2, r8
 8004522:	189b      	adds	r3, r3, r2
 8004524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004528:	464b      	mov	r3, r9
 800452a:	460a      	mov	r2, r1
 800452c:	eb42 0303 	adc.w	r3, r2, r3
 8004530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	67bb      	str	r3, [r7, #120]	; 0x78
 800453e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800454c:	4649      	mov	r1, r9
 800454e:	008b      	lsls	r3, r1, #2
 8004550:	4641      	mov	r1, r8
 8004552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004556:	4641      	mov	r1, r8
 8004558:	008a      	lsls	r2, r1, #2
 800455a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800455e:	f7fc fb25 	bl	8000bac <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4b39      	ldr	r3, [pc, #228]	; (800464c <UART_SetConfig+0x4e4>)
 8004568:	fba3 1302 	umull	r1, r3, r3, r2
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	2164      	movs	r1, #100	; 0x64
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	3332      	adds	r3, #50	; 0x32
 800457a:	4a34      	ldr	r2, [pc, #208]	; (800464c <UART_SetConfig+0x4e4>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004586:	441c      	add	r4, r3
 8004588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800458c:	2200      	movs	r2, #0
 800458e:	673b      	str	r3, [r7, #112]	; 0x70
 8004590:	677a      	str	r2, [r7, #116]	; 0x74
 8004592:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004596:	4642      	mov	r2, r8
 8004598:	464b      	mov	r3, r9
 800459a:	1891      	adds	r1, r2, r2
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	415b      	adcs	r3, r3
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a6:	4641      	mov	r1, r8
 80045a8:	1851      	adds	r1, r2, r1
 80045aa:	6039      	str	r1, [r7, #0]
 80045ac:	4649      	mov	r1, r9
 80045ae:	414b      	adcs	r3, r1
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045be:	4659      	mov	r1, fp
 80045c0:	00cb      	lsls	r3, r1, #3
 80045c2:	4651      	mov	r1, sl
 80045c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045c8:	4651      	mov	r1, sl
 80045ca:	00ca      	lsls	r2, r1, #3
 80045cc:	4610      	mov	r0, r2
 80045ce:	4619      	mov	r1, r3
 80045d0:	4603      	mov	r3, r0
 80045d2:	4642      	mov	r2, r8
 80045d4:	189b      	adds	r3, r3, r2
 80045d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045d8:	464b      	mov	r3, r9
 80045da:	460a      	mov	r2, r1
 80045dc:	eb42 0303 	adc.w	r3, r2, r3
 80045e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	663b      	str	r3, [r7, #96]	; 0x60
 80045ec:	667a      	str	r2, [r7, #100]	; 0x64
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045fa:	4649      	mov	r1, r9
 80045fc:	008b      	lsls	r3, r1, #2
 80045fe:	4641      	mov	r1, r8
 8004600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004604:	4641      	mov	r1, r8
 8004606:	008a      	lsls	r2, r1, #2
 8004608:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800460c:	f7fc face 	bl	8000bac <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4b0d      	ldr	r3, [pc, #52]	; (800464c <UART_SetConfig+0x4e4>)
 8004616:	fba3 1302 	umull	r1, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2164      	movs	r1, #100	; 0x64
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	3332      	adds	r3, #50	; 0x32
 8004628:	4a08      	ldr	r2, [pc, #32]	; (800464c <UART_SetConfig+0x4e4>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	f003 020f 	and.w	r2, r3, #15
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4422      	add	r2, r4
 800463c:	609a      	str	r2, [r3, #8]
}
 800463e:	bf00      	nop
 8004640:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004644:	46bd      	mov	sp, r7
 8004646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464a:	bf00      	nop
 800464c:	51eb851f 	.word	0x51eb851f

08004650 <sin>:
 8004650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004652:	ec53 2b10 	vmov	r2, r3, d0
 8004656:	4828      	ldr	r0, [pc, #160]	; (80046f8 <sin+0xa8>)
 8004658:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800465c:	4281      	cmp	r1, r0
 800465e:	dc07      	bgt.n	8004670 <sin+0x20>
 8004660:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80046f0 <sin+0xa0>
 8004664:	2000      	movs	r0, #0
 8004666:	b005      	add	sp, #20
 8004668:	f85d eb04 	ldr.w	lr, [sp], #4
 800466c:	f000 be6c 	b.w	8005348 <__kernel_sin>
 8004670:	4822      	ldr	r0, [pc, #136]	; (80046fc <sin+0xac>)
 8004672:	4281      	cmp	r1, r0
 8004674:	dd09      	ble.n	800468a <sin+0x3a>
 8004676:	ee10 0a10 	vmov	r0, s0
 800467a:	4619      	mov	r1, r3
 800467c:	f7fb fe1c 	bl	80002b8 <__aeabi_dsub>
 8004680:	ec41 0b10 	vmov	d0, r0, r1
 8004684:	b005      	add	sp, #20
 8004686:	f85d fb04 	ldr.w	pc, [sp], #4
 800468a:	4668      	mov	r0, sp
 800468c:	f000 f838 	bl	8004700 <__ieee754_rem_pio2>
 8004690:	f000 0003 	and.w	r0, r0, #3
 8004694:	2801      	cmp	r0, #1
 8004696:	d00c      	beq.n	80046b2 <sin+0x62>
 8004698:	2802      	cmp	r0, #2
 800469a:	d011      	beq.n	80046c0 <sin+0x70>
 800469c:	b9f0      	cbnz	r0, 80046dc <sin+0x8c>
 800469e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80046a2:	ed9d 0b00 	vldr	d0, [sp]
 80046a6:	2001      	movs	r0, #1
 80046a8:	f000 fe4e 	bl	8005348 <__kernel_sin>
 80046ac:	ec51 0b10 	vmov	r0, r1, d0
 80046b0:	e7e6      	b.n	8004680 <sin+0x30>
 80046b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80046b6:	ed9d 0b00 	vldr	d0, [sp]
 80046ba:	f000 fa2d 	bl	8004b18 <__kernel_cos>
 80046be:	e7f5      	b.n	80046ac <sin+0x5c>
 80046c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80046c4:	ed9d 0b00 	vldr	d0, [sp]
 80046c8:	2001      	movs	r0, #1
 80046ca:	f000 fe3d 	bl	8005348 <__kernel_sin>
 80046ce:	ec53 2b10 	vmov	r2, r3, d0
 80046d2:	ee10 0a10 	vmov	r0, s0
 80046d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80046da:	e7d1      	b.n	8004680 <sin+0x30>
 80046dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80046e0:	ed9d 0b00 	vldr	d0, [sp]
 80046e4:	f000 fa18 	bl	8004b18 <__kernel_cos>
 80046e8:	e7f1      	b.n	80046ce <sin+0x7e>
 80046ea:	bf00      	nop
 80046ec:	f3af 8000 	nop.w
	...
 80046f8:	3fe921fb 	.word	0x3fe921fb
 80046fc:	7fefffff 	.word	0x7fefffff

08004700 <__ieee754_rem_pio2>:
 8004700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	ed2d 8b02 	vpush	{d8}
 8004708:	ec55 4b10 	vmov	r4, r5, d0
 800470c:	4bca      	ldr	r3, [pc, #808]	; (8004a38 <__ieee754_rem_pio2+0x338>)
 800470e:	b08b      	sub	sp, #44	; 0x2c
 8004710:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004714:	4598      	cmp	r8, r3
 8004716:	4682      	mov	sl, r0
 8004718:	9502      	str	r5, [sp, #8]
 800471a:	dc08      	bgt.n	800472e <__ieee754_rem_pio2+0x2e>
 800471c:	2200      	movs	r2, #0
 800471e:	2300      	movs	r3, #0
 8004720:	ed80 0b00 	vstr	d0, [r0]
 8004724:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004728:	f04f 0b00 	mov.w	fp, #0
 800472c:	e028      	b.n	8004780 <__ieee754_rem_pio2+0x80>
 800472e:	4bc3      	ldr	r3, [pc, #780]	; (8004a3c <__ieee754_rem_pio2+0x33c>)
 8004730:	4598      	cmp	r8, r3
 8004732:	dc78      	bgt.n	8004826 <__ieee754_rem_pio2+0x126>
 8004734:	9b02      	ldr	r3, [sp, #8]
 8004736:	4ec2      	ldr	r6, [pc, #776]	; (8004a40 <__ieee754_rem_pio2+0x340>)
 8004738:	2b00      	cmp	r3, #0
 800473a:	ee10 0a10 	vmov	r0, s0
 800473e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x300>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	4629      	mov	r1, r5
 8004746:	dd39      	ble.n	80047bc <__ieee754_rem_pio2+0xbc>
 8004748:	f7fb fdb6 	bl	80002b8 <__aeabi_dsub>
 800474c:	45b0      	cmp	r8, r6
 800474e:	4604      	mov	r4, r0
 8004750:	460d      	mov	r5, r1
 8004752:	d01b      	beq.n	800478c <__ieee754_rem_pio2+0x8c>
 8004754:	a3ac      	add	r3, pc, #688	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x308>)
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	f7fb fdad 	bl	80002b8 <__aeabi_dsub>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	e9ca 2300 	strd	r2, r3, [sl]
 8004766:	4620      	mov	r0, r4
 8004768:	4629      	mov	r1, r5
 800476a:	f7fb fda5 	bl	80002b8 <__aeabi_dsub>
 800476e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x308>)
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f7fb fda0 	bl	80002b8 <__aeabi_dsub>
 8004778:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800477c:	f04f 0b01 	mov.w	fp, #1
 8004780:	4658      	mov	r0, fp
 8004782:	b00b      	add	sp, #44	; 0x2c
 8004784:	ecbd 8b02 	vpop	{d8}
 8004788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x310>)
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f7fb fd91 	bl	80002b8 <__aeabi_dsub>
 8004796:	a3a0      	add	r3, pc, #640	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x318>)
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	4604      	mov	r4, r0
 800479e:	460d      	mov	r5, r1
 80047a0:	f7fb fd8a 	bl	80002b8 <__aeabi_dsub>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	e9ca 2300 	strd	r2, r3, [sl]
 80047ac:	4620      	mov	r0, r4
 80047ae:	4629      	mov	r1, r5
 80047b0:	f7fb fd82 	bl	80002b8 <__aeabi_dsub>
 80047b4:	a398      	add	r3, pc, #608	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x318>)
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	e7db      	b.n	8004774 <__ieee754_rem_pio2+0x74>
 80047bc:	f7fb fd7e 	bl	80002bc <__adddf3>
 80047c0:	45b0      	cmp	r8, r6
 80047c2:	4604      	mov	r4, r0
 80047c4:	460d      	mov	r5, r1
 80047c6:	d016      	beq.n	80047f6 <__ieee754_rem_pio2+0xf6>
 80047c8:	a38f      	add	r3, pc, #572	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x308>)
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	f7fb fd75 	bl	80002bc <__adddf3>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	e9ca 2300 	strd	r2, r3, [sl]
 80047da:	4620      	mov	r0, r4
 80047dc:	4629      	mov	r1, r5
 80047de:	f7fb fd6b 	bl	80002b8 <__aeabi_dsub>
 80047e2:	a389      	add	r3, pc, #548	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x308>)
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f7fb fd68 	bl	80002bc <__adddf3>
 80047ec:	f04f 3bff 	mov.w	fp, #4294967295
 80047f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80047f4:	e7c4      	b.n	8004780 <__ieee754_rem_pio2+0x80>
 80047f6:	a386      	add	r3, pc, #536	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x310>)
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	f7fb fd5e 	bl	80002bc <__adddf3>
 8004800:	a385      	add	r3, pc, #532	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x318>)
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	4604      	mov	r4, r0
 8004808:	460d      	mov	r5, r1
 800480a:	f7fb fd57 	bl	80002bc <__adddf3>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	e9ca 2300 	strd	r2, r3, [sl]
 8004816:	4620      	mov	r0, r4
 8004818:	4629      	mov	r1, r5
 800481a:	f7fb fd4d 	bl	80002b8 <__aeabi_dsub>
 800481e:	a37e      	add	r3, pc, #504	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x318>)
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	e7e0      	b.n	80047e8 <__ieee754_rem_pio2+0xe8>
 8004826:	4b87      	ldr	r3, [pc, #540]	; (8004a44 <__ieee754_rem_pio2+0x344>)
 8004828:	4598      	cmp	r8, r3
 800482a:	f300 80d9 	bgt.w	80049e0 <__ieee754_rem_pio2+0x2e0>
 800482e:	f000 fe49 	bl	80054c4 <fabs>
 8004832:	ec55 4b10 	vmov	r4, r5, d0
 8004836:	ee10 0a10 	vmov	r0, s0
 800483a:	a379      	add	r3, pc, #484	; (adr r3, 8004a20 <__ieee754_rem_pio2+0x320>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	4629      	mov	r1, r5
 8004842:	f7fb fef1 	bl	8000628 <__aeabi_dmul>
 8004846:	4b80      	ldr	r3, [pc, #512]	; (8004a48 <__ieee754_rem_pio2+0x348>)
 8004848:	2200      	movs	r2, #0
 800484a:	f7fb fd37 	bl	80002bc <__adddf3>
 800484e:	f7fc f985 	bl	8000b5c <__aeabi_d2iz>
 8004852:	4683      	mov	fp, r0
 8004854:	f7fb fe7e 	bl	8000554 <__aeabi_i2d>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	ec43 2b18 	vmov	d8, r2, r3
 8004860:	a367      	add	r3, pc, #412	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x300>)
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f7fb fedf 	bl	8000628 <__aeabi_dmul>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fb fd21 	bl	80002b8 <__aeabi_dsub>
 8004876:	a364      	add	r3, pc, #400	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x308>)
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	4606      	mov	r6, r0
 800487e:	460f      	mov	r7, r1
 8004880:	ec51 0b18 	vmov	r0, r1, d8
 8004884:	f7fb fed0 	bl	8000628 <__aeabi_dmul>
 8004888:	f1bb 0f1f 	cmp.w	fp, #31
 800488c:	4604      	mov	r4, r0
 800488e:	460d      	mov	r5, r1
 8004890:	dc0d      	bgt.n	80048ae <__ieee754_rem_pio2+0x1ae>
 8004892:	4b6e      	ldr	r3, [pc, #440]	; (8004a4c <__ieee754_rem_pio2+0x34c>)
 8004894:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	4543      	cmp	r3, r8
 800489e:	d006      	beq.n	80048ae <__ieee754_rem_pio2+0x1ae>
 80048a0:	4622      	mov	r2, r4
 80048a2:	462b      	mov	r3, r5
 80048a4:	4630      	mov	r0, r6
 80048a6:	4639      	mov	r1, r7
 80048a8:	f7fb fd06 	bl	80002b8 <__aeabi_dsub>
 80048ac:	e00f      	b.n	80048ce <__ieee754_rem_pio2+0x1ce>
 80048ae:	462b      	mov	r3, r5
 80048b0:	4622      	mov	r2, r4
 80048b2:	4630      	mov	r0, r6
 80048b4:	4639      	mov	r1, r7
 80048b6:	f7fb fcff 	bl	80002b8 <__aeabi_dsub>
 80048ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 80048be:	9303      	str	r3, [sp, #12]
 80048c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80048c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80048c8:	f1b8 0f10 	cmp.w	r8, #16
 80048cc:	dc02      	bgt.n	80048d4 <__ieee754_rem_pio2+0x1d4>
 80048ce:	e9ca 0100 	strd	r0, r1, [sl]
 80048d2:	e039      	b.n	8004948 <__ieee754_rem_pio2+0x248>
 80048d4:	a34e      	add	r3, pc, #312	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x310>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	ec51 0b18 	vmov	r0, r1, d8
 80048de:	f7fb fea3 	bl	8000628 <__aeabi_dmul>
 80048e2:	4604      	mov	r4, r0
 80048e4:	460d      	mov	r5, r1
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4630      	mov	r0, r6
 80048ec:	4639      	mov	r1, r7
 80048ee:	f7fb fce3 	bl	80002b8 <__aeabi_dsub>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4680      	mov	r8, r0
 80048f8:	4689      	mov	r9, r1
 80048fa:	4630      	mov	r0, r6
 80048fc:	4639      	mov	r1, r7
 80048fe:	f7fb fcdb 	bl	80002b8 <__aeabi_dsub>
 8004902:	4622      	mov	r2, r4
 8004904:	462b      	mov	r3, r5
 8004906:	f7fb fcd7 	bl	80002b8 <__aeabi_dsub>
 800490a:	a343      	add	r3, pc, #268	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x318>)
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	4604      	mov	r4, r0
 8004912:	460d      	mov	r5, r1
 8004914:	ec51 0b18 	vmov	r0, r1, d8
 8004918:	f7fb fe86 	bl	8000628 <__aeabi_dmul>
 800491c:	4622      	mov	r2, r4
 800491e:	462b      	mov	r3, r5
 8004920:	f7fb fcca 	bl	80002b8 <__aeabi_dsub>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4604      	mov	r4, r0
 800492a:	460d      	mov	r5, r1
 800492c:	4640      	mov	r0, r8
 800492e:	4649      	mov	r1, r9
 8004930:	f7fb fcc2 	bl	80002b8 <__aeabi_dsub>
 8004934:	9a03      	ldr	r2, [sp, #12]
 8004936:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b31      	cmp	r3, #49	; 0x31
 800493e:	dc24      	bgt.n	800498a <__ieee754_rem_pio2+0x28a>
 8004940:	e9ca 0100 	strd	r0, r1, [sl]
 8004944:	4646      	mov	r6, r8
 8004946:	464f      	mov	r7, r9
 8004948:	e9da 8900 	ldrd	r8, r9, [sl]
 800494c:	4630      	mov	r0, r6
 800494e:	4642      	mov	r2, r8
 8004950:	464b      	mov	r3, r9
 8004952:	4639      	mov	r1, r7
 8004954:	f7fb fcb0 	bl	80002b8 <__aeabi_dsub>
 8004958:	462b      	mov	r3, r5
 800495a:	4622      	mov	r2, r4
 800495c:	f7fb fcac 	bl	80002b8 <__aeabi_dsub>
 8004960:	9b02      	ldr	r3, [sp, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004968:	f6bf af0a 	bge.w	8004780 <__ieee754_rem_pio2+0x80>
 800496c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004970:	f8ca 3004 	str.w	r3, [sl, #4]
 8004974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004978:	f8ca 8000 	str.w	r8, [sl]
 800497c:	f8ca 0008 	str.w	r0, [sl, #8]
 8004980:	f8ca 300c 	str.w	r3, [sl, #12]
 8004984:	f1cb 0b00 	rsb	fp, fp, #0
 8004988:	e6fa      	b.n	8004780 <__ieee754_rem_pio2+0x80>
 800498a:	a327      	add	r3, pc, #156	; (adr r3, 8004a28 <__ieee754_rem_pio2+0x328>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	ec51 0b18 	vmov	r0, r1, d8
 8004994:	f7fb fe48 	bl	8000628 <__aeabi_dmul>
 8004998:	4604      	mov	r4, r0
 800499a:	460d      	mov	r5, r1
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4640      	mov	r0, r8
 80049a2:	4649      	mov	r1, r9
 80049a4:	f7fb fc88 	bl	80002b8 <__aeabi_dsub>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4606      	mov	r6, r0
 80049ae:	460f      	mov	r7, r1
 80049b0:	4640      	mov	r0, r8
 80049b2:	4649      	mov	r1, r9
 80049b4:	f7fb fc80 	bl	80002b8 <__aeabi_dsub>
 80049b8:	4622      	mov	r2, r4
 80049ba:	462b      	mov	r3, r5
 80049bc:	f7fb fc7c 	bl	80002b8 <__aeabi_dsub>
 80049c0:	a31b      	add	r3, pc, #108	; (adr r3, 8004a30 <__ieee754_rem_pio2+0x330>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	4604      	mov	r4, r0
 80049c8:	460d      	mov	r5, r1
 80049ca:	ec51 0b18 	vmov	r0, r1, d8
 80049ce:	f7fb fe2b 	bl	8000628 <__aeabi_dmul>
 80049d2:	4622      	mov	r2, r4
 80049d4:	462b      	mov	r3, r5
 80049d6:	f7fb fc6f 	bl	80002b8 <__aeabi_dsub>
 80049da:	4604      	mov	r4, r0
 80049dc:	460d      	mov	r5, r1
 80049de:	e75f      	b.n	80048a0 <__ieee754_rem_pio2+0x1a0>
 80049e0:	4b1b      	ldr	r3, [pc, #108]	; (8004a50 <__ieee754_rem_pio2+0x350>)
 80049e2:	4598      	cmp	r8, r3
 80049e4:	dd36      	ble.n	8004a54 <__ieee754_rem_pio2+0x354>
 80049e6:	ee10 2a10 	vmov	r2, s0
 80049ea:	462b      	mov	r3, r5
 80049ec:	4620      	mov	r0, r4
 80049ee:	4629      	mov	r1, r5
 80049f0:	f7fb fc62 	bl	80002b8 <__aeabi_dsub>
 80049f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80049f8:	e9ca 0100 	strd	r0, r1, [sl]
 80049fc:	e694      	b.n	8004728 <__ieee754_rem_pio2+0x28>
 80049fe:	bf00      	nop
 8004a00:	54400000 	.word	0x54400000
 8004a04:	3ff921fb 	.word	0x3ff921fb
 8004a08:	1a626331 	.word	0x1a626331
 8004a0c:	3dd0b461 	.word	0x3dd0b461
 8004a10:	1a600000 	.word	0x1a600000
 8004a14:	3dd0b461 	.word	0x3dd0b461
 8004a18:	2e037073 	.word	0x2e037073
 8004a1c:	3ba3198a 	.word	0x3ba3198a
 8004a20:	6dc9c883 	.word	0x6dc9c883
 8004a24:	3fe45f30 	.word	0x3fe45f30
 8004a28:	2e000000 	.word	0x2e000000
 8004a2c:	3ba3198a 	.word	0x3ba3198a
 8004a30:	252049c1 	.word	0x252049c1
 8004a34:	397b839a 	.word	0x397b839a
 8004a38:	3fe921fb 	.word	0x3fe921fb
 8004a3c:	4002d97b 	.word	0x4002d97b
 8004a40:	3ff921fb 	.word	0x3ff921fb
 8004a44:	413921fb 	.word	0x413921fb
 8004a48:	3fe00000 	.word	0x3fe00000
 8004a4c:	080069bc 	.word	0x080069bc
 8004a50:	7fefffff 	.word	0x7fefffff
 8004a54:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004a58:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004a5c:	ee10 0a10 	vmov	r0, s0
 8004a60:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004a64:	ee10 6a10 	vmov	r6, s0
 8004a68:	460f      	mov	r7, r1
 8004a6a:	f7fc f877 	bl	8000b5c <__aeabi_d2iz>
 8004a6e:	f7fb fd71 	bl	8000554 <__aeabi_i2d>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4630      	mov	r0, r6
 8004a78:	4639      	mov	r1, r7
 8004a7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a7e:	f7fb fc1b 	bl	80002b8 <__aeabi_dsub>
 8004a82:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <__ieee754_rem_pio2+0x410>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	f7fb fdcf 	bl	8000628 <__aeabi_dmul>
 8004a8a:	460f      	mov	r7, r1
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	f7fc f865 	bl	8000b5c <__aeabi_d2iz>
 8004a92:	f7fb fd5f 	bl	8000554 <__aeabi_i2d>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	4639      	mov	r1, r7
 8004a9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004aa2:	f7fb fc09 	bl	80002b8 <__aeabi_dsub>
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <__ieee754_rem_pio2+0x410>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f7fb fdbd 	bl	8000628 <__aeabi_dmul>
 8004aae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ab2:	ad04      	add	r5, sp, #16
 8004ab4:	f04f 0803 	mov.w	r8, #3
 8004ab8:	46a9      	mov	r9, r5
 8004aba:	2600      	movs	r6, #0
 8004abc:	2700      	movs	r7, #0
 8004abe:	4632      	mov	r2, r6
 8004ac0:	463b      	mov	r3, r7
 8004ac2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004ac6:	46c3      	mov	fp, r8
 8004ac8:	3d08      	subs	r5, #8
 8004aca:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ace:	f7fc f813 	bl	8000af8 <__aeabi_dcmpeq>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d1f3      	bne.n	8004abe <__ieee754_rem_pio2+0x3be>
 8004ad6:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <__ieee754_rem_pio2+0x414>)
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	2302      	movs	r3, #2
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4622      	mov	r2, r4
 8004ae0:	465b      	mov	r3, fp
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	4648      	mov	r0, r9
 8004ae6:	f000 f8df 	bl	8004ca8 <__kernel_rem_pio2>
 8004aea:	9b02      	ldr	r3, [sp, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	4683      	mov	fp, r0
 8004af0:	f6bf ae46 	bge.w	8004780 <__ieee754_rem_pio2+0x80>
 8004af4:	e9da 2100 	ldrd	r2, r1, [sl]
 8004af8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004afc:	e9ca 2300 	strd	r2, r3, [sl]
 8004b00:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004b04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b08:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004b0c:	e73a      	b.n	8004984 <__ieee754_rem_pio2+0x284>
 8004b0e:	bf00      	nop
 8004b10:	41700000 	.word	0x41700000
 8004b14:	08006a3c 	.word	0x08006a3c

08004b18 <__kernel_cos>:
 8004b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	ec57 6b10 	vmov	r6, r7, d0
 8004b20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004b24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004b28:	ed8d 1b00 	vstr	d1, [sp]
 8004b2c:	da07      	bge.n	8004b3e <__kernel_cos+0x26>
 8004b2e:	ee10 0a10 	vmov	r0, s0
 8004b32:	4639      	mov	r1, r7
 8004b34:	f7fc f812 	bl	8000b5c <__aeabi_d2iz>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	f000 8088 	beq.w	8004c4e <__kernel_cos+0x136>
 8004b3e:	4632      	mov	r2, r6
 8004b40:	463b      	mov	r3, r7
 8004b42:	4630      	mov	r0, r6
 8004b44:	4639      	mov	r1, r7
 8004b46:	f7fb fd6f 	bl	8000628 <__aeabi_dmul>
 8004b4a:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <__kernel_cos+0x178>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	4604      	mov	r4, r0
 8004b50:	460d      	mov	r5, r1
 8004b52:	f7fb fd69 	bl	8000628 <__aeabi_dmul>
 8004b56:	a340      	add	r3, pc, #256	; (adr r3, 8004c58 <__kernel_cos+0x140>)
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	4682      	mov	sl, r0
 8004b5e:	468b      	mov	fp, r1
 8004b60:	4620      	mov	r0, r4
 8004b62:	4629      	mov	r1, r5
 8004b64:	f7fb fd60 	bl	8000628 <__aeabi_dmul>
 8004b68:	a33d      	add	r3, pc, #244	; (adr r3, 8004c60 <__kernel_cos+0x148>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f7fb fba5 	bl	80002bc <__adddf3>
 8004b72:	4622      	mov	r2, r4
 8004b74:	462b      	mov	r3, r5
 8004b76:	f7fb fd57 	bl	8000628 <__aeabi_dmul>
 8004b7a:	a33b      	add	r3, pc, #236	; (adr r3, 8004c68 <__kernel_cos+0x150>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fb9a 	bl	80002b8 <__aeabi_dsub>
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	f7fb fd4e 	bl	8000628 <__aeabi_dmul>
 8004b8c:	a338      	add	r3, pc, #224	; (adr r3, 8004c70 <__kernel_cos+0x158>)
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f7fb fb93 	bl	80002bc <__adddf3>
 8004b96:	4622      	mov	r2, r4
 8004b98:	462b      	mov	r3, r5
 8004b9a:	f7fb fd45 	bl	8000628 <__aeabi_dmul>
 8004b9e:	a336      	add	r3, pc, #216	; (adr r3, 8004c78 <__kernel_cos+0x160>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f7fb fb88 	bl	80002b8 <__aeabi_dsub>
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	f7fb fd3c 	bl	8000628 <__aeabi_dmul>
 8004bb0:	a333      	add	r3, pc, #204	; (adr r3, 8004c80 <__kernel_cos+0x168>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fb81 	bl	80002bc <__adddf3>
 8004bba:	4622      	mov	r2, r4
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	f7fb fd33 	bl	8000628 <__aeabi_dmul>
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	462b      	mov	r3, r5
 8004bc6:	f7fb fd2f 	bl	8000628 <__aeabi_dmul>
 8004bca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bce:	4604      	mov	r4, r0
 8004bd0:	460d      	mov	r5, r1
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	f7fb fd27 	bl	8000628 <__aeabi_dmul>
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4629      	mov	r1, r5
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7fb fb69 	bl	80002b8 <__aeabi_dsub>
 8004be6:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <__kernel_cos+0x17c>)
 8004be8:	4598      	cmp	r8, r3
 8004bea:	4606      	mov	r6, r0
 8004bec:	460f      	mov	r7, r1
 8004bee:	dc10      	bgt.n	8004c12 <__kernel_cos+0xfa>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4650      	mov	r0, sl
 8004bf6:	4659      	mov	r1, fp
 8004bf8:	f7fb fb5e 	bl	80002b8 <__aeabi_dsub>
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4926      	ldr	r1, [pc, #152]	; (8004c98 <__kernel_cos+0x180>)
 8004c00:	4602      	mov	r2, r0
 8004c02:	2000      	movs	r0, #0
 8004c04:	f7fb fb58 	bl	80002b8 <__aeabi_dsub>
 8004c08:	ec41 0b10 	vmov	d0, r0, r1
 8004c0c:	b003      	add	sp, #12
 8004c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c12:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <__kernel_cos+0x184>)
 8004c14:	4920      	ldr	r1, [pc, #128]	; (8004c98 <__kernel_cos+0x180>)
 8004c16:	4598      	cmp	r8, r3
 8004c18:	bfcc      	ite	gt
 8004c1a:	4d21      	ldrgt	r5, [pc, #132]	; (8004ca0 <__kernel_cos+0x188>)
 8004c1c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004c20:	2400      	movs	r4, #0
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	2000      	movs	r0, #0
 8004c28:	f7fb fb46 	bl	80002b8 <__aeabi_dsub>
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	4680      	mov	r8, r0
 8004c30:	4689      	mov	r9, r1
 8004c32:	462b      	mov	r3, r5
 8004c34:	4650      	mov	r0, sl
 8004c36:	4659      	mov	r1, fp
 8004c38:	f7fb fb3e 	bl	80002b8 <__aeabi_dsub>
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	463b      	mov	r3, r7
 8004c40:	f7fb fb3a 	bl	80002b8 <__aeabi_dsub>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4640      	mov	r0, r8
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	e7da      	b.n	8004c04 <__kernel_cos+0xec>
 8004c4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004c88 <__kernel_cos+0x170>
 8004c52:	e7db      	b.n	8004c0c <__kernel_cos+0xf4>
 8004c54:	f3af 8000 	nop.w
 8004c58:	be8838d4 	.word	0xbe8838d4
 8004c5c:	bda8fae9 	.word	0xbda8fae9
 8004c60:	bdb4b1c4 	.word	0xbdb4b1c4
 8004c64:	3e21ee9e 	.word	0x3e21ee9e
 8004c68:	809c52ad 	.word	0x809c52ad
 8004c6c:	3e927e4f 	.word	0x3e927e4f
 8004c70:	19cb1590 	.word	0x19cb1590
 8004c74:	3efa01a0 	.word	0x3efa01a0
 8004c78:	16c15177 	.word	0x16c15177
 8004c7c:	3f56c16c 	.word	0x3f56c16c
 8004c80:	5555554c 	.word	0x5555554c
 8004c84:	3fa55555 	.word	0x3fa55555
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	3ff00000 	.word	0x3ff00000
 8004c90:	3fe00000 	.word	0x3fe00000
 8004c94:	3fd33332 	.word	0x3fd33332
 8004c98:	3ff00000 	.word	0x3ff00000
 8004c9c:	3fe90000 	.word	0x3fe90000
 8004ca0:	3fd20000 	.word	0x3fd20000
 8004ca4:	00000000 	.word	0x00000000

08004ca8 <__kernel_rem_pio2>:
 8004ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	ed2d 8b02 	vpush	{d8}
 8004cb0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004cb4:	f112 0f14 	cmn.w	r2, #20
 8004cb8:	9308      	str	r3, [sp, #32]
 8004cba:	9101      	str	r1, [sp, #4]
 8004cbc:	4bc4      	ldr	r3, [pc, #784]	; (8004fd0 <__kernel_rem_pio2+0x328>)
 8004cbe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004cc0:	900b      	str	r0, [sp, #44]	; 0x2c
 8004cc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004cc6:	9302      	str	r3, [sp, #8]
 8004cc8:	9b08      	ldr	r3, [sp, #32]
 8004cca:	f103 33ff 	add.w	r3, r3, #4294967295
 8004cce:	bfa8      	it	ge
 8004cd0:	1ed4      	subge	r4, r2, #3
 8004cd2:	9306      	str	r3, [sp, #24]
 8004cd4:	bfb2      	itee	lt
 8004cd6:	2400      	movlt	r4, #0
 8004cd8:	2318      	movge	r3, #24
 8004cda:	fb94 f4f3 	sdivge	r4, r4, r3
 8004cde:	f06f 0317 	mvn.w	r3, #23
 8004ce2:	fb04 3303 	mla	r3, r4, r3, r3
 8004ce6:	eb03 0a02 	add.w	sl, r3, r2
 8004cea:	9b02      	ldr	r3, [sp, #8]
 8004cec:	9a06      	ldr	r2, [sp, #24]
 8004cee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004fc0 <__kernel_rem_pio2+0x318>
 8004cf2:	eb03 0802 	add.w	r8, r3, r2
 8004cf6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004cf8:	1aa7      	subs	r7, r4, r2
 8004cfa:	ae22      	add	r6, sp, #136	; 0x88
 8004cfc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004d00:	2500      	movs	r5, #0
 8004d02:	4545      	cmp	r5, r8
 8004d04:	dd13      	ble.n	8004d2e <__kernel_rem_pio2+0x86>
 8004d06:	9b08      	ldr	r3, [sp, #32]
 8004d08:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8004fc0 <__kernel_rem_pio2+0x318>
 8004d0c:	aa22      	add	r2, sp, #136	; 0x88
 8004d0e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004d12:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	9b02      	ldr	r3, [sp, #8]
 8004d1c:	4598      	cmp	r8, r3
 8004d1e:	dc2f      	bgt.n	8004d80 <__kernel_rem_pio2+0xd8>
 8004d20:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004d24:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004d28:	462f      	mov	r7, r5
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	e01b      	b.n	8004d66 <__kernel_rem_pio2+0xbe>
 8004d2e:	42ef      	cmn	r7, r5
 8004d30:	d407      	bmi.n	8004d42 <__kernel_rem_pio2+0x9a>
 8004d32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004d36:	f7fb fc0d 	bl	8000554 <__aeabi_i2d>
 8004d3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004d3e:	3501      	adds	r5, #1
 8004d40:	e7df      	b.n	8004d02 <__kernel_rem_pio2+0x5a>
 8004d42:	ec51 0b18 	vmov	r0, r1, d8
 8004d46:	e7f8      	b.n	8004d3a <__kernel_rem_pio2+0x92>
 8004d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004d50:	f7fb fc6a 	bl	8000628 <__aeabi_dmul>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d5c:	f7fb faae 	bl	80002bc <__adddf3>
 8004d60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d64:	3601      	adds	r6, #1
 8004d66:	9b06      	ldr	r3, [sp, #24]
 8004d68:	429e      	cmp	r6, r3
 8004d6a:	f1a7 0708 	sub.w	r7, r7, #8
 8004d6e:	ddeb      	ble.n	8004d48 <__kernel_rem_pio2+0xa0>
 8004d70:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004d74:	f108 0801 	add.w	r8, r8, #1
 8004d78:	ecab 7b02 	vstmia	fp!, {d7}
 8004d7c:	3508      	adds	r5, #8
 8004d7e:	e7cc      	b.n	8004d1a <__kernel_rem_pio2+0x72>
 8004d80:	9b02      	ldr	r3, [sp, #8]
 8004d82:	aa0e      	add	r2, sp, #56	; 0x38
 8004d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004d88:	930d      	str	r3, [sp, #52]	; 0x34
 8004d8a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004d8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004d90:	9c02      	ldr	r4, [sp, #8]
 8004d92:	930c      	str	r3, [sp, #48]	; 0x30
 8004d94:	00e3      	lsls	r3, r4, #3
 8004d96:	930a      	str	r3, [sp, #40]	; 0x28
 8004d98:	ab9a      	add	r3, sp, #616	; 0x268
 8004d9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d9e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004da2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004da6:	ab72      	add	r3, sp, #456	; 0x1c8
 8004da8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004dac:	46c3      	mov	fp, r8
 8004dae:	46a1      	mov	r9, r4
 8004db0:	f1b9 0f00 	cmp.w	r9, #0
 8004db4:	f1a5 0508 	sub.w	r5, r5, #8
 8004db8:	dc77      	bgt.n	8004eaa <__kernel_rem_pio2+0x202>
 8004dba:	ec47 6b10 	vmov	d0, r6, r7
 8004dbe:	4650      	mov	r0, sl
 8004dc0:	f000 fc0a 	bl	80055d8 <scalbn>
 8004dc4:	ec57 6b10 	vmov	r6, r7, d0
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004dce:	ee10 0a10 	vmov	r0, s0
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	f7fb fc28 	bl	8000628 <__aeabi_dmul>
 8004dd8:	ec41 0b10 	vmov	d0, r0, r1
 8004ddc:	f000 fb7c 	bl	80054d8 <floor>
 8004de0:	4b7c      	ldr	r3, [pc, #496]	; (8004fd4 <__kernel_rem_pio2+0x32c>)
 8004de2:	ec51 0b10 	vmov	r0, r1, d0
 8004de6:	2200      	movs	r2, #0
 8004de8:	f7fb fc1e 	bl	8000628 <__aeabi_dmul>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4630      	mov	r0, r6
 8004df2:	4639      	mov	r1, r7
 8004df4:	f7fb fa60 	bl	80002b8 <__aeabi_dsub>
 8004df8:	460f      	mov	r7, r1
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	f7fb feae 	bl	8000b5c <__aeabi_d2iz>
 8004e00:	9004      	str	r0, [sp, #16]
 8004e02:	f7fb fba7 	bl	8000554 <__aeabi_i2d>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	f7fb fa53 	bl	80002b8 <__aeabi_dsub>
 8004e12:	f1ba 0f00 	cmp.w	sl, #0
 8004e16:	4606      	mov	r6, r0
 8004e18:	460f      	mov	r7, r1
 8004e1a:	dd6d      	ble.n	8004ef8 <__kernel_rem_pio2+0x250>
 8004e1c:	1e62      	subs	r2, r4, #1
 8004e1e:	ab0e      	add	r3, sp, #56	; 0x38
 8004e20:	9d04      	ldr	r5, [sp, #16]
 8004e22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004e26:	f1ca 0118 	rsb	r1, sl, #24
 8004e2a:	fa40 f301 	asr.w	r3, r0, r1
 8004e2e:	441d      	add	r5, r3
 8004e30:	408b      	lsls	r3, r1
 8004e32:	1ac0      	subs	r0, r0, r3
 8004e34:	ab0e      	add	r3, sp, #56	; 0x38
 8004e36:	9504      	str	r5, [sp, #16]
 8004e38:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004e3c:	f1ca 0317 	rsb	r3, sl, #23
 8004e40:	fa40 fb03 	asr.w	fp, r0, r3
 8004e44:	f1bb 0f00 	cmp.w	fp, #0
 8004e48:	dd65      	ble.n	8004f16 <__kernel_rem_pio2+0x26e>
 8004e4a:	9b04      	ldr	r3, [sp, #16]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	3301      	adds	r3, #1
 8004e50:	9304      	str	r3, [sp, #16]
 8004e52:	4615      	mov	r5, r2
 8004e54:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004e58:	4294      	cmp	r4, r2
 8004e5a:	f300 809c 	bgt.w	8004f96 <__kernel_rem_pio2+0x2ee>
 8004e5e:	f1ba 0f00 	cmp.w	sl, #0
 8004e62:	dd07      	ble.n	8004e74 <__kernel_rem_pio2+0x1cc>
 8004e64:	f1ba 0f01 	cmp.w	sl, #1
 8004e68:	f000 80c0 	beq.w	8004fec <__kernel_rem_pio2+0x344>
 8004e6c:	f1ba 0f02 	cmp.w	sl, #2
 8004e70:	f000 80c6 	beq.w	8005000 <__kernel_rem_pio2+0x358>
 8004e74:	f1bb 0f02 	cmp.w	fp, #2
 8004e78:	d14d      	bne.n	8004f16 <__kernel_rem_pio2+0x26e>
 8004e7a:	4632      	mov	r2, r6
 8004e7c:	463b      	mov	r3, r7
 8004e7e:	4956      	ldr	r1, [pc, #344]	; (8004fd8 <__kernel_rem_pio2+0x330>)
 8004e80:	2000      	movs	r0, #0
 8004e82:	f7fb fa19 	bl	80002b8 <__aeabi_dsub>
 8004e86:	4606      	mov	r6, r0
 8004e88:	460f      	mov	r7, r1
 8004e8a:	2d00      	cmp	r5, #0
 8004e8c:	d043      	beq.n	8004f16 <__kernel_rem_pio2+0x26e>
 8004e8e:	4650      	mov	r0, sl
 8004e90:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004fc8 <__kernel_rem_pio2+0x320>
 8004e94:	f000 fba0 	bl	80055d8 <scalbn>
 8004e98:	4630      	mov	r0, r6
 8004e9a:	4639      	mov	r1, r7
 8004e9c:	ec53 2b10 	vmov	r2, r3, d0
 8004ea0:	f7fb fa0a 	bl	80002b8 <__aeabi_dsub>
 8004ea4:	4606      	mov	r6, r0
 8004ea6:	460f      	mov	r7, r1
 8004ea8:	e035      	b.n	8004f16 <__kernel_rem_pio2+0x26e>
 8004eaa:	4b4c      	ldr	r3, [pc, #304]	; (8004fdc <__kernel_rem_pio2+0x334>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	4630      	mov	r0, r6
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	f7fb fbb9 	bl	8000628 <__aeabi_dmul>
 8004eb6:	f7fb fe51 	bl	8000b5c <__aeabi_d2iz>
 8004eba:	f7fb fb4b 	bl	8000554 <__aeabi_i2d>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	ec43 2b18 	vmov	d8, r2, r3
 8004ec6:	4b46      	ldr	r3, [pc, #280]	; (8004fe0 <__kernel_rem_pio2+0x338>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f7fb fbad 	bl	8000628 <__aeabi_dmul>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	f7fb f9ef 	bl	80002b8 <__aeabi_dsub>
 8004eda:	f7fb fe3f 	bl	8000b5c <__aeabi_d2iz>
 8004ede:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ee2:	f84b 0b04 	str.w	r0, [fp], #4
 8004ee6:	ec51 0b18 	vmov	r0, r1, d8
 8004eea:	f7fb f9e7 	bl	80002bc <__adddf3>
 8004eee:	f109 39ff 	add.w	r9, r9, #4294967295
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	e75b      	b.n	8004db0 <__kernel_rem_pio2+0x108>
 8004ef8:	d106      	bne.n	8004f08 <__kernel_rem_pio2+0x260>
 8004efa:	1e63      	subs	r3, r4, #1
 8004efc:	aa0e      	add	r2, sp, #56	; 0x38
 8004efe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004f02:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8004f06:	e79d      	b.n	8004e44 <__kernel_rem_pio2+0x19c>
 8004f08:	4b36      	ldr	r3, [pc, #216]	; (8004fe4 <__kernel_rem_pio2+0x33c>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f7fb fe12 	bl	8000b34 <__aeabi_dcmpge>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d13d      	bne.n	8004f90 <__kernel_rem_pio2+0x2e8>
 8004f14:	4683      	mov	fp, r0
 8004f16:	2200      	movs	r2, #0
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	f7fb fdeb 	bl	8000af8 <__aeabi_dcmpeq>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	f000 80c0 	beq.w	80050a8 <__kernel_rem_pio2+0x400>
 8004f28:	1e65      	subs	r5, r4, #1
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	9902      	ldr	r1, [sp, #8]
 8004f30:	428b      	cmp	r3, r1
 8004f32:	da6c      	bge.n	800500e <__kernel_rem_pio2+0x366>
 8004f34:	2a00      	cmp	r2, #0
 8004f36:	f000 8089 	beq.w	800504c <__kernel_rem_pio2+0x3a4>
 8004f3a:	ab0e      	add	r3, sp, #56	; 0x38
 8004f3c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004f40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80ad 	beq.w	80050a4 <__kernel_rem_pio2+0x3fc>
 8004f4a:	4650      	mov	r0, sl
 8004f4c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8004fc8 <__kernel_rem_pio2+0x320>
 8004f50:	f000 fb42 	bl	80055d8 <scalbn>
 8004f54:	ab9a      	add	r3, sp, #616	; 0x268
 8004f56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004f5a:	ec57 6b10 	vmov	r6, r7, d0
 8004f5e:	00ec      	lsls	r4, r5, #3
 8004f60:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8004f64:	46aa      	mov	sl, r5
 8004f66:	f1ba 0f00 	cmp.w	sl, #0
 8004f6a:	f280 80d6 	bge.w	800511a <__kernel_rem_pio2+0x472>
 8004f6e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8004fc0 <__kernel_rem_pio2+0x318>
 8004f72:	462e      	mov	r6, r5
 8004f74:	2e00      	cmp	r6, #0
 8004f76:	f2c0 8104 	blt.w	8005182 <__kernel_rem_pio2+0x4da>
 8004f7a:	ab72      	add	r3, sp, #456	; 0x1c8
 8004f7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004f80:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004fe8 <__kernel_rem_pio2+0x340>
 8004f84:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004f88:	f04f 0800 	mov.w	r8, #0
 8004f8c:	1baf      	subs	r7, r5, r6
 8004f8e:	e0ea      	b.n	8005166 <__kernel_rem_pio2+0x4be>
 8004f90:	f04f 0b02 	mov.w	fp, #2
 8004f94:	e759      	b.n	8004e4a <__kernel_rem_pio2+0x1a2>
 8004f96:	f8d8 3000 	ldr.w	r3, [r8]
 8004f9a:	b955      	cbnz	r5, 8004fb2 <__kernel_rem_pio2+0x30a>
 8004f9c:	b123      	cbz	r3, 8004fa8 <__kernel_rem_pio2+0x300>
 8004f9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004fa2:	f8c8 3000 	str.w	r3, [r8]
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	3201      	adds	r2, #1
 8004faa:	f108 0804 	add.w	r8, r8, #4
 8004fae:	461d      	mov	r5, r3
 8004fb0:	e752      	b.n	8004e58 <__kernel_rem_pio2+0x1b0>
 8004fb2:	1acb      	subs	r3, r1, r3
 8004fb4:	f8c8 3000 	str.w	r3, [r8]
 8004fb8:	462b      	mov	r3, r5
 8004fba:	e7f5      	b.n	8004fa8 <__kernel_rem_pio2+0x300>
 8004fbc:	f3af 8000 	nop.w
	...
 8004fcc:	3ff00000 	.word	0x3ff00000
 8004fd0:	08006b88 	.word	0x08006b88
 8004fd4:	40200000 	.word	0x40200000
 8004fd8:	3ff00000 	.word	0x3ff00000
 8004fdc:	3e700000 	.word	0x3e700000
 8004fe0:	41700000 	.word	0x41700000
 8004fe4:	3fe00000 	.word	0x3fe00000
 8004fe8:	08006b48 	.word	0x08006b48
 8004fec:	1e62      	subs	r2, r4, #1
 8004fee:	ab0e      	add	r3, sp, #56	; 0x38
 8004ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004ff8:	a90e      	add	r1, sp, #56	; 0x38
 8004ffa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004ffe:	e739      	b.n	8004e74 <__kernel_rem_pio2+0x1cc>
 8005000:	1e62      	subs	r2, r4, #1
 8005002:	ab0e      	add	r3, sp, #56	; 0x38
 8005004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005008:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800500c:	e7f4      	b.n	8004ff8 <__kernel_rem_pio2+0x350>
 800500e:	a90e      	add	r1, sp, #56	; 0x38
 8005010:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005014:	3b01      	subs	r3, #1
 8005016:	430a      	orrs	r2, r1
 8005018:	e789      	b.n	8004f2e <__kernel_rem_pio2+0x286>
 800501a:	3301      	adds	r3, #1
 800501c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005020:	2900      	cmp	r1, #0
 8005022:	d0fa      	beq.n	800501a <__kernel_rem_pio2+0x372>
 8005024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005026:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800502a:	446a      	add	r2, sp
 800502c:	3a98      	subs	r2, #152	; 0x98
 800502e:	920a      	str	r2, [sp, #40]	; 0x28
 8005030:	9a08      	ldr	r2, [sp, #32]
 8005032:	18e3      	adds	r3, r4, r3
 8005034:	18a5      	adds	r5, r4, r2
 8005036:	aa22      	add	r2, sp, #136	; 0x88
 8005038:	f104 0801 	add.w	r8, r4, #1
 800503c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005040:	9304      	str	r3, [sp, #16]
 8005042:	9b04      	ldr	r3, [sp, #16]
 8005044:	4543      	cmp	r3, r8
 8005046:	da04      	bge.n	8005052 <__kernel_rem_pio2+0x3aa>
 8005048:	461c      	mov	r4, r3
 800504a:	e6a3      	b.n	8004d94 <__kernel_rem_pio2+0xec>
 800504c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800504e:	2301      	movs	r3, #1
 8005050:	e7e4      	b.n	800501c <__kernel_rem_pio2+0x374>
 8005052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005054:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005058:	f7fb fa7c 	bl	8000554 <__aeabi_i2d>
 800505c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005062:	46ab      	mov	fp, r5
 8005064:	461c      	mov	r4, r3
 8005066:	f04f 0900 	mov.w	r9, #0
 800506a:	2600      	movs	r6, #0
 800506c:	2700      	movs	r7, #0
 800506e:	9b06      	ldr	r3, [sp, #24]
 8005070:	4599      	cmp	r9, r3
 8005072:	dd06      	ble.n	8005082 <__kernel_rem_pio2+0x3da>
 8005074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005076:	e8e3 6702 	strd	r6, r7, [r3], #8
 800507a:	f108 0801 	add.w	r8, r8, #1
 800507e:	930a      	str	r3, [sp, #40]	; 0x28
 8005080:	e7df      	b.n	8005042 <__kernel_rem_pio2+0x39a>
 8005082:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005086:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800508a:	f7fb facd 	bl	8000628 <__aeabi_dmul>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4630      	mov	r0, r6
 8005094:	4639      	mov	r1, r7
 8005096:	f7fb f911 	bl	80002bc <__adddf3>
 800509a:	f109 0901 	add.w	r9, r9, #1
 800509e:	4606      	mov	r6, r0
 80050a0:	460f      	mov	r7, r1
 80050a2:	e7e4      	b.n	800506e <__kernel_rem_pio2+0x3c6>
 80050a4:	3d01      	subs	r5, #1
 80050a6:	e748      	b.n	8004f3a <__kernel_rem_pio2+0x292>
 80050a8:	ec47 6b10 	vmov	d0, r6, r7
 80050ac:	f1ca 0000 	rsb	r0, sl, #0
 80050b0:	f000 fa92 	bl	80055d8 <scalbn>
 80050b4:	ec57 6b10 	vmov	r6, r7, d0
 80050b8:	4ba0      	ldr	r3, [pc, #640]	; (800533c <__kernel_rem_pio2+0x694>)
 80050ba:	ee10 0a10 	vmov	r0, s0
 80050be:	2200      	movs	r2, #0
 80050c0:	4639      	mov	r1, r7
 80050c2:	f7fb fd37 	bl	8000b34 <__aeabi_dcmpge>
 80050c6:	b1f8      	cbz	r0, 8005108 <__kernel_rem_pio2+0x460>
 80050c8:	4b9d      	ldr	r3, [pc, #628]	; (8005340 <__kernel_rem_pio2+0x698>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	4630      	mov	r0, r6
 80050ce:	4639      	mov	r1, r7
 80050d0:	f7fb faaa 	bl	8000628 <__aeabi_dmul>
 80050d4:	f7fb fd42 	bl	8000b5c <__aeabi_d2iz>
 80050d8:	4680      	mov	r8, r0
 80050da:	f7fb fa3b 	bl	8000554 <__aeabi_i2d>
 80050de:	4b97      	ldr	r3, [pc, #604]	; (800533c <__kernel_rem_pio2+0x694>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	f7fb faa1 	bl	8000628 <__aeabi_dmul>
 80050e6:	460b      	mov	r3, r1
 80050e8:	4602      	mov	r2, r0
 80050ea:	4639      	mov	r1, r7
 80050ec:	4630      	mov	r0, r6
 80050ee:	f7fb f8e3 	bl	80002b8 <__aeabi_dsub>
 80050f2:	f7fb fd33 	bl	8000b5c <__aeabi_d2iz>
 80050f6:	1c65      	adds	r5, r4, #1
 80050f8:	ab0e      	add	r3, sp, #56	; 0x38
 80050fa:	f10a 0a18 	add.w	sl, sl, #24
 80050fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005102:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005106:	e720      	b.n	8004f4a <__kernel_rem_pio2+0x2a2>
 8005108:	4630      	mov	r0, r6
 800510a:	4639      	mov	r1, r7
 800510c:	f7fb fd26 	bl	8000b5c <__aeabi_d2iz>
 8005110:	ab0e      	add	r3, sp, #56	; 0x38
 8005112:	4625      	mov	r5, r4
 8005114:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005118:	e717      	b.n	8004f4a <__kernel_rem_pio2+0x2a2>
 800511a:	ab0e      	add	r3, sp, #56	; 0x38
 800511c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005120:	f7fb fa18 	bl	8000554 <__aeabi_i2d>
 8005124:	4632      	mov	r2, r6
 8005126:	463b      	mov	r3, r7
 8005128:	f7fb fa7e 	bl	8000628 <__aeabi_dmul>
 800512c:	4b84      	ldr	r3, [pc, #528]	; (8005340 <__kernel_rem_pio2+0x698>)
 800512e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005132:	2200      	movs	r2, #0
 8005134:	4630      	mov	r0, r6
 8005136:	4639      	mov	r1, r7
 8005138:	f7fb fa76 	bl	8000628 <__aeabi_dmul>
 800513c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005140:	4606      	mov	r6, r0
 8005142:	460f      	mov	r7, r1
 8005144:	e70f      	b.n	8004f66 <__kernel_rem_pio2+0x2be>
 8005146:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800514a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800514e:	f7fb fa6b 	bl	8000628 <__aeabi_dmul>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800515a:	f7fb f8af 	bl	80002bc <__adddf3>
 800515e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005162:	f108 0801 	add.w	r8, r8, #1
 8005166:	9b02      	ldr	r3, [sp, #8]
 8005168:	4598      	cmp	r8, r3
 800516a:	dc01      	bgt.n	8005170 <__kernel_rem_pio2+0x4c8>
 800516c:	45b8      	cmp	r8, r7
 800516e:	ddea      	ble.n	8005146 <__kernel_rem_pio2+0x49e>
 8005170:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005174:	ab4a      	add	r3, sp, #296	; 0x128
 8005176:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800517a:	ed87 7b00 	vstr	d7, [r7]
 800517e:	3e01      	subs	r6, #1
 8005180:	e6f8      	b.n	8004f74 <__kernel_rem_pio2+0x2cc>
 8005182:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005184:	2b02      	cmp	r3, #2
 8005186:	dc0b      	bgt.n	80051a0 <__kernel_rem_pio2+0x4f8>
 8005188:	2b00      	cmp	r3, #0
 800518a:	dc35      	bgt.n	80051f8 <__kernel_rem_pio2+0x550>
 800518c:	d059      	beq.n	8005242 <__kernel_rem_pio2+0x59a>
 800518e:	9b04      	ldr	r3, [sp, #16]
 8005190:	f003 0007 	and.w	r0, r3, #7
 8005194:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005198:	ecbd 8b02 	vpop	{d8}
 800519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d1f3      	bne.n	800518e <__kernel_rem_pio2+0x4e6>
 80051a6:	ab4a      	add	r3, sp, #296	; 0x128
 80051a8:	4423      	add	r3, r4
 80051aa:	9306      	str	r3, [sp, #24]
 80051ac:	461c      	mov	r4, r3
 80051ae:	469a      	mov	sl, r3
 80051b0:	9502      	str	r5, [sp, #8]
 80051b2:	9b02      	ldr	r3, [sp, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f1aa 0a08 	sub.w	sl, sl, #8
 80051ba:	dc6b      	bgt.n	8005294 <__kernel_rem_pio2+0x5ec>
 80051bc:	46aa      	mov	sl, r5
 80051be:	f1ba 0f01 	cmp.w	sl, #1
 80051c2:	f1a4 0408 	sub.w	r4, r4, #8
 80051c6:	f300 8085 	bgt.w	80052d4 <__kernel_rem_pio2+0x62c>
 80051ca:	9c06      	ldr	r4, [sp, #24]
 80051cc:	2000      	movs	r0, #0
 80051ce:	3408      	adds	r4, #8
 80051d0:	2100      	movs	r1, #0
 80051d2:	2d01      	cmp	r5, #1
 80051d4:	f300 809d 	bgt.w	8005312 <__kernel_rem_pio2+0x66a>
 80051d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80051dc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80051e0:	f1bb 0f00 	cmp.w	fp, #0
 80051e4:	f040 809b 	bne.w	800531e <__kernel_rem_pio2+0x676>
 80051e8:	9b01      	ldr	r3, [sp, #4]
 80051ea:	e9c3 5600 	strd	r5, r6, [r3]
 80051ee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80051f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80051f6:	e7ca      	b.n	800518e <__kernel_rem_pio2+0x4e6>
 80051f8:	3408      	adds	r4, #8
 80051fa:	ab4a      	add	r3, sp, #296	; 0x128
 80051fc:	441c      	add	r4, r3
 80051fe:	462e      	mov	r6, r5
 8005200:	2000      	movs	r0, #0
 8005202:	2100      	movs	r1, #0
 8005204:	2e00      	cmp	r6, #0
 8005206:	da36      	bge.n	8005276 <__kernel_rem_pio2+0x5ce>
 8005208:	f1bb 0f00 	cmp.w	fp, #0
 800520c:	d039      	beq.n	8005282 <__kernel_rem_pio2+0x5da>
 800520e:	4602      	mov	r2, r0
 8005210:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005214:	9c01      	ldr	r4, [sp, #4]
 8005216:	e9c4 2300 	strd	r2, r3, [r4]
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005222:	f7fb f849 	bl	80002b8 <__aeabi_dsub>
 8005226:	ae4c      	add	r6, sp, #304	; 0x130
 8005228:	2401      	movs	r4, #1
 800522a:	42a5      	cmp	r5, r4
 800522c:	da2c      	bge.n	8005288 <__kernel_rem_pio2+0x5e0>
 800522e:	f1bb 0f00 	cmp.w	fp, #0
 8005232:	d002      	beq.n	800523a <__kernel_rem_pio2+0x592>
 8005234:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005238:	4619      	mov	r1, r3
 800523a:	9b01      	ldr	r3, [sp, #4]
 800523c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005240:	e7a5      	b.n	800518e <__kernel_rem_pio2+0x4e6>
 8005242:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005246:	eb0d 0403 	add.w	r4, sp, r3
 800524a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800524e:	2000      	movs	r0, #0
 8005250:	2100      	movs	r1, #0
 8005252:	2d00      	cmp	r5, #0
 8005254:	da09      	bge.n	800526a <__kernel_rem_pio2+0x5c2>
 8005256:	f1bb 0f00 	cmp.w	fp, #0
 800525a:	d002      	beq.n	8005262 <__kernel_rem_pio2+0x5ba>
 800525c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005260:	4619      	mov	r1, r3
 8005262:	9b01      	ldr	r3, [sp, #4]
 8005264:	e9c3 0100 	strd	r0, r1, [r3]
 8005268:	e791      	b.n	800518e <__kernel_rem_pio2+0x4e6>
 800526a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800526e:	f7fb f825 	bl	80002bc <__adddf3>
 8005272:	3d01      	subs	r5, #1
 8005274:	e7ed      	b.n	8005252 <__kernel_rem_pio2+0x5aa>
 8005276:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800527a:	f7fb f81f 	bl	80002bc <__adddf3>
 800527e:	3e01      	subs	r6, #1
 8005280:	e7c0      	b.n	8005204 <__kernel_rem_pio2+0x55c>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	e7c5      	b.n	8005214 <__kernel_rem_pio2+0x56c>
 8005288:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800528c:	f7fb f816 	bl	80002bc <__adddf3>
 8005290:	3401      	adds	r4, #1
 8005292:	e7ca      	b.n	800522a <__kernel_rem_pio2+0x582>
 8005294:	e9da 8900 	ldrd	r8, r9, [sl]
 8005298:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800529c:	9b02      	ldr	r3, [sp, #8]
 800529e:	3b01      	subs	r3, #1
 80052a0:	9302      	str	r3, [sp, #8]
 80052a2:	4632      	mov	r2, r6
 80052a4:	463b      	mov	r3, r7
 80052a6:	4640      	mov	r0, r8
 80052a8:	4649      	mov	r1, r9
 80052aa:	f7fb f807 	bl	80002bc <__adddf3>
 80052ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4640      	mov	r0, r8
 80052b8:	4649      	mov	r1, r9
 80052ba:	f7fa fffd 	bl	80002b8 <__aeabi_dsub>
 80052be:	4632      	mov	r2, r6
 80052c0:	463b      	mov	r3, r7
 80052c2:	f7fa fffb 	bl	80002bc <__adddf3>
 80052c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80052ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80052ce:	ed8a 7b00 	vstr	d7, [sl]
 80052d2:	e76e      	b.n	80051b2 <__kernel_rem_pio2+0x50a>
 80052d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80052d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80052dc:	4640      	mov	r0, r8
 80052de:	4632      	mov	r2, r6
 80052e0:	463b      	mov	r3, r7
 80052e2:	4649      	mov	r1, r9
 80052e4:	f7fa ffea 	bl	80002bc <__adddf3>
 80052e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4640      	mov	r0, r8
 80052f2:	4649      	mov	r1, r9
 80052f4:	f7fa ffe0 	bl	80002b8 <__aeabi_dsub>
 80052f8:	4632      	mov	r2, r6
 80052fa:	463b      	mov	r3, r7
 80052fc:	f7fa ffde 	bl	80002bc <__adddf3>
 8005300:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005304:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005308:	ed84 7b00 	vstr	d7, [r4]
 800530c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005310:	e755      	b.n	80051be <__kernel_rem_pio2+0x516>
 8005312:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005316:	f7fa ffd1 	bl	80002bc <__adddf3>
 800531a:	3d01      	subs	r5, #1
 800531c:	e759      	b.n	80051d2 <__kernel_rem_pio2+0x52a>
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	9a01      	ldr	r2, [sp, #4]
 8005322:	601d      	str	r5, [r3, #0]
 8005324:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005328:	605c      	str	r4, [r3, #4]
 800532a:	609f      	str	r7, [r3, #8]
 800532c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005330:	60d3      	str	r3, [r2, #12]
 8005332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005336:	6110      	str	r0, [r2, #16]
 8005338:	6153      	str	r3, [r2, #20]
 800533a:	e728      	b.n	800518e <__kernel_rem_pio2+0x4e6>
 800533c:	41700000 	.word	0x41700000
 8005340:	3e700000 	.word	0x3e700000
 8005344:	00000000 	.word	0x00000000

08005348 <__kernel_sin>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	ed2d 8b04 	vpush	{d8-d9}
 8005350:	eeb0 8a41 	vmov.f32	s16, s2
 8005354:	eef0 8a61 	vmov.f32	s17, s3
 8005358:	ec55 4b10 	vmov	r4, r5, d0
 800535c:	b083      	sub	sp, #12
 800535e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005362:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005366:	9001      	str	r0, [sp, #4]
 8005368:	da06      	bge.n	8005378 <__kernel_sin+0x30>
 800536a:	ee10 0a10 	vmov	r0, s0
 800536e:	4629      	mov	r1, r5
 8005370:	f7fb fbf4 	bl	8000b5c <__aeabi_d2iz>
 8005374:	2800      	cmp	r0, #0
 8005376:	d051      	beq.n	800541c <__kernel_sin+0xd4>
 8005378:	4622      	mov	r2, r4
 800537a:	462b      	mov	r3, r5
 800537c:	4620      	mov	r0, r4
 800537e:	4629      	mov	r1, r5
 8005380:	f7fb f952 	bl	8000628 <__aeabi_dmul>
 8005384:	4682      	mov	sl, r0
 8005386:	468b      	mov	fp, r1
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4620      	mov	r0, r4
 800538e:	4629      	mov	r1, r5
 8005390:	f7fb f94a 	bl	8000628 <__aeabi_dmul>
 8005394:	a341      	add	r3, pc, #260	; (adr r3, 800549c <__kernel_sin+0x154>)
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	4680      	mov	r8, r0
 800539c:	4689      	mov	r9, r1
 800539e:	4650      	mov	r0, sl
 80053a0:	4659      	mov	r1, fp
 80053a2:	f7fb f941 	bl	8000628 <__aeabi_dmul>
 80053a6:	a33f      	add	r3, pc, #252	; (adr r3, 80054a4 <__kernel_sin+0x15c>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	f7fa ff84 	bl	80002b8 <__aeabi_dsub>
 80053b0:	4652      	mov	r2, sl
 80053b2:	465b      	mov	r3, fp
 80053b4:	f7fb f938 	bl	8000628 <__aeabi_dmul>
 80053b8:	a33c      	add	r3, pc, #240	; (adr r3, 80054ac <__kernel_sin+0x164>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fa ff7d 	bl	80002bc <__adddf3>
 80053c2:	4652      	mov	r2, sl
 80053c4:	465b      	mov	r3, fp
 80053c6:	f7fb f92f 	bl	8000628 <__aeabi_dmul>
 80053ca:	a33a      	add	r3, pc, #232	; (adr r3, 80054b4 <__kernel_sin+0x16c>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fa ff72 	bl	80002b8 <__aeabi_dsub>
 80053d4:	4652      	mov	r2, sl
 80053d6:	465b      	mov	r3, fp
 80053d8:	f7fb f926 	bl	8000628 <__aeabi_dmul>
 80053dc:	a337      	add	r3, pc, #220	; (adr r3, 80054bc <__kernel_sin+0x174>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f7fa ff6b 	bl	80002bc <__adddf3>
 80053e6:	9b01      	ldr	r3, [sp, #4]
 80053e8:	4606      	mov	r6, r0
 80053ea:	460f      	mov	r7, r1
 80053ec:	b9eb      	cbnz	r3, 800542a <__kernel_sin+0xe2>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4650      	mov	r0, sl
 80053f4:	4659      	mov	r1, fp
 80053f6:	f7fb f917 	bl	8000628 <__aeabi_dmul>
 80053fa:	a325      	add	r3, pc, #148	; (adr r3, 8005490 <__kernel_sin+0x148>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f7fa ff5a 	bl	80002b8 <__aeabi_dsub>
 8005404:	4642      	mov	r2, r8
 8005406:	464b      	mov	r3, r9
 8005408:	f7fb f90e 	bl	8000628 <__aeabi_dmul>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4620      	mov	r0, r4
 8005412:	4629      	mov	r1, r5
 8005414:	f7fa ff52 	bl	80002bc <__adddf3>
 8005418:	4604      	mov	r4, r0
 800541a:	460d      	mov	r5, r1
 800541c:	ec45 4b10 	vmov	d0, r4, r5
 8005420:	b003      	add	sp, #12
 8005422:	ecbd 8b04 	vpop	{d8-d9}
 8005426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542a:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <__kernel_sin+0x150>)
 800542c:	ec51 0b18 	vmov	r0, r1, d8
 8005430:	2200      	movs	r2, #0
 8005432:	f7fb f8f9 	bl	8000628 <__aeabi_dmul>
 8005436:	4632      	mov	r2, r6
 8005438:	ec41 0b19 	vmov	d9, r0, r1
 800543c:	463b      	mov	r3, r7
 800543e:	4640      	mov	r0, r8
 8005440:	4649      	mov	r1, r9
 8005442:	f7fb f8f1 	bl	8000628 <__aeabi_dmul>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	ec51 0b19 	vmov	r0, r1, d9
 800544e:	f7fa ff33 	bl	80002b8 <__aeabi_dsub>
 8005452:	4652      	mov	r2, sl
 8005454:	465b      	mov	r3, fp
 8005456:	f7fb f8e7 	bl	8000628 <__aeabi_dmul>
 800545a:	ec53 2b18 	vmov	r2, r3, d8
 800545e:	f7fa ff2b 	bl	80002b8 <__aeabi_dsub>
 8005462:	a30b      	add	r3, pc, #44	; (adr r3, 8005490 <__kernel_sin+0x148>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	4606      	mov	r6, r0
 800546a:	460f      	mov	r7, r1
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fb f8da 	bl	8000628 <__aeabi_dmul>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4630      	mov	r0, r6
 800547a:	4639      	mov	r1, r7
 800547c:	f7fa ff1e 	bl	80002bc <__adddf3>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4620      	mov	r0, r4
 8005486:	4629      	mov	r1, r5
 8005488:	f7fa ff16 	bl	80002b8 <__aeabi_dsub>
 800548c:	e7c4      	b.n	8005418 <__kernel_sin+0xd0>
 800548e:	bf00      	nop
 8005490:	55555549 	.word	0x55555549
 8005494:	3fc55555 	.word	0x3fc55555
 8005498:	3fe00000 	.word	0x3fe00000
 800549c:	5acfd57c 	.word	0x5acfd57c
 80054a0:	3de5d93a 	.word	0x3de5d93a
 80054a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80054a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80054ac:	57b1fe7d 	.word	0x57b1fe7d
 80054b0:	3ec71de3 	.word	0x3ec71de3
 80054b4:	19c161d5 	.word	0x19c161d5
 80054b8:	3f2a01a0 	.word	0x3f2a01a0
 80054bc:	1110f8a6 	.word	0x1110f8a6
 80054c0:	3f811111 	.word	0x3f811111

080054c4 <fabs>:
 80054c4:	ec51 0b10 	vmov	r0, r1, d0
 80054c8:	ee10 2a10 	vmov	r2, s0
 80054cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054d0:	ec43 2b10 	vmov	d0, r2, r3
 80054d4:	4770      	bx	lr
	...

080054d8 <floor>:
 80054d8:	ec51 0b10 	vmov	r0, r1, d0
 80054dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80054e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80054e8:	2e13      	cmp	r6, #19
 80054ea:	ee10 5a10 	vmov	r5, s0
 80054ee:	ee10 8a10 	vmov	r8, s0
 80054f2:	460c      	mov	r4, r1
 80054f4:	dc32      	bgt.n	800555c <floor+0x84>
 80054f6:	2e00      	cmp	r6, #0
 80054f8:	da14      	bge.n	8005524 <floor+0x4c>
 80054fa:	a333      	add	r3, pc, #204	; (adr r3, 80055c8 <floor+0xf0>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f7fa fedc 	bl	80002bc <__adddf3>
 8005504:	2200      	movs	r2, #0
 8005506:	2300      	movs	r3, #0
 8005508:	f7fb fb1e 	bl	8000b48 <__aeabi_dcmpgt>
 800550c:	b138      	cbz	r0, 800551e <floor+0x46>
 800550e:	2c00      	cmp	r4, #0
 8005510:	da57      	bge.n	80055c2 <floor+0xea>
 8005512:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005516:	431d      	orrs	r5, r3
 8005518:	d001      	beq.n	800551e <floor+0x46>
 800551a:	4c2d      	ldr	r4, [pc, #180]	; (80055d0 <floor+0xf8>)
 800551c:	2500      	movs	r5, #0
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	e025      	b.n	8005570 <floor+0x98>
 8005524:	4f2b      	ldr	r7, [pc, #172]	; (80055d4 <floor+0xfc>)
 8005526:	4137      	asrs	r7, r6
 8005528:	ea01 0307 	and.w	r3, r1, r7
 800552c:	4303      	orrs	r3, r0
 800552e:	d01f      	beq.n	8005570 <floor+0x98>
 8005530:	a325      	add	r3, pc, #148	; (adr r3, 80055c8 <floor+0xf0>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fa fec1 	bl	80002bc <__adddf3>
 800553a:	2200      	movs	r2, #0
 800553c:	2300      	movs	r3, #0
 800553e:	f7fb fb03 	bl	8000b48 <__aeabi_dcmpgt>
 8005542:	2800      	cmp	r0, #0
 8005544:	d0eb      	beq.n	800551e <floor+0x46>
 8005546:	2c00      	cmp	r4, #0
 8005548:	bfbe      	ittt	lt
 800554a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800554e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005552:	19a4      	addlt	r4, r4, r6
 8005554:	ea24 0407 	bic.w	r4, r4, r7
 8005558:	2500      	movs	r5, #0
 800555a:	e7e0      	b.n	800551e <floor+0x46>
 800555c:	2e33      	cmp	r6, #51	; 0x33
 800555e:	dd0b      	ble.n	8005578 <floor+0xa0>
 8005560:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005564:	d104      	bne.n	8005570 <floor+0x98>
 8005566:	ee10 2a10 	vmov	r2, s0
 800556a:	460b      	mov	r3, r1
 800556c:	f7fa fea6 	bl	80002bc <__adddf3>
 8005570:	ec41 0b10 	vmov	d0, r0, r1
 8005574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005578:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800557c:	f04f 33ff 	mov.w	r3, #4294967295
 8005580:	fa23 f707 	lsr.w	r7, r3, r7
 8005584:	4207      	tst	r7, r0
 8005586:	d0f3      	beq.n	8005570 <floor+0x98>
 8005588:	a30f      	add	r3, pc, #60	; (adr r3, 80055c8 <floor+0xf0>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fa fe95 	bl	80002bc <__adddf3>
 8005592:	2200      	movs	r2, #0
 8005594:	2300      	movs	r3, #0
 8005596:	f7fb fad7 	bl	8000b48 <__aeabi_dcmpgt>
 800559a:	2800      	cmp	r0, #0
 800559c:	d0bf      	beq.n	800551e <floor+0x46>
 800559e:	2c00      	cmp	r4, #0
 80055a0:	da02      	bge.n	80055a8 <floor+0xd0>
 80055a2:	2e14      	cmp	r6, #20
 80055a4:	d103      	bne.n	80055ae <floor+0xd6>
 80055a6:	3401      	adds	r4, #1
 80055a8:	ea25 0507 	bic.w	r5, r5, r7
 80055ac:	e7b7      	b.n	800551e <floor+0x46>
 80055ae:	2301      	movs	r3, #1
 80055b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80055b4:	fa03 f606 	lsl.w	r6, r3, r6
 80055b8:	4435      	add	r5, r6
 80055ba:	4545      	cmp	r5, r8
 80055bc:	bf38      	it	cc
 80055be:	18e4      	addcc	r4, r4, r3
 80055c0:	e7f2      	b.n	80055a8 <floor+0xd0>
 80055c2:	2500      	movs	r5, #0
 80055c4:	462c      	mov	r4, r5
 80055c6:	e7aa      	b.n	800551e <floor+0x46>
 80055c8:	8800759c 	.word	0x8800759c
 80055cc:	7e37e43c 	.word	0x7e37e43c
 80055d0:	bff00000 	.word	0xbff00000
 80055d4:	000fffff 	.word	0x000fffff

080055d8 <scalbn>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	ec55 4b10 	vmov	r4, r5, d0
 80055de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80055e2:	4606      	mov	r6, r0
 80055e4:	462b      	mov	r3, r5
 80055e6:	b99a      	cbnz	r2, 8005610 <scalbn+0x38>
 80055e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80055ec:	4323      	orrs	r3, r4
 80055ee:	d036      	beq.n	800565e <scalbn+0x86>
 80055f0:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <scalbn+0x100>)
 80055f2:	4629      	mov	r1, r5
 80055f4:	ee10 0a10 	vmov	r0, s0
 80055f8:	2200      	movs	r2, #0
 80055fa:	f7fb f815 	bl	8000628 <__aeabi_dmul>
 80055fe:	4b37      	ldr	r3, [pc, #220]	; (80056dc <scalbn+0x104>)
 8005600:	429e      	cmp	r6, r3
 8005602:	4604      	mov	r4, r0
 8005604:	460d      	mov	r5, r1
 8005606:	da10      	bge.n	800562a <scalbn+0x52>
 8005608:	a32b      	add	r3, pc, #172	; (adr r3, 80056b8 <scalbn+0xe0>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	e03a      	b.n	8005686 <scalbn+0xae>
 8005610:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005614:	428a      	cmp	r2, r1
 8005616:	d10c      	bne.n	8005632 <scalbn+0x5a>
 8005618:	ee10 2a10 	vmov	r2, s0
 800561c:	4620      	mov	r0, r4
 800561e:	4629      	mov	r1, r5
 8005620:	f7fa fe4c 	bl	80002bc <__adddf3>
 8005624:	4604      	mov	r4, r0
 8005626:	460d      	mov	r5, r1
 8005628:	e019      	b.n	800565e <scalbn+0x86>
 800562a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800562e:	460b      	mov	r3, r1
 8005630:	3a36      	subs	r2, #54	; 0x36
 8005632:	4432      	add	r2, r6
 8005634:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005638:	428a      	cmp	r2, r1
 800563a:	dd08      	ble.n	800564e <scalbn+0x76>
 800563c:	2d00      	cmp	r5, #0
 800563e:	a120      	add	r1, pc, #128	; (adr r1, 80056c0 <scalbn+0xe8>)
 8005640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005644:	da1c      	bge.n	8005680 <scalbn+0xa8>
 8005646:	a120      	add	r1, pc, #128	; (adr r1, 80056c8 <scalbn+0xf0>)
 8005648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800564c:	e018      	b.n	8005680 <scalbn+0xa8>
 800564e:	2a00      	cmp	r2, #0
 8005650:	dd08      	ble.n	8005664 <scalbn+0x8c>
 8005652:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005656:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800565a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800565e:	ec45 4b10 	vmov	d0, r4, r5
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005668:	da19      	bge.n	800569e <scalbn+0xc6>
 800566a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800566e:	429e      	cmp	r6, r3
 8005670:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005674:	dd0a      	ble.n	800568c <scalbn+0xb4>
 8005676:	a112      	add	r1, pc, #72	; (adr r1, 80056c0 <scalbn+0xe8>)
 8005678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e2      	bne.n	8005646 <scalbn+0x6e>
 8005680:	a30f      	add	r3, pc, #60	; (adr r3, 80056c0 <scalbn+0xe8>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f7fa ffcf 	bl	8000628 <__aeabi_dmul>
 800568a:	e7cb      	b.n	8005624 <scalbn+0x4c>
 800568c:	a10a      	add	r1, pc, #40	; (adr r1, 80056b8 <scalbn+0xe0>)
 800568e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0b8      	beq.n	8005608 <scalbn+0x30>
 8005696:	a10e      	add	r1, pc, #56	; (adr r1, 80056d0 <scalbn+0xf8>)
 8005698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800569c:	e7b4      	b.n	8005608 <scalbn+0x30>
 800569e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80056a2:	3236      	adds	r2, #54	; 0x36
 80056a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80056ac:	4620      	mov	r0, r4
 80056ae:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <scalbn+0x108>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	e7e8      	b.n	8005686 <scalbn+0xae>
 80056b4:	f3af 8000 	nop.w
 80056b8:	c2f8f359 	.word	0xc2f8f359
 80056bc:	01a56e1f 	.word	0x01a56e1f
 80056c0:	8800759c 	.word	0x8800759c
 80056c4:	7e37e43c 	.word	0x7e37e43c
 80056c8:	8800759c 	.word	0x8800759c
 80056cc:	fe37e43c 	.word	0xfe37e43c
 80056d0:	c2f8f359 	.word	0xc2f8f359
 80056d4:	81a56e1f 	.word	0x81a56e1f
 80056d8:	43500000 	.word	0x43500000
 80056dc:	ffff3cb0 	.word	0xffff3cb0
 80056e0:	3c900000 	.word	0x3c900000

080056e4 <__errno>:
 80056e4:	4b01      	ldr	r3, [pc, #4]	; (80056ec <__errno+0x8>)
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20000018 	.word	0x20000018

080056f0 <__libc_init_array>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	4d0d      	ldr	r5, [pc, #52]	; (8005728 <__libc_init_array+0x38>)
 80056f4:	4c0d      	ldr	r4, [pc, #52]	; (800572c <__libc_init_array+0x3c>)
 80056f6:	1b64      	subs	r4, r4, r5
 80056f8:	10a4      	asrs	r4, r4, #2
 80056fa:	2600      	movs	r6, #0
 80056fc:	42a6      	cmp	r6, r4
 80056fe:	d109      	bne.n	8005714 <__libc_init_array+0x24>
 8005700:	4d0b      	ldr	r5, [pc, #44]	; (8005730 <__libc_init_array+0x40>)
 8005702:	4c0c      	ldr	r4, [pc, #48]	; (8005734 <__libc_init_array+0x44>)
 8005704:	f001 f824 	bl	8006750 <_init>
 8005708:	1b64      	subs	r4, r4, r5
 800570a:	10a4      	asrs	r4, r4, #2
 800570c:	2600      	movs	r6, #0
 800570e:	42a6      	cmp	r6, r4
 8005710:	d105      	bne.n	800571e <__libc_init_array+0x2e>
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	f855 3b04 	ldr.w	r3, [r5], #4
 8005718:	4798      	blx	r3
 800571a:	3601      	adds	r6, #1
 800571c:	e7ee      	b.n	80056fc <__libc_init_array+0xc>
 800571e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005722:	4798      	blx	r3
 8005724:	3601      	adds	r6, #1
 8005726:	e7f2      	b.n	800570e <__libc_init_array+0x1e>
 8005728:	08006c38 	.word	0x08006c38
 800572c:	08006c38 	.word	0x08006c38
 8005730:	08006c38 	.word	0x08006c38
 8005734:	08006c40 	.word	0x08006c40

08005738 <memset>:
 8005738:	4402      	add	r2, r0
 800573a:	4603      	mov	r3, r0
 800573c:	4293      	cmp	r3, r2
 800573e:	d100      	bne.n	8005742 <memset+0xa>
 8005740:	4770      	bx	lr
 8005742:	f803 1b01 	strb.w	r1, [r3], #1
 8005746:	e7f9      	b.n	800573c <memset+0x4>

08005748 <iprintf>:
 8005748:	b40f      	push	{r0, r1, r2, r3}
 800574a:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <iprintf+0x2c>)
 800574c:	b513      	push	{r0, r1, r4, lr}
 800574e:	681c      	ldr	r4, [r3, #0]
 8005750:	b124      	cbz	r4, 800575c <iprintf+0x14>
 8005752:	69a3      	ldr	r3, [r4, #24]
 8005754:	b913      	cbnz	r3, 800575c <iprintf+0x14>
 8005756:	4620      	mov	r0, r4
 8005758:	f000 fa5e 	bl	8005c18 <__sinit>
 800575c:	ab05      	add	r3, sp, #20
 800575e:	9a04      	ldr	r2, [sp, #16]
 8005760:	68a1      	ldr	r1, [r4, #8]
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	4620      	mov	r0, r4
 8005766:	f000 fc67 	bl	8006038 <_vfiprintf_r>
 800576a:	b002      	add	sp, #8
 800576c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005770:	b004      	add	sp, #16
 8005772:	4770      	bx	lr
 8005774:	20000018 	.word	0x20000018

08005778 <_puts_r>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	460e      	mov	r6, r1
 800577c:	4605      	mov	r5, r0
 800577e:	b118      	cbz	r0, 8005788 <_puts_r+0x10>
 8005780:	6983      	ldr	r3, [r0, #24]
 8005782:	b90b      	cbnz	r3, 8005788 <_puts_r+0x10>
 8005784:	f000 fa48 	bl	8005c18 <__sinit>
 8005788:	69ab      	ldr	r3, [r5, #24]
 800578a:	68ac      	ldr	r4, [r5, #8]
 800578c:	b913      	cbnz	r3, 8005794 <_puts_r+0x1c>
 800578e:	4628      	mov	r0, r5
 8005790:	f000 fa42 	bl	8005c18 <__sinit>
 8005794:	4b2c      	ldr	r3, [pc, #176]	; (8005848 <_puts_r+0xd0>)
 8005796:	429c      	cmp	r4, r3
 8005798:	d120      	bne.n	80057dc <_puts_r+0x64>
 800579a:	686c      	ldr	r4, [r5, #4]
 800579c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800579e:	07db      	lsls	r3, r3, #31
 80057a0:	d405      	bmi.n	80057ae <_puts_r+0x36>
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	0598      	lsls	r0, r3, #22
 80057a6:	d402      	bmi.n	80057ae <_puts_r+0x36>
 80057a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057aa:	f000 fad3 	bl	8005d54 <__retarget_lock_acquire_recursive>
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	0719      	lsls	r1, r3, #28
 80057b2:	d51d      	bpl.n	80057f0 <_puts_r+0x78>
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	b1db      	cbz	r3, 80057f0 <_puts_r+0x78>
 80057b8:	3e01      	subs	r6, #1
 80057ba:	68a3      	ldr	r3, [r4, #8]
 80057bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057c0:	3b01      	subs	r3, #1
 80057c2:	60a3      	str	r3, [r4, #8]
 80057c4:	bb39      	cbnz	r1, 8005816 <_puts_r+0x9e>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	da38      	bge.n	800583c <_puts_r+0xc4>
 80057ca:	4622      	mov	r2, r4
 80057cc:	210a      	movs	r1, #10
 80057ce:	4628      	mov	r0, r5
 80057d0:	f000 f848 	bl	8005864 <__swbuf_r>
 80057d4:	3001      	adds	r0, #1
 80057d6:	d011      	beq.n	80057fc <_puts_r+0x84>
 80057d8:	250a      	movs	r5, #10
 80057da:	e011      	b.n	8005800 <_puts_r+0x88>
 80057dc:	4b1b      	ldr	r3, [pc, #108]	; (800584c <_puts_r+0xd4>)
 80057de:	429c      	cmp	r4, r3
 80057e0:	d101      	bne.n	80057e6 <_puts_r+0x6e>
 80057e2:	68ac      	ldr	r4, [r5, #8]
 80057e4:	e7da      	b.n	800579c <_puts_r+0x24>
 80057e6:	4b1a      	ldr	r3, [pc, #104]	; (8005850 <_puts_r+0xd8>)
 80057e8:	429c      	cmp	r4, r3
 80057ea:	bf08      	it	eq
 80057ec:	68ec      	ldreq	r4, [r5, #12]
 80057ee:	e7d5      	b.n	800579c <_puts_r+0x24>
 80057f0:	4621      	mov	r1, r4
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 f888 	bl	8005908 <__swsetup_r>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d0dd      	beq.n	80057b8 <_puts_r+0x40>
 80057fc:	f04f 35ff 	mov.w	r5, #4294967295
 8005800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005802:	07da      	lsls	r2, r3, #31
 8005804:	d405      	bmi.n	8005812 <_puts_r+0x9a>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	059b      	lsls	r3, r3, #22
 800580a:	d402      	bmi.n	8005812 <_puts_r+0x9a>
 800580c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800580e:	f000 faa2 	bl	8005d56 <__retarget_lock_release_recursive>
 8005812:	4628      	mov	r0, r5
 8005814:	bd70      	pop	{r4, r5, r6, pc}
 8005816:	2b00      	cmp	r3, #0
 8005818:	da04      	bge.n	8005824 <_puts_r+0xac>
 800581a:	69a2      	ldr	r2, [r4, #24]
 800581c:	429a      	cmp	r2, r3
 800581e:	dc06      	bgt.n	800582e <_puts_r+0xb6>
 8005820:	290a      	cmp	r1, #10
 8005822:	d004      	beq.n	800582e <_puts_r+0xb6>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	6022      	str	r2, [r4, #0]
 800582a:	7019      	strb	r1, [r3, #0]
 800582c:	e7c5      	b.n	80057ba <_puts_r+0x42>
 800582e:	4622      	mov	r2, r4
 8005830:	4628      	mov	r0, r5
 8005832:	f000 f817 	bl	8005864 <__swbuf_r>
 8005836:	3001      	adds	r0, #1
 8005838:	d1bf      	bne.n	80057ba <_puts_r+0x42>
 800583a:	e7df      	b.n	80057fc <_puts_r+0x84>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	250a      	movs	r5, #10
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	6022      	str	r2, [r4, #0]
 8005844:	701d      	strb	r5, [r3, #0]
 8005846:	e7db      	b.n	8005800 <_puts_r+0x88>
 8005848:	08006bbc 	.word	0x08006bbc
 800584c:	08006bdc 	.word	0x08006bdc
 8005850:	08006b9c 	.word	0x08006b9c

08005854 <puts>:
 8005854:	4b02      	ldr	r3, [pc, #8]	; (8005860 <puts+0xc>)
 8005856:	4601      	mov	r1, r0
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	f7ff bf8d 	b.w	8005778 <_puts_r>
 800585e:	bf00      	nop
 8005860:	20000018 	.word	0x20000018

08005864 <__swbuf_r>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	460e      	mov	r6, r1
 8005868:	4614      	mov	r4, r2
 800586a:	4605      	mov	r5, r0
 800586c:	b118      	cbz	r0, 8005876 <__swbuf_r+0x12>
 800586e:	6983      	ldr	r3, [r0, #24]
 8005870:	b90b      	cbnz	r3, 8005876 <__swbuf_r+0x12>
 8005872:	f000 f9d1 	bl	8005c18 <__sinit>
 8005876:	4b21      	ldr	r3, [pc, #132]	; (80058fc <__swbuf_r+0x98>)
 8005878:	429c      	cmp	r4, r3
 800587a:	d12b      	bne.n	80058d4 <__swbuf_r+0x70>
 800587c:	686c      	ldr	r4, [r5, #4]
 800587e:	69a3      	ldr	r3, [r4, #24]
 8005880:	60a3      	str	r3, [r4, #8]
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	071a      	lsls	r2, r3, #28
 8005886:	d52f      	bpl.n	80058e8 <__swbuf_r+0x84>
 8005888:	6923      	ldr	r3, [r4, #16]
 800588a:	b36b      	cbz	r3, 80058e8 <__swbuf_r+0x84>
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	6820      	ldr	r0, [r4, #0]
 8005890:	1ac0      	subs	r0, r0, r3
 8005892:	6963      	ldr	r3, [r4, #20]
 8005894:	b2f6      	uxtb	r6, r6
 8005896:	4283      	cmp	r3, r0
 8005898:	4637      	mov	r7, r6
 800589a:	dc04      	bgt.n	80058a6 <__swbuf_r+0x42>
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f926 	bl	8005af0 <_fflush_r>
 80058a4:	bb30      	cbnz	r0, 80058f4 <__swbuf_r+0x90>
 80058a6:	68a3      	ldr	r3, [r4, #8]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	60a3      	str	r3, [r4, #8]
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	6022      	str	r2, [r4, #0]
 80058b2:	701e      	strb	r6, [r3, #0]
 80058b4:	6963      	ldr	r3, [r4, #20]
 80058b6:	3001      	adds	r0, #1
 80058b8:	4283      	cmp	r3, r0
 80058ba:	d004      	beq.n	80058c6 <__swbuf_r+0x62>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	07db      	lsls	r3, r3, #31
 80058c0:	d506      	bpl.n	80058d0 <__swbuf_r+0x6c>
 80058c2:	2e0a      	cmp	r6, #10
 80058c4:	d104      	bne.n	80058d0 <__swbuf_r+0x6c>
 80058c6:	4621      	mov	r1, r4
 80058c8:	4628      	mov	r0, r5
 80058ca:	f000 f911 	bl	8005af0 <_fflush_r>
 80058ce:	b988      	cbnz	r0, 80058f4 <__swbuf_r+0x90>
 80058d0:	4638      	mov	r0, r7
 80058d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d4:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <__swbuf_r+0x9c>)
 80058d6:	429c      	cmp	r4, r3
 80058d8:	d101      	bne.n	80058de <__swbuf_r+0x7a>
 80058da:	68ac      	ldr	r4, [r5, #8]
 80058dc:	e7cf      	b.n	800587e <__swbuf_r+0x1a>
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <__swbuf_r+0xa0>)
 80058e0:	429c      	cmp	r4, r3
 80058e2:	bf08      	it	eq
 80058e4:	68ec      	ldreq	r4, [r5, #12]
 80058e6:	e7ca      	b.n	800587e <__swbuf_r+0x1a>
 80058e8:	4621      	mov	r1, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 f80c 	bl	8005908 <__swsetup_r>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d0cb      	beq.n	800588c <__swbuf_r+0x28>
 80058f4:	f04f 37ff 	mov.w	r7, #4294967295
 80058f8:	e7ea      	b.n	80058d0 <__swbuf_r+0x6c>
 80058fa:	bf00      	nop
 80058fc:	08006bbc 	.word	0x08006bbc
 8005900:	08006bdc 	.word	0x08006bdc
 8005904:	08006b9c 	.word	0x08006b9c

08005908 <__swsetup_r>:
 8005908:	4b32      	ldr	r3, [pc, #200]	; (80059d4 <__swsetup_r+0xcc>)
 800590a:	b570      	push	{r4, r5, r6, lr}
 800590c:	681d      	ldr	r5, [r3, #0]
 800590e:	4606      	mov	r6, r0
 8005910:	460c      	mov	r4, r1
 8005912:	b125      	cbz	r5, 800591e <__swsetup_r+0x16>
 8005914:	69ab      	ldr	r3, [r5, #24]
 8005916:	b913      	cbnz	r3, 800591e <__swsetup_r+0x16>
 8005918:	4628      	mov	r0, r5
 800591a:	f000 f97d 	bl	8005c18 <__sinit>
 800591e:	4b2e      	ldr	r3, [pc, #184]	; (80059d8 <__swsetup_r+0xd0>)
 8005920:	429c      	cmp	r4, r3
 8005922:	d10f      	bne.n	8005944 <__swsetup_r+0x3c>
 8005924:	686c      	ldr	r4, [r5, #4]
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800592c:	0719      	lsls	r1, r3, #28
 800592e:	d42c      	bmi.n	800598a <__swsetup_r+0x82>
 8005930:	06dd      	lsls	r5, r3, #27
 8005932:	d411      	bmi.n	8005958 <__swsetup_r+0x50>
 8005934:	2309      	movs	r3, #9
 8005936:	6033      	str	r3, [r6, #0]
 8005938:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	f04f 30ff 	mov.w	r0, #4294967295
 8005942:	e03e      	b.n	80059c2 <__swsetup_r+0xba>
 8005944:	4b25      	ldr	r3, [pc, #148]	; (80059dc <__swsetup_r+0xd4>)
 8005946:	429c      	cmp	r4, r3
 8005948:	d101      	bne.n	800594e <__swsetup_r+0x46>
 800594a:	68ac      	ldr	r4, [r5, #8]
 800594c:	e7eb      	b.n	8005926 <__swsetup_r+0x1e>
 800594e:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <__swsetup_r+0xd8>)
 8005950:	429c      	cmp	r4, r3
 8005952:	bf08      	it	eq
 8005954:	68ec      	ldreq	r4, [r5, #12]
 8005956:	e7e6      	b.n	8005926 <__swsetup_r+0x1e>
 8005958:	0758      	lsls	r0, r3, #29
 800595a:	d512      	bpl.n	8005982 <__swsetup_r+0x7a>
 800595c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800595e:	b141      	cbz	r1, 8005972 <__swsetup_r+0x6a>
 8005960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005964:	4299      	cmp	r1, r3
 8005966:	d002      	beq.n	800596e <__swsetup_r+0x66>
 8005968:	4630      	mov	r0, r6
 800596a:	f000 fa5b 	bl	8005e24 <_free_r>
 800596e:	2300      	movs	r3, #0
 8005970:	6363      	str	r3, [r4, #52]	; 0x34
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	2300      	movs	r3, #0
 800597c:	6063      	str	r3, [r4, #4]
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	f043 0308 	orr.w	r3, r3, #8
 8005988:	81a3      	strh	r3, [r4, #12]
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	b94b      	cbnz	r3, 80059a2 <__swsetup_r+0x9a>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005998:	d003      	beq.n	80059a2 <__swsetup_r+0x9a>
 800599a:	4621      	mov	r1, r4
 800599c:	4630      	mov	r0, r6
 800599e:	f000 fa01 	bl	8005da4 <__smakebuf_r>
 80059a2:	89a0      	ldrh	r0, [r4, #12]
 80059a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059a8:	f010 0301 	ands.w	r3, r0, #1
 80059ac:	d00a      	beq.n	80059c4 <__swsetup_r+0xbc>
 80059ae:	2300      	movs	r3, #0
 80059b0:	60a3      	str	r3, [r4, #8]
 80059b2:	6963      	ldr	r3, [r4, #20]
 80059b4:	425b      	negs	r3, r3
 80059b6:	61a3      	str	r3, [r4, #24]
 80059b8:	6923      	ldr	r3, [r4, #16]
 80059ba:	b943      	cbnz	r3, 80059ce <__swsetup_r+0xc6>
 80059bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059c0:	d1ba      	bne.n	8005938 <__swsetup_r+0x30>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	0781      	lsls	r1, r0, #30
 80059c6:	bf58      	it	pl
 80059c8:	6963      	ldrpl	r3, [r4, #20]
 80059ca:	60a3      	str	r3, [r4, #8]
 80059cc:	e7f4      	b.n	80059b8 <__swsetup_r+0xb0>
 80059ce:	2000      	movs	r0, #0
 80059d0:	e7f7      	b.n	80059c2 <__swsetup_r+0xba>
 80059d2:	bf00      	nop
 80059d4:	20000018 	.word	0x20000018
 80059d8:	08006bbc 	.word	0x08006bbc
 80059dc:	08006bdc 	.word	0x08006bdc
 80059e0:	08006b9c 	.word	0x08006b9c

080059e4 <__sflush_r>:
 80059e4:	898a      	ldrh	r2, [r1, #12]
 80059e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ea:	4605      	mov	r5, r0
 80059ec:	0710      	lsls	r0, r2, #28
 80059ee:	460c      	mov	r4, r1
 80059f0:	d458      	bmi.n	8005aa4 <__sflush_r+0xc0>
 80059f2:	684b      	ldr	r3, [r1, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	dc05      	bgt.n	8005a04 <__sflush_r+0x20>
 80059f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	dc02      	bgt.n	8005a04 <__sflush_r+0x20>
 80059fe:	2000      	movs	r0, #0
 8005a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	d0f9      	beq.n	80059fe <__sflush_r+0x1a>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a10:	682f      	ldr	r7, [r5, #0]
 8005a12:	602b      	str	r3, [r5, #0]
 8005a14:	d032      	beq.n	8005a7c <__sflush_r+0x98>
 8005a16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	075a      	lsls	r2, r3, #29
 8005a1c:	d505      	bpl.n	8005a2a <__sflush_r+0x46>
 8005a1e:	6863      	ldr	r3, [r4, #4]
 8005a20:	1ac0      	subs	r0, r0, r3
 8005a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a24:	b10b      	cbz	r3, 8005a2a <__sflush_r+0x46>
 8005a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a28:	1ac0      	subs	r0, r0, r3
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a30:	6a21      	ldr	r1, [r4, #32]
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b0      	blx	r6
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	d106      	bne.n	8005a4a <__sflush_r+0x66>
 8005a3c:	6829      	ldr	r1, [r5, #0]
 8005a3e:	291d      	cmp	r1, #29
 8005a40:	d82c      	bhi.n	8005a9c <__sflush_r+0xb8>
 8005a42:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <__sflush_r+0x108>)
 8005a44:	40ca      	lsrs	r2, r1
 8005a46:	07d6      	lsls	r6, r2, #31
 8005a48:	d528      	bpl.n	8005a9c <__sflush_r+0xb8>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	6062      	str	r2, [r4, #4]
 8005a4e:	04d9      	lsls	r1, r3, #19
 8005a50:	6922      	ldr	r2, [r4, #16]
 8005a52:	6022      	str	r2, [r4, #0]
 8005a54:	d504      	bpl.n	8005a60 <__sflush_r+0x7c>
 8005a56:	1c42      	adds	r2, r0, #1
 8005a58:	d101      	bne.n	8005a5e <__sflush_r+0x7a>
 8005a5a:	682b      	ldr	r3, [r5, #0]
 8005a5c:	b903      	cbnz	r3, 8005a60 <__sflush_r+0x7c>
 8005a5e:	6560      	str	r0, [r4, #84]	; 0x54
 8005a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a62:	602f      	str	r7, [r5, #0]
 8005a64:	2900      	cmp	r1, #0
 8005a66:	d0ca      	beq.n	80059fe <__sflush_r+0x1a>
 8005a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d002      	beq.n	8005a76 <__sflush_r+0x92>
 8005a70:	4628      	mov	r0, r5
 8005a72:	f000 f9d7 	bl	8005e24 <_free_r>
 8005a76:	2000      	movs	r0, #0
 8005a78:	6360      	str	r0, [r4, #52]	; 0x34
 8005a7a:	e7c1      	b.n	8005a00 <__sflush_r+0x1c>
 8005a7c:	6a21      	ldr	r1, [r4, #32]
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b0      	blx	r6
 8005a84:	1c41      	adds	r1, r0, #1
 8005a86:	d1c7      	bne.n	8005a18 <__sflush_r+0x34>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0c4      	beq.n	8005a18 <__sflush_r+0x34>
 8005a8e:	2b1d      	cmp	r3, #29
 8005a90:	d001      	beq.n	8005a96 <__sflush_r+0xb2>
 8005a92:	2b16      	cmp	r3, #22
 8005a94:	d101      	bne.n	8005a9a <__sflush_r+0xb6>
 8005a96:	602f      	str	r7, [r5, #0]
 8005a98:	e7b1      	b.n	80059fe <__sflush_r+0x1a>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	e7ad      	b.n	8005a00 <__sflush_r+0x1c>
 8005aa4:	690f      	ldr	r7, [r1, #16]
 8005aa6:	2f00      	cmp	r7, #0
 8005aa8:	d0a9      	beq.n	80059fe <__sflush_r+0x1a>
 8005aaa:	0793      	lsls	r3, r2, #30
 8005aac:	680e      	ldr	r6, [r1, #0]
 8005aae:	bf08      	it	eq
 8005ab0:	694b      	ldreq	r3, [r1, #20]
 8005ab2:	600f      	str	r7, [r1, #0]
 8005ab4:	bf18      	it	ne
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	eba6 0807 	sub.w	r8, r6, r7
 8005abc:	608b      	str	r3, [r1, #8]
 8005abe:	f1b8 0f00 	cmp.w	r8, #0
 8005ac2:	dd9c      	ble.n	80059fe <__sflush_r+0x1a>
 8005ac4:	6a21      	ldr	r1, [r4, #32]
 8005ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ac8:	4643      	mov	r3, r8
 8005aca:	463a      	mov	r2, r7
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b0      	blx	r6
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	dc06      	bgt.n	8005ae2 <__sflush_r+0xfe>
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	e78e      	b.n	8005a00 <__sflush_r+0x1c>
 8005ae2:	4407      	add	r7, r0
 8005ae4:	eba8 0800 	sub.w	r8, r8, r0
 8005ae8:	e7e9      	b.n	8005abe <__sflush_r+0xda>
 8005aea:	bf00      	nop
 8005aec:	20400001 	.word	0x20400001

08005af0 <_fflush_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	690b      	ldr	r3, [r1, #16]
 8005af4:	4605      	mov	r5, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	b913      	cbnz	r3, 8005b00 <_fflush_r+0x10>
 8005afa:	2500      	movs	r5, #0
 8005afc:	4628      	mov	r0, r5
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	b118      	cbz	r0, 8005b0a <_fflush_r+0x1a>
 8005b02:	6983      	ldr	r3, [r0, #24]
 8005b04:	b90b      	cbnz	r3, 8005b0a <_fflush_r+0x1a>
 8005b06:	f000 f887 	bl	8005c18 <__sinit>
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <_fflush_r+0x6c>)
 8005b0c:	429c      	cmp	r4, r3
 8005b0e:	d11b      	bne.n	8005b48 <_fflush_r+0x58>
 8005b10:	686c      	ldr	r4, [r5, #4]
 8005b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0ef      	beq.n	8005afa <_fflush_r+0xa>
 8005b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b1c:	07d0      	lsls	r0, r2, #31
 8005b1e:	d404      	bmi.n	8005b2a <_fflush_r+0x3a>
 8005b20:	0599      	lsls	r1, r3, #22
 8005b22:	d402      	bmi.n	8005b2a <_fflush_r+0x3a>
 8005b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b26:	f000 f915 	bl	8005d54 <__retarget_lock_acquire_recursive>
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	f7ff ff59 	bl	80059e4 <__sflush_r>
 8005b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b34:	07da      	lsls	r2, r3, #31
 8005b36:	4605      	mov	r5, r0
 8005b38:	d4e0      	bmi.n	8005afc <_fflush_r+0xc>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	059b      	lsls	r3, r3, #22
 8005b3e:	d4dd      	bmi.n	8005afc <_fflush_r+0xc>
 8005b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b42:	f000 f908 	bl	8005d56 <__retarget_lock_release_recursive>
 8005b46:	e7d9      	b.n	8005afc <_fflush_r+0xc>
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <_fflush_r+0x70>)
 8005b4a:	429c      	cmp	r4, r3
 8005b4c:	d101      	bne.n	8005b52 <_fflush_r+0x62>
 8005b4e:	68ac      	ldr	r4, [r5, #8]
 8005b50:	e7df      	b.n	8005b12 <_fflush_r+0x22>
 8005b52:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <_fflush_r+0x74>)
 8005b54:	429c      	cmp	r4, r3
 8005b56:	bf08      	it	eq
 8005b58:	68ec      	ldreq	r4, [r5, #12]
 8005b5a:	e7da      	b.n	8005b12 <_fflush_r+0x22>
 8005b5c:	08006bbc 	.word	0x08006bbc
 8005b60:	08006bdc 	.word	0x08006bdc
 8005b64:	08006b9c 	.word	0x08006b9c

08005b68 <std>:
 8005b68:	2300      	movs	r3, #0
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b76:	6083      	str	r3, [r0, #8]
 8005b78:	8181      	strh	r1, [r0, #12]
 8005b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b7c:	81c2      	strh	r2, [r0, #14]
 8005b7e:	6183      	str	r3, [r0, #24]
 8005b80:	4619      	mov	r1, r3
 8005b82:	2208      	movs	r2, #8
 8005b84:	305c      	adds	r0, #92	; 0x5c
 8005b86:	f7ff fdd7 	bl	8005738 <memset>
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <std+0x38>)
 8005b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <std+0x3c>)
 8005b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <std+0x40>)
 8005b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <std+0x44>)
 8005b98:	6224      	str	r4, [r4, #32]
 8005b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	bf00      	nop
 8005ba0:	080065e1 	.word	0x080065e1
 8005ba4:	08006603 	.word	0x08006603
 8005ba8:	0800663b 	.word	0x0800663b
 8005bac:	0800665f 	.word	0x0800665f

08005bb0 <_cleanup_r>:
 8005bb0:	4901      	ldr	r1, [pc, #4]	; (8005bb8 <_cleanup_r+0x8>)
 8005bb2:	f000 b8af 	b.w	8005d14 <_fwalk_reent>
 8005bb6:	bf00      	nop
 8005bb8:	08005af1 	.word	0x08005af1

08005bbc <__sfmoreglue>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	2268      	movs	r2, #104	; 0x68
 8005bc0:	1e4d      	subs	r5, r1, #1
 8005bc2:	4355      	muls	r5, r2
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bca:	f000 f997 	bl	8005efc <_malloc_r>
 8005bce:	4604      	mov	r4, r0
 8005bd0:	b140      	cbz	r0, 8005be4 <__sfmoreglue+0x28>
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	e9c0 1600 	strd	r1, r6, [r0]
 8005bd8:	300c      	adds	r0, #12
 8005bda:	60a0      	str	r0, [r4, #8]
 8005bdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005be0:	f7ff fdaa 	bl	8005738 <memset>
 8005be4:	4620      	mov	r0, r4
 8005be6:	bd70      	pop	{r4, r5, r6, pc}

08005be8 <__sfp_lock_acquire>:
 8005be8:	4801      	ldr	r0, [pc, #4]	; (8005bf0 <__sfp_lock_acquire+0x8>)
 8005bea:	f000 b8b3 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005bee:	bf00      	nop
 8005bf0:	2000017d 	.word	0x2000017d

08005bf4 <__sfp_lock_release>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__sfp_lock_release+0x8>)
 8005bf6:	f000 b8ae 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	2000017d 	.word	0x2000017d

08005c00 <__sinit_lock_acquire>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__sinit_lock_acquire+0x8>)
 8005c02:	f000 b8a7 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005c06:	bf00      	nop
 8005c08:	2000017e 	.word	0x2000017e

08005c0c <__sinit_lock_release>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	; (8005c14 <__sinit_lock_release+0x8>)
 8005c0e:	f000 b8a2 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005c12:	bf00      	nop
 8005c14:	2000017e 	.word	0x2000017e

08005c18 <__sinit>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	f7ff fff0 	bl	8005c00 <__sinit_lock_acquire>
 8005c20:	69a3      	ldr	r3, [r4, #24]
 8005c22:	b11b      	cbz	r3, 8005c2c <__sinit+0x14>
 8005c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c28:	f7ff bff0 	b.w	8005c0c <__sinit_lock_release>
 8005c2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c30:	6523      	str	r3, [r4, #80]	; 0x50
 8005c32:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <__sinit+0x68>)
 8005c34:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <__sinit+0x6c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	bf04      	itt	eq
 8005c3e:	2301      	moveq	r3, #1
 8005c40:	61a3      	streq	r3, [r4, #24]
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 f820 	bl	8005c88 <__sfp>
 8005c48:	6060      	str	r0, [r4, #4]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 f81c 	bl	8005c88 <__sfp>
 8005c50:	60a0      	str	r0, [r4, #8]
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 f818 	bl	8005c88 <__sfp>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	60e0      	str	r0, [r4, #12]
 8005c5c:	2104      	movs	r1, #4
 8005c5e:	6860      	ldr	r0, [r4, #4]
 8005c60:	f7ff ff82 	bl	8005b68 <std>
 8005c64:	68a0      	ldr	r0, [r4, #8]
 8005c66:	2201      	movs	r2, #1
 8005c68:	2109      	movs	r1, #9
 8005c6a:	f7ff ff7d 	bl	8005b68 <std>
 8005c6e:	68e0      	ldr	r0, [r4, #12]
 8005c70:	2202      	movs	r2, #2
 8005c72:	2112      	movs	r1, #18
 8005c74:	f7ff ff78 	bl	8005b68 <std>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	61a3      	str	r3, [r4, #24]
 8005c7c:	e7d2      	b.n	8005c24 <__sinit+0xc>
 8005c7e:	bf00      	nop
 8005c80:	08006b98 	.word	0x08006b98
 8005c84:	08005bb1 	.word	0x08005bb1

08005c88 <__sfp>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	f7ff ffac 	bl	8005be8 <__sfp_lock_acquire>
 8005c90:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <__sfp+0x84>)
 8005c92:	681e      	ldr	r6, [r3, #0]
 8005c94:	69b3      	ldr	r3, [r6, #24]
 8005c96:	b913      	cbnz	r3, 8005c9e <__sfp+0x16>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f7ff ffbd 	bl	8005c18 <__sinit>
 8005c9e:	3648      	adds	r6, #72	; 0x48
 8005ca0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	d503      	bpl.n	8005cb0 <__sfp+0x28>
 8005ca8:	6833      	ldr	r3, [r6, #0]
 8005caa:	b30b      	cbz	r3, 8005cf0 <__sfp+0x68>
 8005cac:	6836      	ldr	r6, [r6, #0]
 8005cae:	e7f7      	b.n	8005ca0 <__sfp+0x18>
 8005cb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cb4:	b9d5      	cbnz	r5, 8005cec <__sfp+0x64>
 8005cb6:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <__sfp+0x88>)
 8005cb8:	60e3      	str	r3, [r4, #12]
 8005cba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cbe:	6665      	str	r5, [r4, #100]	; 0x64
 8005cc0:	f000 f847 	bl	8005d52 <__retarget_lock_init_recursive>
 8005cc4:	f7ff ff96 	bl	8005bf4 <__sfp_lock_release>
 8005cc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ccc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cd0:	6025      	str	r5, [r4, #0]
 8005cd2:	61a5      	str	r5, [r4, #24]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cdc:	f7ff fd2c 	bl	8005738 <memset>
 8005ce0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ce4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ce8:	4620      	mov	r0, r4
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cec:	3468      	adds	r4, #104	; 0x68
 8005cee:	e7d9      	b.n	8005ca4 <__sfp+0x1c>
 8005cf0:	2104      	movs	r1, #4
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f7ff ff62 	bl	8005bbc <__sfmoreglue>
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	6030      	str	r0, [r6, #0]
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d1d5      	bne.n	8005cac <__sfp+0x24>
 8005d00:	f7ff ff78 	bl	8005bf4 <__sfp_lock_release>
 8005d04:	230c      	movs	r3, #12
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	e7ee      	b.n	8005ce8 <__sfp+0x60>
 8005d0a:	bf00      	nop
 8005d0c:	08006b98 	.word	0x08006b98
 8005d10:	ffff0001 	.word	0xffff0001

08005d14 <_fwalk_reent>:
 8005d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d18:	4606      	mov	r6, r0
 8005d1a:	4688      	mov	r8, r1
 8005d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d20:	2700      	movs	r7, #0
 8005d22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d26:	f1b9 0901 	subs.w	r9, r9, #1
 8005d2a:	d505      	bpl.n	8005d38 <_fwalk_reent+0x24>
 8005d2c:	6824      	ldr	r4, [r4, #0]
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	d1f7      	bne.n	8005d22 <_fwalk_reent+0xe>
 8005d32:	4638      	mov	r0, r7
 8005d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d38:	89ab      	ldrh	r3, [r5, #12]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d907      	bls.n	8005d4e <_fwalk_reent+0x3a>
 8005d3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d42:	3301      	adds	r3, #1
 8005d44:	d003      	beq.n	8005d4e <_fwalk_reent+0x3a>
 8005d46:	4629      	mov	r1, r5
 8005d48:	4630      	mov	r0, r6
 8005d4a:	47c0      	blx	r8
 8005d4c:	4307      	orrs	r7, r0
 8005d4e:	3568      	adds	r5, #104	; 0x68
 8005d50:	e7e9      	b.n	8005d26 <_fwalk_reent+0x12>

08005d52 <__retarget_lock_init_recursive>:
 8005d52:	4770      	bx	lr

08005d54 <__retarget_lock_acquire_recursive>:
 8005d54:	4770      	bx	lr

08005d56 <__retarget_lock_release_recursive>:
 8005d56:	4770      	bx	lr

08005d58 <__swhatbuf_r>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	460e      	mov	r6, r1
 8005d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d60:	2900      	cmp	r1, #0
 8005d62:	b096      	sub	sp, #88	; 0x58
 8005d64:	4614      	mov	r4, r2
 8005d66:	461d      	mov	r5, r3
 8005d68:	da08      	bge.n	8005d7c <__swhatbuf_r+0x24>
 8005d6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	602a      	str	r2, [r5, #0]
 8005d72:	061a      	lsls	r2, r3, #24
 8005d74:	d410      	bmi.n	8005d98 <__swhatbuf_r+0x40>
 8005d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d7a:	e00e      	b.n	8005d9a <__swhatbuf_r+0x42>
 8005d7c:	466a      	mov	r2, sp
 8005d7e:	f000 fc95 	bl	80066ac <_fstat_r>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	dbf1      	blt.n	8005d6a <__swhatbuf_r+0x12>
 8005d86:	9a01      	ldr	r2, [sp, #4]
 8005d88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d90:	425a      	negs	r2, r3
 8005d92:	415a      	adcs	r2, r3
 8005d94:	602a      	str	r2, [r5, #0]
 8005d96:	e7ee      	b.n	8005d76 <__swhatbuf_r+0x1e>
 8005d98:	2340      	movs	r3, #64	; 0x40
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	b016      	add	sp, #88	; 0x58
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005da4 <__smakebuf_r>:
 8005da4:	898b      	ldrh	r3, [r1, #12]
 8005da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005da8:	079d      	lsls	r5, r3, #30
 8005daa:	4606      	mov	r6, r0
 8005dac:	460c      	mov	r4, r1
 8005dae:	d507      	bpl.n	8005dc0 <__smakebuf_r+0x1c>
 8005db0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	2301      	movs	r3, #1
 8005dba:	6163      	str	r3, [r4, #20]
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}
 8005dc0:	ab01      	add	r3, sp, #4
 8005dc2:	466a      	mov	r2, sp
 8005dc4:	f7ff ffc8 	bl	8005d58 <__swhatbuf_r>
 8005dc8:	9900      	ldr	r1, [sp, #0]
 8005dca:	4605      	mov	r5, r0
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f000 f895 	bl	8005efc <_malloc_r>
 8005dd2:	b948      	cbnz	r0, 8005de8 <__smakebuf_r+0x44>
 8005dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd8:	059a      	lsls	r2, r3, #22
 8005dda:	d4ef      	bmi.n	8005dbc <__smakebuf_r+0x18>
 8005ddc:	f023 0303 	bic.w	r3, r3, #3
 8005de0:	f043 0302 	orr.w	r3, r3, #2
 8005de4:	81a3      	strh	r3, [r4, #12]
 8005de6:	e7e3      	b.n	8005db0 <__smakebuf_r+0xc>
 8005de8:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <__smakebuf_r+0x7c>)
 8005dea:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	6020      	str	r0, [r4, #0]
 8005df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	9b00      	ldr	r3, [sp, #0]
 8005df8:	6163      	str	r3, [r4, #20]
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	6120      	str	r0, [r4, #16]
 8005dfe:	b15b      	cbz	r3, 8005e18 <__smakebuf_r+0x74>
 8005e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e04:	4630      	mov	r0, r6
 8005e06:	f000 fc63 	bl	80066d0 <_isatty_r>
 8005e0a:	b128      	cbz	r0, 8005e18 <__smakebuf_r+0x74>
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	89a0      	ldrh	r0, [r4, #12]
 8005e1a:	4305      	orrs	r5, r0
 8005e1c:	81a5      	strh	r5, [r4, #12]
 8005e1e:	e7cd      	b.n	8005dbc <__smakebuf_r+0x18>
 8005e20:	08005bb1 	.word	0x08005bb1

08005e24 <_free_r>:
 8005e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e26:	2900      	cmp	r1, #0
 8005e28:	d044      	beq.n	8005eb4 <_free_r+0x90>
 8005e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e2e:	9001      	str	r0, [sp, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f1a1 0404 	sub.w	r4, r1, #4
 8005e36:	bfb8      	it	lt
 8005e38:	18e4      	addlt	r4, r4, r3
 8005e3a:	f000 fc6b 	bl	8006714 <__malloc_lock>
 8005e3e:	4a1e      	ldr	r2, [pc, #120]	; (8005eb8 <_free_r+0x94>)
 8005e40:	9801      	ldr	r0, [sp, #4]
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	b933      	cbnz	r3, 8005e54 <_free_r+0x30>
 8005e46:	6063      	str	r3, [r4, #4]
 8005e48:	6014      	str	r4, [r2, #0]
 8005e4a:	b003      	add	sp, #12
 8005e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e50:	f000 bc66 	b.w	8006720 <__malloc_unlock>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d908      	bls.n	8005e6a <_free_r+0x46>
 8005e58:	6825      	ldr	r5, [r4, #0]
 8005e5a:	1961      	adds	r1, r4, r5
 8005e5c:	428b      	cmp	r3, r1
 8005e5e:	bf01      	itttt	eq
 8005e60:	6819      	ldreq	r1, [r3, #0]
 8005e62:	685b      	ldreq	r3, [r3, #4]
 8005e64:	1949      	addeq	r1, r1, r5
 8005e66:	6021      	streq	r1, [r4, #0]
 8005e68:	e7ed      	b.n	8005e46 <_free_r+0x22>
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	b10b      	cbz	r3, 8005e74 <_free_r+0x50>
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d9fa      	bls.n	8005e6a <_free_r+0x46>
 8005e74:	6811      	ldr	r1, [r2, #0]
 8005e76:	1855      	adds	r5, r2, r1
 8005e78:	42a5      	cmp	r5, r4
 8005e7a:	d10b      	bne.n	8005e94 <_free_r+0x70>
 8005e7c:	6824      	ldr	r4, [r4, #0]
 8005e7e:	4421      	add	r1, r4
 8005e80:	1854      	adds	r4, r2, r1
 8005e82:	42a3      	cmp	r3, r4
 8005e84:	6011      	str	r1, [r2, #0]
 8005e86:	d1e0      	bne.n	8005e4a <_free_r+0x26>
 8005e88:	681c      	ldr	r4, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	6053      	str	r3, [r2, #4]
 8005e8e:	4421      	add	r1, r4
 8005e90:	6011      	str	r1, [r2, #0]
 8005e92:	e7da      	b.n	8005e4a <_free_r+0x26>
 8005e94:	d902      	bls.n	8005e9c <_free_r+0x78>
 8005e96:	230c      	movs	r3, #12
 8005e98:	6003      	str	r3, [r0, #0]
 8005e9a:	e7d6      	b.n	8005e4a <_free_r+0x26>
 8005e9c:	6825      	ldr	r5, [r4, #0]
 8005e9e:	1961      	adds	r1, r4, r5
 8005ea0:	428b      	cmp	r3, r1
 8005ea2:	bf04      	itt	eq
 8005ea4:	6819      	ldreq	r1, [r3, #0]
 8005ea6:	685b      	ldreq	r3, [r3, #4]
 8005ea8:	6063      	str	r3, [r4, #4]
 8005eaa:	bf04      	itt	eq
 8005eac:	1949      	addeq	r1, r1, r5
 8005eae:	6021      	streq	r1, [r4, #0]
 8005eb0:	6054      	str	r4, [r2, #4]
 8005eb2:	e7ca      	b.n	8005e4a <_free_r+0x26>
 8005eb4:	b003      	add	sp, #12
 8005eb6:	bd30      	pop	{r4, r5, pc}
 8005eb8:	20000180 	.word	0x20000180

08005ebc <sbrk_aligned>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	4e0e      	ldr	r6, [pc, #56]	; (8005ef8 <sbrk_aligned+0x3c>)
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	6831      	ldr	r1, [r6, #0]
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	b911      	cbnz	r1, 8005ece <sbrk_aligned+0x12>
 8005ec8:	f000 fb7a 	bl	80065c0 <_sbrk_r>
 8005ecc:	6030      	str	r0, [r6, #0]
 8005ece:	4621      	mov	r1, r4
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f000 fb75 	bl	80065c0 <_sbrk_r>
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	d00a      	beq.n	8005ef0 <sbrk_aligned+0x34>
 8005eda:	1cc4      	adds	r4, r0, #3
 8005edc:	f024 0403 	bic.w	r4, r4, #3
 8005ee0:	42a0      	cmp	r0, r4
 8005ee2:	d007      	beq.n	8005ef4 <sbrk_aligned+0x38>
 8005ee4:	1a21      	subs	r1, r4, r0
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 fb6a 	bl	80065c0 <_sbrk_r>
 8005eec:	3001      	adds	r0, #1
 8005eee:	d101      	bne.n	8005ef4 <sbrk_aligned+0x38>
 8005ef0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	20000184 	.word	0x20000184

08005efc <_malloc_r>:
 8005efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f00:	1ccd      	adds	r5, r1, #3
 8005f02:	f025 0503 	bic.w	r5, r5, #3
 8005f06:	3508      	adds	r5, #8
 8005f08:	2d0c      	cmp	r5, #12
 8005f0a:	bf38      	it	cc
 8005f0c:	250c      	movcc	r5, #12
 8005f0e:	2d00      	cmp	r5, #0
 8005f10:	4607      	mov	r7, r0
 8005f12:	db01      	blt.n	8005f18 <_malloc_r+0x1c>
 8005f14:	42a9      	cmp	r1, r5
 8005f16:	d905      	bls.n	8005f24 <_malloc_r+0x28>
 8005f18:	230c      	movs	r3, #12
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	2600      	movs	r6, #0
 8005f1e:	4630      	mov	r0, r6
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f24:	4e2e      	ldr	r6, [pc, #184]	; (8005fe0 <_malloc_r+0xe4>)
 8005f26:	f000 fbf5 	bl	8006714 <__malloc_lock>
 8005f2a:	6833      	ldr	r3, [r6, #0]
 8005f2c:	461c      	mov	r4, r3
 8005f2e:	bb34      	cbnz	r4, 8005f7e <_malloc_r+0x82>
 8005f30:	4629      	mov	r1, r5
 8005f32:	4638      	mov	r0, r7
 8005f34:	f7ff ffc2 	bl	8005ebc <sbrk_aligned>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	d14d      	bne.n	8005fda <_malloc_r+0xde>
 8005f3e:	6834      	ldr	r4, [r6, #0]
 8005f40:	4626      	mov	r6, r4
 8005f42:	2e00      	cmp	r6, #0
 8005f44:	d140      	bne.n	8005fc8 <_malloc_r+0xcc>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	eb04 0803 	add.w	r8, r4, r3
 8005f50:	f000 fb36 	bl	80065c0 <_sbrk_r>
 8005f54:	4580      	cmp	r8, r0
 8005f56:	d13a      	bne.n	8005fce <_malloc_r+0xd2>
 8005f58:	6821      	ldr	r1, [r4, #0]
 8005f5a:	3503      	adds	r5, #3
 8005f5c:	1a6d      	subs	r5, r5, r1
 8005f5e:	f025 0503 	bic.w	r5, r5, #3
 8005f62:	3508      	adds	r5, #8
 8005f64:	2d0c      	cmp	r5, #12
 8005f66:	bf38      	it	cc
 8005f68:	250c      	movcc	r5, #12
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	f7ff ffa5 	bl	8005ebc <sbrk_aligned>
 8005f72:	3001      	adds	r0, #1
 8005f74:	d02b      	beq.n	8005fce <_malloc_r+0xd2>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	442b      	add	r3, r5
 8005f7a:	6023      	str	r3, [r4, #0]
 8005f7c:	e00e      	b.n	8005f9c <_malloc_r+0xa0>
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	1b52      	subs	r2, r2, r5
 8005f82:	d41e      	bmi.n	8005fc2 <_malloc_r+0xc6>
 8005f84:	2a0b      	cmp	r2, #11
 8005f86:	d916      	bls.n	8005fb6 <_malloc_r+0xba>
 8005f88:	1961      	adds	r1, r4, r5
 8005f8a:	42a3      	cmp	r3, r4
 8005f8c:	6025      	str	r5, [r4, #0]
 8005f8e:	bf18      	it	ne
 8005f90:	6059      	strne	r1, [r3, #4]
 8005f92:	6863      	ldr	r3, [r4, #4]
 8005f94:	bf08      	it	eq
 8005f96:	6031      	streq	r1, [r6, #0]
 8005f98:	5162      	str	r2, [r4, r5]
 8005f9a:	604b      	str	r3, [r1, #4]
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f104 060b 	add.w	r6, r4, #11
 8005fa2:	f000 fbbd 	bl	8006720 <__malloc_unlock>
 8005fa6:	f026 0607 	bic.w	r6, r6, #7
 8005faa:	1d23      	adds	r3, r4, #4
 8005fac:	1af2      	subs	r2, r6, r3
 8005fae:	d0b6      	beq.n	8005f1e <_malloc_r+0x22>
 8005fb0:	1b9b      	subs	r3, r3, r6
 8005fb2:	50a3      	str	r3, [r4, r2]
 8005fb4:	e7b3      	b.n	8005f1e <_malloc_r+0x22>
 8005fb6:	6862      	ldr	r2, [r4, #4]
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	bf0c      	ite	eq
 8005fbc:	6032      	streq	r2, [r6, #0]
 8005fbe:	605a      	strne	r2, [r3, #4]
 8005fc0:	e7ec      	b.n	8005f9c <_malloc_r+0xa0>
 8005fc2:	4623      	mov	r3, r4
 8005fc4:	6864      	ldr	r4, [r4, #4]
 8005fc6:	e7b2      	b.n	8005f2e <_malloc_r+0x32>
 8005fc8:	4634      	mov	r4, r6
 8005fca:	6876      	ldr	r6, [r6, #4]
 8005fcc:	e7b9      	b.n	8005f42 <_malloc_r+0x46>
 8005fce:	230c      	movs	r3, #12
 8005fd0:	603b      	str	r3, [r7, #0]
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f000 fba4 	bl	8006720 <__malloc_unlock>
 8005fd8:	e7a1      	b.n	8005f1e <_malloc_r+0x22>
 8005fda:	6025      	str	r5, [r4, #0]
 8005fdc:	e7de      	b.n	8005f9c <_malloc_r+0xa0>
 8005fde:	bf00      	nop
 8005fe0:	20000180 	.word	0x20000180

08005fe4 <__sfputc_r>:
 8005fe4:	6893      	ldr	r3, [r2, #8]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	b410      	push	{r4}
 8005fec:	6093      	str	r3, [r2, #8]
 8005fee:	da08      	bge.n	8006002 <__sfputc_r+0x1e>
 8005ff0:	6994      	ldr	r4, [r2, #24]
 8005ff2:	42a3      	cmp	r3, r4
 8005ff4:	db01      	blt.n	8005ffa <__sfputc_r+0x16>
 8005ff6:	290a      	cmp	r1, #10
 8005ff8:	d103      	bne.n	8006002 <__sfputc_r+0x1e>
 8005ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ffe:	f7ff bc31 	b.w	8005864 <__swbuf_r>
 8006002:	6813      	ldr	r3, [r2, #0]
 8006004:	1c58      	adds	r0, r3, #1
 8006006:	6010      	str	r0, [r2, #0]
 8006008:	7019      	strb	r1, [r3, #0]
 800600a:	4608      	mov	r0, r1
 800600c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006010:	4770      	bx	lr

08006012 <__sfputs_r>:
 8006012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006014:	4606      	mov	r6, r0
 8006016:	460f      	mov	r7, r1
 8006018:	4614      	mov	r4, r2
 800601a:	18d5      	adds	r5, r2, r3
 800601c:	42ac      	cmp	r4, r5
 800601e:	d101      	bne.n	8006024 <__sfputs_r+0x12>
 8006020:	2000      	movs	r0, #0
 8006022:	e007      	b.n	8006034 <__sfputs_r+0x22>
 8006024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006028:	463a      	mov	r2, r7
 800602a:	4630      	mov	r0, r6
 800602c:	f7ff ffda 	bl	8005fe4 <__sfputc_r>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d1f3      	bne.n	800601c <__sfputs_r+0xa>
 8006034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006038 <_vfiprintf_r>:
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	460d      	mov	r5, r1
 800603e:	b09d      	sub	sp, #116	; 0x74
 8006040:	4614      	mov	r4, r2
 8006042:	4698      	mov	r8, r3
 8006044:	4606      	mov	r6, r0
 8006046:	b118      	cbz	r0, 8006050 <_vfiprintf_r+0x18>
 8006048:	6983      	ldr	r3, [r0, #24]
 800604a:	b90b      	cbnz	r3, 8006050 <_vfiprintf_r+0x18>
 800604c:	f7ff fde4 	bl	8005c18 <__sinit>
 8006050:	4b89      	ldr	r3, [pc, #548]	; (8006278 <_vfiprintf_r+0x240>)
 8006052:	429d      	cmp	r5, r3
 8006054:	d11b      	bne.n	800608e <_vfiprintf_r+0x56>
 8006056:	6875      	ldr	r5, [r6, #4]
 8006058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800605a:	07d9      	lsls	r1, r3, #31
 800605c:	d405      	bmi.n	800606a <_vfiprintf_r+0x32>
 800605e:	89ab      	ldrh	r3, [r5, #12]
 8006060:	059a      	lsls	r2, r3, #22
 8006062:	d402      	bmi.n	800606a <_vfiprintf_r+0x32>
 8006064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006066:	f7ff fe75 	bl	8005d54 <__retarget_lock_acquire_recursive>
 800606a:	89ab      	ldrh	r3, [r5, #12]
 800606c:	071b      	lsls	r3, r3, #28
 800606e:	d501      	bpl.n	8006074 <_vfiprintf_r+0x3c>
 8006070:	692b      	ldr	r3, [r5, #16]
 8006072:	b9eb      	cbnz	r3, 80060b0 <_vfiprintf_r+0x78>
 8006074:	4629      	mov	r1, r5
 8006076:	4630      	mov	r0, r6
 8006078:	f7ff fc46 	bl	8005908 <__swsetup_r>
 800607c:	b1c0      	cbz	r0, 80060b0 <_vfiprintf_r+0x78>
 800607e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006080:	07dc      	lsls	r4, r3, #31
 8006082:	d50e      	bpl.n	80060a2 <_vfiprintf_r+0x6a>
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	b01d      	add	sp, #116	; 0x74
 800608a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608e:	4b7b      	ldr	r3, [pc, #492]	; (800627c <_vfiprintf_r+0x244>)
 8006090:	429d      	cmp	r5, r3
 8006092:	d101      	bne.n	8006098 <_vfiprintf_r+0x60>
 8006094:	68b5      	ldr	r5, [r6, #8]
 8006096:	e7df      	b.n	8006058 <_vfiprintf_r+0x20>
 8006098:	4b79      	ldr	r3, [pc, #484]	; (8006280 <_vfiprintf_r+0x248>)
 800609a:	429d      	cmp	r5, r3
 800609c:	bf08      	it	eq
 800609e:	68f5      	ldreq	r5, [r6, #12]
 80060a0:	e7da      	b.n	8006058 <_vfiprintf_r+0x20>
 80060a2:	89ab      	ldrh	r3, [r5, #12]
 80060a4:	0598      	lsls	r0, r3, #22
 80060a6:	d4ed      	bmi.n	8006084 <_vfiprintf_r+0x4c>
 80060a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060aa:	f7ff fe54 	bl	8005d56 <__retarget_lock_release_recursive>
 80060ae:	e7e9      	b.n	8006084 <_vfiprintf_r+0x4c>
 80060b0:	2300      	movs	r3, #0
 80060b2:	9309      	str	r3, [sp, #36]	; 0x24
 80060b4:	2320      	movs	r3, #32
 80060b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80060be:	2330      	movs	r3, #48	; 0x30
 80060c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006284 <_vfiprintf_r+0x24c>
 80060c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c8:	f04f 0901 	mov.w	r9, #1
 80060cc:	4623      	mov	r3, r4
 80060ce:	469a      	mov	sl, r3
 80060d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d4:	b10a      	cbz	r2, 80060da <_vfiprintf_r+0xa2>
 80060d6:	2a25      	cmp	r2, #37	; 0x25
 80060d8:	d1f9      	bne.n	80060ce <_vfiprintf_r+0x96>
 80060da:	ebba 0b04 	subs.w	fp, sl, r4
 80060de:	d00b      	beq.n	80060f8 <_vfiprintf_r+0xc0>
 80060e0:	465b      	mov	r3, fp
 80060e2:	4622      	mov	r2, r4
 80060e4:	4629      	mov	r1, r5
 80060e6:	4630      	mov	r0, r6
 80060e8:	f7ff ff93 	bl	8006012 <__sfputs_r>
 80060ec:	3001      	adds	r0, #1
 80060ee:	f000 80aa 	beq.w	8006246 <_vfiprintf_r+0x20e>
 80060f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f4:	445a      	add	r2, fp
 80060f6:	9209      	str	r2, [sp, #36]	; 0x24
 80060f8:	f89a 3000 	ldrb.w	r3, [sl]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80a2 	beq.w	8006246 <_vfiprintf_r+0x20e>
 8006102:	2300      	movs	r3, #0
 8006104:	f04f 32ff 	mov.w	r2, #4294967295
 8006108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800610c:	f10a 0a01 	add.w	sl, sl, #1
 8006110:	9304      	str	r3, [sp, #16]
 8006112:	9307      	str	r3, [sp, #28]
 8006114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006118:	931a      	str	r3, [sp, #104]	; 0x68
 800611a:	4654      	mov	r4, sl
 800611c:	2205      	movs	r2, #5
 800611e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006122:	4858      	ldr	r0, [pc, #352]	; (8006284 <_vfiprintf_r+0x24c>)
 8006124:	f7fa f874 	bl	8000210 <memchr>
 8006128:	9a04      	ldr	r2, [sp, #16]
 800612a:	b9d8      	cbnz	r0, 8006164 <_vfiprintf_r+0x12c>
 800612c:	06d1      	lsls	r1, r2, #27
 800612e:	bf44      	itt	mi
 8006130:	2320      	movmi	r3, #32
 8006132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006136:	0713      	lsls	r3, r2, #28
 8006138:	bf44      	itt	mi
 800613a:	232b      	movmi	r3, #43	; 0x2b
 800613c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006140:	f89a 3000 	ldrb.w	r3, [sl]
 8006144:	2b2a      	cmp	r3, #42	; 0x2a
 8006146:	d015      	beq.n	8006174 <_vfiprintf_r+0x13c>
 8006148:	9a07      	ldr	r2, [sp, #28]
 800614a:	4654      	mov	r4, sl
 800614c:	2000      	movs	r0, #0
 800614e:	f04f 0c0a 	mov.w	ip, #10
 8006152:	4621      	mov	r1, r4
 8006154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006158:	3b30      	subs	r3, #48	; 0x30
 800615a:	2b09      	cmp	r3, #9
 800615c:	d94e      	bls.n	80061fc <_vfiprintf_r+0x1c4>
 800615e:	b1b0      	cbz	r0, 800618e <_vfiprintf_r+0x156>
 8006160:	9207      	str	r2, [sp, #28]
 8006162:	e014      	b.n	800618e <_vfiprintf_r+0x156>
 8006164:	eba0 0308 	sub.w	r3, r0, r8
 8006168:	fa09 f303 	lsl.w	r3, r9, r3
 800616c:	4313      	orrs	r3, r2
 800616e:	9304      	str	r3, [sp, #16]
 8006170:	46a2      	mov	sl, r4
 8006172:	e7d2      	b.n	800611a <_vfiprintf_r+0xe2>
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	1d19      	adds	r1, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	9103      	str	r1, [sp, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfbb      	ittet	lt
 8006180:	425b      	neglt	r3, r3
 8006182:	f042 0202 	orrlt.w	r2, r2, #2
 8006186:	9307      	strge	r3, [sp, #28]
 8006188:	9307      	strlt	r3, [sp, #28]
 800618a:	bfb8      	it	lt
 800618c:	9204      	strlt	r2, [sp, #16]
 800618e:	7823      	ldrb	r3, [r4, #0]
 8006190:	2b2e      	cmp	r3, #46	; 0x2e
 8006192:	d10c      	bne.n	80061ae <_vfiprintf_r+0x176>
 8006194:	7863      	ldrb	r3, [r4, #1]
 8006196:	2b2a      	cmp	r3, #42	; 0x2a
 8006198:	d135      	bne.n	8006206 <_vfiprintf_r+0x1ce>
 800619a:	9b03      	ldr	r3, [sp, #12]
 800619c:	1d1a      	adds	r2, r3, #4
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	9203      	str	r2, [sp, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	bfb8      	it	lt
 80061a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80061aa:	3402      	adds	r4, #2
 80061ac:	9305      	str	r3, [sp, #20]
 80061ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006294 <_vfiprintf_r+0x25c>
 80061b2:	7821      	ldrb	r1, [r4, #0]
 80061b4:	2203      	movs	r2, #3
 80061b6:	4650      	mov	r0, sl
 80061b8:	f7fa f82a 	bl	8000210 <memchr>
 80061bc:	b140      	cbz	r0, 80061d0 <_vfiprintf_r+0x198>
 80061be:	2340      	movs	r3, #64	; 0x40
 80061c0:	eba0 000a 	sub.w	r0, r0, sl
 80061c4:	fa03 f000 	lsl.w	r0, r3, r0
 80061c8:	9b04      	ldr	r3, [sp, #16]
 80061ca:	4303      	orrs	r3, r0
 80061cc:	3401      	adds	r4, #1
 80061ce:	9304      	str	r3, [sp, #16]
 80061d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d4:	482c      	ldr	r0, [pc, #176]	; (8006288 <_vfiprintf_r+0x250>)
 80061d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061da:	2206      	movs	r2, #6
 80061dc:	f7fa f818 	bl	8000210 <memchr>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d03f      	beq.n	8006264 <_vfiprintf_r+0x22c>
 80061e4:	4b29      	ldr	r3, [pc, #164]	; (800628c <_vfiprintf_r+0x254>)
 80061e6:	bb1b      	cbnz	r3, 8006230 <_vfiprintf_r+0x1f8>
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	3307      	adds	r3, #7
 80061ec:	f023 0307 	bic.w	r3, r3, #7
 80061f0:	3308      	adds	r3, #8
 80061f2:	9303      	str	r3, [sp, #12]
 80061f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f6:	443b      	add	r3, r7
 80061f8:	9309      	str	r3, [sp, #36]	; 0x24
 80061fa:	e767      	b.n	80060cc <_vfiprintf_r+0x94>
 80061fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006200:	460c      	mov	r4, r1
 8006202:	2001      	movs	r0, #1
 8006204:	e7a5      	b.n	8006152 <_vfiprintf_r+0x11a>
 8006206:	2300      	movs	r3, #0
 8006208:	3401      	adds	r4, #1
 800620a:	9305      	str	r3, [sp, #20]
 800620c:	4619      	mov	r1, r3
 800620e:	f04f 0c0a 	mov.w	ip, #10
 8006212:	4620      	mov	r0, r4
 8006214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006218:	3a30      	subs	r2, #48	; 0x30
 800621a:	2a09      	cmp	r2, #9
 800621c:	d903      	bls.n	8006226 <_vfiprintf_r+0x1ee>
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0c5      	beq.n	80061ae <_vfiprintf_r+0x176>
 8006222:	9105      	str	r1, [sp, #20]
 8006224:	e7c3      	b.n	80061ae <_vfiprintf_r+0x176>
 8006226:	fb0c 2101 	mla	r1, ip, r1, r2
 800622a:	4604      	mov	r4, r0
 800622c:	2301      	movs	r3, #1
 800622e:	e7f0      	b.n	8006212 <_vfiprintf_r+0x1da>
 8006230:	ab03      	add	r3, sp, #12
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	462a      	mov	r2, r5
 8006236:	4b16      	ldr	r3, [pc, #88]	; (8006290 <_vfiprintf_r+0x258>)
 8006238:	a904      	add	r1, sp, #16
 800623a:	4630      	mov	r0, r6
 800623c:	f3af 8000 	nop.w
 8006240:	4607      	mov	r7, r0
 8006242:	1c78      	adds	r0, r7, #1
 8006244:	d1d6      	bne.n	80061f4 <_vfiprintf_r+0x1bc>
 8006246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006248:	07d9      	lsls	r1, r3, #31
 800624a:	d405      	bmi.n	8006258 <_vfiprintf_r+0x220>
 800624c:	89ab      	ldrh	r3, [r5, #12]
 800624e:	059a      	lsls	r2, r3, #22
 8006250:	d402      	bmi.n	8006258 <_vfiprintf_r+0x220>
 8006252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006254:	f7ff fd7f 	bl	8005d56 <__retarget_lock_release_recursive>
 8006258:	89ab      	ldrh	r3, [r5, #12]
 800625a:	065b      	lsls	r3, r3, #25
 800625c:	f53f af12 	bmi.w	8006084 <_vfiprintf_r+0x4c>
 8006260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006262:	e711      	b.n	8006088 <_vfiprintf_r+0x50>
 8006264:	ab03      	add	r3, sp, #12
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	462a      	mov	r2, r5
 800626a:	4b09      	ldr	r3, [pc, #36]	; (8006290 <_vfiprintf_r+0x258>)
 800626c:	a904      	add	r1, sp, #16
 800626e:	4630      	mov	r0, r6
 8006270:	f000 f880 	bl	8006374 <_printf_i>
 8006274:	e7e4      	b.n	8006240 <_vfiprintf_r+0x208>
 8006276:	bf00      	nop
 8006278:	08006bbc 	.word	0x08006bbc
 800627c:	08006bdc 	.word	0x08006bdc
 8006280:	08006b9c 	.word	0x08006b9c
 8006284:	08006bfc 	.word	0x08006bfc
 8006288:	08006c06 	.word	0x08006c06
 800628c:	00000000 	.word	0x00000000
 8006290:	08006013 	.word	0x08006013
 8006294:	08006c02 	.word	0x08006c02

08006298 <_printf_common>:
 8006298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800629c:	4616      	mov	r6, r2
 800629e:	4699      	mov	r9, r3
 80062a0:	688a      	ldr	r2, [r1, #8]
 80062a2:	690b      	ldr	r3, [r1, #16]
 80062a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062a8:	4293      	cmp	r3, r2
 80062aa:	bfb8      	it	lt
 80062ac:	4613      	movlt	r3, r2
 80062ae:	6033      	str	r3, [r6, #0]
 80062b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062b4:	4607      	mov	r7, r0
 80062b6:	460c      	mov	r4, r1
 80062b8:	b10a      	cbz	r2, 80062be <_printf_common+0x26>
 80062ba:	3301      	adds	r3, #1
 80062bc:	6033      	str	r3, [r6, #0]
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	0699      	lsls	r1, r3, #26
 80062c2:	bf42      	ittt	mi
 80062c4:	6833      	ldrmi	r3, [r6, #0]
 80062c6:	3302      	addmi	r3, #2
 80062c8:	6033      	strmi	r3, [r6, #0]
 80062ca:	6825      	ldr	r5, [r4, #0]
 80062cc:	f015 0506 	ands.w	r5, r5, #6
 80062d0:	d106      	bne.n	80062e0 <_printf_common+0x48>
 80062d2:	f104 0a19 	add.w	sl, r4, #25
 80062d6:	68e3      	ldr	r3, [r4, #12]
 80062d8:	6832      	ldr	r2, [r6, #0]
 80062da:	1a9b      	subs	r3, r3, r2
 80062dc:	42ab      	cmp	r3, r5
 80062de:	dc26      	bgt.n	800632e <_printf_common+0x96>
 80062e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062e4:	1e13      	subs	r3, r2, #0
 80062e6:	6822      	ldr	r2, [r4, #0]
 80062e8:	bf18      	it	ne
 80062ea:	2301      	movne	r3, #1
 80062ec:	0692      	lsls	r2, r2, #26
 80062ee:	d42b      	bmi.n	8006348 <_printf_common+0xb0>
 80062f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062f4:	4649      	mov	r1, r9
 80062f6:	4638      	mov	r0, r7
 80062f8:	47c0      	blx	r8
 80062fa:	3001      	adds	r0, #1
 80062fc:	d01e      	beq.n	800633c <_printf_common+0xa4>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	68e5      	ldr	r5, [r4, #12]
 8006302:	6832      	ldr	r2, [r6, #0]
 8006304:	f003 0306 	and.w	r3, r3, #6
 8006308:	2b04      	cmp	r3, #4
 800630a:	bf08      	it	eq
 800630c:	1aad      	subeq	r5, r5, r2
 800630e:	68a3      	ldr	r3, [r4, #8]
 8006310:	6922      	ldr	r2, [r4, #16]
 8006312:	bf0c      	ite	eq
 8006314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006318:	2500      	movne	r5, #0
 800631a:	4293      	cmp	r3, r2
 800631c:	bfc4      	itt	gt
 800631e:	1a9b      	subgt	r3, r3, r2
 8006320:	18ed      	addgt	r5, r5, r3
 8006322:	2600      	movs	r6, #0
 8006324:	341a      	adds	r4, #26
 8006326:	42b5      	cmp	r5, r6
 8006328:	d11a      	bne.n	8006360 <_printf_common+0xc8>
 800632a:	2000      	movs	r0, #0
 800632c:	e008      	b.n	8006340 <_printf_common+0xa8>
 800632e:	2301      	movs	r3, #1
 8006330:	4652      	mov	r2, sl
 8006332:	4649      	mov	r1, r9
 8006334:	4638      	mov	r0, r7
 8006336:	47c0      	blx	r8
 8006338:	3001      	adds	r0, #1
 800633a:	d103      	bne.n	8006344 <_printf_common+0xac>
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006344:	3501      	adds	r5, #1
 8006346:	e7c6      	b.n	80062d6 <_printf_common+0x3e>
 8006348:	18e1      	adds	r1, r4, r3
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	2030      	movs	r0, #48	; 0x30
 800634e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006352:	4422      	add	r2, r4
 8006354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800635c:	3302      	adds	r3, #2
 800635e:	e7c7      	b.n	80062f0 <_printf_common+0x58>
 8006360:	2301      	movs	r3, #1
 8006362:	4622      	mov	r2, r4
 8006364:	4649      	mov	r1, r9
 8006366:	4638      	mov	r0, r7
 8006368:	47c0      	blx	r8
 800636a:	3001      	adds	r0, #1
 800636c:	d0e6      	beq.n	800633c <_printf_common+0xa4>
 800636e:	3601      	adds	r6, #1
 8006370:	e7d9      	b.n	8006326 <_printf_common+0x8e>
	...

08006374 <_printf_i>:
 8006374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	7e0f      	ldrb	r7, [r1, #24]
 800637a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800637c:	2f78      	cmp	r7, #120	; 0x78
 800637e:	4691      	mov	r9, r2
 8006380:	4680      	mov	r8, r0
 8006382:	460c      	mov	r4, r1
 8006384:	469a      	mov	sl, r3
 8006386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800638a:	d807      	bhi.n	800639c <_printf_i+0x28>
 800638c:	2f62      	cmp	r7, #98	; 0x62
 800638e:	d80a      	bhi.n	80063a6 <_printf_i+0x32>
 8006390:	2f00      	cmp	r7, #0
 8006392:	f000 80d8 	beq.w	8006546 <_printf_i+0x1d2>
 8006396:	2f58      	cmp	r7, #88	; 0x58
 8006398:	f000 80a3 	beq.w	80064e2 <_printf_i+0x16e>
 800639c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063a4:	e03a      	b.n	800641c <_printf_i+0xa8>
 80063a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063aa:	2b15      	cmp	r3, #21
 80063ac:	d8f6      	bhi.n	800639c <_printf_i+0x28>
 80063ae:	a101      	add	r1, pc, #4	; (adr r1, 80063b4 <_printf_i+0x40>)
 80063b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063b4:	0800640d 	.word	0x0800640d
 80063b8:	08006421 	.word	0x08006421
 80063bc:	0800639d 	.word	0x0800639d
 80063c0:	0800639d 	.word	0x0800639d
 80063c4:	0800639d 	.word	0x0800639d
 80063c8:	0800639d 	.word	0x0800639d
 80063cc:	08006421 	.word	0x08006421
 80063d0:	0800639d 	.word	0x0800639d
 80063d4:	0800639d 	.word	0x0800639d
 80063d8:	0800639d 	.word	0x0800639d
 80063dc:	0800639d 	.word	0x0800639d
 80063e0:	0800652d 	.word	0x0800652d
 80063e4:	08006451 	.word	0x08006451
 80063e8:	0800650f 	.word	0x0800650f
 80063ec:	0800639d 	.word	0x0800639d
 80063f0:	0800639d 	.word	0x0800639d
 80063f4:	0800654f 	.word	0x0800654f
 80063f8:	0800639d 	.word	0x0800639d
 80063fc:	08006451 	.word	0x08006451
 8006400:	0800639d 	.word	0x0800639d
 8006404:	0800639d 	.word	0x0800639d
 8006408:	08006517 	.word	0x08006517
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	1d1a      	adds	r2, r3, #4
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	602a      	str	r2, [r5, #0]
 8006414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800641c:	2301      	movs	r3, #1
 800641e:	e0a3      	b.n	8006568 <_printf_i+0x1f4>
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	6829      	ldr	r1, [r5, #0]
 8006424:	0606      	lsls	r6, r0, #24
 8006426:	f101 0304 	add.w	r3, r1, #4
 800642a:	d50a      	bpl.n	8006442 <_printf_i+0xce>
 800642c:	680e      	ldr	r6, [r1, #0]
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	2e00      	cmp	r6, #0
 8006432:	da03      	bge.n	800643c <_printf_i+0xc8>
 8006434:	232d      	movs	r3, #45	; 0x2d
 8006436:	4276      	negs	r6, r6
 8006438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643c:	485e      	ldr	r0, [pc, #376]	; (80065b8 <_printf_i+0x244>)
 800643e:	230a      	movs	r3, #10
 8006440:	e019      	b.n	8006476 <_printf_i+0x102>
 8006442:	680e      	ldr	r6, [r1, #0]
 8006444:	602b      	str	r3, [r5, #0]
 8006446:	f010 0f40 	tst.w	r0, #64	; 0x40
 800644a:	bf18      	it	ne
 800644c:	b236      	sxthne	r6, r6
 800644e:	e7ef      	b.n	8006430 <_printf_i+0xbc>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	6820      	ldr	r0, [r4, #0]
 8006454:	1d19      	adds	r1, r3, #4
 8006456:	6029      	str	r1, [r5, #0]
 8006458:	0601      	lsls	r1, r0, #24
 800645a:	d501      	bpl.n	8006460 <_printf_i+0xec>
 800645c:	681e      	ldr	r6, [r3, #0]
 800645e:	e002      	b.n	8006466 <_printf_i+0xf2>
 8006460:	0646      	lsls	r6, r0, #25
 8006462:	d5fb      	bpl.n	800645c <_printf_i+0xe8>
 8006464:	881e      	ldrh	r6, [r3, #0]
 8006466:	4854      	ldr	r0, [pc, #336]	; (80065b8 <_printf_i+0x244>)
 8006468:	2f6f      	cmp	r7, #111	; 0x6f
 800646a:	bf0c      	ite	eq
 800646c:	2308      	moveq	r3, #8
 800646e:	230a      	movne	r3, #10
 8006470:	2100      	movs	r1, #0
 8006472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006476:	6865      	ldr	r5, [r4, #4]
 8006478:	60a5      	str	r5, [r4, #8]
 800647a:	2d00      	cmp	r5, #0
 800647c:	bfa2      	ittt	ge
 800647e:	6821      	ldrge	r1, [r4, #0]
 8006480:	f021 0104 	bicge.w	r1, r1, #4
 8006484:	6021      	strge	r1, [r4, #0]
 8006486:	b90e      	cbnz	r6, 800648c <_printf_i+0x118>
 8006488:	2d00      	cmp	r5, #0
 800648a:	d04d      	beq.n	8006528 <_printf_i+0x1b4>
 800648c:	4615      	mov	r5, r2
 800648e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006492:	fb03 6711 	mls	r7, r3, r1, r6
 8006496:	5dc7      	ldrb	r7, [r0, r7]
 8006498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800649c:	4637      	mov	r7, r6
 800649e:	42bb      	cmp	r3, r7
 80064a0:	460e      	mov	r6, r1
 80064a2:	d9f4      	bls.n	800648e <_printf_i+0x11a>
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d10b      	bne.n	80064c0 <_printf_i+0x14c>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	07de      	lsls	r6, r3, #31
 80064ac:	d508      	bpl.n	80064c0 <_printf_i+0x14c>
 80064ae:	6923      	ldr	r3, [r4, #16]
 80064b0:	6861      	ldr	r1, [r4, #4]
 80064b2:	4299      	cmp	r1, r3
 80064b4:	bfde      	ittt	le
 80064b6:	2330      	movle	r3, #48	; 0x30
 80064b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064c0:	1b52      	subs	r2, r2, r5
 80064c2:	6122      	str	r2, [r4, #16]
 80064c4:	f8cd a000 	str.w	sl, [sp]
 80064c8:	464b      	mov	r3, r9
 80064ca:	aa03      	add	r2, sp, #12
 80064cc:	4621      	mov	r1, r4
 80064ce:	4640      	mov	r0, r8
 80064d0:	f7ff fee2 	bl	8006298 <_printf_common>
 80064d4:	3001      	adds	r0, #1
 80064d6:	d14c      	bne.n	8006572 <_printf_i+0x1fe>
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	b004      	add	sp, #16
 80064de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e2:	4835      	ldr	r0, [pc, #212]	; (80065b8 <_printf_i+0x244>)
 80064e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064e8:	6829      	ldr	r1, [r5, #0]
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80064f0:	6029      	str	r1, [r5, #0]
 80064f2:	061d      	lsls	r5, r3, #24
 80064f4:	d514      	bpl.n	8006520 <_printf_i+0x1ac>
 80064f6:	07df      	lsls	r7, r3, #31
 80064f8:	bf44      	itt	mi
 80064fa:	f043 0320 	orrmi.w	r3, r3, #32
 80064fe:	6023      	strmi	r3, [r4, #0]
 8006500:	b91e      	cbnz	r6, 800650a <_printf_i+0x196>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	f023 0320 	bic.w	r3, r3, #32
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	2310      	movs	r3, #16
 800650c:	e7b0      	b.n	8006470 <_printf_i+0xfc>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	f043 0320 	orr.w	r3, r3, #32
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	2378      	movs	r3, #120	; 0x78
 8006518:	4828      	ldr	r0, [pc, #160]	; (80065bc <_printf_i+0x248>)
 800651a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800651e:	e7e3      	b.n	80064e8 <_printf_i+0x174>
 8006520:	0659      	lsls	r1, r3, #25
 8006522:	bf48      	it	mi
 8006524:	b2b6      	uxthmi	r6, r6
 8006526:	e7e6      	b.n	80064f6 <_printf_i+0x182>
 8006528:	4615      	mov	r5, r2
 800652a:	e7bb      	b.n	80064a4 <_printf_i+0x130>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	6826      	ldr	r6, [r4, #0]
 8006530:	6961      	ldr	r1, [r4, #20]
 8006532:	1d18      	adds	r0, r3, #4
 8006534:	6028      	str	r0, [r5, #0]
 8006536:	0635      	lsls	r5, r6, #24
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	d501      	bpl.n	8006540 <_printf_i+0x1cc>
 800653c:	6019      	str	r1, [r3, #0]
 800653e:	e002      	b.n	8006546 <_printf_i+0x1d2>
 8006540:	0670      	lsls	r0, r6, #25
 8006542:	d5fb      	bpl.n	800653c <_printf_i+0x1c8>
 8006544:	8019      	strh	r1, [r3, #0]
 8006546:	2300      	movs	r3, #0
 8006548:	6123      	str	r3, [r4, #16]
 800654a:	4615      	mov	r5, r2
 800654c:	e7ba      	b.n	80064c4 <_printf_i+0x150>
 800654e:	682b      	ldr	r3, [r5, #0]
 8006550:	1d1a      	adds	r2, r3, #4
 8006552:	602a      	str	r2, [r5, #0]
 8006554:	681d      	ldr	r5, [r3, #0]
 8006556:	6862      	ldr	r2, [r4, #4]
 8006558:	2100      	movs	r1, #0
 800655a:	4628      	mov	r0, r5
 800655c:	f7f9 fe58 	bl	8000210 <memchr>
 8006560:	b108      	cbz	r0, 8006566 <_printf_i+0x1f2>
 8006562:	1b40      	subs	r0, r0, r5
 8006564:	6060      	str	r0, [r4, #4]
 8006566:	6863      	ldr	r3, [r4, #4]
 8006568:	6123      	str	r3, [r4, #16]
 800656a:	2300      	movs	r3, #0
 800656c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006570:	e7a8      	b.n	80064c4 <_printf_i+0x150>
 8006572:	6923      	ldr	r3, [r4, #16]
 8006574:	462a      	mov	r2, r5
 8006576:	4649      	mov	r1, r9
 8006578:	4640      	mov	r0, r8
 800657a:	47d0      	blx	sl
 800657c:	3001      	adds	r0, #1
 800657e:	d0ab      	beq.n	80064d8 <_printf_i+0x164>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	079b      	lsls	r3, r3, #30
 8006584:	d413      	bmi.n	80065ae <_printf_i+0x23a>
 8006586:	68e0      	ldr	r0, [r4, #12]
 8006588:	9b03      	ldr	r3, [sp, #12]
 800658a:	4298      	cmp	r0, r3
 800658c:	bfb8      	it	lt
 800658e:	4618      	movlt	r0, r3
 8006590:	e7a4      	b.n	80064dc <_printf_i+0x168>
 8006592:	2301      	movs	r3, #1
 8006594:	4632      	mov	r2, r6
 8006596:	4649      	mov	r1, r9
 8006598:	4640      	mov	r0, r8
 800659a:	47d0      	blx	sl
 800659c:	3001      	adds	r0, #1
 800659e:	d09b      	beq.n	80064d8 <_printf_i+0x164>
 80065a0:	3501      	adds	r5, #1
 80065a2:	68e3      	ldr	r3, [r4, #12]
 80065a4:	9903      	ldr	r1, [sp, #12]
 80065a6:	1a5b      	subs	r3, r3, r1
 80065a8:	42ab      	cmp	r3, r5
 80065aa:	dcf2      	bgt.n	8006592 <_printf_i+0x21e>
 80065ac:	e7eb      	b.n	8006586 <_printf_i+0x212>
 80065ae:	2500      	movs	r5, #0
 80065b0:	f104 0619 	add.w	r6, r4, #25
 80065b4:	e7f5      	b.n	80065a2 <_printf_i+0x22e>
 80065b6:	bf00      	nop
 80065b8:	08006c0d 	.word	0x08006c0d
 80065bc:	08006c1e 	.word	0x08006c1e

080065c0 <_sbrk_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4d06      	ldr	r5, [pc, #24]	; (80065dc <_sbrk_r+0x1c>)
 80065c4:	2300      	movs	r3, #0
 80065c6:	4604      	mov	r4, r0
 80065c8:	4608      	mov	r0, r1
 80065ca:	602b      	str	r3, [r5, #0]
 80065cc:	f7fb fbd0 	bl	8001d70 <_sbrk>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d102      	bne.n	80065da <_sbrk_r+0x1a>
 80065d4:	682b      	ldr	r3, [r5, #0]
 80065d6:	b103      	cbz	r3, 80065da <_sbrk_r+0x1a>
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	bd38      	pop	{r3, r4, r5, pc}
 80065dc:	20000188 	.word	0x20000188

080065e0 <__sread>:
 80065e0:	b510      	push	{r4, lr}
 80065e2:	460c      	mov	r4, r1
 80065e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e8:	f000 f8a0 	bl	800672c <_read_r>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	bfab      	itete	ge
 80065f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065f2:	89a3      	ldrhlt	r3, [r4, #12]
 80065f4:	181b      	addge	r3, r3, r0
 80065f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065fa:	bfac      	ite	ge
 80065fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80065fe:	81a3      	strhlt	r3, [r4, #12]
 8006600:	bd10      	pop	{r4, pc}

08006602 <__swrite>:
 8006602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006606:	461f      	mov	r7, r3
 8006608:	898b      	ldrh	r3, [r1, #12]
 800660a:	05db      	lsls	r3, r3, #23
 800660c:	4605      	mov	r5, r0
 800660e:	460c      	mov	r4, r1
 8006610:	4616      	mov	r6, r2
 8006612:	d505      	bpl.n	8006620 <__swrite+0x1e>
 8006614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006618:	2302      	movs	r3, #2
 800661a:	2200      	movs	r2, #0
 800661c:	f000 f868 	bl	80066f0 <_lseek_r>
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800662a:	81a3      	strh	r3, [r4, #12]
 800662c:	4632      	mov	r2, r6
 800662e:	463b      	mov	r3, r7
 8006630:	4628      	mov	r0, r5
 8006632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006636:	f000 b817 	b.w	8006668 <_write_r>

0800663a <__sseek>:
 800663a:	b510      	push	{r4, lr}
 800663c:	460c      	mov	r4, r1
 800663e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006642:	f000 f855 	bl	80066f0 <_lseek_r>
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	bf15      	itete	ne
 800664c:	6560      	strne	r0, [r4, #84]	; 0x54
 800664e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006656:	81a3      	strheq	r3, [r4, #12]
 8006658:	bf18      	it	ne
 800665a:	81a3      	strhne	r3, [r4, #12]
 800665c:	bd10      	pop	{r4, pc}

0800665e <__sclose>:
 800665e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006662:	f000 b813 	b.w	800668c <_close_r>
	...

08006668 <_write_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4d07      	ldr	r5, [pc, #28]	; (8006688 <_write_r+0x20>)
 800666c:	4604      	mov	r4, r0
 800666e:	4608      	mov	r0, r1
 8006670:	4611      	mov	r1, r2
 8006672:	2200      	movs	r2, #0
 8006674:	602a      	str	r2, [r5, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	f7fb fb29 	bl	8001cce <_write>
 800667c:	1c43      	adds	r3, r0, #1
 800667e:	d102      	bne.n	8006686 <_write_r+0x1e>
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	b103      	cbz	r3, 8006686 <_write_r+0x1e>
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	bd38      	pop	{r3, r4, r5, pc}
 8006688:	20000188 	.word	0x20000188

0800668c <_close_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	4d06      	ldr	r5, [pc, #24]	; (80066a8 <_close_r+0x1c>)
 8006690:	2300      	movs	r3, #0
 8006692:	4604      	mov	r4, r0
 8006694:	4608      	mov	r0, r1
 8006696:	602b      	str	r3, [r5, #0]
 8006698:	f7fb fb35 	bl	8001d06 <_close>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d102      	bne.n	80066a6 <_close_r+0x1a>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	b103      	cbz	r3, 80066a6 <_close_r+0x1a>
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	20000188 	.word	0x20000188

080066ac <_fstat_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4d07      	ldr	r5, [pc, #28]	; (80066cc <_fstat_r+0x20>)
 80066b0:	2300      	movs	r3, #0
 80066b2:	4604      	mov	r4, r0
 80066b4:	4608      	mov	r0, r1
 80066b6:	4611      	mov	r1, r2
 80066b8:	602b      	str	r3, [r5, #0]
 80066ba:	f7fb fb30 	bl	8001d1e <_fstat>
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	d102      	bne.n	80066c8 <_fstat_r+0x1c>
 80066c2:	682b      	ldr	r3, [r5, #0]
 80066c4:	b103      	cbz	r3, 80066c8 <_fstat_r+0x1c>
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	bd38      	pop	{r3, r4, r5, pc}
 80066ca:	bf00      	nop
 80066cc:	20000188 	.word	0x20000188

080066d0 <_isatty_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d06      	ldr	r5, [pc, #24]	; (80066ec <_isatty_r+0x1c>)
 80066d4:	2300      	movs	r3, #0
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	f7fb fb2f 	bl	8001d3e <_isatty>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d102      	bne.n	80066ea <_isatty_r+0x1a>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b103      	cbz	r3, 80066ea <_isatty_r+0x1a>
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	20000188 	.word	0x20000188

080066f0 <_lseek_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d07      	ldr	r5, [pc, #28]	; (8006710 <_lseek_r+0x20>)
 80066f4:	4604      	mov	r4, r0
 80066f6:	4608      	mov	r0, r1
 80066f8:	4611      	mov	r1, r2
 80066fa:	2200      	movs	r2, #0
 80066fc:	602a      	str	r2, [r5, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	f7fb fb28 	bl	8001d54 <_lseek>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_lseek_r+0x1e>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_lseek_r+0x1e>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	20000188 	.word	0x20000188

08006714 <__malloc_lock>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__malloc_lock+0x8>)
 8006716:	f7ff bb1d 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 800671a:	bf00      	nop
 800671c:	2000017c 	.word	0x2000017c

08006720 <__malloc_unlock>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__malloc_unlock+0x8>)
 8006722:	f7ff bb18 	b.w	8005d56 <__retarget_lock_release_recursive>
 8006726:	bf00      	nop
 8006728:	2000017c 	.word	0x2000017c

0800672c <_read_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d07      	ldr	r5, [pc, #28]	; (800674c <_read_r+0x20>)
 8006730:	4604      	mov	r4, r0
 8006732:	4608      	mov	r0, r1
 8006734:	4611      	mov	r1, r2
 8006736:	2200      	movs	r2, #0
 8006738:	602a      	str	r2, [r5, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	f7fb faaa 	bl	8001c94 <_read>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_read_r+0x1e>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_read_r+0x1e>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	20000188 	.word	0x20000188

08006750 <_init>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr

0800675c <_fini>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr
