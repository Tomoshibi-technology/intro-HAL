
Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a0  080030a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030a0  080030a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030a0  080030a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000168  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000174  20000174  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2c3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014ae  00000000  00000000  0002a2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0002b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a0  00000000  00000000  0002bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c4c  00000000  00000000  0002c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2ee  00000000  00000000  000463b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098d90  00000000  00000000  000506a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e9432  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020d8  00000000  00000000  000e9484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003050 	.word	0x08003050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003050 	.word	0x08003050

080001c8 <TurnOffNeoPixelBuffer>:
    g_neoPixels[pixelIndex].r = newValue.r;
    g_neoPixels[pixelIndex].g = newValue.g;
    g_neoPixels[pixelIndex].b = newValue.b;
}

void TurnOffNeoPixelBuffer(uint32_t pixelIndex){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
    if (pixelIndex >= NEOPIXEL_COUNT){
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2b1d      	cmp	r3, #29
 80001d4:	d81a      	bhi.n	800020c <TurnOffNeoPixelBuffer+0x44>
        return;
    }

    g_neoPixels[pixelIndex].r = 0;
 80001d6:	4910      	ldr	r1, [pc, #64]	; (8000218 <TurnOffNeoPixelBuffer+0x50>)
 80001d8:	687a      	ldr	r2, [r7, #4]
 80001da:	4613      	mov	r3, r2
 80001dc:	005b      	lsls	r3, r3, #1
 80001de:	4413      	add	r3, r2
 80001e0:	440b      	add	r3, r1
 80001e2:	2200      	movs	r2, #0
 80001e4:	701a      	strb	r2, [r3, #0]
    g_neoPixels[pixelIndex].g = 0;
 80001e6:	490c      	ldr	r1, [pc, #48]	; (8000218 <TurnOffNeoPixelBuffer+0x50>)
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	4613      	mov	r3, r2
 80001ec:	005b      	lsls	r3, r3, #1
 80001ee:	4413      	add	r3, r2
 80001f0:	440b      	add	r3, r1
 80001f2:	3301      	adds	r3, #1
 80001f4:	2200      	movs	r2, #0
 80001f6:	701a      	strb	r2, [r3, #0]
    g_neoPixels[pixelIndex].b = 0;
 80001f8:	4907      	ldr	r1, [pc, #28]	; (8000218 <TurnOffNeoPixelBuffer+0x50>)
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	4613      	mov	r3, r2
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	4413      	add	r3, r2
 8000202:	440b      	add	r3, r1
 8000204:	3302      	adds	r3, #2
 8000206:	2200      	movs	r2, #0
 8000208:	701a      	strb	r2, [r3, #0]
 800020a:	e000      	b.n	800020e <TurnOffNeoPixelBuffer+0x46>
        return;
 800020c:	bf00      	nop
}
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	20000114 	.word	0x20000114

0800021c <ResetNeoPixel>:

void ResetNeoPixel(){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
    uint8_t txValue = NEOPIXEL_RESET;
 8000222:	2300      	movs	r3, #0
 8000224:	70fb      	strb	r3, [r7, #3]
    uint32_t i = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]

    // SPI Clock: 8MHz
    // Send Low >50us
    // 8 * 50 / 1e-6 = 400
    for (i = 0; i < 512; i++){
 800022a:	2300      	movs	r3, #0
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	e008      	b.n	8000242 <ResetNeoPixel+0x26>
        HAL_SPI_Transmit(&hspi1, &txValue, 1, 100);
 8000230:	1cf9      	adds	r1, r7, #3
 8000232:	2364      	movs	r3, #100	; 0x64
 8000234:	2201      	movs	r2, #1
 8000236:	4807      	ldr	r0, [pc, #28]	; (8000254 <ResetNeoPixel+0x38>)
 8000238:	f002 f86b 	bl	8002312 <HAL_SPI_Transmit>
    for (i = 0; i < 512; i++){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3301      	adds	r3, #1
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000248:	d3f2      	bcc.n	8000230 <ResetNeoPixel+0x14>
    }
}
 800024a:	bf00      	nop
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000028 	.word	0x20000028

08000258 <UpdateNeoPixel>:

void UpdateNeoPixel(){
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
    uint32_t i, j = 0;
 800025e:	2300      	movs	r3, #0
 8000260:	60bb      	str	r3, [r7, #8]
    uint8_t txValue;

    ResetNeoPixel();
 8000262:	f7ff ffdb 	bl	800021c <ResetNeoPixel>

    for (i=0; i < NEOPIXEL_COUNT; i++){
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	e06a      	b.n	8000342 <UpdateNeoPixel+0xea>
        for (j=0; j<NEOPIXEL_SIGNAL_CLOCK_COUNT; j++){
 800026c:	2300      	movs	r3, #0
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	e01c      	b.n	80002ac <UpdateNeoPixel+0x54>
            txValue = g_neoPixels[i].g & 0x80 >> j ? NEOPIXEL_1 : NEOPIXEL_0;
 8000272:	4938      	ldr	r1, [pc, #224]	; (8000354 <UpdateNeoPixel+0xfc>)
 8000274:	68fa      	ldr	r2, [r7, #12]
 8000276:	4613      	mov	r3, r2
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	4413      	add	r3, r2
 800027c:	440b      	add	r3, r1
 800027e:	3301      	adds	r3, #1
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	4619      	mov	r1, r3
 8000284:	2280      	movs	r2, #128	; 0x80
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	fa42 f303 	asr.w	r3, r2, r3
 800028c:	400b      	ands	r3, r1
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <UpdateNeoPixel+0x3e>
 8000292:	23fc      	movs	r3, #252	; 0xfc
 8000294:	e000      	b.n	8000298 <UpdateNeoPixel+0x40>
 8000296:	23c0      	movs	r3, #192	; 0xc0
 8000298:	71fb      	strb	r3, [r7, #7]
            HAL_SPI_Transmit(&hspi1, &txValue, 1, 100);
 800029a:	1df9      	adds	r1, r7, #7
 800029c:	2364      	movs	r3, #100	; 0x64
 800029e:	2201      	movs	r2, #1
 80002a0:	482d      	ldr	r0, [pc, #180]	; (8000358 <UpdateNeoPixel+0x100>)
 80002a2:	f002 f836 	bl	8002312 <HAL_SPI_Transmit>
        for (j=0; j<NEOPIXEL_SIGNAL_CLOCK_COUNT; j++){
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	3301      	adds	r3, #1
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	d9df      	bls.n	8000272 <UpdateNeoPixel+0x1a>
        }

        for (j=0; j<NEOPIXEL_SIGNAL_CLOCK_COUNT; j++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	e01b      	b.n	80002f0 <UpdateNeoPixel+0x98>
            txValue = g_neoPixels[i].r & 0x80 >> j ? NEOPIXEL_1 : NEOPIXEL_0;
 80002b8:	4926      	ldr	r1, [pc, #152]	; (8000354 <UpdateNeoPixel+0xfc>)
 80002ba:	68fa      	ldr	r2, [r7, #12]
 80002bc:	4613      	mov	r3, r2
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	4413      	add	r3, r2
 80002c2:	440b      	add	r3, r1
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	4619      	mov	r1, r3
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	fa42 f303 	asr.w	r3, r2, r3
 80002d0:	400b      	ands	r3, r1
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <UpdateNeoPixel+0x82>
 80002d6:	23fc      	movs	r3, #252	; 0xfc
 80002d8:	e000      	b.n	80002dc <UpdateNeoPixel+0x84>
 80002da:	23c0      	movs	r3, #192	; 0xc0
 80002dc:	71fb      	strb	r3, [r7, #7]
            HAL_SPI_Transmit(&hspi1, &txValue, 1, 100);
 80002de:	1df9      	adds	r1, r7, #7
 80002e0:	2364      	movs	r3, #100	; 0x64
 80002e2:	2201      	movs	r2, #1
 80002e4:	481c      	ldr	r0, [pc, #112]	; (8000358 <UpdateNeoPixel+0x100>)
 80002e6:	f002 f814 	bl	8002312 <HAL_SPI_Transmit>
        for (j=0; j<NEOPIXEL_SIGNAL_CLOCK_COUNT; j++){
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	3301      	adds	r3, #1
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	2b07      	cmp	r3, #7
 80002f4:	d9e0      	bls.n	80002b8 <UpdateNeoPixel+0x60>
        }

        for (j=0; j<NEOPIXEL_SIGNAL_CLOCK_COUNT; j++){
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	e01c      	b.n	8000336 <UpdateNeoPixel+0xde>
            txValue = g_neoPixels[i].b & 0x80 >> j ? NEOPIXEL_1 : NEOPIXEL_0;
 80002fc:	4915      	ldr	r1, [pc, #84]	; (8000354 <UpdateNeoPixel+0xfc>)
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	4613      	mov	r3, r2
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	4413      	add	r3, r2
 8000306:	440b      	add	r3, r1
 8000308:	3302      	adds	r3, #2
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	4619      	mov	r1, r3
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	fa42 f303 	asr.w	r3, r2, r3
 8000316:	400b      	ands	r3, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <UpdateNeoPixel+0xc8>
 800031c:	23fc      	movs	r3, #252	; 0xfc
 800031e:	e000      	b.n	8000322 <UpdateNeoPixel+0xca>
 8000320:	23c0      	movs	r3, #192	; 0xc0
 8000322:	71fb      	strb	r3, [r7, #7]
            HAL_SPI_Transmit(&hspi1, &txValue, 1, 100);
 8000324:	1df9      	adds	r1, r7, #7
 8000326:	2364      	movs	r3, #100	; 0x64
 8000328:	2201      	movs	r2, #1
 800032a:	480b      	ldr	r0, [pc, #44]	; (8000358 <UpdateNeoPixel+0x100>)
 800032c:	f001 fff1 	bl	8002312 <HAL_SPI_Transmit>
        for (j=0; j<NEOPIXEL_SIGNAL_CLOCK_COUNT; j++){
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	3301      	adds	r3, #1
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	2b07      	cmp	r3, #7
 800033a:	d9df      	bls.n	80002fc <UpdateNeoPixel+0xa4>
    for (i=0; i < NEOPIXEL_COUNT; i++){
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	3301      	adds	r3, #1
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	2b1d      	cmp	r3, #29
 8000346:	d991      	bls.n	800026c <UpdateNeoPixel+0x14>
        }
    }
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000114 	.word	0x20000114
 8000358:	20000028 	.word	0x20000028

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000362:	f000 fa01 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000366:	f000 f816 	bl	8000396 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036a:	f000 f8c3 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800036e:	f000 f891 	bl	8000494 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000372:	f000 f851 	bl	8000418 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int k = 0; k<5; k++){
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	e006      	b.n	800038a <main+0x2e>
		  TurnOffNeoPixelBuffer(k);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff22 	bl	80001c8 <TurnOffNeoPixelBuffer>
	  for(int k = 0; k<5; k++){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b04      	cmp	r3, #4
 800038e:	ddf5      	ble.n	800037c <main+0x20>
	  }
	  UpdateNeoPixel();
 8000390:	f7ff ff62 	bl	8000258 <UpdateNeoPixel>
	  for(int k = 0; k<5; k++){
 8000394:	e7ef      	b.n	8000376 <main+0x1a>

08000396 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b090      	sub	sp, #64	; 0x40
 800039a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039c:	f107 0318 	add.w	r3, r7, #24
 80003a0:	2228      	movs	r2, #40	; 0x28
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f002 fe4b 	bl	8003040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b8:	2302      	movs	r3, #2
 80003ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003bc:	2301      	movs	r3, #1
 80003be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c0:	2310      	movs	r3, #16
 80003c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c4:	2302      	movs	r3, #2
 80003c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c8:	2300      	movs	r3, #0
 80003ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d2:	f107 0318 	add.w	r3, r7, #24
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 fc84 	bl	8000ce4 <HAL_RCC_OscConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003e2:	f000 f8ab 	bl	800053c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	230f      	movs	r3, #15
 80003e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ea:	2302      	movs	r3, #2
 80003ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 fcae 	bl	8001d60 <HAL_RCC_ClockConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x78>
  {
    Error_Handler();
 800040a:	f000 f897 	bl	800053c <Error_Handler>
  }
}
 800040e:	bf00      	nop
 8000410:	3740      	adds	r7, #64	; 0x40
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <MX_SPI1_Init+0x74>)
 800041e:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <MX_SPI1_Init+0x78>)
 8000420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <MX_SPI1_Init+0x74>)
 8000424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800042a:	4b18      	ldr	r3, [pc, #96]	; (800048c <MX_SPI1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <MX_SPI1_Init+0x74>)
 8000432:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000436:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_SPI1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_SPI1_Init+0x74>)
 8000446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800044a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_SPI1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_SPI1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_SPI1_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_SPI1_Init+0x74>)
 8000466:	2207      	movs	r2, #7
 8000468:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_SPI1_Init+0x74>)
 8000472:	2208      	movs	r2, #8
 8000474:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_SPI1_Init+0x74>)
 8000478:	f001 fea8 	bl	80021cc <HAL_SPI_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000482:	f000 f85b 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000028 	.word	0x20000028
 8000490:	40013000 	.word	0x40013000

08000494 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_USART2_UART_Init+0x58>)
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <MX_USART2_UART_Init+0x5c>)
 800049c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004d8:	f002 f9f4 	bl	80028c4 <HAL_UART_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004e2:	f000 f82b 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2000008c 	.word	0x2000008c
 80004f0:	40004400 	.word	0x40004400

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_GPIO_Init+0x44>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <MX_GPIO_Init+0x44>)
 8000500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_GPIO_Init+0x44>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_GPIO_Init+0x44>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a08      	ldr	r2, [pc, #32]	; (8000538 <MX_GPIO_Init+0x44>)
 8000518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_GPIO_Init+0x44>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
}
 8000542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000544:	e7fe      	b.n	8000544 <Error_Handler+0x8>
	...

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <HAL_MspInit+0x44>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a0e      	ldr	r2, [pc, #56]	; (800058c <HAL_MspInit+0x44>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <HAL_MspInit+0x44>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <HAL_MspInit+0x44>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	4a08      	ldr	r2, [pc, #32]	; (800058c <HAL_MspInit+0x44>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000570:	61d3      	str	r3, [r2, #28]
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_MspInit+0x44>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a17      	ldr	r2, [pc, #92]	; (800060c <HAL_SPI_MspInit+0x7c>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d128      	bne.n	8000604 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <HAL_SPI_MspInit+0x80>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a16      	ldr	r2, [pc, #88]	; (8000610 <HAL_SPI_MspInit+0x80>)
 80005b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <HAL_SPI_MspInit+0x80>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <HAL_SPI_MspInit+0x80>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <HAL_SPI_MspInit+0x80>)
 80005d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_SPI_MspInit+0x80>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80005e2:	23e0      	movs	r3, #224	; 0xe0
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ee:	2303      	movs	r3, #3
 80005f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005f2:	2305      	movs	r3, #5
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f000 f9fe 	bl	8000a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	; 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40013000 	.word	0x40013000
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a18      	ldr	r2, [pc, #96]	; (8000694 <HAL_UART_MspInit+0x80>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d129      	bne.n	800068a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_UART_MspInit+0x84>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a17      	ldr	r2, [pc, #92]	; (8000698 <HAL_UART_MspInit+0x84>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_UART_MspInit+0x84>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_UART_MspInit+0x84>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <HAL_UART_MspInit+0x84>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <HAL_UART_MspInit+0x84>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000666:	f248 0304 	movw	r3, #32772	; 0x8004
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000678:	2307      	movs	r3, #7
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f000 f9bb 	bl	8000a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40004400 	.word	0x40004400
 8000698:	40021000 	.word	0x40021000

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <NMI_Handler+0x4>

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <MemManage_Handler+0x4>

080006ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <UsageFault_Handler+0x4>

080006ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e8:	f000 f884 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <SystemInit+0x20>)
 80006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006fa:	4a05      	ldr	r2, [pc, #20]	; (8000710 <SystemInit+0x20>)
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800074c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000718:	f7ff ffea 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <LoopForever+0x6>)
  ldr r1, =_edata
 800071e:	490d      	ldr	r1, [pc, #52]	; (8000754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <LoopForever+0xe>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000734:	4c0a      	ldr	r4, [pc, #40]	; (8000760 <LoopForever+0x16>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f002 fc59 	bl	8002ff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000746:	f7ff fe09 	bl	800035c <main>

0800074a <LoopForever>:

LoopForever:
    b LoopForever
 800074a:	e7fe      	b.n	800074a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800074c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000758:	080030a8 	.word	0x080030a8
  ldr r2, =_sbss
 800075c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000760:	20000174 	.word	0x20000174

08000764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_2_IRQHandler>
	...

08000768 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_Init+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_Init+0x28>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f90d 	bl	8000998 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	2000      	movs	r0, #0
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff fee0 	bl	8000548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f917 	bl	80009e6 <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f000 f8ed 	bl	80009ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000008 	.word	0x20000008
 8000818:	20000170 	.word	0x20000170

0800081c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_GetTick+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000170 	.word	0x20000170

08000834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800085c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	; 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000964:	d301      	bcc.n	800096a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000966:	2301      	movs	r3, #1
 8000968:	e00f      	b.n	800098a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <SysTick_Config+0x40>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000972:	210f      	movs	r1, #15
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f7ff ff8e 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SysTick_Config+0x40>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SysTick_Config+0x40>)
 8000984:	2207      	movs	r2, #7
 8000986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff47 	bl	8000834 <__NVIC_SetPriorityGrouping>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c0:	f7ff ff5c 	bl	800087c <__NVIC_GetPriorityGrouping>
 80009c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f7ff ff8e 	bl	80008ec <NVIC_EncodePriority>
 80009d0:	4602      	mov	r2, r0
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff5d 	bl	8000898 <__NVIC_SetPriority>
}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ffb0 	bl	8000954 <SysTick_Config>
 80009f4:	4603      	mov	r3, r0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0e:	e14e      	b.n	8000cae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f000 8140 	beq.w	8000ca8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d005      	beq.n	8000a40 <HAL_GPIO_Init+0x40>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d130      	bne.n	8000aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a76:	2201      	movs	r2, #1
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	091b      	lsrs	r3, r3, #4
 8000a8c:	f003 0201 	and.w	r2, r3, #1
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0303 	and.w	r3, r3, #3
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d017      	beq.n	8000ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d123      	bne.n	8000b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	08da      	lsrs	r2, r3, #3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3208      	adds	r2, #8
 8000af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	220f      	movs	r2, #15
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	691a      	ldr	r2, [r3, #16]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f003 0307 	and.w	r3, r3, #7
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	08da      	lsrs	r2, r3, #3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3208      	adds	r2, #8
 8000b2c:	6939      	ldr	r1, [r7, #16]
 8000b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0203 	and.w	r2, r3, #3
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 809a 	beq.w	8000ca8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b74:	4b55      	ldr	r3, [pc, #340]	; (8000ccc <HAL_GPIO_Init+0x2cc>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a54      	ldr	r2, [pc, #336]	; (8000ccc <HAL_GPIO_Init+0x2cc>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b52      	ldr	r3, [pc, #328]	; (8000ccc <HAL_GPIO_Init+0x2cc>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b8c:	4a50      	ldr	r2, [pc, #320]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	3302      	adds	r3, #2
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bb6:	d013      	beq.n	8000be0 <HAL_GPIO_Init+0x1e0>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <HAL_GPIO_Init+0x2d4>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d00d      	beq.n	8000bdc <HAL_GPIO_Init+0x1dc>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a45      	ldr	r2, [pc, #276]	; (8000cd8 <HAL_GPIO_Init+0x2d8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d007      	beq.n	8000bd8 <HAL_GPIO_Init+0x1d8>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a44      	ldr	r2, [pc, #272]	; (8000cdc <HAL_GPIO_Init+0x2dc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d101      	bne.n	8000bd4 <HAL_GPIO_Init+0x1d4>
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e006      	b.n	8000be2 <HAL_GPIO_Init+0x1e2>
 8000bd4:	2305      	movs	r3, #5
 8000bd6:	e004      	b.n	8000be2 <HAL_GPIO_Init+0x1e2>
 8000bd8:	2302      	movs	r3, #2
 8000bda:	e002      	b.n	8000be2 <HAL_GPIO_Init+0x1e2>
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e000      	b.n	8000be2 <HAL_GPIO_Init+0x1e2>
 8000be0:	2300      	movs	r3, #0
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	f002 0203 	and.w	r2, r2, #3
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	4093      	lsls	r3, r2
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bf2:	4937      	ldr	r1, [pc, #220]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c00:	4b37      	ldr	r3, [pc, #220]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c24:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c4e:	4a24      	ldr	r2, [pc, #144]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3301      	adds	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f47f aea9 	bne.w	8000a10 <HAL_GPIO_Init+0x10>
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	371c      	adds	r7, #28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	48000400 	.word	0x48000400
 8000cd8:	48000800 	.word	0x48000800
 8000cdc:	48000c00 	.word	0x48000c00
 8000ce0:	40010400 	.word	0x40010400

08000ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cf4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	f001 b823 	b.w	8001d50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 817d 	beq.w	800101a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d20:	4bbc      	ldr	r3, [pc, #752]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 030c 	and.w	r3, r3, #12
 8000d28:	2b04      	cmp	r3, #4
 8000d2a:	d00c      	beq.n	8000d46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d2c:	4bb9      	ldr	r3, [pc, #740]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 030c 	and.w	r3, r3, #12
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d15c      	bne.n	8000df2 <HAL_RCC_OscConfig+0x10e>
 8000d38:	4bb6      	ldr	r3, [pc, #728]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d44:	d155      	bne.n	8000df2 <HAL_RCC_OscConfig+0x10e>
 8000d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5e:	fab3 f383 	clz	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	095b      	lsrs	r3, r3, #5
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d102      	bne.n	8000d78 <HAL_RCC_OscConfig+0x94>
 8000d72:	4ba8      	ldr	r3, [pc, #672]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	e015      	b.n	8000da4 <HAL_RCC_OscConfig+0xc0>
 8000d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d98:	fa93 f3a3 	rbit	r3, r3
 8000d9c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000da0:	4b9c      	ldr	r3, [pc, #624]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000da8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000dac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000db0:	fa92 f2a2 	rbit	r2, r2
 8000db4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000db8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000dbc:	fab2 f282 	clz	r2, r2
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	f042 0220 	orr.w	r2, r2, #32
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	f002 021f 	and.w	r2, r2, #31
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 811f 	beq.w	8001018 <HAL_RCC_OscConfig+0x334>
 8000dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8116 	bne.w	8001018 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f000 bfaf 	b.w	8001d50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e02:	d106      	bne.n	8000e12 <HAL_RCC_OscConfig+0x12e>
 8000e04:	4b83      	ldr	r3, [pc, #524]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a82      	ldr	r2, [pc, #520]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	e036      	b.n	8000e80 <HAL_RCC_OscConfig+0x19c>
 8000e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10c      	bne.n	8000e3c <HAL_RCC_OscConfig+0x158>
 8000e22:	4b7c      	ldr	r3, [pc, #496]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a7b      	ldr	r2, [pc, #492]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	4b79      	ldr	r3, [pc, #484]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a78      	ldr	r2, [pc, #480]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e021      	b.n	8000e80 <HAL_RCC_OscConfig+0x19c>
 8000e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e4c:	d10c      	bne.n	8000e68 <HAL_RCC_OscConfig+0x184>
 8000e4e:	4b71      	ldr	r3, [pc, #452]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a70      	ldr	r2, [pc, #448]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	4b6e      	ldr	r3, [pc, #440]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a6d      	ldr	r2, [pc, #436]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e00b      	b.n	8000e80 <HAL_RCC_OscConfig+0x19c>
 8000e68:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a69      	ldr	r2, [pc, #420]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b67      	ldr	r3, [pc, #412]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a66      	ldr	r2, [pc, #408]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e80:	4b64      	ldr	r3, [pc, #400]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	f023 020f 	bic.w	r2, r3, #15
 8000e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	495f      	ldr	r1, [pc, #380]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d059      	beq.n	8000f5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fcb7 	bl	800081c <HAL_GetTick>
 8000eae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	e00a      	b.n	8000eca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fcb2 	bl	800081c <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b64      	cmp	r3, #100	; 0x64
 8000ec2:	d902      	bls.n	8000eca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f000 bf43 	b.w	8001d50 <HAL_RCC_OscConfig+0x106c>
 8000eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ece:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000ede:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee2:	fab3 f383 	clz	r3, r3
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	095b      	lsrs	r3, r3, #5
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d102      	bne.n	8000efc <HAL_RCC_OscConfig+0x218>
 8000ef6:	4b47      	ldr	r3, [pc, #284]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	e015      	b.n	8000f28 <HAL_RCC_OscConfig+0x244>
 8000efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f00:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f08:	fa93 f3a3 	rbit	r3, r3
 8000f0c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f1c:	fa93 f3a3 	rbit	r3, r3
 8000f20:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f24:	4b3b      	ldr	r3, [pc, #236]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f2c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f34:	fa92 f2a2 	rbit	r2, r2
 8000f38:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f40:	fab2 f282 	clz	r2, r2
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	f042 0220 	orr.w	r2, r2, #32
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	f002 021f 	and.w	r2, r2, #31
 8000f50:	2101      	movs	r1, #1
 8000f52:	fa01 f202 	lsl.w	r2, r1, r2
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0ab      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x1d0>
 8000f5c:	e05d      	b.n	800101a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fc5d 	bl	800081c <HAL_GetTick>
 8000f62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f66:	e00a      	b.n	8000f7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f68:	f7ff fc58 	bl	800081c <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b64      	cmp	r3, #100	; 0x64
 8000f76:	d902      	bls.n	8000f7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	f000 bee9 	b.w	8001d50 <HAL_RCC_OscConfig+0x106c>
 8000f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f82:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	095b      	lsrs	r3, r3, #5
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d102      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x2cc>
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	e015      	b.n	8000fdc <HAL_RCC_OscConfig+0x2f8>
 8000fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fd0:	fa93 f3a3 	rbit	r3, r3
 8000fd4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_RCC_OscConfig+0x330>)
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fe0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000fe4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fe8:	fa92 f2a2 	rbit	r2, r2
 8000fec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000ff0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	f042 0220 	orr.w	r2, r2, #32
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	f002 021f 	and.w	r2, r2, #31
 8001004:	2101      	movs	r1, #1
 8001006:	fa01 f202 	lsl.w	r2, r1, r2
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1ab      	bne.n	8000f68 <HAL_RCC_OscConfig+0x284>
 8001010:	e003      	b.n	800101a <HAL_RCC_OscConfig+0x336>
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800101e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 817d 	beq.w	800132a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001030:	4ba6      	ldr	r3, [pc, #664]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00b      	beq.n	8001054 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800103c:	4ba3      	ldr	r3, [pc, #652]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b08      	cmp	r3, #8
 8001046:	d172      	bne.n	800112e <HAL_RCC_OscConfig+0x44a>
 8001048:	4ba0      	ldr	r3, [pc, #640]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d16c      	bne.n	800112e <HAL_RCC_OscConfig+0x44a>
 8001054:	2302      	movs	r3, #2
 8001056:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800105e:	fa93 f3a3 	rbit	r3, r3
 8001062:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001066:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106a:	fab3 f383 	clz	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	095b      	lsrs	r3, r3, #5
 8001072:	b2db      	uxtb	r3, r3
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d102      	bne.n	8001084 <HAL_RCC_OscConfig+0x3a0>
 800107e:	4b93      	ldr	r3, [pc, #588]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	e013      	b.n	80010ac <HAL_RCC_OscConfig+0x3c8>
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800109c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010a8:	4b88      	ldr	r3, [pc, #544]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 80010aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ac:	2202      	movs	r2, #2
 80010ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010b6:	fa92 f2a2 	rbit	r2, r2
 80010ba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010be:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010c2:	fab2 f282 	clz	r2, r2
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	f042 0220 	orr.w	r2, r2, #32
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	f002 021f 	and.w	r2, r2, #31
 80010d2:	2101      	movs	r1, #1
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	4013      	ands	r3, r2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00a      	beq.n	80010f4 <HAL_RCC_OscConfig+0x410>
 80010de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d002      	beq.n	80010f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f000 be2e 	b.w	8001d50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f4:	4b75      	ldr	r3, [pc, #468]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001100:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	21f8      	movs	r1, #248	; 0xf8
 800110a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001112:	fa91 f1a1 	rbit	r1, r1
 8001116:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800111a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800111e:	fab1 f181 	clz	r1, r1
 8001122:	b2c9      	uxtb	r1, r1
 8001124:	408b      	lsls	r3, r1
 8001126:	4969      	ldr	r1, [pc, #420]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112c:	e0fd      	b.n	800132a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800112e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8088 	beq.w	8001250 <HAL_RCC_OscConfig+0x56c>
 8001140:	2301      	movs	r3, #1
 8001142:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001152:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001156:	fab3 f383 	clz	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001160:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	461a      	mov	r2, r3
 8001168:	2301      	movs	r3, #1
 800116a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fb56 	bl	800081c <HAL_GetTick>
 8001170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	e00a      	b.n	800118c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fb51 	bl	800081c <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d902      	bls.n	800118c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	f000 bde2 	b.w	8001d50 <HAL_RCC_OscConfig+0x106c>
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800119e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a2:	fab3 f383 	clz	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	095b      	lsrs	r3, r3, #5
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d102      	bne.n	80011bc <HAL_RCC_OscConfig+0x4d8>
 80011b6:	4b45      	ldr	r3, [pc, #276]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	e013      	b.n	80011e4 <HAL_RCC_OscConfig+0x500>
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011ce:	2302      	movs	r3, #2
 80011d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011e0:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	2202      	movs	r2, #2
 80011e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011ee:	fa92 f2a2 	rbit	r2, r2
 80011f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011fa:	fab2 f282 	clz	r2, r2
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f042 0220 	orr.w	r2, r2, #32
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	f002 021f 	and.w	r2, r2, #31
 800120a:	2101      	movs	r1, #1
 800120c:	fa01 f202 	lsl.w	r2, r1, r2
 8001210:	4013      	ands	r3, r2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0af      	beq.n	8001176 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	21f8      	movs	r1, #248	; 0xf8
 800122c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001234:	fa91 f1a1 	rbit	r1, r1
 8001238:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800123c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001240:	fab1 f181 	clz	r1, r1
 8001244:	b2c9      	uxtb	r1, r1
 8001246:	408b      	lsls	r3, r1
 8001248:	4920      	ldr	r1, [pc, #128]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
 800124e:	e06c      	b.n	800132a <HAL_RCC_OscConfig+0x646>
 8001250:	2301      	movs	r3, #1
 8001252:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001256:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001262:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001270:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	461a      	mov	r2, r3
 8001278:	2300      	movs	r3, #0
 800127a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff face 	bl	800081c <HAL_GetTick>
 8001280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001284:	e00a      	b.n	800129c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff fac9 	bl	800081c <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d902      	bls.n	800129c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	f000 bd5a 	b.w	8001d50 <HAL_RCC_OscConfig+0x106c>
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	fab3 f383 	clz	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	095b      	lsrs	r3, r3, #5
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d104      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5ec>
 80012c6:	4b01      	ldr	r3, [pc, #4]	; (80012cc <HAL_RCC_OscConfig+0x5e8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	e015      	b.n	80012f8 <HAL_RCC_OscConfig+0x614>
 80012cc:	40021000 	.word	0x40021000
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012f4:	4bc8      	ldr	r3, [pc, #800]	; (8001618 <HAL_RCC_OscConfig+0x934>)
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	2202      	movs	r2, #2
 80012fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001302:	fa92 f2a2 	rbit	r2, r2
 8001306:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800130a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800130e:	fab2 f282 	clz	r2, r2
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	f042 0220 	orr.w	r2, r2, #32
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	f002 021f 	and.w	r2, r2, #31
 800131e:	2101      	movs	r1, #1
 8001320:	fa01 f202 	lsl.w	r2, r1, r2
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1ad      	bne.n	8001286 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8110 	beq.w	8001560 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d079      	beq.n	8001444 <HAL_RCC_OscConfig+0x760>
 8001350:	2301      	movs	r3, #1
 8001352:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001366:	fab3 f383 	clz	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	4bab      	ldr	r3, [pc, #684]	; (800161c <HAL_RCC_OscConfig+0x938>)
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	461a      	mov	r2, r3
 8001376:	2301      	movs	r3, #1
 8001378:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fa4f 	bl	800081c <HAL_GetTick>
 800137e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e00a      	b.n	800139a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fa4a 	bl	800081c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d902      	bls.n	800139a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	f000 bcdb 	b.w	8001d50 <HAL_RCC_OscConfig+0x106c>
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013a4:	fa93 f3a3 	rbit	r3, r3
 80013a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013b4:	2202      	movs	r2, #2
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	fa93 f2a3 	rbit	r2, r3
 80013c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013d8:	2202      	movs	r2, #2
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	fa93 f2a3 	rbit	r2, r3
 80013ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f4:	4b88      	ldr	r3, [pc, #544]	; (8001618 <HAL_RCC_OscConfig+0x934>)
 80013f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001400:	2102      	movs	r1, #2
 8001402:	6019      	str	r1, [r3, #0]
 8001404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001408:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	fa93 f1a3 	rbit	r1, r3
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800141a:	6019      	str	r1, [r3, #0]
  return result;
 800141c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001420:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2101      	movs	r1, #1
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0a0      	beq.n	8001384 <HAL_RCC_OscConfig+0x6a0>
 8001442:	e08d      	b.n	8001560 <HAL_RCC_OscConfig+0x87c>
 8001444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001448:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001454:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	fa93 f2a3 	rbit	r2, r3
 800145e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001462:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001466:	601a      	str	r2, [r3, #0]
  return result;
 8001468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001470:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001472:	fab3 f383 	clz	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4b68      	ldr	r3, [pc, #416]	; (800161c <HAL_RCC_OscConfig+0x938>)
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	461a      	mov	r2, r3
 8001482:	2300      	movs	r3, #0
 8001484:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff f9c9 	bl	800081c <HAL_GetTick>
 800148a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148e:	e00a      	b.n	80014a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff f9c4 	bl	800081c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d902      	bls.n	80014a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f000 bc55 	b.w	8001d50 <HAL_RCC_OscConfig+0x106c>
 80014a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014ae:	2202      	movs	r2, #2
 80014b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	fa93 f2a3 	rbit	r2, r3
 80014c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014d2:	2202      	movs	r2, #2
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	fa93 f2a3 	rbit	r2, r3
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014f6:	2202      	movs	r2, #2
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	fa93 f2a3 	rbit	r2, r3
 8001508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001510:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001512:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_RCC_OscConfig+0x934>)
 8001514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800151e:	2102      	movs	r1, #2
 8001520:	6019      	str	r1, [r3, #0]
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	fa93 f1a3 	rbit	r1, r3
 8001530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001534:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001538:	6019      	str	r1, [r3, #0]
  return result;
 800153a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d197      	bne.n	8001490 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 81a1 	beq.w	80018b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157c:	4b26      	ldr	r3, [pc, #152]	; (8001618 <HAL_RCC_OscConfig+0x934>)
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d116      	bne.n	80015b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_RCC_OscConfig+0x934>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	4a22      	ldr	r2, [pc, #136]	; (8001618 <HAL_RCC_OscConfig+0x934>)
 800158e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001592:	61d3      	str	r3, [r2, #28]
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_RCC_OscConfig+0x934>)
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800159c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015b0:	2301      	movs	r3, #1
 80015b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_RCC_OscConfig+0x93c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d11a      	bne.n	80015f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_RCC_OscConfig+0x93c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a16      	ldr	r2, [pc, #88]	; (8001620 <HAL_RCC_OscConfig+0x93c>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ce:	f7ff f925 	bl	800081c <HAL_GetTick>
 80015d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d6:	e009      	b.n	80015ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d8:	f7ff f920 	bl	800081c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b64      	cmp	r3, #100	; 0x64
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e3b1      	b.n	8001d50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_RCC_OscConfig+0x93c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0ef      	beq.n	80015d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d10d      	bne.n	8001624 <HAL_RCC_OscConfig+0x940>
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_RCC_OscConfig+0x934>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4a02      	ldr	r2, [pc, #8]	; (8001618 <HAL_RCC_OscConfig+0x934>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6213      	str	r3, [r2, #32]
 8001614:	e03c      	b.n	8001690 <HAL_RCC_OscConfig+0x9ac>
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	10908120 	.word	0x10908120
 8001620:	40007000 	.word	0x40007000
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10c      	bne.n	800164e <HAL_RCC_OscConfig+0x96a>
 8001634:	4bc1      	ldr	r3, [pc, #772]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4ac0      	ldr	r2, [pc, #768]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	4bbe      	ldr	r3, [pc, #760]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4abd      	ldr	r2, [pc, #756]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 8001646:	f023 0304 	bic.w	r3, r3, #4
 800164a:	6213      	str	r3, [r2, #32]
 800164c:	e020      	b.n	8001690 <HAL_RCC_OscConfig+0x9ac>
 800164e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001652:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b05      	cmp	r3, #5
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x994>
 800165e:	4bb7      	ldr	r3, [pc, #732]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4ab6      	ldr	r2, [pc, #728]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	4bb4      	ldr	r3, [pc, #720]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4ab3      	ldr	r2, [pc, #716]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0x9ac>
 8001678:	4bb0      	ldr	r3, [pc, #704]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4aaf      	ldr	r2, [pc, #700]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	6213      	str	r3, [r2, #32]
 8001684:	4bad      	ldr	r3, [pc, #692]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4aac      	ldr	r2, [pc, #688]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 800168a:	f023 0304 	bic.w	r3, r3, #4
 800168e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 8081 	beq.w	80017a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7ff f8bb 	bl	800081c <HAL_GetTick>
 80016a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff f8b6 	bl	800081c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016bc:	4293      	cmp	r3, r2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e345      	b.n	8001d50 <HAL_RCC_OscConfig+0x106c>
 80016c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016cc:	2202      	movs	r2, #2
 80016ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fa93 f2a3 	rbit	r2, r3
 80016de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	fa93 f2a3 	rbit	r2, r3
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800170a:	601a      	str	r2, [r3, #0]
  return result;
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001714:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	095b      	lsrs	r3, r3, #5
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d102      	bne.n	8001730 <HAL_RCC_OscConfig+0xa4c>
 800172a:	4b84      	ldr	r3, [pc, #528]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	e013      	b.n	8001758 <HAL_RCC_OscConfig+0xa74>
 8001730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001734:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001738:	2202      	movs	r2, #2
 800173a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001740:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	fa93 f2a3 	rbit	r2, r3
 800174a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	4b79      	ldr	r3, [pc, #484]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800175c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001760:	2102      	movs	r1, #2
 8001762:	6011      	str	r1, [r2, #0]
 8001764:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001768:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	fa92 f1a2 	rbit	r1, r2
 8001772:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001776:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800177a:	6011      	str	r1, [r2, #0]
  return result;
 800177c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001780:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	fab2 f282 	clz	r2, r2
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	f002 021f 	and.w	r2, r2, #31
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f202 	lsl.w	r2, r1, r2
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d084      	beq.n	80016ac <HAL_RCC_OscConfig+0x9c8>
 80017a2:	e07f      	b.n	80018a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff f83a 	bl	800081c <HAL_GetTick>
 80017a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ac:	e00b      	b.n	80017c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff f835 	bl	800081c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e2c4      	b.n	8001d50 <HAL_RCC_OscConfig+0x106c>
 80017c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017ce:	2202      	movs	r2, #2
 80017d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	fa93 f2a3 	rbit	r2, r3
 80017e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017f2:	2202      	movs	r2, #2
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fa93 f2a3 	rbit	r2, r3
 8001804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001808:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800180c:	601a      	str	r2, [r3, #0]
  return result;
 800180e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001812:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001816:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d102      	bne.n	8001832 <HAL_RCC_OscConfig+0xb4e>
 800182c:	4b43      	ldr	r3, [pc, #268]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	e013      	b.n	800185a <HAL_RCC_OscConfig+0xb76>
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800183a:	2202      	movs	r2, #2
 800183c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	4b39      	ldr	r3, [pc, #228]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800185e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001862:	2102      	movs	r1, #2
 8001864:	6011      	str	r1, [r2, #0]
 8001866:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800186a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	fa92 f1a2 	rbit	r1, r2
 8001874:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001878:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800187c:	6011      	str	r1, [r2, #0]
  return result;
 800187e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001882:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	fab2 f282 	clz	r2, r2
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	f002 021f 	and.w	r2, r2, #31
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f202 	lsl.w	r2, r1, r2
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d184      	bne.n	80017ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d105      	bne.n	80018b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	4a22      	ldr	r2, [pc, #136]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 80018b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 8242 	beq.w	8001d4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_RCC_OscConfig+0xc58>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	f000 8213 	beq.w	8001cfe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	f040 8162 	bne.w	8001bae <HAL_RCC_OscConfig+0xeca>
 80018ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	fa93 f2a3 	rbit	r2, r3
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800190e:	601a      	str	r2, [r3, #0]
  return result;
 8001910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001914:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001918:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	461a      	mov	r2, r3
 800192c:	2300      	movs	r3, #0
 800192e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7fe ff74 	bl	800081c <HAL_GetTick>
 8001934:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001938:	e00c      	b.n	8001954 <HAL_RCC_OscConfig+0xc70>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001940:	f7fe ff6c 	bl	800081c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1fd      	b.n	8001d50 <HAL_RCC_OscConfig+0x106c>
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800195c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	fa93 f2a3 	rbit	r2, r3
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001978:	601a      	str	r2, [r3, #0]
  return result;
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001982:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d102      	bne.n	800199e <HAL_RCC_OscConfig+0xcba>
 8001998:	4bb0      	ldr	r3, [pc, #704]	; (8001c5c <HAL_RCC_OscConfig+0xf78>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	e027      	b.n	80019ee <HAL_RCC_OscConfig+0xd0a>
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	fa93 f2a3 	rbit	r2, r3
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fa93 f2a3 	rbit	r2, r3
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	4b9c      	ldr	r3, [pc, #624]	; (8001c5c <HAL_RCC_OscConfig+0xf78>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019fa:	6011      	str	r1, [r2, #0]
 80019fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a00:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	fa92 f1a2 	rbit	r1, r2
 8001a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a0e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a12:	6011      	str	r1, [r2, #0]
  return result;
 8001a14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a18:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	fab2 f282 	clz	r2, r2
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	f042 0220 	orr.w	r2, r2, #32
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	f002 021f 	and.w	r2, r2, #31
 8001a2e:	2101      	movs	r1, #1
 8001a30:	fa01 f202 	lsl.w	r2, r1, r2
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d182      	bne.n	8001940 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3a:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <HAL_RCC_OscConfig+0xf78>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	430b      	orrs	r3, r1
 8001a5c:	497f      	ldr	r1, [pc, #508]	; (8001c5c <HAL_RCC_OscConfig+0xf78>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	fa93 f2a3 	rbit	r2, r3
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a86:	601a      	str	r2, [r3, #0]
  return result;
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a90:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7fe feb8 	bl	800081c <HAL_GetTick>
 8001aac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab0:	e009      	b.n	8001ac6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7fe feb3 	bl	800081c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e144      	b.n	8001d50 <HAL_RCC_OscConfig+0x106c>
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ace:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	fa93 f2a3 	rbit	r2, r3
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001aea:	601a      	str	r2, [r3, #0]
  return result;
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001af4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	095b      	lsrs	r3, r3, #5
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <HAL_RCC_OscConfig+0xe2c>
 8001b0a:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <HAL_RCC_OscConfig+0xf78>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	e027      	b.n	8001b60 <HAL_RCC_OscConfig+0xe7c>
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_RCC_OscConfig+0xf78>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b64:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b6c:	6011      	str	r1, [r2, #0]
 8001b6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b72:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	fa92 f1a2 	rbit	r1, r2
 8001b7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b84:	6011      	str	r1, [r2, #0]
  return result;
 8001b86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b8a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	fab2 f282 	clz	r2, r2
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f042 0220 	orr.w	r2, r2, #32
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	f002 021f 	and.w	r2, r2, #31
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d082      	beq.n	8001ab2 <HAL_RCC_OscConfig+0xdce>
 8001bac:	e0cf      	b.n	8001d4e <HAL_RCC_OscConfig+0x106a>
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bd2:	601a      	str	r2, [r3, #0]
  return result;
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7fe fe12 	bl	800081c <HAL_GetTick>
 8001bf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfc:	e009      	b.n	8001c12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7fe fe0d 	bl	800081c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e09e      	b.n	8001d50 <HAL_RCC_OscConfig+0x106c>
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c24:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c36:	601a      	str	r2, [r3, #0]
  return result;
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d104      	bne.n	8001c60 <HAL_RCC_OscConfig+0xf7c>
 8001c56:	4b01      	ldr	r3, [pc, #4]	; (8001c5c <HAL_RCC_OscConfig+0xf78>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	e029      	b.n	8001cb0 <HAL_RCC_OscConfig+0xfcc>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c64:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	fa93 f2a3 	rbit	r2, r3
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_RCC_OscConfig+0x1078>)
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cbc:	6011      	str	r1, [r2, #0]
 8001cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	fa92 f1a2 	rbit	r1, r2
 8001ccc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cd4:	6011      	str	r1, [r2, #0]
  return result;
 8001cd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cda:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	fab2 f282 	clz	r2, r2
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f042 0220 	orr.w	r2, r2, #32
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f002 021f 	and.w	r2, r2, #31
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d180      	bne.n	8001bfe <HAL_RCC_OscConfig+0xf1a>
 8001cfc:	e027      	b.n	8001d4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e01e      	b.n	8001d50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_RCC_OscConfig+0x1078>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d10b      	bne.n	8001d4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000

08001d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b09e      	sub	sp, #120	; 0x78
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e162      	b.n	800203e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4b90      	ldr	r3, [pc, #576]	; (8001fbc <HAL_RCC_ClockConfig+0x25c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d910      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b8d      	ldr	r3, [pc, #564]	; (8001fbc <HAL_RCC_ClockConfig+0x25c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 0207 	bic.w	r2, r3, #7
 8001d8e:	498b      	ldr	r1, [pc, #556]	; (8001fbc <HAL_RCC_ClockConfig+0x25c>)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b89      	ldr	r3, [pc, #548]	; (8001fbc <HAL_RCC_ClockConfig+0x25c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e14a      	b.n	800203e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b82      	ldr	r3, [pc, #520]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	497f      	ldr	r1, [pc, #508]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80dc 	beq.w	8001f8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d13c      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xf6>
 8001ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d102      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xa6>
 8001e00:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	e00f      	b.n	8001e26 <HAL_RCC_ClockConfig+0xc6>
 8001e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	667b      	str	r3, [r7, #100]	; 0x64
 8001e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e18:	663b      	str	r3, [r7, #96]	; 0x60
 8001e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e22:	4b67      	ldr	r3, [pc, #412]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e2e:	fa92 f2a2 	rbit	r2, r2
 8001e32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e36:	fab2 f282 	clz	r2, r2
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f042 0220 	orr.w	r2, r2, #32
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f002 021f 	and.w	r2, r2, #31
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d17b      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0f3      	b.n	800203e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d13c      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x178>
 8001e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d102      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x128>
 8001e82:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	e00f      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x148>
 8001e88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	647b      	str	r3, [r7, #68]	; 0x44
 8001e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ea4:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eac:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001eb0:	fa92 f2a2 	rbit	r2, r2
 8001eb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eb8:	fab2 f282 	clz	r2, r2
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f042 0220 	orr.w	r2, r2, #32
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f002 021f 	and.w	r2, r2, #31
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d13a      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0b2      	b.n	800203e <HAL_RCC_ClockConfig+0x2de>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	095b      	lsrs	r3, r3, #5
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d102      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
 8001efa:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	e00d      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1bc>
 8001f00:	2302      	movs	r3, #2
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	61ba      	str	r2, [r7, #24]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	fa92 f2a2 	rbit	r2, r2
 8001f26:	617a      	str	r2, [r7, #20]
  return result;
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	fab2 f282 	clz	r2, r2
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f042 0220 	orr.w	r2, r2, #32
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	f002 021f 	and.w	r2, r2, #31
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e079      	b.n	800203e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	491a      	ldr	r1, [pc, #104]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f5c:	f7fe fc5e 	bl	800081c <HAL_GetTick>
 8001f60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7fe fc5a 	bl	800081c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e061      	b.n	800203e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_RCC_ClockConfig+0x260>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_ClockConfig+0x25c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d214      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_RCC_ClockConfig+0x25c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	4906      	ldr	r1, [pc, #24]	; (8001fbc <HAL_RCC_ClockConfig+0x25c>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e040      	b.n	800203e <HAL_RCC_ClockConfig+0x2de>
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCC_ClockConfig+0x2e8>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	491a      	ldr	r1, [pc, #104]	; (8002048 <HAL_RCC_ClockConfig+0x2e8>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <HAL_RCC_ClockConfig+0x2e8>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4912      	ldr	r1, [pc, #72]	; (8002048 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002002:	f000 f829 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002006:	4601      	mov	r1, r0
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <HAL_RCC_ClockConfig+0x2e8>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002010:	22f0      	movs	r2, #240	; 0xf0
 8002012:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	fa92 f2a2 	rbit	r2, r2
 800201a:	60fa      	str	r2, [r7, #12]
  return result;
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	fab2 f282 	clz	r2, r2
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	40d3      	lsrs	r3, r2
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x2ec>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	fa21 f303 	lsr.w	r3, r1, r3
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_RCC_ClockConfig+0x2f0>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_RCC_ClockConfig+0x2f4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fbac 	bl	8000794 <HAL_InitTick>
  
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3778      	adds	r7, #120	; 0x78
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	08003068 	.word	0x08003068
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b08b      	sub	sp, #44	; 0x2c
 800205c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d002      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x30>
 8002082:	2b08      	cmp	r3, #8
 8002084:	d003      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x36>
 8002086:	e03c      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <HAL_RCC_GetSysClockFreq+0xc4>)
 800208a:	623b      	str	r3, [r7, #32]
      break;
 800208c:	e03c      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002094:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002098:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	fa92 f2a2 	rbit	r2, r2
 80020a0:	607a      	str	r2, [r7, #4]
  return result;
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	40d3      	lsrs	r3, r2
 80020ac:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	220f      	movs	r2, #15
 80020bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	fa92 f2a2 	rbit	r2, r2
 80020c4:	60fa      	str	r2, [r7, #12]
  return result;
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	fab2 f282 	clz	r2, r2
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	40d3      	lsrs	r3, r2
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
 80020f0:	e004      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	623b      	str	r3, [r7, #32]
      break;
 8002100:	e002      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002104:	623b      	str	r3, [r7, #32]
      break;
 8002106:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002108:	6a3b      	ldr	r3, [r7, #32]
}
 800210a:	4618      	mov	r0, r3
 800210c:	372c      	adds	r7, #44	; 0x2c
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	007a1200 	.word	0x007a1200
 8002120:	08003080 	.word	0x08003080
 8002124:	08003090 	.word	0x08003090
 8002128:	003d0900 	.word	0x003d0900

0800212c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_RCC_GetHCLKFreq+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000

08002144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800214a:	f7ff ffef 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800214e:	4601      	mov	r1, r0
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002158:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800215c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	fa92 f2a2 	rbit	r2, r2
 8002164:	603a      	str	r2, [r7, #0]
  return result;
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	fab2 f282 	clz	r2, r2
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	40d3      	lsrs	r3, r2
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000
 8002184:	08003078 	.word	0x08003078

08002188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800218e:	f7ff ffcd 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002192:	4601      	mov	r1, r0
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800219c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	fa92 f2a2 	rbit	r2, r2
 80021a8:	603a      	str	r2, [r7, #0]
  return result;
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	40d3      	lsrs	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08003078 	.word	0x08003078

080021cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e095      	b.n	800230a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d108      	bne.n	80021f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ee:	d009      	beq.n	8002204 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
 80021f6:	e005      	b.n	8002204 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe f9b6 	bl	8000590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800223a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002244:	d902      	bls.n	800224c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e002      	b.n	8002252 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800224c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002250:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800225a:	d007      	beq.n	800226c <HAL_SPI_Init+0xa0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002264:	d002      	beq.n	800226c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	ea42 0103 	orr.w	r1, r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	0c1b      	lsrs	r3, r3, #16
 80022c8:	f003 0204 	and.w	r2, r3, #4
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80022e8:	ea42 0103 	orr.w	r1, r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b088      	sub	sp, #32
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_SPI_Transmit+0x22>
 8002330:	2302      	movs	r3, #2
 8002332:	e15f      	b.n	80025f4 <HAL_SPI_Transmit+0x2e2>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800233c:	f7fe fa6e 	bl	800081c <HAL_GetTick>
 8002340:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d002      	beq.n	8002358 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002352:	2302      	movs	r3, #2
 8002354:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002356:	e148      	b.n	80025ea <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_SPI_Transmit+0x52>
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002368:	e13f      	b.n	80025ea <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2203      	movs	r2, #3
 800236e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	88fa      	ldrh	r2, [r7, #6]
 8002382:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	88fa      	ldrh	r2, [r7, #6]
 8002388:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b4:	d10f      	bne.n	80023d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d007      	beq.n	80023f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023fc:	d94f      	bls.n	800249e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_SPI_Transmit+0xfa>
 8002406:	8afb      	ldrh	r3, [r7, #22]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d142      	bne.n	8002492 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	881a      	ldrh	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	1c9a      	adds	r2, r3, #2
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002430:	e02f      	b.n	8002492 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	d112      	bne.n	8002466 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	881a      	ldrh	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	1c9a      	adds	r2, r3, #2
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002464:	e015      	b.n	8002492 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002466:	f7fe f9d9 	bl	800081c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d803      	bhi.n	800247e <HAL_SPI_Transmit+0x16c>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d102      	bne.n	8002484 <HAL_SPI_Transmit+0x172>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002490:	e0ab      	b.n	80025ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ca      	bne.n	8002432 <HAL_SPI_Transmit+0x120>
 800249c:	e080      	b.n	80025a0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <HAL_SPI_Transmit+0x19a>
 80024a6:	8afb      	ldrh	r3, [r7, #22]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d174      	bne.n	8002596 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d912      	bls.n	80024dc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	881a      	ldrh	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c6:	1c9a      	adds	r2, r3, #2
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b02      	subs	r3, #2
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024da:	e05c      	b.n	8002596 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	330c      	adds	r3, #12
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002502:	e048      	b.n	8002596 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b02      	cmp	r3, #2
 8002510:	d12b      	bne.n	800256a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d912      	bls.n	8002542 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	1c9a      	adds	r2, r3, #2
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b02      	subs	r3, #2
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002540:	e029      	b.n	8002596 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	330c      	adds	r3, #12
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002568:	e015      	b.n	8002596 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800256a:	f7fe f957 	bl	800081c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d803      	bhi.n	8002582 <HAL_SPI_Transmit+0x270>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d102      	bne.n	8002588 <HAL_SPI_Transmit+0x276>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002594:	e029      	b.n	80025ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1b1      	bne.n	8002504 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	6839      	ldr	r1, [r7, #0]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f947 	bl	8002838 <SPI_EndRxTxTransaction>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	77fb      	strb	r3, [r7, #31]
 80025e0:	e003      	b.n	80025ea <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80025f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800260c:	f7fe f906 	bl	800081c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800261c:	f7fe f8fe 	bl	800081c <HAL_GetTick>
 8002620:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	015b      	lsls	r3, r3, #5
 8002628:	0d1b      	lsrs	r3, r3, #20
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002632:	e054      	b.n	80026de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263a:	d050      	beq.n	80026de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800263c:	f7fe f8ee 	bl	800081c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	429a      	cmp	r2, r3
 800264a:	d902      	bls.n	8002652 <SPI_WaitFlagStateUntilTimeout+0x56>
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d13d      	bne.n	80026ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002660:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800266a:	d111      	bne.n	8002690 <SPI_WaitFlagStateUntilTimeout+0x94>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002674:	d004      	beq.n	8002680 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267e:	d107      	bne.n	8002690 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002698:	d10f      	bne.n	80026ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e017      	b.n	80026fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3b01      	subs	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4013      	ands	r3, r2
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d19b      	bne.n	8002634 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000000 	.word	0x20000000

0800270c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	; 0x28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800271e:	f7fe f87d 	bl	800081c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4413      	add	r3, r2
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800272e:	f7fe f875 	bl	800081c <HAL_GetTick>
 8002732:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800273c:	4b3d      	ldr	r3, [pc, #244]	; (8002834 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00da      	lsls	r2, r3, #3
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	0d1b      	lsrs	r3, r3, #20
 800274c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002754:	e060      	b.n	8002818 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800275c:	d107      	bne.n	800276e <SPI_WaitFifoStateUntilTimeout+0x62>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d104      	bne.n	800276e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800276c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d050      	beq.n	8002818 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002776:	f7fe f851 	bl	800081c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002782:	429a      	cmp	r2, r3
 8002784:	d902      	bls.n	800278c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	2b00      	cmp	r3, #0
 800278a:	d13d      	bne.n	8002808 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800279a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a4:	d111      	bne.n	80027ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ae:	d004      	beq.n	80027ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b8:	d107      	bne.n	80027ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d2:	d10f      	bne.n	80027f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e010      	b.n	800282a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	3b01      	subs	r3, #1
 8002816:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4013      	ands	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	d196      	bne.n	8002756 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3728      	adds	r7, #40	; 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000

08002838 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2200      	movs	r2, #0
 800284c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff ff5b 	bl	800270c <SPI_WaitFifoStateUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002860:	f043 0220 	orr.w	r2, r3, #32
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e027      	b.n	80028bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff fec0 	bl	80025fc <SPI_WaitFlagStateUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e014      	b.n	80028bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2200      	movs	r2, #0
 800289a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff ff34 	bl	800270c <SPI_WaitFifoStateUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e000      	b.n	80028bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e040      	b.n	8002958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fd fe94 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f82c 	bl	8002960 <UART_SetConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e022      	b.n	8002958 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f956 	bl	8002bcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800292e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800293e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f9dd 	bl	8002d10 <UART_CheckIdleState>
 8002956:	4603      	mov	r3, r0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4b8a      	ldr	r3, [pc, #552]	; (8002bb4 <UART_SetConfig+0x254>)
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	6979      	ldr	r1, [r7, #20]
 8002994:	430b      	orrs	r3, r1
 8002996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a78      	ldr	r2, [pc, #480]	; (8002bb8 <UART_SetConfig+0x258>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d120      	bne.n	8002a1e <UART_SetConfig+0xbe>
 80029dc:	4b77      	ldr	r3, [pc, #476]	; (8002bbc <UART_SetConfig+0x25c>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d817      	bhi.n	8002a18 <UART_SetConfig+0xb8>
 80029e8:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <UART_SetConfig+0x90>)
 80029ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a0d 	.word	0x08002a0d
 80029f8:	08002a13 	.word	0x08002a13
 80029fc:	08002a07 	.word	0x08002a07
 8002a00:	2300      	movs	r3, #0
 8002a02:	77fb      	strb	r3, [r7, #31]
 8002a04:	e01d      	b.n	8002a42 <UART_SetConfig+0xe2>
 8002a06:	2302      	movs	r3, #2
 8002a08:	77fb      	strb	r3, [r7, #31]
 8002a0a:	e01a      	b.n	8002a42 <UART_SetConfig+0xe2>
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	77fb      	strb	r3, [r7, #31]
 8002a10:	e017      	b.n	8002a42 <UART_SetConfig+0xe2>
 8002a12:	2308      	movs	r3, #8
 8002a14:	77fb      	strb	r3, [r7, #31]
 8002a16:	e014      	b.n	8002a42 <UART_SetConfig+0xe2>
 8002a18:	2310      	movs	r3, #16
 8002a1a:	77fb      	strb	r3, [r7, #31]
 8002a1c:	e011      	b.n	8002a42 <UART_SetConfig+0xe2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a67      	ldr	r2, [pc, #412]	; (8002bc0 <UART_SetConfig+0x260>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d102      	bne.n	8002a2e <UART_SetConfig+0xce>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	77fb      	strb	r3, [r7, #31]
 8002a2c:	e009      	b.n	8002a42 <UART_SetConfig+0xe2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a64      	ldr	r2, [pc, #400]	; (8002bc4 <UART_SetConfig+0x264>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d102      	bne.n	8002a3e <UART_SetConfig+0xde>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	77fb      	strb	r3, [r7, #31]
 8002a3c:	e001      	b.n	8002a42 <UART_SetConfig+0xe2>
 8002a3e:	2310      	movs	r3, #16
 8002a40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4a:	d15a      	bne.n	8002b02 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002a4c:	7ffb      	ldrb	r3, [r7, #31]
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d827      	bhi.n	8002aa2 <UART_SetConfig+0x142>
 8002a52:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <UART_SetConfig+0xf8>)
 8002a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a58:	08002a7d 	.word	0x08002a7d
 8002a5c:	08002a85 	.word	0x08002a85
 8002a60:	08002a8d 	.word	0x08002a8d
 8002a64:	08002aa3 	.word	0x08002aa3
 8002a68:	08002a93 	.word	0x08002a93
 8002a6c:	08002aa3 	.word	0x08002aa3
 8002a70:	08002aa3 	.word	0x08002aa3
 8002a74:	08002aa3 	.word	0x08002aa3
 8002a78:	08002a9b 	.word	0x08002a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a7c:	f7ff fb62 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8002a80:	61b8      	str	r0, [r7, #24]
        break;
 8002a82:	e013      	b.n	8002aac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a84:	f7ff fb80 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 8002a88:	61b8      	str	r0, [r7, #24]
        break;
 8002a8a:	e00f      	b.n	8002aac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a8c:	4b4e      	ldr	r3, [pc, #312]	; (8002bc8 <UART_SetConfig+0x268>)
 8002a8e:	61bb      	str	r3, [r7, #24]
        break;
 8002a90:	e00c      	b.n	8002aac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a92:	f7ff fae1 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002a96:	61b8      	str	r0, [r7, #24]
        break;
 8002a98:	e008      	b.n	8002aac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a9e:	61bb      	str	r3, [r7, #24]
        break;
 8002aa0:	e004      	b.n	8002aac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	77bb      	strb	r3, [r7, #30]
        break;
 8002aaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d074      	beq.n	8002b9c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	005a      	lsls	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	441a      	add	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b0f      	cmp	r3, #15
 8002acc:	d916      	bls.n	8002afc <UART_SetConfig+0x19c>
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad4:	d212      	bcs.n	8002afc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f023 030f 	bic.w	r3, r3, #15
 8002ade:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	89fb      	ldrh	r3, [r7, #14]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	89fa      	ldrh	r2, [r7, #14]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	e04f      	b.n	8002b9c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	77bb      	strb	r3, [r7, #30]
 8002b00:	e04c      	b.n	8002b9c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b02:	7ffb      	ldrb	r3, [r7, #31]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d828      	bhi.n	8002b5a <UART_SetConfig+0x1fa>
 8002b08:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <UART_SetConfig+0x1b0>)
 8002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002b35 	.word	0x08002b35
 8002b14:	08002b3d 	.word	0x08002b3d
 8002b18:	08002b45 	.word	0x08002b45
 8002b1c:	08002b5b 	.word	0x08002b5b
 8002b20:	08002b4b 	.word	0x08002b4b
 8002b24:	08002b5b 	.word	0x08002b5b
 8002b28:	08002b5b 	.word	0x08002b5b
 8002b2c:	08002b5b 	.word	0x08002b5b
 8002b30:	08002b53 	.word	0x08002b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b34:	f7ff fb06 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8002b38:	61b8      	str	r0, [r7, #24]
        break;
 8002b3a:	e013      	b.n	8002b64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b3c:	f7ff fb24 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 8002b40:	61b8      	str	r0, [r7, #24]
        break;
 8002b42:	e00f      	b.n	8002b64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b44:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <UART_SetConfig+0x268>)
 8002b46:	61bb      	str	r3, [r7, #24]
        break;
 8002b48:	e00c      	b.n	8002b64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b4a:	f7ff fa85 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002b4e:	61b8      	str	r0, [r7, #24]
        break;
 8002b50:	e008      	b.n	8002b64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b56:	61bb      	str	r3, [r7, #24]
        break;
 8002b58:	e004      	b.n	8002b64 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	77bb      	strb	r3, [r7, #30]
        break;
 8002b62:	bf00      	nop
    }

    if (pclk != 0U)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d018      	beq.n	8002b9c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	085a      	lsrs	r2, r3, #1
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	441a      	add	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	d909      	bls.n	8002b98 <UART_SetConfig+0x238>
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8a:	d205      	bcs.n	8002b98 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	e001      	b.n	8002b9c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ba8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	efff69f3 	.word	0xefff69f3
 8002bb8:	40013800 	.word	0x40013800
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40004400 	.word	0x40004400
 8002bc4:	40004800 	.word	0x40004800
 8002bc8:	007a1200 	.word	0x007a1200

08002bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01a      	beq.n	8002ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cca:	d10a      	bne.n	8002ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  }
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b098      	sub	sp, #96	; 0x60
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d20:	f7fd fd7c 	bl	800081c <HAL_GetTick>
 8002d24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d12e      	bne.n	8002d92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f88c 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d021      	beq.n	8002d92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d62:	653b      	str	r3, [r7, #80]	; 0x50
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d6e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e6      	bne.n	8002d4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e062      	b.n	8002e58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d149      	bne.n	8002e34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da8:	2200      	movs	r2, #0
 8002daa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f856 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03c      	beq.n	8002e34 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	e853 3f00 	ldrex	r3, [r3]
 8002dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de0:	e841 2300 	strex	r3, r2, [r1]
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e6      	bne.n	8002dba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3308      	adds	r3, #8
 8002df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	e853 3f00 	ldrex	r3, [r3]
 8002dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3308      	adds	r3, #8
 8002e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e0c:	61fa      	str	r2, [r7, #28]
 8002e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	69b9      	ldr	r1, [r7, #24]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	e841 2300 	strex	r3, r2, [r1]
 8002e18:	617b      	str	r3, [r7, #20]
   return(result);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e5      	bne.n	8002dec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e011      	b.n	8002e58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3758      	adds	r7, #88	; 0x58
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e70:	e049      	b.n	8002f06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d045      	beq.n	8002f06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7a:	f7fd fccf 	bl	800081c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e048      	b.n	8002f26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d031      	beq.n	8002f06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d110      	bne.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f838 	bl	8002f2e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e029      	b.n	8002f26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee0:	d111      	bne.n	8002f06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f81e 	bl	8002f2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e00f      	b.n	8002f26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d0a6      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b095      	sub	sp, #84	; 0x54
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3e:	e853 3f00 	ldrex	r3, [r3]
 8002f42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f54:	643b      	str	r3, [r7, #64]	; 0x40
 8002f56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e6      	bne.n	8002f36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	e853 3f00 	ldrex	r3, [r3]
 8002f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3308      	adds	r3, #8
 8002f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e5      	bne.n	8002f68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d118      	bne.n	8002fd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f023 0310 	bic.w	r3, r3, #16
 8002fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	6979      	ldr	r1, [r7, #20]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e6      	bne.n	8002fa4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002fea:	bf00      	nop
 8002fec:	3754      	adds	r7, #84	; 0x54
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <__libc_init_array>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	4d0d      	ldr	r5, [pc, #52]	; (8003030 <__libc_init_array+0x38>)
 8002ffc:	4c0d      	ldr	r4, [pc, #52]	; (8003034 <__libc_init_array+0x3c>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	2600      	movs	r6, #0
 8003004:	42a6      	cmp	r6, r4
 8003006:	d109      	bne.n	800301c <__libc_init_array+0x24>
 8003008:	4d0b      	ldr	r5, [pc, #44]	; (8003038 <__libc_init_array+0x40>)
 800300a:	4c0c      	ldr	r4, [pc, #48]	; (800303c <__libc_init_array+0x44>)
 800300c:	f000 f820 	bl	8003050 <_init>
 8003010:	1b64      	subs	r4, r4, r5
 8003012:	10a4      	asrs	r4, r4, #2
 8003014:	2600      	movs	r6, #0
 8003016:	42a6      	cmp	r6, r4
 8003018:	d105      	bne.n	8003026 <__libc_init_array+0x2e>
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003020:	4798      	blx	r3
 8003022:	3601      	adds	r6, #1
 8003024:	e7ee      	b.n	8003004 <__libc_init_array+0xc>
 8003026:	f855 3b04 	ldr.w	r3, [r5], #4
 800302a:	4798      	blx	r3
 800302c:	3601      	adds	r6, #1
 800302e:	e7f2      	b.n	8003016 <__libc_init_array+0x1e>
 8003030:	080030a0 	.word	0x080030a0
 8003034:	080030a0 	.word	0x080030a0
 8003038:	080030a0 	.word	0x080030a0
 800303c:	080030a4 	.word	0x080030a4

08003040 <memset>:
 8003040:	4402      	add	r2, r0
 8003042:	4603      	mov	r3, r0
 8003044:	4293      	cmp	r3, r2
 8003046:	d100      	bne.n	800304a <memset+0xa>
 8003048:	4770      	bx	lr
 800304a:	f803 1b01 	strb.w	r1, [r3], #1
 800304e:	e7f9      	b.n	8003044 <memset+0x4>

08003050 <_init>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr

0800305c <_fini>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr
