
C0_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000000c  08002f14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08002f14  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8e7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a98  00000000  00000000  0002a91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0002c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011fe6  00000000  00000000  0002d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a47a  00000000  00000000  0003f286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fadd  00000000  00000000  00049700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b91dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a84  00000000  00000000  000b9230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e60 	.word	0x08002e60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002e60 	.word	0x08002e60

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	static uint8_t rxBuf1[128];
	int indexRead1 = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]

	static uint8_t rxBuf2[128];
	int indexRead2 = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000402:	f000 fb4a 	bl	8000a9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000406:	f000 f88d 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040a:	f000 f971 	bl	80006f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800040e:	f000 f949 	bl	80006a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000412:	f000 f913 	bl	800063c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000416:	f000 f8c3 	bl	80005a0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_DMA(&huart1,rxBuf1,sizeof(rxBuf1));
 800041a:	493d      	ldr	r1, [pc, #244]	; (8000510 <main+0x11c>)
 800041c:	4b3d      	ldr	r3, [pc, #244]	; (8000514 <main+0x120>)
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	0018      	movs	r0, r3
 8000422:	f001 fdca 	bl	8001fba <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2,rxBuf2,sizeof(rxBuf2));
 8000426:	493c      	ldr	r1, [pc, #240]	; (8000518 <main+0x124>)
 8000428:	4b3c      	ldr	r3, [pc, #240]	; (800051c <main+0x128>)
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fdc4 	bl	8001fba <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    uint16_t out = 0;
 8000432:	210e      	movs	r1, #14
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2200      	movs	r2, #0
 8000438:	801a      	strh	r2, [r3, #0]
	    out = out + 1;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	187a      	adds	r2, r7, r1
 800043e:	8812      	ldrh	r2, [r2, #0]
 8000440:	3201      	adds	r2, #1
 8000442:	801a      	strh	r2, [r3, #0]
	    if(out == 999){
 8000444:	187b      	adds	r3, r7, r1
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	4a35      	ldr	r2, [pc, #212]	; (8000520 <main+0x12c>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d102      	bne.n	8000454 <main+0x60>
	    	out = 0;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	801a      	strh	r2, [r3, #0]
	    }
	    HAL_Delay(1);
 8000454:	2001      	movs	r0, #1
 8000456:	f000 fb9b 	bl	8000b90 <HAL_Delay>
//	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, out);


	    uint8_t readData1 = 0;
 800045a:	1cfb      	adds	r3, r7, #3
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]

		int index1 = huart1.hdmarx->Instance->CNDTR;//バッファー残容??��?��?
 8000460:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <main+0x120>)
 8000462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	60bb      	str	r3, [r7, #8]
		index1 = sizeof(rxBuf1) - index1;//??��?��?新の受信??��?��?ータ位置
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	60bb      	str	r3, [r7, #8]

		int remainData1 = index1 - indexRead1;//ま??��?��?読み込んで??��?��?な??��?��???��?��?ータ数
 8000472:	68ba      	ldr	r2, [r7, #8]
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	617b      	str	r3, [r7, #20]
		if(remainData1 < 0){remainData1 = remainData1 + sizeof(rxBuf1);}
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	2b00      	cmp	r3, #0
 800047e:	da02      	bge.n	8000486 <main+0x92>
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	3380      	adds	r3, #128	; 0x80
 8000484:	617b      	str	r3, [r7, #20]
		//読み込み済み??��?��?ータ位置より??��?��?新の受信??��?��?ータ位置が前にある??��?��?(バッファー??��?��?で受信??��?��?ータが�?周してた�???��?��??��?��?)値を補正

		if(remainData1 > 0){
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dd13      	ble.n	80004b4 <main+0xc0>
			readData1 = rxBuf1[indexRead1];//??��?��?ータ読み込み
 800048c:	4a20      	ldr	r2, [pc, #128]	; (8000510 <main+0x11c>)
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	18d3      	adds	r3, r2, r3
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	1cfb      	adds	r3, r7, #3
 8000496:	701a      	strb	r2, [r3, #0]
			//??��?��?新??��?��?ータを読みたい時�???��?��[index-1]を読??��?��???��?��???��?��?!!!!!!!
			indexRead1++;
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	3301      	adds	r3, #1
 800049c:	61fb      	str	r3, [r7, #28]
			if(indexRead1 == sizeof(rxBuf1)){indexRead1 = 0;}
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	2b80      	cmp	r3, #128	; 0x80
 80004a2:	d101      	bne.n	80004a8 <main+0xb4>
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
			HAL_UART_Transmit(&huart2, &readData1, 1, 100);//受信した値をそのまま送信
 80004a8:	1cf9      	adds	r1, r7, #3
 80004aa:	481c      	ldr	r0, [pc, #112]	; (800051c <main+0x128>)
 80004ac:	2364      	movs	r3, #100	; 0x64
 80004ae:	2201      	movs	r2, #1
 80004b0:	f001 fcd8 	bl	8001e64 <HAL_UART_Transmit>
		}


		uint8_t readData2 = 0;
 80004b4:	1cbb      	adds	r3, r7, #2
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]

		int index2 = huart2.hdmarx->Instance->CNDTR;//バッファー残容??��?��?
 80004ba:	4b18      	ldr	r3, [pc, #96]	; (800051c <main+0x128>)
 80004bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	607b      	str	r3, [r7, #4]
		index2 = sizeof(rxBuf2) - index2;//??��?��?新の受信??��?��?ータ位置
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	607b      	str	r3, [r7, #4]

		int remainData2 = index2 - indexRead2;//ま??��?��?読み込んで??��?��?な??��?��???��?��?ータ数
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	613b      	str	r3, [r7, #16]
		if(remainData2 < 0){remainData2 = remainData2 + sizeof(rxBuf2);}
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	da02      	bge.n	80004e0 <main+0xec>
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	3380      	adds	r3, #128	; 0x80
 80004de:	613b      	str	r3, [r7, #16]
		//読み込み済み??��?��?ータ位置より??��?��?新の受信??��?��?ータ位置が前にある??��?��?(バッファー??��?��?で受信??��?��?ータが�?周してた�???��?��??��?��?)値を補正

		if(remainData2 > 0){
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	dda5      	ble.n	8000432 <main+0x3e>
			readData2 = rxBuf2[indexRead2];//??��?��?ータ読み込み
 80004e6:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <main+0x124>)
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	18d3      	adds	r3, r2, r3
 80004ec:	781a      	ldrb	r2, [r3, #0]
 80004ee:	1cbb      	adds	r3, r7, #2
 80004f0:	701a      	strb	r2, [r3, #0]
			//??��?��?新??��?��?ータを読みたい時�???��?��[index-1]を読??��?��???��?��???��?��?!!!!!!!
			indexRead2++;
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	3301      	adds	r3, #1
 80004f6:	61bb      	str	r3, [r7, #24]
			if(indexRead2 == sizeof(rxBuf2)){indexRead2 = 0;}
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	2b80      	cmp	r3, #128	; 0x80
 80004fc:	d101      	bne.n	8000502 <main+0x10e>
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
			HAL_UART_Transmit(&huart1, &readData2, 1, 100);//受信した値をそのまま送信
 8000502:	1cb9      	adds	r1, r7, #2
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <main+0x120>)
 8000506:	2364      	movs	r3, #100	; 0x64
 8000508:	2201      	movs	r2, #1
 800050a:	f001 fcab 	bl	8001e64 <HAL_UART_Transmit>
  {
 800050e:	e790      	b.n	8000432 <main+0x3e>
 8000510:	20000200 	.word	0x20000200
 8000514:	20000028 	.word	0x20000028
 8000518:	20000280 	.word	0x20000280
 800051c:	200000b8 	.word	0x200000b8
 8000520:	000003e7 	.word	0x000003e7

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b08d      	sub	sp, #52	; 0x34
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	2414      	movs	r4, #20
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	231c      	movs	r3, #28
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f002 fc8b 	bl	8002e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	2314      	movs	r3, #20
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f002 fc84 	bl	8002e50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2201      	movs	r2, #1
 800054c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	0252      	lsls	r2, r2, #9
 8000554:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	193b      	adds	r3, r7, r4
 8000558:	0018      	movs	r0, r3
 800055a:	f000 ffd7 	bl	800150c <HAL_RCC_OscConfig>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000562:	f000 f8f3 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	003b      	movs	r3, r7
 8000568:	2207      	movs	r2, #7
 800056a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800056c:	003b      	movs	r3, r7
 800056e:	2201      	movs	r2, #1
 8000570:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	003b      	movs	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000578:	003b      	movs	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800057e:	003b      	movs	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000584:	003b      	movs	r3, r7
 8000586:	2101      	movs	r1, #1
 8000588:	0018      	movs	r0, r3
 800058a:	f001 f9b9 	bl	8001900 <HAL_RCC_ClockConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000592:	f000 f8db 	bl	800074c <Error_Handler>
  }
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b00d      	add	sp, #52	; 0x34
 800059c:	bd90      	pop	{r4, r7, pc}
	...

080005a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005a6:	4a24      	ldr	r2, [pc, #144]	; (8000638 <MX_USART1_UART_Init+0x98>)
 80005a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005aa:	4b22      	ldr	r3, [pc, #136]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005ac:	22e1      	movs	r2, #225	; 0xe1
 80005ae:	0252      	lsls	r2, r2, #9
 80005b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005c6:	220c      	movs	r2, #12
 80005c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005d8:	2200      	movs	r2, #0
 80005da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005de:	2200      	movs	r2, #0
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fbe4 	bl	8001db8 <HAL_UART_Init>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80005f4:	f000 f8aa 	bl	800074c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_USART1_UART_Init+0x94>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f002 fb23 	bl	8002c48 <HAL_UARTEx_SetTxFifoThreshold>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000606:	f000 f8a1 	bl	800074c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_USART1_UART_Init+0x94>)
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f002 fb5a 	bl	8002cc8 <HAL_UARTEx_SetRxFifoThreshold>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000618:	f000 f898 	bl	800074c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MX_USART1_UART_Init+0x94>)
 800061e:	0018      	movs	r0, r3
 8000620:	f002 fad8 	bl	8002bd4 <HAL_UARTEx_DisableFifoMode>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000628:	f000 f890 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	20000028 	.word	0x20000028
 8000638:	40013800 	.word	0x40013800

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_USART2_UART_Init+0x60>)
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <MX_USART2_UART_Init+0x64>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_USART2_UART_Init+0x60>)
 8000648:	22e1      	movs	r2, #225	; 0xe1
 800064a:	0252      	lsls	r2, r2, #9
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_USART2_UART_Init+0x60>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x60>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_USART2_UART_Init+0x60>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x60>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_USART2_UART_Init+0x60>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x60>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_USART2_UART_Init+0x60>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x60>)
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_USART2_UART_Init+0x60>)
 8000680:	2200      	movs	r2, #0
 8000682:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x60>)
 8000686:	0018      	movs	r0, r3
 8000688:	f001 fb96 	bl	8001db8 <HAL_UART_Init>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000690:	f000 f85c 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	200000b8 	.word	0x200000b8
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_DMA_Init+0x48>)
 80006ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_DMA_Init+0x48>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	639a      	str	r2, [r3, #56]	; 0x38
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_DMA_Init+0x48>)
 80006b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2009      	movs	r0, #9
 80006c8:	f000 fb30 	bl	8000d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006cc:	2009      	movs	r0, #9
 80006ce:	f000 fb42 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 fb28 	bl	8000d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006dc:	200a      	movs	r0, #10
 80006de:	f000 fb3a 	bl	8000d56 <HAL_NVIC_EnableIRQ>

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_GPIO_Init+0x58>)
 80006f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_GPIO_Init+0x58>)
 80006fc:	2102      	movs	r1, #2
 80006fe:	430a      	orrs	r2, r1
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_GPIO_Init+0x58>)
 8000704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000706:	2202      	movs	r2, #2
 8000708:	4013      	ands	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_GPIO_Init+0x58>)
 8000710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_GPIO_Init+0x58>)
 8000714:	2104      	movs	r1, #4
 8000716:	430a      	orrs	r2, r1
 8000718:	635a      	str	r2, [r3, #52]	; 0x34
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_GPIO_Init+0x58>)
 800071c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071e:	2204      	movs	r2, #4
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_GPIO_Init+0x58>)
 8000728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_GPIO_Init+0x58>)
 800072c:	2101      	movs	r1, #1
 800072e:	430a      	orrs	r2, r1
 8000730:	635a      	str	r2, [r3, #52]	; 0x34
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <MX_GPIO_Init+0x58>)
 8000734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000736:	2201      	movs	r2, #1
 8000738:	4013      	ands	r3, r2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b004      	add	sp, #16
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40021000 	.word	0x40021000

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x44>)
 8000760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HAL_MspInit+0x44>)
 8000764:	2101      	movs	r1, #1
 8000766:	430a      	orrs	r2, r1
 8000768:	641a      	str	r2, [r3, #64]	; 0x40
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x44>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	2201      	movs	r2, #1
 8000770:	4013      	ands	r3, r2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x44>)
 8000778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_MspInit+0x44>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0549      	lsls	r1, r1, #21
 8000780:	430a      	orrs	r2, r1
 8000782:	63da      	str	r2, [r3, #60]	; 0x3c
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_MspInit+0x44>)
 8000786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	055b      	lsls	r3, r3, #21
 800078c:	4013      	ands	r3, r2
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b095      	sub	sp, #84	; 0x54
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	233c      	movs	r3, #60	; 0x3c
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	0018      	movs	r0, r3
 80007ae:	2314      	movs	r3, #20
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f002 fb4c 	bl	8002e50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	2420      	movs	r4, #32
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	0018      	movs	r0, r3
 80007be:	231c      	movs	r3, #28
 80007c0:	001a      	movs	r2, r3
 80007c2:	2100      	movs	r1, #0
 80007c4:	f002 fb44 	bl	8002e50 <memset>
  if(huart->Instance==USART1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a78      	ldr	r2, [pc, #480]	; (80009b0 <HAL_UART_MspInit+0x210>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d000      	beq.n	80007d4 <HAL_UART_MspInit+0x34>
 80007d2:	e08a      	b.n	80008ea <HAL_UART_MspInit+0x14a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 f9fa 	bl	8001bdc <HAL_RCCEx_PeriphCLKConfig>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80007ec:	f7ff ffae 	bl	800074c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007f0:	4b70      	ldr	r3, [pc, #448]	; (80009b4 <HAL_UART_MspInit+0x214>)
 80007f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f4:	4b6f      	ldr	r3, [pc, #444]	; (80009b4 <HAL_UART_MspInit+0x214>)
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	01c9      	lsls	r1, r1, #7
 80007fa:	430a      	orrs	r2, r1
 80007fc:	641a      	str	r2, [r3, #64]	; 0x40
 80007fe:	4b6d      	ldr	r3, [pc, #436]	; (80009b4 <HAL_UART_MspInit+0x214>)
 8000800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	01db      	lsls	r3, r3, #7
 8000806:	4013      	ands	r3, r2
 8000808:	61fb      	str	r3, [r7, #28]
 800080a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080c:	4b69      	ldr	r3, [pc, #420]	; (80009b4 <HAL_UART_MspInit+0x214>)
 800080e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000810:	4b68      	ldr	r3, [pc, #416]	; (80009b4 <HAL_UART_MspInit+0x214>)
 8000812:	2102      	movs	r1, #2
 8000814:	430a      	orrs	r2, r1
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
 8000818:	4b66      	ldr	r3, [pc, #408]	; (80009b4 <HAL_UART_MspInit+0x214>)
 800081a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081c:	2202      	movs	r2, #2
 800081e:	4013      	ands	r3, r2
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b63      	ldr	r3, [pc, #396]	; (80009b4 <HAL_UART_MspInit+0x214>)
 8000826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000828:	4b62      	ldr	r3, [pc, #392]	; (80009b4 <HAL_UART_MspInit+0x214>)
 800082a:	2101      	movs	r1, #1
 800082c:	430a      	orrs	r2, r1
 800082e:	635a      	str	r2, [r3, #52]	; 0x34
 8000830:	4b60      	ldr	r3, [pc, #384]	; (80009b4 <HAL_UART_MspInit+0x214>)
 8000832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000834:	2201      	movs	r2, #1
 8000836:	4013      	ands	r3, r2
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA0     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800083c:	243c      	movs	r4, #60	; 0x3c
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2202      	movs	r2, #2
 8000848:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	193b      	adds	r3, r7, r4
 800085e:	4a56      	ldr	r2, [pc, #344]	; (80009b8 <HAL_UART_MspInit+0x218>)
 8000860:	0019      	movs	r1, r3
 8000862:	0010      	movs	r0, r2
 8000864:	f000 fce8 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000868:	0021      	movs	r1, r4
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2201      	movs	r2, #1
 800086e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2202      	movs	r2, #2
 8000874:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2204      	movs	r2, #4
 8000886:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	187a      	adds	r2, r7, r1
 800088a:	23a0      	movs	r3, #160	; 0xa0
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fcd1 	bl	8001238 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <HAL_UART_MspInit+0x21c>)
 8000898:	4a49      	ldr	r2, [pc, #292]	; (80009c0 <HAL_UART_MspInit+0x220>)
 800089a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800089c:	4b47      	ldr	r3, [pc, #284]	; (80009bc <HAL_UART_MspInit+0x21c>)
 800089e:	2232      	movs	r2, #50	; 0x32
 80008a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a2:	4b46      	ldr	r3, [pc, #280]	; (80009bc <HAL_UART_MspInit+0x21c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a8:	4b44      	ldr	r3, [pc, #272]	; (80009bc <HAL_UART_MspInit+0x21c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008ae:	4b43      	ldr	r3, [pc, #268]	; (80009bc <HAL_UART_MspInit+0x21c>)
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b4:	4b41      	ldr	r3, [pc, #260]	; (80009bc <HAL_UART_MspInit+0x21c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ba:	4b40      	ldr	r3, [pc, #256]	; (80009bc <HAL_UART_MspInit+0x21c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80008c0:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <HAL_UART_MspInit+0x21c>)
 80008c2:	2220      	movs	r2, #32
 80008c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008c6:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <HAL_UART_MspInit+0x21c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008cc:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <HAL_UART_MspInit+0x21c>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fa5e 	bl	8000d90 <HAL_DMA_Init>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80008d8:	f7ff ff38 	bl	800074c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a37      	ldr	r2, [pc, #220]	; (80009bc <HAL_UART_MspInit+0x21c>)
 80008e0:	67da      	str	r2, [r3, #124]	; 0x7c
 80008e2:	4b36      	ldr	r3, [pc, #216]	; (80009bc <HAL_UART_MspInit+0x21c>)
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e8:	e05e      	b.n	80009a8 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a35      	ldr	r2, [pc, #212]	; (80009c4 <HAL_UART_MspInit+0x224>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d159      	bne.n	80009a8 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <HAL_UART_MspInit+0x214>)
 80008f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <HAL_UART_MspInit+0x214>)
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	0289      	lsls	r1, r1, #10
 80008fe:	430a      	orrs	r2, r1
 8000900:	63da      	str	r2, [r3, #60]	; 0x3c
 8000902:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <HAL_UART_MspInit+0x214>)
 8000904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	029b      	lsls	r3, r3, #10
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <HAL_UART_MspInit+0x214>)
 8000912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <HAL_UART_MspInit+0x214>)
 8000916:	2101      	movs	r1, #1
 8000918:	430a      	orrs	r2, r1
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <HAL_UART_MspInit+0x214>)
 800091e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000920:	2201      	movs	r2, #1
 8000922:	4013      	ands	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000928:	213c      	movs	r1, #60	; 0x3c
 800092a:	187b      	adds	r3, r7, r1
 800092c:	220c      	movs	r2, #12
 800092e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2202      	movs	r2, #2
 8000934:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2201      	movs	r2, #1
 8000946:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	187a      	adds	r2, r7, r1
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fc71 	bl	8001238 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <HAL_UART_MspInit+0x228>)
 8000958:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <HAL_UART_MspInit+0x22c>)
 800095a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <HAL_UART_MspInit+0x228>)
 800095e:	2234      	movs	r2, #52	; 0x34
 8000960:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <HAL_UART_MspInit+0x228>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_UART_MspInit+0x228>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <HAL_UART_MspInit+0x228>)
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_UART_MspInit+0x228>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <HAL_UART_MspInit+0x228>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_UART_MspInit+0x228>)
 8000982:	2220      	movs	r2, #32
 8000984:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_UART_MspInit+0x228>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_UART_MspInit+0x228>)
 800098e:	0018      	movs	r0, r3
 8000990:	f000 f9fe 	bl	8000d90 <HAL_DMA_Init>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8000998:	f7ff fed8 	bl	800074c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_UART_MspInit+0x228>)
 80009a0:	67da      	str	r2, [r3, #124]	; 0x7c
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_UART_MspInit+0x228>)
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b015      	add	sp, #84	; 0x54
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	40013800 	.word	0x40013800
 80009b4:	40021000 	.word	0x40021000
 80009b8:	50000400 	.word	0x50000400
 80009bc:	20000148 	.word	0x20000148
 80009c0:	40020008 	.word	0x40020008
 80009c4:	40004400 	.word	0x40004400
 80009c8:	200001a4 	.word	0x200001a4
 80009cc:	4002001c 	.word	0x4002001c

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f8b2 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <DMA1_Channel1_IRQHandler+0x14>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fad4 	bl	8000fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000148 	.word	0x20000148

08000a18 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <DMA1_Channel2_3_IRQHandler+0x14>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fac8 	bl	8000fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	200001a4 	.word	0x200001a4

08000a30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <SystemInit+0x14>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	0512      	lsls	r2, r2, #20
 8000a3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a4e:	e003      	b.n	8000a58 <LoopCopyDataInit>

08000a50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000a52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a56:	3104      	adds	r1, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <LoopForever+0xa>)
  ldr r3, =_edata
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <LoopForever+0xe>)
  adds r2, r0, r1
 8000a5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a60:	d3f6      	bcc.n	8000a50 <CopyDataInit>
  ldr r2, =_sbss
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <LoopForever+0x12>)
  b LoopFillZerobss
 8000a64:	e002      	b.n	8000a6c <LoopFillZerobss>

08000a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  str  r3, [r2]
 8000a68:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6a:	3204      	adds	r2, #4

08000a6c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <LoopForever+0x16>)
  cmp r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a70:	d3f9      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a72:	f7ff ffdd 	bl	8000a30 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a76:	f002 f9c7 	bl	8002e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7a:	f7ff fcbb 	bl	80003f4 <main>

08000a7e <LoopForever>:

LoopForever:
    b LoopForever
 8000a7e:	e7fe      	b.n	8000a7e <LoopForever>
  ldr   r0, =_estack
 8000a80:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000a84:	08002f08 	.word	0x08002f08
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a90:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a94:	20000304 	.word	0x20000304

08000a98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC1_IRQHandler>

08000a9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	f000 f80e 	bl	8000ac8 <HAL_InitTick>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e001      	b.n	8000abc <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab8:	f7ff fe4e 	bl	8000758 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	781b      	ldrb	r3, [r3, #0]
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <HAL_InitTick+0x88>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d02b      	beq.n	8000b38 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_InitTick+0x8c>)
 8000ae2:	681c      	ldr	r4, [r3, #0]
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_InitTick+0x88>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	0019      	movs	r1, r3
 8000aea:	23fa      	movs	r3, #250	; 0xfa
 8000aec:	0098      	lsls	r0, r3, #2
 8000aee:	f7ff fb0b 	bl	8000108 <__udivsi3>
 8000af2:	0003      	movs	r3, r0
 8000af4:	0019      	movs	r1, r3
 8000af6:	0020      	movs	r0, r4
 8000af8:	f7ff fb06 	bl	8000108 <__udivsi3>
 8000afc:	0003      	movs	r3, r0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 f939 	bl	8000d76 <HAL_SYSTICK_Config>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d112      	bne.n	8000b2e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d80a      	bhi.n	8000b24 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	2301      	movs	r3, #1
 8000b12:	425b      	negs	r3, r3
 8000b14:	2200      	movs	r2, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 f908 	bl	8000d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_InitTick+0x90>)
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	e00d      	b.n	8000b40 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b24:	230f      	movs	r3, #15
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	e008      	b.n	8000b40 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b2e:	230f      	movs	r3, #15
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	e003      	b.n	8000b40 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b40:	230f      	movs	r3, #15
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	781b      	ldrb	r3, [r3, #0]
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b005      	add	sp, #20
 8000b4c:	bd90      	pop	{r4, r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <HAL_IncTick+0x18>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <HAL_IncTick+0x1c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	18d2      	adds	r2, r2, r3
 8000b6a:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_IncTick+0x18>)
 8000b6c:	601a      	str	r2, [r3, #0]
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000300 	.word	0x20000300
 8000b78:	20000008 	.word	0x20000008

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <HAL_GetTick+0x10>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	20000300 	.word	0x20000300

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff fff0 	bl	8000b7c <HAL_GetTick>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	d004      	beq.n	8000bb4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_Delay+0x40>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	f7ff ffe1 	bl	8000b7c <HAL_GetTick>
 8000bba:	0002      	movs	r2, r0
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d8f7      	bhi.n	8000bb6 <HAL_Delay+0x26>
  {
  }
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b004      	add	sp, #16
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	0002      	movs	r2, r0
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b7f      	cmp	r3, #127	; 0x7f
 8000be6:	d809      	bhi.n	8000bfc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	001a      	movs	r2, r3
 8000bee:	231f      	movs	r3, #31
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_EnableIRQ+0x30>)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	000a      	movs	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	0002      	movs	r2, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1c:	d828      	bhi.n	8000c70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1e:	4a2f      	ldr	r2, [pc, #188]	; (8000cdc <__NVIC_SetPriority+0xd4>)
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	33c0      	adds	r3, #192	; 0xc0
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	589b      	ldr	r3, [r3, r2]
 8000c2e:	1dfa      	adds	r2, r7, #7
 8000c30:	7812      	ldrb	r2, [r2, #0]
 8000c32:	0011      	movs	r1, r2
 8000c34:	2203      	movs	r2, #3
 8000c36:	400a      	ands	r2, r1
 8000c38:	00d2      	lsls	r2, r2, #3
 8000c3a:	21ff      	movs	r1, #255	; 0xff
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	000a      	movs	r2, r1
 8000c40:	43d2      	mvns	r2, r2
 8000c42:	401a      	ands	r2, r3
 8000c44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	019b      	lsls	r3, r3, #6
 8000c4a:	22ff      	movs	r2, #255	; 0xff
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	0018      	movs	r0, r3
 8000c54:	2303      	movs	r3, #3
 8000c56:	4003      	ands	r3, r0
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5c:	481f      	ldr	r0, [pc, #124]	; (8000cdc <__NVIC_SetPriority+0xd4>)
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	430a      	orrs	r2, r1
 8000c68:	33c0      	adds	r3, #192	; 0xc0
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c6e:	e031      	b.n	8000cd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <__NVIC_SetPriority+0xd8>)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	0019      	movs	r1, r3
 8000c78:	230f      	movs	r3, #15
 8000c7a:	400b      	ands	r3, r1
 8000c7c:	3b08      	subs	r3, #8
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	3306      	adds	r3, #6
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	18d3      	adds	r3, r2, r3
 8000c86:	3304      	adds	r3, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	1dfa      	adds	r2, r7, #7
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	0011      	movs	r1, r2
 8000c90:	2203      	movs	r2, #3
 8000c92:	400a      	ands	r2, r1
 8000c94:	00d2      	lsls	r2, r2, #3
 8000c96:	21ff      	movs	r1, #255	; 0xff
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	22ff      	movs	r2, #255	; 0xff
 8000ca8:	401a      	ands	r2, r3
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	4003      	ands	r3, r0
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <__NVIC_SetPriority+0xd8>)
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	001c      	movs	r4, r3
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	4023      	ands	r3, r4
 8000cc4:	3b08      	subs	r3, #8
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	3306      	adds	r3, #6
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	18c3      	adds	r3, r0, r3
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b003      	add	sp, #12
 8000cda:	bd90      	pop	{r4, r7, pc}
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	1e5a      	subs	r2, r3, #1
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	045b      	lsls	r3, r3, #17
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d301      	bcc.n	8000cfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e010      	b.n	8000d1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <SysTick_Config+0x44>)
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	3a01      	subs	r2, #1
 8000d02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d04:	2301      	movs	r3, #1
 8000d06:	425b      	negs	r3, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff ff7c 	bl	8000c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Config+0x44>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SysTick_Config+0x44>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	0018      	movs	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	210f      	movs	r1, #15
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	1c02      	adds	r2, r0, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff ff5d 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b004      	add	sp, #16
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	0002      	movs	r2, r0
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff ff33 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff ffaf 	bl	8000ce4 <SysTick_Config>
 8000d86:	0003      	movs	r3, r0
}
 8000d88:	0018      	movs	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b002      	add	sp, #8
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e077      	b.n	8000e92 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a3d      	ldr	r2, [pc, #244]	; (8000e9c <HAL_DMA_Init+0x10c>)
 8000da8:	4694      	mov	ip, r2
 8000daa:	4463      	add	r3, ip
 8000dac:	2114      	movs	r1, #20
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff f9aa 	bl	8000108 <__udivsi3>
 8000db4:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000db6:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2225      	movs	r2, #37	; 0x25
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4934      	ldr	r1, [pc, #208]	; (8000ea0 <HAL_DMA_Init+0x110>)
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6819      	ldr	r1, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	431a      	orrs	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f000 f9c3 	bl	8001198 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	01db      	lsls	r3, r3, #7
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d102      	bne.n	8000e24 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2c:	21ff      	movs	r1, #255	; 0xff
 8000e2e:	400a      	ands	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000e3a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d011      	beq.n	8000e68 <HAL_DMA_Init+0xd8>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d80d      	bhi.n	8000e68 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 f9ce 	bl	80011f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	e008      	b.n	8000e7a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2225      	movs	r2, #37	; 0x25
 8000e84:	2101      	movs	r1, #1
 8000e86:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2224      	movs	r2, #36	; 0x24
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	0018      	movs	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	bffdfff8 	.word	0xbffdfff8
 8000ea0:	ffff800f 	.word	0xffff800f

08000ea4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb2:	2317      	movs	r3, #23
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2224      	movs	r2, #36	; 0x24
 8000ebe:	5c9b      	ldrb	r3, [r3, r2]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <HAL_DMA_Start_IT+0x24>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e070      	b.n	8000faa <HAL_DMA_Start_IT+0x106>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2224      	movs	r2, #36	; 0x24
 8000ecc:	2101      	movs	r1, #1
 8000ece:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2225      	movs	r2, #37	; 0x25
 8000ed4:	5c9b      	ldrb	r3, [r3, r2]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d157      	bne.n	8000f8c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2225      	movs	r2, #37	; 0x25
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	438a      	bics	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f000 f909 	bl	8001118 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d008      	beq.n	8000f20 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	210e      	movs	r1, #14
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e00f      	b.n	8000f40 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	438a      	bics	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	210a      	movs	r1, #10
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	025b      	lsls	r3, r3, #9
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d008      	beq.n	8000f60 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	0049      	lsls	r1, r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d008      	beq.n	8000f7a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	0049      	lsls	r1, r1, #1
 8000f76:	430a      	orrs	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e007      	b.n	8000f9c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2224      	movs	r2, #36	; 0x24
 8000f90:	2100      	movs	r1, #0
 8000f92:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f94:	2317      	movs	r3, #23
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	2202      	movs	r2, #2
 8000f9a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2224      	movs	r2, #36	; 0x24
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	5499      	strb	r1, [r3, r2]

  return status;
 8000fa4:	2317      	movs	r3, #23
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b006      	add	sp, #24
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8000fbc:	4b55      	ldr	r3, [pc, #340]	; (8001114 <HAL_DMA_IRQHandler+0x160>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	221c      	movs	r2, #28
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d027      	beq.n	800102e <HAL_DMA_IRQHandler+0x7a>
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d023      	beq.n	800102e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2220      	movs	r2, #32
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d107      	bne.n	8001002 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	438a      	bics	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001002:	4b44      	ldr	r3, [pc, #272]	; (8001114 <HAL_DMA_IRQHandler+0x160>)
 8001004:	6859      	ldr	r1, [r3, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	221c      	movs	r2, #28
 800100c:	4013      	ands	r3, r2
 800100e:	2204      	movs	r2, #4
 8001010:	409a      	lsls	r2, r3
 8001012:	4b40      	ldr	r3, [pc, #256]	; (8001114 <HAL_DMA_IRQHandler+0x160>)
 8001014:	430a      	orrs	r2, r1
 8001016:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	2b00      	cmp	r3, #0
 800101e:	d100      	bne.n	8001022 <HAL_DMA_IRQHandler+0x6e>
 8001020:	e073      	b.n	800110a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	0010      	movs	r0, r2
 800102a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800102c:	e06d      	b.n	800110a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	221c      	movs	r2, #28
 8001034:	4013      	ands	r3, r2
 8001036:	2202      	movs	r2, #2
 8001038:	409a      	lsls	r2, r3
 800103a:	0013      	movs	r3, r2
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4013      	ands	r3, r2
 8001040:	d02e      	beq.n	80010a0 <HAL_DMA_IRQHandler+0xec>
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2202      	movs	r2, #2
 8001046:	4013      	ands	r3, r2
 8001048:	d02a      	beq.n	80010a0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2220      	movs	r2, #32
 8001052:	4013      	ands	r3, r2
 8001054:	d10b      	bne.n	800106e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	210a      	movs	r1, #10
 8001062:	438a      	bics	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2225      	movs	r2, #37	; 0x25
 800106a:	2101      	movs	r1, #1
 800106c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <HAL_DMA_IRQHandler+0x160>)
 8001070:	6859      	ldr	r1, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	221c      	movs	r2, #28
 8001078:	4013      	ands	r3, r2
 800107a:	2202      	movs	r2, #2
 800107c:	409a      	lsls	r2, r3
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_DMA_IRQHandler+0x160>)
 8001080:	430a      	orrs	r2, r1
 8001082:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2224      	movs	r2, #36	; 0x24
 8001088:	2100      	movs	r1, #0
 800108a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d03a      	beq.n	800110a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	0010      	movs	r0, r2
 800109c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800109e:	e034      	b.n	800110a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	221c      	movs	r2, #28
 80010a6:	4013      	ands	r3, r2
 80010a8:	2208      	movs	r2, #8
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4013      	ands	r3, r2
 80010b2:	d02b      	beq.n	800110c <HAL_DMA_IRQHandler+0x158>
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2208      	movs	r2, #8
 80010b8:	4013      	ands	r3, r2
 80010ba:	d027      	beq.n	800110c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	210e      	movs	r1, #14
 80010c8:	438a      	bics	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_DMA_IRQHandler+0x160>)
 80010ce:	6859      	ldr	r1, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	221c      	movs	r2, #28
 80010d6:	4013      	ands	r3, r2
 80010d8:	2201      	movs	r2, #1
 80010da:	409a      	lsls	r2, r3
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_DMA_IRQHandler+0x160>)
 80010de:	430a      	orrs	r2, r1
 80010e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2225      	movs	r2, #37	; 0x25
 80010ec:	2101      	movs	r1, #1
 80010ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2224      	movs	r2, #36	; 0x24
 80010f4:	2100      	movs	r1, #0
 80010f6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	0010      	movs	r0, r2
 8001108:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46c0      	nop			; (mov r8, r8)
}
 800110e:	46bd      	mov	sp, r7
 8001110:	b004      	add	sp, #16
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40020000 	.word	0x40020000

08001118 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800112e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001140:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <DMA_SetConfig+0x7c>)
 8001144:	6859      	ldr	r1, [r3, #4]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	221c      	movs	r2, #28
 800114c:	4013      	ands	r3, r2
 800114e:	2201      	movs	r2, #1
 8001150:	409a      	lsls	r2, r3
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <DMA_SetConfig+0x7c>)
 8001154:	430a      	orrs	r2, r1
 8001156:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b10      	cmp	r3, #16
 8001166:	d108      	bne.n	800117a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001178:	e007      	b.n	800118a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	60da      	str	r2, [r3, #12]
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b004      	add	sp, #16
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	40020000 	.word	0x40020000

08001198 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	001a      	movs	r2, r3
 80011a6:	23ff      	movs	r3, #255	; 0xff
 80011a8:	4013      	ands	r3, r2
 80011aa:	3b08      	subs	r3, #8
 80011ac:	2114      	movs	r1, #20
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7fe ffaa 	bl	8000108 <__udivsi3>
 80011b4:	0003      	movs	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80011c0:	4694      	mov	ip, r2
 80011c2:	4463      	add	r3, ip
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	001a      	movs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80011d0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	221c      	movs	r2, #28
 80011d6:	4013      	ands	r3, r2
 80011d8:	2201      	movs	r2, #1
 80011da:	409a      	lsls	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b004      	add	sp, #16
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	10008200 	.word	0x10008200
 80011ec:	40020880 	.word	0x40020880

080011f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	22ff      	movs	r2, #255	; 0xff
 80011fe:	4013      	ands	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001206:	4694      	mov	ip, r2
 8001208:	4463      	add	r3, ip
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	001a      	movs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001216:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3b01      	subs	r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	4013      	ands	r3, r2
 8001220:	2201      	movs	r2, #1
 8001222:	409a      	lsls	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b004      	add	sp, #16
 800122e:	bd80      	pop	{r7, pc}
 8001230:	1000823f 	.word	0x1000823f
 8001234:	40020940 	.word	0x40020940

08001238 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001246:	e14d      	b.n	80014e4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4091      	lsls	r1, r2
 8001252:	000a      	movs	r2, r1
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <HAL_GPIO_Init+0x28>
 800125e:	e13e      	b.n	80014de <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x38>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b12      	cmp	r3, #18
 800126e:	d125      	bne.n	80012bc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	58d3      	ldr	r3, [r2, r3]
 800127c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	2207      	movs	r2, #7
 8001282:	4013      	ands	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	43da      	mvns	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	220f      	movs	r2, #15
 800129a:	401a      	ands	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2107      	movs	r1, #7
 80012a0:	400b      	ands	r3, r1
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	409a      	lsls	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	08da      	lsrs	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3208      	adds	r2, #8
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	6979      	ldr	r1, [r7, #20]
 80012ba:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	43da      	mvns	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	4013      	ands	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2203      	movs	r2, #3
 80012da:	401a      	ands	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	409a      	lsls	r2, r3
 80012e2:	0013      	movs	r3, r2
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d00b      	beq.n	8001310 <HAL_GPIO_Init+0xd8>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001304:	2b11      	cmp	r3, #17
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b12      	cmp	r3, #18
 800130e:	d130      	bne.n	8001372 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	409a      	lsls	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	43da      	mvns	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	4013      	ands	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	409a      	lsls	r2, r3
 8001332:	0013      	movs	r3, r2
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	4313      	orrs	r3, r2
 8001338:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001346:	2201      	movs	r2, #1
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	43da      	mvns	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	4013      	ands	r3, r2
 8001354:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	2201      	movs	r2, #1
 800135e:	401a      	ands	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4313      	orrs	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d017      	beq.n	80013aa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	43da      	mvns	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	4013      	ands	r3, r2
 8001390:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	055b      	lsls	r3, r3, #21
 80013b2:	4013      	ands	r3, r2
 80013b4:	d100      	bne.n	80013b8 <HAL_GPIO_Init+0x180>
 80013b6:	e092      	b.n	80014de <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80013b8:	4a50      	ldr	r2, [pc, #320]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3318      	adds	r3, #24
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	589b      	ldr	r3, [r3, r2]
 80013c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	2203      	movs	r2, #3
 80013ca:	4013      	ands	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	220f      	movs	r2, #15
 80013d0:	409a      	lsls	r2, r3
 80013d2:	0013      	movs	r3, r2
 80013d4:	43da      	mvns	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	4013      	ands	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	23a0      	movs	r3, #160	; 0xa0
 80013e0:	05db      	lsls	r3, r3, #23
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x1d6>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a45      	ldr	r2, [pc, #276]	; (8001500 <HAL_GPIO_Init+0x2c8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00d      	beq.n	800140a <HAL_GPIO_Init+0x1d2>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a44      	ldr	r2, [pc, #272]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x1ce>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a43      	ldr	r2, [pc, #268]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_GPIO_Init+0x1ca>
 80013fe:	2303      	movs	r3, #3
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x1d8>
 8001402:	2305      	movs	r3, #5
 8001404:	e004      	b.n	8001410 <HAL_GPIO_Init+0x1d8>
 8001406:	2302      	movs	r3, #2
 8001408:	e002      	b.n	8001410 <HAL_GPIO_Init+0x1d8>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_GPIO_Init+0x1d8>
 800140e:	2300      	movs	r3, #0
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	2103      	movs	r1, #3
 8001414:	400a      	ands	r2, r1
 8001416:	00d2      	lsls	r2, r2, #3
 8001418:	4093      	lsls	r3, r2
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001420:	4936      	ldr	r1, [pc, #216]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3318      	adds	r3, #24
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800142e:	4a33      	ldr	r2, [pc, #204]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	58d3      	ldr	r3, [r2, r3]
 8001434:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43da      	mvns	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	4013      	ands	r3, r2
 800143e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	025b      	lsls	r3, r3, #9
 8001448:	4013      	ands	r3, r2
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001454:	4929      	ldr	r1, [pc, #164]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 800145e:	2384      	movs	r3, #132	; 0x84
 8001460:	58d3      	ldr	r3, [r2, r3]
 8001462:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43da      	mvns	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	4013      	ands	r3, r2
 800146c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	029b      	lsls	r3, r3, #10
 8001476:	4013      	ands	r3, r2
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001482:	491e      	ldr	r1, [pc, #120]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 8001484:	2284      	movs	r2, #132	; 0x84
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43da      	mvns	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	4013      	ands	r3, r2
 8001498:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	035b      	lsls	r3, r3, #13
 80014a2:	4013      	ands	r3, r2
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43da      	mvns	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	4013      	ands	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	039b      	lsls	r3, r3, #14
 80014cc:	4013      	ands	r3, r2
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	3301      	adds	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	40da      	lsrs	r2, r3
 80014ec:	1e13      	subs	r3, r2, #0
 80014ee:	d000      	beq.n	80014f2 <HAL_GPIO_Init+0x2ba>
 80014f0:	e6aa      	b.n	8001248 <HAL_GPIO_Init+0x10>
  }
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b006      	add	sp, #24
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021800 	.word	0x40021800
 8001500:	50000400 	.word	0x50000400
 8001504:	50000800 	.word	0x50000800
 8001508:	50001400 	.word	0x50001400

0800150c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e1e5      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	d100      	bne.n	800152a <HAL_RCC_OscConfig+0x1e>
 8001528:	e06f      	b.n	800160a <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152a:	4bc4      	ldr	r3, [pc, #784]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2238      	movs	r2, #56	; 0x38
 8001530:	4013      	ands	r3, r2
 8001532:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b08      	cmp	r3, #8
 8001538:	d10b      	bne.n	8001552 <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153a:	4bc0      	ldr	r3, [pc, #768]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	029b      	lsls	r3, r3, #10
 8001542:	4013      	ands	r3, r2
 8001544:	d061      	beq.n	800160a <HAL_RCC_OscConfig+0xfe>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d15d      	bne.n	800160a <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e1cb      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	429a      	cmp	r2, r3
 800155c:	d107      	bne.n	800156e <HAL_RCC_OscConfig+0x62>
 800155e:	4bb7      	ldr	r3, [pc, #732]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4bb6      	ldr	r3, [pc, #728]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0249      	lsls	r1, r1, #9
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e020      	b.n	80015b0 <HAL_RCC_OscConfig+0xa4>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	23a0      	movs	r3, #160	; 0xa0
 8001574:	02db      	lsls	r3, r3, #11
 8001576:	429a      	cmp	r2, r3
 8001578:	d10e      	bne.n	8001598 <HAL_RCC_OscConfig+0x8c>
 800157a:	4bb0      	ldr	r3, [pc, #704]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4baf      	ldr	r3, [pc, #700]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	02c9      	lsls	r1, r1, #11
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	4bac      	ldr	r3, [pc, #688]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4bab      	ldr	r3, [pc, #684]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	0249      	lsls	r1, r1, #9
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0xa4>
 8001598:	4ba8      	ldr	r3, [pc, #672]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4ba7      	ldr	r3, [pc, #668]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800159e:	49a8      	ldr	r1, [pc, #672]	; (8001840 <HAL_RCC_OscConfig+0x334>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	4ba5      	ldr	r3, [pc, #660]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4ba4      	ldr	r3, [pc, #656]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80015aa:	49a6      	ldr	r1, [pc, #664]	; (8001844 <HAL_RCC_OscConfig+0x338>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d014      	beq.n	80015e2 <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fae0 	bl	8000b7c <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c2:	f7ff fadb 	bl	8000b7c <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	; 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e18a      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d4:	4b99      	ldr	r3, [pc, #612]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	4013      	ands	r3, r2
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0xb6>
 80015e0:	e013      	b.n	800160a <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff facb 	bl	8000b7c <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fac6 	bl	8000b7c <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e175      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015fe:	4b8f      	ldr	r3, [pc, #572]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	029b      	lsls	r3, r3, #10
 8001606:	4013      	ands	r3, r2
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d100      	bne.n	8001616 <HAL_RCC_OscConfig+0x10a>
 8001614:	e08c      	b.n	8001730 <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001616:	4b89      	ldr	r3, [pc, #548]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2238      	movs	r2, #56	; 0x38
 800161c:	4013      	ands	r3, r2
 800161e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d135      	bne.n	8001692 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001626:	4b85      	ldr	r3, [pc, #532]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4013      	ands	r3, r2
 8001630:	d005      	beq.n	800163e <HAL_RCC_OscConfig+0x132>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e155      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163e:	4b7f      	ldr	r3, [pc, #508]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4a81      	ldr	r2, [pc, #516]	; (8001848 <HAL_RCC_OscConfig+0x33c>)
 8001644:	4013      	ands	r3, r2
 8001646:	0019      	movs	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	021a      	lsls	r2, r3, #8
 800164e:	4b7b      	ldr	r3, [pc, #492]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001650:	430a      	orrs	r2, r1
 8001652:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d112      	bne.n	8001680 <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800165a:	4b78      	ldr	r3, [pc, #480]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7b      	ldr	r2, [pc, #492]	; (800184c <HAL_RCC_OscConfig+0x340>)
 8001660:	4013      	ands	r3, r2
 8001662:	0019      	movs	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	4b74      	ldr	r3, [pc, #464]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800166e:	4b73      	ldr	r3, [pc, #460]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	0adb      	lsrs	r3, r3, #11
 8001674:	2207      	movs	r2, #7
 8001676:	4013      	ands	r3, r2
 8001678:	4a75      	ldr	r2, [pc, #468]	; (8001850 <HAL_RCC_OscConfig+0x344>)
 800167a:	40da      	lsrs	r2, r3
 800167c:	4b75      	ldr	r3, [pc, #468]	; (8001854 <HAL_RCC_OscConfig+0x348>)
 800167e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001680:	4b75      	ldr	r3, [pc, #468]	; (8001858 <HAL_RCC_OscConfig+0x34c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff fa1f 	bl	8000ac8 <HAL_InitTick>
 800168a:	1e03      	subs	r3, r0, #0
 800168c:	d050      	beq.n	8001730 <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e12b      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d030      	beq.n	80016fc <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800169a:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a6b      	ldr	r2, [pc, #428]	; (800184c <HAL_RCC_OscConfig+0x340>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	0019      	movs	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	4b64      	ldr	r3, [pc, #400]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80016aa:	430a      	orrs	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80016ae:	4b63      	ldr	r3, [pc, #396]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b62      	ldr	r3, [pc, #392]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	0049      	lsls	r1, r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fa5e 	bl	8000b7c <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fa59 	bl	8000b7c <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e108      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d8:	4b58      	ldr	r3, [pc, #352]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4013      	ands	r3, r2
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b55      	ldr	r3, [pc, #340]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4a57      	ldr	r2, [pc, #348]	; (8001848 <HAL_RCC_OscConfig+0x33c>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	021a      	lsls	r2, r3, #8
 80016f4:	4b51      	ldr	r3, [pc, #324]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80016f6:	430a      	orrs	r2, r1
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	e019      	b.n	8001730 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80016fc:	4b4f      	ldr	r3, [pc, #316]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b4e      	ldr	r3, [pc, #312]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001702:	4956      	ldr	r1, [pc, #344]	; (800185c <HAL_RCC_OscConfig+0x350>)
 8001704:	400a      	ands	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fa38 	bl	8000b7c <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff fa33 	bl	8000b7c <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0e2      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001724:	4b45      	ldr	r3, [pc, #276]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4013      	ands	r3, r2
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2208      	movs	r2, #8
 8001736:	4013      	ands	r3, r2
 8001738:	d047      	beq.n	80017ca <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800173a:	4b40      	ldr	r3, [pc, #256]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2238      	movs	r2, #56	; 0x38
 8001740:	4013      	ands	r3, r2
 8001742:	2b18      	cmp	r3, #24
 8001744:	d10a      	bne.n	800175c <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001746:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	2202      	movs	r2, #2
 800174c:	4013      	ands	r3, r2
 800174e:	d03c      	beq.n	80017ca <HAL_RCC_OscConfig+0x2be>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d138      	bne.n	80017ca <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0c6      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d019      	beq.n	8001798 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001766:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800176a:	2101      	movs	r1, #1
 800176c:	430a      	orrs	r2, r1
 800176e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fa04 	bl	8000b7c <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff f9ff 	bl	8000b7c <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0ae      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800178e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d0f1      	beq.n	800177a <HAL_RCC_OscConfig+0x26e>
 8001796:	e018      	b.n	80017ca <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001798:	4b28      	ldr	r3, [pc, #160]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800179a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800179e:	2101      	movs	r1, #1
 80017a0:	438a      	bics	r2, r1
 80017a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff f9ea 	bl	8000b7c <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff f9e5 	bl	8000b7c <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e094      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80017c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c4:	2202      	movs	r2, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1f1      	bne.n	80017ae <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2204      	movs	r2, #4
 80017d0:	4013      	ands	r3, r2
 80017d2:	d100      	bne.n	80017d6 <HAL_RCC_OscConfig+0x2ca>
 80017d4:	e088      	b.n	80018e8 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d6:	230f      	movs	r3, #15
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2238      	movs	r2, #56	; 0x38
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b20      	cmp	r3, #32
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_RCC_OscConfig+0x330>)
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d100      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2ea>
 80017f4:	e078      	b.n	80018e8 <HAL_RCC_OscConfig+0x3dc>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d000      	beq.n	8001800 <HAL_RCC_OscConfig+0x2f4>
 80017fe:	e073      	b.n	80018e8 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e072      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x30e>
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_RCC_OscConfig+0x330>)
 800180e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001812:	2101      	movs	r1, #1
 8001814:	430a      	orrs	r2, r1
 8001816:	65da      	str	r2, [r3, #92]	; 0x5c
 8001818:	e02e      	b.n	8001878 <HAL_RCC_OscConfig+0x36c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b05      	cmp	r3, #5
 8001820:	d11e      	bne.n	8001860 <HAL_RCC_OscConfig+0x354>
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001824:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001828:	2104      	movs	r1, #4
 800182a:	430a      	orrs	r2, r1
 800182c:	65da      	str	r2, [r3, #92]	; 0x5c
 800182e:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001830:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001832:	4b02      	ldr	r3, [pc, #8]	; (800183c <HAL_RCC_OscConfig+0x330>)
 8001834:	2101      	movs	r1, #1
 8001836:	430a      	orrs	r2, r1
 8001838:	65da      	str	r2, [r3, #92]	; 0x5c
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0x36c>
 800183c:	40021000 	.word	0x40021000
 8001840:	fffeffff 	.word	0xfffeffff
 8001844:	fffbffff 	.word	0xfffbffff
 8001848:	ffff80ff 	.word	0xffff80ff
 800184c:	ffffc7ff 	.word	0xffffc7ff
 8001850:	02dc6c00 	.word	0x02dc6c00
 8001854:	20000000 	.word	0x20000000
 8001858:	20000004 	.word	0x20000004
 800185c:	fffffeff 	.word	0xfffffeff
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_RCC_OscConfig+0x3e8>)
 8001862:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_RCC_OscConfig+0x3e8>)
 8001866:	2101      	movs	r1, #1
 8001868:	438a      	bics	r2, r1
 800186a:	65da      	str	r2, [r3, #92]	; 0x5c
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_RCC_OscConfig+0x3e8>)
 800186e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_RCC_OscConfig+0x3e8>)
 8001872:	2104      	movs	r1, #4
 8001874:	438a      	bics	r2, r1
 8001876:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d014      	beq.n	80018aa <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f97c 	bl	8000b7c <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001888:	e009      	b.n	800189e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff f977 	bl	8000b7c <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_RCC_OscConfig+0x3ec>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e025      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_RCC_OscConfig+0x3e8>)
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	2202      	movs	r2, #2
 80018a4:	4013      	ands	r3, r2
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x37e>
 80018a8:	e013      	b.n	80018d2 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff f967 	bl	8000b7c <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80018b2:	e009      	b.n	80018c8 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff f962 	bl	8000b7c <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_RCC_OscConfig+0x3ec>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e010      	b.n	80018ea <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_RCC_OscConfig+0x3e8>)
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2202      	movs	r2, #2
 80018ce:	4013      	ands	r3, r2
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80018d2:	230f      	movs	r3, #15
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_OscConfig+0x3e8>)
 80018de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <HAL_RCC_OscConfig+0x3e8>)
 80018e2:	4906      	ldr	r1, [pc, #24]	; (80018fc <HAL_RCC_OscConfig+0x3f0>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b006      	add	sp, #24
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	40021000 	.word	0x40021000
 80018f8:	00001388 	.word	0x00001388
 80018fc:	efffffff 	.word	0xefffffff

08001900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0e9      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2207      	movs	r2, #7
 800191a:	4013      	ands	r3, r2
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d91e      	bls.n	8001960 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2207      	movs	r2, #7
 8001928:	4393      	bics	r3, r2
 800192a:	0019      	movs	r1, r3
 800192c:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001934:	f7ff f922 	bl	8000b7c <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800193c:	e009      	b.n	8001952 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193e:	f7ff f91d 	bl	8000b7c <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	4a6a      	ldr	r2, [pc, #424]	; (8001af4 <HAL_RCC_ClockConfig+0x1f4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0ca      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001952:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2207      	movs	r2, #7
 8001958:	4013      	ands	r3, r2
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d1ee      	bne.n	800193e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d017      	beq.n	800199a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2204      	movs	r2, #4
 8001970:	4013      	ands	r3, r2
 8001972:	d008      	beq.n	8001986 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a60      	ldr	r2, [pc, #384]	; (8001afc <HAL_RCC_ClockConfig+0x1fc>)
 800197a:	401a      	ands	r2, r3
 800197c:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 800197e:	21b0      	movs	r1, #176	; 0xb0
 8001980:	0109      	lsls	r1, r1, #4
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001986:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	4a5d      	ldr	r2, [pc, #372]	; (8001b00 <HAL_RCC_ClockConfig+0x200>)
 800198c:	4013      	ands	r3, r2
 800198e:	0019      	movs	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2201      	movs	r2, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	d055      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80019a4:	4b54      	ldr	r3, [pc, #336]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	221c      	movs	r2, #28
 80019aa:	4393      	bics	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	4b51      	ldr	r3, [pc, #324]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d107      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c0:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	4013      	ands	r3, r2
 80019ca:	d11f      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e08b      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d8:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4013      	ands	r3, r2
 80019e2:	d113      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e07f      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80019f0:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 80019f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f4:	2202      	movs	r2, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	d108      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e074      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80019fe:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	2202      	movs	r2, #2
 8001a04:	4013      	ands	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e06d      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2207      	movs	r2, #7
 8001a12:	4393      	bics	r3, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a20:	f7ff f8ac 	bl	8000b7c <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a28:	e009      	b.n	8001a3e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2a:	f7ff f8a7 	bl	8000b7c <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4a2f      	ldr	r2, [pc, #188]	; (8001af4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e054      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2238      	movs	r2, #56	; 0x38
 8001a44:	401a      	ands	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1ec      	bne.n	8001a2a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2207      	movs	r2, #7
 8001a56:	4013      	ands	r3, r2
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d21e      	bcs.n	8001a9c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2207      	movs	r2, #7
 8001a64:	4393      	bics	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a70:	f7ff f884 	bl	8000b7c <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a78:	e009      	b.n	8001a8e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7a:	f7ff f87f 	bl	8000b7c <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e02c      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2207      	movs	r2, #7
 8001a94:	4013      	ands	r3, r2
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d1ee      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	4a16      	ldr	r2, [pc, #88]	; (8001b04 <HAL_RCC_ClockConfig+0x204>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001aba:	f000 f82b 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001abe:	0001      	movs	r1, r0
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	401a      	ands	r2, r3
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <HAL_RCC_ClockConfig+0x208>)
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	58d3      	ldr	r3, [r2, r3]
 8001ad0:	221f      	movs	r2, #31
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	000a      	movs	r2, r1
 8001ad6:	40da      	lsrs	r2, r3
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_RCC_ClockConfig+0x20c>)
 8001ada:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_RCC_ClockConfig+0x210>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7fe fff1 	bl	8000ac8 <HAL_InitTick>
 8001ae6:	0003      	movs	r3, r0
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b004      	add	sp, #16
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40022000 	.word	0x40022000
 8001af4:	00001388 	.word	0x00001388
 8001af8:	40021000 	.word	0x40021000
 8001afc:	ffff84ff 	.word	0xffff84ff
 8001b00:	fffff0ff 	.word	0xfffff0ff
 8001b04:	ffff8fff 	.word	0xffff8fff
 8001b08:	08002e78 	.word	0x08002e78
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x78>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2238      	movs	r2, #56	; 0x38
 8001b20:	4013      	ands	r3, r2
 8001b22:	d10f      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x78>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0adb      	lsrs	r3, r3, #11
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2201      	movs	r2, #1
 8001b30:	409a      	lsls	r2, r3
 8001b32:	0013      	movs	r3, r2
 8001b34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b36:	6839      	ldr	r1, [r7, #0]
 8001b38:	4815      	ldr	r0, [pc, #84]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001b3a:	f7fe fae5 	bl	8000108 <__udivsi3>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	e01e      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x78>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2238      	movs	r2, #56	; 0x38
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d102      	bne.n	8001b56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x80>)
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x78>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2238      	movs	r2, #56	; 0x38
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b20      	cmp	r3, #32
 8001b60:	d103      	bne.n	8001b6a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	e00b      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x78>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2238      	movs	r2, #56	; 0x38
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b18      	cmp	r3, #24
 8001b74:	d103      	bne.n	8001b7e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b76:	23fa      	movs	r3, #250	; 0xfa
 8001b78:	01db      	lsls	r3, r3, #7
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	e001      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001b82:	687b      	ldr	r3, [r7, #4]
}
 8001b84:	0018      	movs	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	02dc6c00 	.word	0x02dc6c00
 8001b94:	01e84800 	.word	0x01e84800

08001b98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	20000000 	.word	0x20000000

08001bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001bb0:	f7ff fff2 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001bb4:	0001      	movs	r1, r0
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	0b1b      	lsrs	r3, r3, #12
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	58d3      	ldr	r3, [r2, r3]
 8001bc6:	221f      	movs	r2, #31
 8001bc8:	4013      	ands	r3, r2
 8001bca:	40d9      	lsrs	r1, r3
 8001bcc:	000b      	movs	r3, r1
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08002eb8 	.word	0x08002eb8

08001bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001be4:	2313      	movs	r3, #19
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bec:	2312      	movs	r3, #18
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	029b      	lsls	r3, r3, #10
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c00:	e079      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c02:	2011      	movs	r0, #17
 8001c04:	183b      	adds	r3, r7, r0
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4b64      	ldr	r3, [pc, #400]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	055b      	lsls	r3, r3, #21
 8001c12:	4013      	ands	r3, r2
 8001c14:	d110      	bne.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c1a:	4b60      	ldr	r3, [pc, #384]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	0549      	lsls	r1, r1, #21
 8001c20:	430a      	orrs	r2, r1
 8001c22:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c24:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	055b      	lsls	r3, r3, #21
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	183b      	adds	r3, r7, r0
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001c38:	4b58      	ldr	r3, [pc, #352]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c3c:	23c0      	movs	r3, #192	; 0xc0
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4013      	ands	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d019      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d014      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001c54:	4b51      	ldr	r3, [pc, #324]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c5e:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c62:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0249      	lsls	r1, r1, #9
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c70:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c72:	494c      	ldr	r1, [pc, #304]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001c78:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4013      	ands	r3, r2
 8001c84:	d016      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c86:	f7fe ff79 	bl	8000b7c <HAL_GetTick>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c8e:	e00c      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7fe ff74 	bl	8000b7c <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	4a43      	ldr	r2, [pc, #268]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d904      	bls.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001ca0:	2313      	movs	r3, #19
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	701a      	strb	r2, [r3, #0]
          break;
 8001ca8:	e004      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001caa:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d0ed      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001cb4:	2313      	movs	r3, #19
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10a      	bne.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	4a37      	ldr	r2, [pc, #220]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cd2:	e005      	b.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	2213      	movs	r2, #19
 8001cda:	18ba      	adds	r2, r7, r2
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce0:	2311      	movs	r3, #17
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cf0:	492e      	ldr	r1, [pc, #184]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d009      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d00:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	2203      	movs	r2, #3
 8001d06:	4393      	bics	r3, r2
 8001d08:	0019      	movs	r1, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d10:	430a      	orrs	r2, r1
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2240      	movs	r2, #64	; 0x40
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	0019      	movs	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	01db      	lsls	r3, r3, #7
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d008      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	0899      	lsrs	r1, r3, #2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	0019      	movs	r1, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	da09      	bge.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	22e0      	movs	r2, #224	; 0xe0
 8001d7e:	4393      	bics	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001d8c:	2312      	movs	r3, #18
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b006      	add	sp, #24
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	fffffcff 	.word	0xfffffcff
 8001da4:	fffeffff 	.word	0xfffeffff
 8001da8:	00001388 	.word	0x00001388
 8001dac:	efffffff 	.word	0xefffffff
 8001db0:	ffffcfff 	.word	0xffffcfff
 8001db4:	ffff3fff 	.word	0xffff3fff

08001db8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e046      	b.n	8001e58 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2284      	movs	r2, #132	; 0x84
 8001dce:	589b      	ldr	r3, [r3, r2]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d107      	bne.n	8001de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	2100      	movs	r1, #0
 8001dda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	0018      	movs	r0, r3
 8001de0:	f7fe fcde 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2284      	movs	r2, #132	; 0x84
 8001de8:	2124      	movs	r1, #36	; 0x24
 8001dea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2101      	movs	r1, #1
 8001df8:	438a      	bics	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 f960 	bl	80020c4 <UART_SetConfig>
 8001e04:	0003      	movs	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e024      	b.n	8001e58 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 fad1 	bl	80023c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	490d      	ldr	r1, [pc, #52]	; (8001e60 <HAL_UART_Init+0xa8>)
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	212a      	movs	r1, #42	; 0x2a
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 fb69 	bl	8002528 <UART_CheckIdleState>
 8001e56:	0003      	movs	r3, r0
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b002      	add	sp, #8
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	ffffb7ff 	.word	0xffffb7ff

08001e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	1dbb      	adds	r3, r7, #6
 8001e72:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2284      	movs	r2, #132	; 0x84
 8001e78:	589b      	ldr	r3, [r3, r2]
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d000      	beq.n	8001e80 <HAL_UART_Transmit+0x1c>
 8001e7e:	e097      	b.n	8001fb0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_UART_Transmit+0x2a>
 8001e86:	1dbb      	adds	r3, r7, #6
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e08f      	b.n	8001fb2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	015b      	lsls	r3, r3, #5
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d109      	bne.n	8001eb2 <HAL_UART_Transmit+0x4e>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d001      	beq.n	8001eb2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07f      	b.n	8001fb2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	5c9b      	ldrb	r3, [r3, r2]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_UART_Transmit+0x5c>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e078      	b.n	8001fb2 <HAL_UART_Transmit+0x14e>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	228c      	movs	r2, #140	; 0x8c
 8001ecc:	2100      	movs	r1, #0
 8001ece:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2284      	movs	r2, #132	; 0x84
 8001ed4:	2121      	movs	r1, #33	; 0x21
 8001ed6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ed8:	f7fe fe50 	bl	8000b7c <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1dba      	adds	r2, r7, #6
 8001ee4:	2154      	movs	r1, #84	; 0x54
 8001ee6:	8812      	ldrh	r2, [r2, #0]
 8001ee8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1dba      	adds	r2, r7, #6
 8001eee:	2156      	movs	r1, #86	; 0x56
 8001ef0:	8812      	ldrh	r2, [r2, #0]
 8001ef2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	015b      	lsls	r3, r3, #5
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d108      	bne.n	8001f12 <HAL_UART_Transmit+0xae>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d104      	bne.n	8001f12 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	e003      	b.n	8001f1a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	2100      	movs	r1, #0
 8001f20:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001f22:	e02c      	b.n	8001f7e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	f000 fb43 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e039      	b.n	8001fb2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10b      	bne.n	8001f5c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	001a      	movs	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	05d2      	lsls	r2, r2, #23
 8001f50:	0dd2      	lsrs	r2, r2, #23
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	3302      	adds	r3, #2
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	e007      	b.n	8001f6c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2256      	movs	r2, #86	; 0x56
 8001f70:	5a9b      	ldrh	r3, [r3, r2]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b299      	uxth	r1, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2256      	movs	r2, #86	; 0x56
 8001f7c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2256      	movs	r2, #86	; 0x56
 8001f82:	5a9b      	ldrh	r3, [r3, r2]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1cc      	bne.n	8001f24 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	0013      	movs	r3, r2
 8001f94:	2200      	movs	r2, #0
 8001f96:	2140      	movs	r1, #64	; 0x40
 8001f98:	f000 fb10 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 8001f9c:	1e03      	subs	r3, r0, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e006      	b.n	8001fb2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2284      	movs	r2, #132	; 0x84
 8001fa8:	2120      	movs	r1, #32
 8001faa:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e000      	b.n	8001fb2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8001fb0:	2302      	movs	r3, #2
  }
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b008      	add	sp, #32
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b088      	sub	sp, #32
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	1dbb      	adds	r3, r7, #6
 8001fc6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2288      	movs	r2, #136	; 0x88
 8001fcc:	589b      	ldr	r3, [r3, r2]
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d150      	bne.n	8002074 <HAL_UART_Receive_DMA+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_UART_Receive_DMA+0x26>
 8001fd8:	1dbb      	adds	r3, r7, #6
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e048      	b.n	8002076 <HAL_UART_Receive_DMA+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	015b      	lsls	r3, r3, #5
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d109      	bne.n	8002004 <HAL_UART_Receive_DMA+0x4a>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d001      	beq.n	8002004 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e038      	b.n	8002076 <HAL_UART_Receive_DMA+0xbc>
      }
    }

    __HAL_LOCK(huart);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	5c9b      	ldrb	r3, [r3, r2]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_UART_Receive_DMA+0x58>
 800200e:	2302      	movs	r3, #2
 8002010:	e031      	b.n	8002076 <HAL_UART_Receive_DMA+0xbc>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	4013      	ands	r3, r2
 800202c:	d019      	beq.n	8002062 <HAL_UART_Receive_DMA+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800202e:	f3ef 8310 	mrs	r3, PRIMASK
 8002032:	613b      	str	r3, [r7, #16]
  return(result);
 8002034:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	2301      	movs	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f383 8810 	msr	PRIMASK, r3
}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	04c9      	lsls	r1, r1, #19
 8002052:	430a      	orrs	r2, r1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f383 8810 	msr	PRIMASK, r3
}
 8002060:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002062:	1dbb      	adds	r3, r7, #6
 8002064:	881a      	ldrh	r2, [r3, #0]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	0018      	movs	r0, r3
 800206c:	f000 fb6e 	bl	800274c <UART_Start_Receive_DMA>
 8002070:	0003      	movs	r3, r0
 8002072:	e000      	b.n	8002076 <HAL_UART_Receive_DMA+0xbc>
  }
  else
  {
    return HAL_BUSY;
 8002074:	2302      	movs	r3, #2
  }
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b008      	add	sp, #32
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	000a      	movs	r2, r1
 80020b8:	1cbb      	adds	r3, r7, #2
 80020ba:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020cc:	231e      	movs	r3, #30
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4aab      	ldr	r2, [pc, #684]	; (80023a0 <UART_SetConfig+0x2dc>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	0019      	movs	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4aa6      	ldr	r2, [pc, #664]	; (80023a4 <UART_SetConfig+0x2e0>)
 800210a:	4013      	ands	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	4313      	orrs	r3, r2
 8002128:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a9d      	ldr	r2, [pc, #628]	; (80023a8 <UART_SetConfig+0x2e4>)
 8002132:	4013      	ands	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	430a      	orrs	r2, r1
 800213e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	220f      	movs	r2, #15
 8002148:	4393      	bics	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a93      	ldr	r2, [pc, #588]	; (80023ac <UART_SetConfig+0x2e8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d127      	bne.n	80021b2 <UART_SetConfig+0xee>
 8002162:	4b93      	ldr	r3, [pc, #588]	; (80023b0 <UART_SetConfig+0x2ec>)
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	2203      	movs	r2, #3
 8002168:	4013      	ands	r3, r2
 800216a:	2b03      	cmp	r3, #3
 800216c:	d017      	beq.n	800219e <UART_SetConfig+0xda>
 800216e:	d81b      	bhi.n	80021a8 <UART_SetConfig+0xe4>
 8002170:	2b02      	cmp	r3, #2
 8002172:	d00a      	beq.n	800218a <UART_SetConfig+0xc6>
 8002174:	d818      	bhi.n	80021a8 <UART_SetConfig+0xe4>
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <UART_SetConfig+0xbc>
 800217a:	2b01      	cmp	r3, #1
 800217c:	d00a      	beq.n	8002194 <UART_SetConfig+0xd0>
 800217e:	e013      	b.n	80021a8 <UART_SetConfig+0xe4>
 8002180:	231f      	movs	r3, #31
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e021      	b.n	80021ce <UART_SetConfig+0x10a>
 800218a:	231f      	movs	r3, #31
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2202      	movs	r2, #2
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e01c      	b.n	80021ce <UART_SetConfig+0x10a>
 8002194:	231f      	movs	r3, #31
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2204      	movs	r2, #4
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e017      	b.n	80021ce <UART_SetConfig+0x10a>
 800219e:	231f      	movs	r3, #31
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2208      	movs	r2, #8
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e012      	b.n	80021ce <UART_SetConfig+0x10a>
 80021a8:	231f      	movs	r3, #31
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	2210      	movs	r2, #16
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e00d      	b.n	80021ce <UART_SetConfig+0x10a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7f      	ldr	r2, [pc, #508]	; (80023b4 <UART_SetConfig+0x2f0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d104      	bne.n	80021c6 <UART_SetConfig+0x102>
 80021bc:	231f      	movs	r3, #31
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e003      	b.n	80021ce <UART_SetConfig+0x10a>
 80021c6:	231f      	movs	r3, #31
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	2210      	movs	r2, #16
 80021cc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d000      	beq.n	80021dc <UART_SetConfig+0x118>
 80021da:	e06f      	b.n	80022bc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80021dc:	231f      	movs	r3, #31
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d01f      	beq.n	8002226 <UART_SetConfig+0x162>
 80021e6:	dc22      	bgt.n	800222e <UART_SetConfig+0x16a>
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d017      	beq.n	800221c <UART_SetConfig+0x158>
 80021ec:	dc1f      	bgt.n	800222e <UART_SetConfig+0x16a>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <UART_SetConfig+0x134>
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d005      	beq.n	8002202 <UART_SetConfig+0x13e>
 80021f6:	e01a      	b.n	800222e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021f8:	f7ff fcd8 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 80021fc:	0003      	movs	r3, r0
 80021fe:	61bb      	str	r3, [r7, #24]
        break;
 8002200:	e01c      	b.n	800223c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002202:	4b6b      	ldr	r3, [pc, #428]	; (80023b0 <UART_SetConfig+0x2ec>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2207      	movs	r2, #7
 800220a:	4013      	ands	r3, r2
 800220c:	3301      	adds	r3, #1
 800220e:	0019      	movs	r1, r3
 8002210:	4869      	ldr	r0, [pc, #420]	; (80023b8 <UART_SetConfig+0x2f4>)
 8002212:	f7fd ff79 	bl	8000108 <__udivsi3>
 8002216:	0003      	movs	r3, r0
 8002218:	61bb      	str	r3, [r7, #24]
        break;
 800221a:	e00f      	b.n	800223c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800221c:	f7ff fc7a 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8002220:	0003      	movs	r3, r0
 8002222:	61bb      	str	r3, [r7, #24]
        break;
 8002224:	e00a      	b.n	800223c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	61bb      	str	r3, [r7, #24]
        break;
 800222c:	e006      	b.n	800223c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002232:	231e      	movs	r3, #30
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
        break;
 800223a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d100      	bne.n	8002244 <UART_SetConfig+0x180>
 8002242:	e097      	b.n	8002374 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002248:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <UART_SetConfig+0x2f8>)
 800224a:	0052      	lsls	r2, r2, #1
 800224c:	5ad3      	ldrh	r3, [r2, r3]
 800224e:	0019      	movs	r1, r3
 8002250:	69b8      	ldr	r0, [r7, #24]
 8002252:	f7fd ff59 	bl	8000108 <__udivsi3>
 8002256:	0003      	movs	r3, r0
 8002258:	005a      	lsls	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	18d2      	adds	r2, r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	0019      	movs	r1, r3
 8002268:	0010      	movs	r0, r2
 800226a:	f7fd ff4d 	bl	8000108 <__udivsi3>
 800226e:	0003      	movs	r3, r0
 8002270:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d91c      	bls.n	80022b2 <UART_SetConfig+0x1ee>
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	025b      	lsls	r3, r3, #9
 800227e:	429a      	cmp	r2, r3
 8002280:	d217      	bcs.n	80022b2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	b29a      	uxth	r2, r3
 8002286:	200e      	movs	r0, #14
 8002288:	183b      	adds	r3, r7, r0
 800228a:	210f      	movs	r1, #15
 800228c:	438a      	bics	r2, r1
 800228e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	b29b      	uxth	r3, r3
 8002296:	2207      	movs	r2, #7
 8002298:	4013      	ands	r3, r2
 800229a:	b299      	uxth	r1, r3
 800229c:	183b      	adds	r3, r7, r0
 800229e:	183a      	adds	r2, r7, r0
 80022a0:	8812      	ldrh	r2, [r2, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	183a      	adds	r2, r7, r0
 80022ac:	8812      	ldrh	r2, [r2, #0]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	e060      	b.n	8002374 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80022b2:	231e      	movs	r3, #30
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e05b      	b.n	8002374 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022bc:	231f      	movs	r3, #31
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d01f      	beq.n	8002306 <UART_SetConfig+0x242>
 80022c6:	dc22      	bgt.n	800230e <UART_SetConfig+0x24a>
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d017      	beq.n	80022fc <UART_SetConfig+0x238>
 80022cc:	dc1f      	bgt.n	800230e <UART_SetConfig+0x24a>
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <UART_SetConfig+0x214>
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d005      	beq.n	80022e2 <UART_SetConfig+0x21e>
 80022d6:	e01a      	b.n	800230e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022d8:	f7ff fc68 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 80022dc:	0003      	movs	r3, r0
 80022de:	61bb      	str	r3, [r7, #24]
        break;
 80022e0:	e01c      	b.n	800231c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <UART_SetConfig+0x2ec>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2207      	movs	r2, #7
 80022ea:	4013      	ands	r3, r2
 80022ec:	3301      	adds	r3, #1
 80022ee:	0019      	movs	r1, r3
 80022f0:	4831      	ldr	r0, [pc, #196]	; (80023b8 <UART_SetConfig+0x2f4>)
 80022f2:	f7fd ff09 	bl	8000108 <__udivsi3>
 80022f6:	0003      	movs	r3, r0
 80022f8:	61bb      	str	r3, [r7, #24]
        break;
 80022fa:	e00f      	b.n	800231c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022fc:	f7ff fc0a 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8002300:	0003      	movs	r3, r0
 8002302:	61bb      	str	r3, [r7, #24]
        break;
 8002304:	e00a      	b.n	800231c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	61bb      	str	r3, [r7, #24]
        break;
 800230c:	e006      	b.n	800231c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002312:	231e      	movs	r3, #30
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
        break;
 800231a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d028      	beq.n	8002374 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002326:	4b25      	ldr	r3, [pc, #148]	; (80023bc <UART_SetConfig+0x2f8>)
 8002328:	0052      	lsls	r2, r2, #1
 800232a:	5ad3      	ldrh	r3, [r2, r3]
 800232c:	0019      	movs	r1, r3
 800232e:	69b8      	ldr	r0, [r7, #24]
 8002330:	f7fd feea 	bl	8000108 <__udivsi3>
 8002334:	0003      	movs	r3, r0
 8002336:	001a      	movs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	18d2      	adds	r2, r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	0019      	movs	r1, r3
 8002346:	0010      	movs	r0, r2
 8002348:	f7fd fede 	bl	8000108 <__udivsi3>
 800234c:	0003      	movs	r3, r0
 800234e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b0f      	cmp	r3, #15
 8002354:	d90a      	bls.n	800236c <UART_SetConfig+0x2a8>
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	025b      	lsls	r3, r3, #9
 800235c:	429a      	cmp	r2, r3
 800235e:	d205      	bcs.n	800236c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	b29a      	uxth	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	e003      	b.n	8002374 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800236c:	231e      	movs	r3, #30
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	226a      	movs	r2, #106	; 0x6a
 8002378:	2101      	movs	r1, #1
 800237a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2268      	movs	r2, #104	; 0x68
 8002380:	2101      	movs	r1, #1
 8002382:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002390:	231e      	movs	r3, #30
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	781b      	ldrb	r3, [r3, #0]
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b008      	add	sp, #32
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	cfff69f3 	.word	0xcfff69f3
 80023a4:	ffffcfff 	.word	0xffffcfff
 80023a8:	11fff4ff 	.word	0x11fff4ff
 80023ac:	40013800 	.word	0x40013800
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40004400 	.word	0x40004400
 80023b8:	02dc6c00 	.word	0x02dc6c00
 80023bc:	08002ed8 	.word	0x08002ed8

080023c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	d00b      	beq.n	80023ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a4a      	ldr	r2, [pc, #296]	; (8002504 <UART_AdvFeatureConfig+0x144>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d00b      	beq.n	800240c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4a43      	ldr	r2, [pc, #268]	; (8002508 <UART_AdvFeatureConfig+0x148>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	2204      	movs	r2, #4
 8002412:	4013      	ands	r3, r2
 8002414:	d00b      	beq.n	800242e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a3b      	ldr	r2, [pc, #236]	; (800250c <UART_AdvFeatureConfig+0x14c>)
 800241e:	4013      	ands	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	2208      	movs	r2, #8
 8002434:	4013      	ands	r3, r2
 8002436:	d00b      	beq.n	8002450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4a34      	ldr	r2, [pc, #208]	; (8002510 <UART_AdvFeatureConfig+0x150>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	2210      	movs	r2, #16
 8002456:	4013      	ands	r3, r2
 8002458:	d00b      	beq.n	8002472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a2c      	ldr	r2, [pc, #176]	; (8002514 <UART_AdvFeatureConfig+0x154>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	2220      	movs	r2, #32
 8002478:	4013      	ands	r3, r2
 800247a:	d00b      	beq.n	8002494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a25      	ldr	r2, [pc, #148]	; (8002518 <UART_AdvFeatureConfig+0x158>)
 8002484:	4013      	ands	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	2240      	movs	r2, #64	; 0x40
 800249a:	4013      	ands	r3, r2
 800249c:	d01d      	beq.n	80024da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <UART_AdvFeatureConfig+0x15c>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	035b      	lsls	r3, r3, #13
 80024be:	429a      	cmp	r2, r3
 80024c0:	d10b      	bne.n	80024da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a15      	ldr	r2, [pc, #84]	; (8002520 <UART_AdvFeatureConfig+0x160>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	4013      	ands	r3, r2
 80024e2:	d00b      	beq.n	80024fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <UART_AdvFeatureConfig+0x164>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	605a      	str	r2, [r3, #4]
  }
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}
 8002504:	fffdffff 	.word	0xfffdffff
 8002508:	fffeffff 	.word	0xfffeffff
 800250c:	fffbffff 	.word	0xfffbffff
 8002510:	ffff7fff 	.word	0xffff7fff
 8002514:	ffffefff 	.word	0xffffefff
 8002518:	ffffdfff 	.word	0xffffdfff
 800251c:	ffefffff 	.word	0xffefffff
 8002520:	ff9fffff 	.word	0xff9fffff
 8002524:	fff7ffff 	.word	0xfff7ffff

08002528 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af02      	add	r7, sp, #8
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	228c      	movs	r2, #140	; 0x8c
 8002534:	2100      	movs	r1, #0
 8002536:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002538:	f7fe fb20 	bl	8000b7c <HAL_GetTick>
 800253c:	0003      	movs	r3, r0
 800253e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2208      	movs	r2, #8
 8002548:	4013      	ands	r3, r2
 800254a:	2b08      	cmp	r3, #8
 800254c:	d10c      	bne.n	8002568 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2280      	movs	r2, #128	; 0x80
 8002552:	0391      	lsls	r1, r2, #14
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <UART_CheckIdleState+0x90>)
 8002558:	9200      	str	r2, [sp, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	f000 f82e 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 8002560:	1e03      	subs	r3, r0, #0
 8002562:	d001      	beq.n	8002568 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e023      	b.n	80025b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2204      	movs	r2, #4
 8002570:	4013      	ands	r3, r2
 8002572:	2b04      	cmp	r3, #4
 8002574:	d10c      	bne.n	8002590 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	03d1      	lsls	r1, r2, #15
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <UART_CheckIdleState+0x90>)
 8002580:	9200      	str	r2, [sp, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	f000 f81a 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 8002588:	1e03      	subs	r3, r0, #0
 800258a:	d001      	beq.n	8002590 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e00f      	b.n	80025b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2284      	movs	r2, #132	; 0x84
 8002594:	2120      	movs	r1, #32
 8002596:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2288      	movs	r2, #136	; 0x88
 800259c:	2120      	movs	r1, #32
 800259e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	2100      	movs	r1, #0
 80025ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b004      	add	sp, #16
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	01ffffff 	.word	0x01ffffff

080025bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b094      	sub	sp, #80	; 0x50
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	1dfb      	adds	r3, r7, #7
 80025ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025cc:	e0a7      	b.n	800271e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d0:	3301      	adds	r3, #1
 80025d2:	d100      	bne.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80025d4:	e0a3      	b.n	800271e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d6:	f7fe fad1 	bl	8000b7c <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d302      	bcc.n	80025ec <UART_WaitOnFlagUntilTimeout+0x30>
 80025e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d13f      	bne.n	800266c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ec:	f3ef 8310 	mrs	r3, PRIMASK
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80025f4:	647b      	str	r3, [r7, #68]	; 0x44
 80025f6:	2301      	movs	r3, #1
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	f383 8810 	msr	PRIMASK, r3
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	494e      	ldr	r1, [pc, #312]	; (8002748 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800260e:	400a      	ands	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002614:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	f383 8810 	msr	PRIMASK, r3
}
 800261c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261e:	f3ef 8310 	mrs	r3, PRIMASK
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002626:	643b      	str	r3, [r7, #64]	; 0x40
 8002628:	2301      	movs	r3, #1
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262e:	f383 8810 	msr	PRIMASK, r3
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2101      	movs	r1, #1
 8002640:	438a      	bics	r2, r1
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264a:	f383 8810 	msr	PRIMASK, r3
}
 800264e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2284      	movs	r2, #132	; 0x84
 8002654:	2120      	movs	r1, #32
 8002656:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2288      	movs	r2, #136	; 0x88
 800265c:	2120      	movs	r1, #32
 800265e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2280      	movs	r2, #128	; 0x80
 8002664:	2100      	movs	r1, #0
 8002666:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e069      	b.n	8002740 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2204      	movs	r2, #4
 8002674:	4013      	ands	r3, r2
 8002676:	d052      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	401a      	ands	r2, r3
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	429a      	cmp	r2, r3
 800268a:	d148      	bne.n	800271e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	0112      	lsls	r2, r2, #4
 8002694:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002696:	f3ef 8310 	mrs	r3, PRIMASK
 800269a:	613b      	str	r3, [r7, #16]
  return(result);
 800269c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a0:	2301      	movs	r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f383 8810 	msr	PRIMASK, r3
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4924      	ldr	r1, [pc, #144]	; (8002748 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80026b8:	400a      	ands	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	f383 8810 	msr	PRIMASK, r3
}
 80026c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c8:	f3ef 8310 	mrs	r3, PRIMASK
 80026cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80026ce:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d2:	2301      	movs	r3, #1
 80026d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	f383 8810 	msr	PRIMASK, r3
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	438a      	bics	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	f383 8810 	msr	PRIMASK, r3
}
 80026f8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2284      	movs	r2, #132	; 0x84
 80026fe:	2120      	movs	r1, #32
 8002700:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2288      	movs	r2, #136	; 0x88
 8002706:	2120      	movs	r1, #32
 8002708:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	228c      	movs	r2, #140	; 0x8c
 800270e:	2120      	movs	r1, #32
 8002710:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e010      	b.n	8002740 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	4013      	ands	r3, r2
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	425a      	negs	r2, r3
 800272e:	4153      	adcs	r3, r2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	001a      	movs	r2, r3
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d100      	bne.n	800273e <UART_WaitOnFlagUntilTimeout+0x182>
 800273c:	e747      	b.n	80025ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b014      	add	sp, #80	; 0x50
 8002746:	bd80      	pop	{r7, pc}
 8002748:	fffffe5f 	.word	0xfffffe5f

0800274c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b090      	sub	sp, #64	; 0x40
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	1dbb      	adds	r3, r7, #6
 8002758:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1dba      	adds	r2, r7, #6
 8002764:	215c      	movs	r1, #92	; 0x5c
 8002766:	8812      	ldrh	r2, [r2, #0]
 8002768:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	228c      	movs	r2, #140	; 0x8c
 800276e:	2100      	movs	r1, #0
 8002770:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2288      	movs	r2, #136	; 0x88
 8002776:	2122      	movs	r1, #34	; 0x22
 8002778:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d02c      	beq.n	80027dc <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002786:	4a42      	ldr	r2, [pc, #264]	; (8002890 <UART_Start_Receive_DMA+0x144>)
 8002788:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800278e:	4a41      	ldr	r2, [pc, #260]	; (8002894 <UART_Start_Receive_DMA+0x148>)
 8002790:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002796:	4a40      	ldr	r2, [pc, #256]	; (8002898 <UART_Start_Receive_DMA+0x14c>)
 8002798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800279e:	2200      	movs	r2, #0
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3324      	adds	r3, #36	; 0x24
 80027ac:	0019      	movs	r1, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	001a      	movs	r2, r3
 80027b4:	1dbb      	adds	r3, r7, #6
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	f7fe fb74 	bl	8000ea4 <HAL_DMA_Start_IT>
 80027bc:	1e03      	subs	r3, r0, #0
 80027be:	d00d      	beq.n	80027dc <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	228c      	movs	r2, #140	; 0x8c
 80027c4:	2110      	movs	r1, #16
 80027c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	2100      	movs	r1, #0
 80027ce:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2288      	movs	r2, #136	; 0x88
 80027d4:	2120      	movs	r1, #32
 80027d6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e054      	b.n	8002886 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	2100      	movs	r1, #0
 80027e2:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d019      	beq.n	8002820 <UART_Start_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ec:	f3ef 8310 	mrs	r3, PRIMASK
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f6:	2301      	movs	r3, #1
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	f383 8810 	msr	PRIMASK, r3
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	0049      	lsls	r1, r1, #1
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	f383 8810 	msr	PRIMASK, r3
}
 800281e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002820:	f3ef 8310 	mrs	r3, PRIMASK
 8002824:	613b      	str	r3, [r7, #16]
  return(result);
 8002826:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
 800282a:	2301      	movs	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f383 8810 	msr	PRIMASK, r3
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	430a      	orrs	r2, r1
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f383 8810 	msr	PRIMASK, r3
}
 8002850:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002852:	f3ef 8310 	mrs	r3, PRIMASK
 8002856:	61fb      	str	r3, [r7, #28]
  return(result);
 8002858:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
 800285c:	2301      	movs	r3, #1
 800285e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	f383 8810 	msr	PRIMASK, r3
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	430a      	orrs	r2, r1
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	f383 8810 	msr	PRIMASK, r3
}
 8002882:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b010      	add	sp, #64	; 0x40
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	080029e9 	.word	0x080029e9
 8002894:	08002b11 	.word	0x08002b11
 8002898:	08002b4d 	.word	0x08002b4d

0800289c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a4:	f3ef 8310 	mrs	r3, PRIMASK
 80028a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80028aa:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	2301      	movs	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f383 8810 	msr	PRIMASK, r3
}
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	21c0      	movs	r1, #192	; 0xc0
 80028c6:	438a      	bics	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f383 8810 	msr	PRIMASK, r3
}
 80028d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d6:	f3ef 8310 	mrs	r3, PRIMASK
 80028da:	617b      	str	r3, [r7, #20]
  return(result);
 80028dc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80028de:	623b      	str	r3, [r7, #32]
 80028e0:	2301      	movs	r3, #1
 80028e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f383 8810 	msr	PRIMASK, r3
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4908      	ldr	r1, [pc, #32]	; (8002918 <UART_EndTxTransfer+0x7c>)
 80028f8:	400a      	ands	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f383 8810 	msr	PRIMASK, r3
}
 8002906:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2284      	movs	r2, #132	; 0x84
 800290c:	2120      	movs	r1, #32
 800290e:	5099      	str	r1, [r3, r2]
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b00a      	add	sp, #40	; 0x28
 8002916:	bd80      	pop	{r7, pc}
 8002918:	ff7fffff 	.word	0xff7fffff

0800291c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08e      	sub	sp, #56	; 0x38
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002924:	f3ef 8310 	mrs	r3, PRIMASK
 8002928:	617b      	str	r3, [r7, #20]
  return(result);
 800292a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
 800292e:	2301      	movs	r3, #1
 8002930:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f383 8810 	msr	PRIMASK, r3
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4926      	ldr	r1, [pc, #152]	; (80029e0 <UART_EndRxTransfer+0xc4>)
 8002946:	400a      	ands	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f383 8810 	msr	PRIMASK, r3
}
 8002954:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002956:	f3ef 8310 	mrs	r3, PRIMASK
 800295a:	623b      	str	r3, [r7, #32]
  return(result);
 800295c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
 8002960:	2301      	movs	r3, #1
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	f383 8810 	msr	PRIMASK, r3
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	491b      	ldr	r1, [pc, #108]	; (80029e4 <UART_EndRxTransfer+0xc8>)
 8002978:	400a      	ands	r2, r1
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	f383 8810 	msr	PRIMASK, r3
}
 8002986:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298c:	2b01      	cmp	r3, #1
 800298e:	d118      	bne.n	80029c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002990:	f3ef 8310 	mrs	r3, PRIMASK
 8002994:	60bb      	str	r3, [r7, #8]
  return(result);
 8002996:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299a:	2301      	movs	r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f383 8810 	msr	PRIMASK, r3
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2110      	movs	r1, #16
 80029b2:	438a      	bics	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f383 8810 	msr	PRIMASK, r3
}
 80029c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2288      	movs	r2, #136	; 0x88
 80029c6:	2120      	movs	r1, #32
 80029c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b00e      	add	sp, #56	; 0x38
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	fffffedf 	.word	0xfffffedf
 80029e4:	effffffe 	.word	0xeffffffe

080029e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b094      	sub	sp, #80	; 0x50
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2220      	movs	r2, #32
 80029fe:	4013      	ands	r3, r2
 8002a00:	d16f      	bne.n	8002ae2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8002a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a04:	225e      	movs	r2, #94	; 0x5e
 8002a06:	2100      	movs	r1, #0
 8002a08:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a10:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a14:	2301      	movs	r3, #1
 8002a16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f383 8810 	msr	PRIMASK, r3
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4938      	ldr	r1, [pc, #224]	; (8002b0c <UART_DMAReceiveCplt+0x124>)
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	f383 8810 	msr	PRIMASK, r3
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a44:	647b      	str	r3, [r7, #68]	; 0x44
 8002a46:	2301      	movs	r3, #1
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	f383 8810 	msr	PRIMASK, r3
}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	438a      	bics	r2, r1
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a68:	f383 8810 	msr	PRIMASK, r3
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a76:	643b      	str	r3, [r7, #64]	; 0x40
 8002a78:	2301      	movs	r3, #1
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	f383 8810 	msr	PRIMASK, r3
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2140      	movs	r1, #64	; 0x40
 8002a90:	438a      	bics	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	f383 8810 	msr	PRIMASK, r3
}
 8002a9e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa2:	2288      	movs	r2, #136	; 0x88
 8002aa4:	2120      	movs	r1, #32
 8002aa6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d118      	bne.n	8002ae2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aba:	2301      	movs	r3, #1
 8002abc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f383 8810 	msr	PRIMASK, r3
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2110      	movs	r1, #16
 8002ad2:	438a      	bics	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f383 8810 	msr	PRIMASK, r3
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d108      	bne.n	8002afc <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aec:	225c      	movs	r2, #92	; 0x5c
 8002aee:	5a9a      	ldrh	r2, [r3, r2]
 8002af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af2:	0011      	movs	r1, r2
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7ff fada 	bl	80020ae <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002afa:	e003      	b.n	8002b04 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8002afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff fabd 	bl	800207e <HAL_UART_RxCpltCallback>
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b014      	add	sp, #80	; 0x50
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	fffffeff 	.word	0xfffffeff

08002b10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10a      	bne.n	8002b3c <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	225c      	movs	r2, #92	; 0x5c
 8002b2a:	5a9b      	ldrh	r3, [r3, r2]
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	0011      	movs	r1, r2
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff faba 	bl	80020ae <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b3a:	e003      	b.n	8002b44 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f7ff faa5 	bl	800208e <HAL_UART_RxHalfCpltCallback>
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b004      	add	sp, #16
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2284      	movs	r2, #132	; 0x84
 8002b5e:	589b      	ldr	r3, [r3, r2]
 8002b60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2288      	movs	r2, #136	; 0x88
 8002b66:	589b      	ldr	r3, [r3, r2]
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b80      	cmp	r3, #128	; 0x80
 8002b76:	d10a      	bne.n	8002b8e <UART_DMAError+0x42>
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b21      	cmp	r3, #33	; 0x21
 8002b7c:	d107      	bne.n	8002b8e <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2256      	movs	r2, #86	; 0x56
 8002b82:	2100      	movs	r1, #0
 8002b84:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7ff fe87 	bl	800289c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d10a      	bne.n	8002bb2 <UART_DMAError+0x66>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b22      	cmp	r3, #34	; 0x22
 8002ba0:	d107      	bne.n	8002bb2 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	225e      	movs	r2, #94	; 0x5e
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff feb5 	bl	800291c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	228c      	movs	r2, #140	; 0x8c
 8002bb6:	589b      	ldr	r3, [r3, r2]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	218c      	movs	r1, #140	; 0x8c
 8002bc0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7ff fa6a 	bl	800209e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b006      	add	sp, #24
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	5c9b      	ldrb	r3, [r3, r2]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_UARTEx_DisableFifoMode+0x16>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e027      	b.n	8002c3a <HAL_UARTEx_DisableFifoMode+0x66>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2284      	movs	r2, #132	; 0x84
 8002bf6:	2124      	movs	r1, #36	; 0x24
 8002bf8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	438a      	bics	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2284      	movs	r2, #132	; 0x84
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	2100      	movs	r1, #0
 8002c36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b004      	add	sp, #16
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	dfffffff 	.word	0xdfffffff

08002c48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	5c9b      	ldrb	r3, [r3, r2]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e02e      	b.n	8002cbe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	2101      	movs	r1, #1
 8002c66:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2284      	movs	r2, #132	; 0x84
 8002c6c:	2124      	movs	r1, #36	; 0x24
 8002c6e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2101      	movs	r1, #1
 8002c84:	438a      	bics	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	08d9      	lsrs	r1, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 f854 	bl	8002d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2284      	movs	r2, #132	; 0x84
 8002cb0:	2120      	movs	r1, #32
 8002cb2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	2100      	movs	r1, #0
 8002cba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b004      	add	sp, #16
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	5c9b      	ldrb	r3, [r3, r2]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e02f      	b.n	8002d40 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2284      	movs	r2, #132	; 0x84
 8002cec:	2124      	movs	r1, #36	; 0x24
 8002cee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2101      	movs	r1, #1
 8002d04:	438a      	bics	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 f813 	bl	8002d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2284      	movs	r2, #132	; 0x84
 8002d32:	2120      	movs	r1, #32
 8002d34:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	0018      	movs	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b004      	add	sp, #16
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	f1ffffff 	.word	0xf1ffffff

08002d4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d108      	bne.n	8002d6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	226a      	movs	r2, #106	; 0x6a
 8002d60:	2101      	movs	r1, #1
 8002d62:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2268      	movs	r2, #104	; 0x68
 8002d68:	2101      	movs	r1, #1
 8002d6a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d6c:	e043      	b.n	8002df6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002d6e:	260f      	movs	r6, #15
 8002d70:	19bb      	adds	r3, r7, r6
 8002d72:	2208      	movs	r2, #8
 8002d74:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d76:	200e      	movs	r0, #14
 8002d78:	183b      	adds	r3, r7, r0
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	0e5b      	lsrs	r3, r3, #25
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	240d      	movs	r4, #13
 8002d8a:	193b      	adds	r3, r7, r4
 8002d8c:	2107      	movs	r1, #7
 8002d8e:	400a      	ands	r2, r1
 8002d90:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	0f5b      	lsrs	r3, r3, #29
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	250c      	movs	r5, #12
 8002d9e:	197b      	adds	r3, r7, r5
 8002da0:	2107      	movs	r1, #7
 8002da2:	400a      	ands	r2, r1
 8002da4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002da6:	183b      	adds	r3, r7, r0
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	197a      	adds	r2, r7, r5
 8002dac:	7812      	ldrb	r2, [r2, #0]
 8002dae:	4914      	ldr	r1, [pc, #80]	; (8002e00 <UARTEx_SetNbDataToProcess+0xb4>)
 8002db0:	5c8a      	ldrb	r2, [r1, r2]
 8002db2:	435a      	muls	r2, r3
 8002db4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002db6:	197b      	adds	r3, r7, r5
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <UARTEx_SetNbDataToProcess+0xb8>)
 8002dbc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	f7fd fa2c 	bl	800021c <__divsi3>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	b299      	uxth	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	226a      	movs	r2, #106	; 0x6a
 8002dcc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002dce:	19bb      	adds	r3, r7, r6
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	193a      	adds	r2, r7, r4
 8002dd4:	7812      	ldrb	r2, [r2, #0]
 8002dd6:	490a      	ldr	r1, [pc, #40]	; (8002e00 <UARTEx_SetNbDataToProcess+0xb4>)
 8002dd8:	5c8a      	ldrb	r2, [r1, r2]
 8002dda:	435a      	muls	r2, r3
 8002ddc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002dde:	193b      	adds	r3, r7, r4
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <UARTEx_SetNbDataToProcess+0xb8>)
 8002de4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002de6:	0019      	movs	r1, r3
 8002de8:	f7fd fa18 	bl	800021c <__divsi3>
 8002dec:	0003      	movs	r3, r0
 8002dee:	b299      	uxth	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2268      	movs	r2, #104	; 0x68
 8002df4:	5299      	strh	r1, [r3, r2]
}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b005      	add	sp, #20
 8002dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	08002ef0 	.word	0x08002ef0
 8002e04:	08002ef8 	.word	0x08002ef8

08002e08 <__libc_init_array>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	4d0c      	ldr	r5, [pc, #48]	; (8002e40 <__libc_init_array+0x38>)
 8002e0e:	4c0d      	ldr	r4, [pc, #52]	; (8002e44 <__libc_init_array+0x3c>)
 8002e10:	1b64      	subs	r4, r4, r5
 8002e12:	10a4      	asrs	r4, r4, #2
 8002e14:	42a6      	cmp	r6, r4
 8002e16:	d109      	bne.n	8002e2c <__libc_init_array+0x24>
 8002e18:	2600      	movs	r6, #0
 8002e1a:	f000 f821 	bl	8002e60 <_init>
 8002e1e:	4d0a      	ldr	r5, [pc, #40]	; (8002e48 <__libc_init_array+0x40>)
 8002e20:	4c0a      	ldr	r4, [pc, #40]	; (8002e4c <__libc_init_array+0x44>)
 8002e22:	1b64      	subs	r4, r4, r5
 8002e24:	10a4      	asrs	r4, r4, #2
 8002e26:	42a6      	cmp	r6, r4
 8002e28:	d105      	bne.n	8002e36 <__libc_init_array+0x2e>
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	00b3      	lsls	r3, r6, #2
 8002e2e:	58eb      	ldr	r3, [r5, r3]
 8002e30:	4798      	blx	r3
 8002e32:	3601      	adds	r6, #1
 8002e34:	e7ee      	b.n	8002e14 <__libc_init_array+0xc>
 8002e36:	00b3      	lsls	r3, r6, #2
 8002e38:	58eb      	ldr	r3, [r5, r3]
 8002e3a:	4798      	blx	r3
 8002e3c:	3601      	adds	r6, #1
 8002e3e:	e7f2      	b.n	8002e26 <__libc_init_array+0x1e>
 8002e40:	08002f00 	.word	0x08002f00
 8002e44:	08002f00 	.word	0x08002f00
 8002e48:	08002f00 	.word	0x08002f00
 8002e4c:	08002f04 	.word	0x08002f04

08002e50 <memset>:
 8002e50:	0003      	movs	r3, r0
 8002e52:	1882      	adds	r2, r0, r2
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d100      	bne.n	8002e5a <memset+0xa>
 8002e58:	4770      	bx	lr
 8002e5a:	7019      	strb	r1, [r3, #0]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	e7f9      	b.n	8002e54 <memset+0x4>

08002e60 <_init>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr

08002e6c <_fini>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr
