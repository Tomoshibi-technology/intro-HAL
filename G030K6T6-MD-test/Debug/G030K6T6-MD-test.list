
G030K6T6-MD-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f18  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030ac  080030ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030ac  080030ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030ac  080030ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ac  080030ac  000130ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  080030c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080030c0  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fadb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efd  00000000  00000000  0002fb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00031a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00032760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b16  00000000  00000000  000333f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc14  00000000  00000000  00047f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008633b  00000000  00000000  00057b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dde5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003034  00000000  00000000  000ddeb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002fb8 	.word	0x08002fb8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002fb8 	.word	0x08002fb8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fb0e 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f809 	bl	800040a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f952 	bl	80006a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003fc:	f000 f8ce 	bl	800059c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000400:	f000 f91a 	bl	8000638 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000404:	f000 f84a 	bl	800049c <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000408:	e7fe      	b.n	8000408 <main+0x1c>

0800040a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040a:	b590      	push	{r4, r7, lr}
 800040c:	b093      	sub	sp, #76	; 0x4c
 800040e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000410:	2414      	movs	r4, #20
 8000412:	193b      	adds	r3, r7, r4
 8000414:	0018      	movs	r0, r3
 8000416:	2334      	movs	r3, #52	; 0x34
 8000418:	001a      	movs	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	f002 fdc4 	bl	8002fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	0018      	movs	r0, r3
 8000424:	2310      	movs	r3, #16
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f002 fdbd 	bl	8002fa8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800042e:	2380      	movs	r3, #128	; 0x80
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	0018      	movs	r0, r3
 8000434:	f000 fd8a 	bl	8000f4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000438:	193b      	adds	r3, r7, r4
 800043a:	2202      	movs	r2, #2
 800043c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043e:	193b      	adds	r3, r7, r4
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	0052      	lsls	r2, r2, #1
 8000444:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2240      	movs	r2, #64	; 0x40
 8000450:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2200      	movs	r2, #0
 8000456:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000458:	193b      	adds	r3, r7, r4
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fdc2 	bl	8000fe4 <HAL_RCC_OscConfig>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000464:	f000 f94a 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2207      	movs	r2, #7
 800046c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2100      	movs	r1, #0
 8000484:	0018      	movs	r0, r3
 8000486:	f001 f8bd 	bl	8001604 <HAL_RCC_ClockConfig>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800048e:	f000 f935 	bl	80006fc <Error_Handler>
  }
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b013      	add	sp, #76	; 0x4c
 8000498:	bd90      	pop	{r4, r7, pc}
	...

0800049c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	; 0x28
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a2:	231c      	movs	r3, #28
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	0018      	movs	r0, r3
 80004a8:	230c      	movs	r3, #12
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f002 fd7b 	bl	8002fa8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004b2:	003b      	movs	r3, r7
 80004b4:	0018      	movs	r0, r3
 80004b6:	231c      	movs	r3, #28
 80004b8:	001a      	movs	r2, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	f002 fd74 	bl	8002fa8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004c0:	4b33      	ldr	r3, [pc, #204]	; (8000590 <MX_TIM3_Init+0xf4>)
 80004c2:	4a34      	ldr	r2, [pc, #208]	; (8000594 <MX_TIM3_Init+0xf8>)
 80004c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004c6:	4b32      	ldr	r3, [pc, #200]	; (8000590 <MX_TIM3_Init+0xf4>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004cc:	4b30      	ldr	r3, [pc, #192]	; (8000590 <MX_TIM3_Init+0xf4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004d2:	4b2f      	ldr	r3, [pc, #188]	; (8000590 <MX_TIM3_Init+0xf4>)
 80004d4:	4a30      	ldr	r2, [pc, #192]	; (8000598 <MX_TIM3_Init+0xfc>)
 80004d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d8:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <MX_TIM3_Init+0xf4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004de:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <MX_TIM3_Init+0xf4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004e4:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <MX_TIM3_Init+0xf4>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 fb5c 	bl	8001ba4 <HAL_TIM_PWM_Init>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80004f0:	f000 f904 	bl	80006fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f4:	211c      	movs	r1, #28
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000502:	187a      	adds	r2, r7, r1
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_TIM3_Init+0xf4>)
 8000506:	0011      	movs	r1, r2
 8000508:	0018      	movs	r0, r3
 800050a:	f001 ffb9 	bl	8002480 <HAL_TIMEx_MasterConfigSynchronization>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000512:	f000 f8f3 	bl	80006fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000516:	003b      	movs	r3, r7
 8000518:	2260      	movs	r2, #96	; 0x60
 800051a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800051c:	003b      	movs	r3, r7
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000522:	003b      	movs	r3, r7
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000528:	003b      	movs	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800052e:	0039      	movs	r1, r7
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <MX_TIM3_Init+0xf4>)
 8000532:	2200      	movs	r2, #0
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fb8d 	bl	8001c54 <HAL_TIM_PWM_ConfigChannel>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800053e:	f000 f8dd 	bl	80006fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000542:	0039      	movs	r1, r7
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <MX_TIM3_Init+0xf4>)
 8000546:	2204      	movs	r2, #4
 8000548:	0018      	movs	r0, r3
 800054a:	f001 fb83 	bl	8001c54 <HAL_TIM_PWM_ConfigChannel>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000552:	f000 f8d3 	bl	80006fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000556:	0039      	movs	r1, r7
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <MX_TIM3_Init+0xf4>)
 800055a:	2208      	movs	r2, #8
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fb79 	bl	8001c54 <HAL_TIM_PWM_ConfigChannel>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8000566:	f000 f8c9 	bl	80006fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800056a:	0039      	movs	r1, r7
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_TIM3_Init+0xf4>)
 800056e:	220c      	movs	r2, #12
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fb6f 	bl	8001c54 <HAL_TIM_PWM_ConfigChannel>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800057a:	f000 f8bf 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <MX_TIM3_Init+0xf4>)
 8000580:	0018      	movs	r0, r3
 8000582:	f000 f903 	bl	800078c <HAL_TIM_MspPostInit>

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b00a      	add	sp, #40	; 0x28
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	20000028 	.word	0x20000028
 8000594:	40000400 	.word	0x40000400
 8000598:	0000ffff 	.word	0x0000ffff

0800059c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005a0:	4b23      	ldr	r3, [pc, #140]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005a2:	4a24      	ldr	r2, [pc, #144]	; (8000634 <MX_USART1_UART_Init+0x98>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005a8:	22e1      	movs	r2, #225	; 0xe1
 80005aa:	0252      	lsls	r2, r2, #9
 80005ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 ffac 	bl	8002544 <HAL_UART_Init>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80005f0:	f000 f884 	bl	80006fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_USART1_UART_Init+0x94>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	0018      	movs	r0, r3
 80005fa:	f002 fbd1 	bl	8002da0 <HAL_UARTEx_SetTxFifoThreshold>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000602:	f000 f87b 	bl	80006fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_USART1_UART_Init+0x94>)
 8000608:	2100      	movs	r1, #0
 800060a:	0018      	movs	r0, r3
 800060c:	f002 fc08 	bl	8002e20 <HAL_UARTEx_SetRxFifoThreshold>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000614:	f000 f872 	bl	80006fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <MX_USART1_UART_Init+0x94>)
 800061a:	0018      	movs	r0, r3
 800061c:	f002 fb86 	bl	8002d2c <HAL_UARTEx_DisableFifoMode>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000624:	f000 f86a 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	20000074 	.word	0x20000074
 8000634:	40013800 	.word	0x40013800

08000638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_USART2_UART_Init+0x60>)
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_USART2_UART_Init+0x64>)
 8000640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_USART2_UART_Init+0x60>)
 8000644:	22e1      	movs	r2, #225	; 0xe1
 8000646:	0252      	lsls	r2, r2, #9
 8000648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_USART2_UART_Init+0x60>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART2_UART_Init+0x60>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_USART2_UART_Init+0x60>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART2_UART_Init+0x60>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_USART2_UART_Init+0x60>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART2_UART_Init+0x60>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_USART2_UART_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART2_UART_Init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_USART2_UART_Init+0x60>)
 800067c:	2200      	movs	r2, #0
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <MX_USART2_UART_Init+0x60>)
 8000682:	0018      	movs	r0, r3
 8000684:	f001 ff5e 	bl	8002544 <HAL_UART_Init>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800068c:	f000 f836 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	20000108 	.word	0x20000108
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_GPIO_Init+0x58>)
 80006a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_GPIO_Init+0x58>)
 80006ac:	2104      	movs	r1, #4
 80006ae:	430a      	orrs	r2, r1
 80006b0:	635a      	str	r2, [r3, #52]	; 0x34
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_GPIO_Init+0x58>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b6:	2204      	movs	r2, #4
 80006b8:	4013      	ands	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_GPIO_Init+0x58>)
 80006c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <MX_GPIO_Init+0x58>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_GPIO_Init+0x58>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_GPIO_Init+0x58>)
 80006d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_GPIO_Init+0x58>)
 80006dc:	2102      	movs	r1, #2
 80006de:	430a      	orrs	r2, r1
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MX_GPIO_Init+0x58>)
 80006e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e6:	2202      	movs	r2, #2
 80006e8:	4013      	ands	r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b004      	add	sp, #16
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_MspInit+0x44>)
 8000710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_MspInit+0x44>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	641a      	str	r2, [r3, #64]	; 0x40
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_MspInit+0x44>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_MspInit+0x44>)
 8000728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_MspInit+0x44>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	0549      	lsls	r1, r1, #21
 8000730:	430a      	orrs	r2, r1
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_MspInit+0x44>)
 8000736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	055b      	lsls	r3, r3, #21
 800073c:	4013      	ands	r3, r2
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a09      	ldr	r2, [pc, #36]	; (8000784 <HAL_TIM_PWM_MspInit+0x34>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d10b      	bne.n	800077a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_TIM_PWM_MspInit+0x38>)
 8000764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_TIM_PWM_MspInit+0x38>)
 8000768:	2102      	movs	r1, #2
 800076a:	430a      	orrs	r2, r1
 800076c:	63da      	str	r2, [r3, #60]	; 0x3c
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_TIM_PWM_MspInit+0x38>)
 8000770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000772:	2202      	movs	r2, #2
 8000774:	4013      	ands	r3, r2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b004      	add	sp, #16
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40000400 	.word	0x40000400
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b08b      	sub	sp, #44	; 0x2c
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	2414      	movs	r4, #20
 8000796:	193b      	adds	r3, r7, r4
 8000798:	0018      	movs	r0, r3
 800079a:	2314      	movs	r3, #20
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f002 fc02 	bl	8002fa8 <memset>
  if(htim->Instance==TIM3)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a25      	ldr	r2, [pc, #148]	; (8000840 <HAL_TIM_MspPostInit+0xb4>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d143      	bne.n	8000836 <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b2:	4b24      	ldr	r3, [pc, #144]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	430a      	orrs	r2, r1
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ba:	4b22      	ldr	r3, [pc, #136]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007be:	2201      	movs	r2, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007cc:	2102      	movs	r1, #2
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d6:	2202      	movs	r2, #2
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	22c0      	movs	r2, #192	; 0xc0
 80007e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2202      	movs	r2, #2
 80007e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2201      	movs	r2, #1
 80007fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	193a      	adds	r2, r7, r4
 80007fe:	23a0      	movs	r3, #160	; 0xa0
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fa3d 	bl	8000c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800080a:	0021      	movs	r1, r4
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2203      	movs	r2, #3
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2202      	movs	r2, #2
 8000816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2201      	movs	r2, #1
 8000828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	187b      	adds	r3, r7, r1
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <HAL_TIM_MspPostInit+0xbc>)
 800082e:	0019      	movs	r1, r3
 8000830:	0010      	movs	r0, r2
 8000832:	f000 fa27 	bl	8000c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b00b      	add	sp, #44	; 0x2c
 800083c:	bd90      	pop	{r4, r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	40000400 	.word	0x40000400
 8000844:	40021000 	.word	0x40021000
 8000848:	50000400 	.word	0x50000400

0800084c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b093      	sub	sp, #76	; 0x4c
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	2334      	movs	r3, #52	; 0x34
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	0018      	movs	r0, r3
 800085a:	2314      	movs	r3, #20
 800085c:	001a      	movs	r2, r3
 800085e:	2100      	movs	r1, #0
 8000860:	f002 fba2 	bl	8002fa8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000864:	241c      	movs	r4, #28
 8000866:	193b      	adds	r3, r7, r4
 8000868:	0018      	movs	r0, r3
 800086a:	2318      	movs	r3, #24
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f002 fb9a 	bl	8002fa8 <memset>
  if(huart->Instance==USART1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a3e      	ldr	r2, [pc, #248]	; (8000974 <HAL_UART_MspInit+0x128>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d140      	bne.n	8000900 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2201      	movs	r2, #1
 8000882:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088a:	193b      	adds	r3, r7, r4
 800088c:	0018      	movs	r0, r3
 800088e:	f001 f863 	bl	8001958 <HAL_RCCEx_PeriphCLKConfig>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000896:	f7ff ff31 	bl	80006fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <HAL_UART_MspInit+0x12c>)
 800089c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800089e:	4b36      	ldr	r3, [pc, #216]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	01c9      	lsls	r1, r1, #7
 80008a4:	430a      	orrs	r2, r1
 80008a6:	641a      	str	r2, [r3, #64]	; 0x40
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	01db      	lsls	r3, r3, #7
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b30      	ldr	r3, [pc, #192]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ba:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008bc:	2101      	movs	r1, #1
 80008be:	430a      	orrs	r2, r1
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c6:	2201      	movs	r2, #1
 80008c8:	4013      	ands	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ce:	2134      	movs	r1, #52	; 0x34
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	22c0      	movs	r2, #192	; 0xc0
 80008d4:	00d2      	lsls	r2, r2, #3
 80008d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2202      	movs	r2, #2
 80008dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2201      	movs	r2, #1
 80008ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	187a      	adds	r2, r7, r1
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 f9c3 	bl	8000c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fe:	e035      	b.n	800096c <HAL_UART_MspInit+0x120>
  else if(huart->Instance==USART2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a1d      	ldr	r2, [pc, #116]	; (800097c <HAL_UART_MspInit+0x130>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d130      	bne.n	800096c <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART2_CLK_ENABLE();
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_UART_MspInit+0x12c>)
 800090c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <HAL_UART_MspInit+0x12c>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0289      	lsls	r1, r1, #10
 8000914:	430a      	orrs	r2, r1
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_UART_MspInit+0x12c>)
 800091a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	029b      	lsls	r3, r3, #10
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_UART_MspInit+0x12c>)
 8000928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <HAL_UART_MspInit+0x12c>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0x12c>)
 8000934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800093e:	2134      	movs	r1, #52	; 0x34
 8000940:	187b      	adds	r3, r7, r1
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <HAL_UART_MspInit+0x134>)
 8000944:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2202      	movs	r2, #2
 800094a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	187a      	adds	r2, r7, r1
 8000960:	23a0      	movs	r3, #160	; 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	0011      	movs	r1, r2
 8000966:	0018      	movs	r0, r3
 8000968:	f000 f98c 	bl	8000c84 <HAL_GPIO_Init>
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b013      	add	sp, #76	; 0x4c
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	40013800 	.word	0x40013800
 8000978:	40021000 	.word	0x40021000
 800097c:	40004400 	.word	0x40004400
 8000980:	00008004 	.word	0x00008004

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f89c 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c0:	f7ff fff7 	bl	80009b2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	; (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ea:	f002 fab9 	bl	8002f60 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009ee:	f7ff fcfd 	bl	80003ec <main>

080009f2 <LoopForever>:

LoopForever:
  b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   r0, =_estack
 80009f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a00:	080030b4 	.word	0x080030b4
  ldr r2, =_sbss
 8000a04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a08:	200001a0 	.word	0x200001a0

08000a0c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_Init+0x3c>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_Init+0x3c>)
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	0049      	lsls	r1, r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f000 f810 	bl	8000a50 <HAL_InitTick>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d003      	beq.n	8000a3c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e001      	b.n	8000a40 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff fe64 	bl	8000708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	781b      	ldrb	r3, [r3, #0]
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a58:	230f      	movs	r3, #15
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_InitTick+0x88>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d02b      	beq.n	8000ac0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_InitTick+0x8c>)
 8000a6a:	681c      	ldr	r4, [r3, #0]
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <HAL_InitTick+0x88>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	0019      	movs	r1, r3
 8000a72:	23fa      	movs	r3, #250	; 0xfa
 8000a74:	0098      	lsls	r0, r3, #2
 8000a76:	f7ff fb43 	bl	8000100 <__udivsi3>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	0020      	movs	r0, r4
 8000a80:	f7ff fb3e 	bl	8000100 <__udivsi3>
 8000a84:	0003      	movs	r3, r0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 f8ef 	bl	8000c6a <HAL_SYSTICK_Config>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d112      	bne.n	8000ab6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d80a      	bhi.n	8000aac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	425b      	negs	r3, r3
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f8ce 	bl	8000c40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_InitTick+0x90>)
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	e00d      	b.n	8000ac8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000aac:	230f      	movs	r3, #15
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	e008      	b.n	8000ac8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	e003      	b.n	8000ac8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ac8:	230f      	movs	r3, #15
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	781b      	ldrb	r3, [r3, #0]
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b005      	add	sp, #20
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	001a      	movs	r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x20>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	18d2      	adds	r2, r2, r3
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_IncTick+0x20>)
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000008 	.word	0x20000008
 8000b04:	2000019c 	.word	0x2000019c

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	2000019c 	.word	0x2000019c

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	0002      	movs	r2, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b30:	d828      	bhi.n	8000b84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b32:	4a2f      	ldr	r2, [pc, #188]	; (8000bf0 <__NVIC_SetPriority+0xd4>)
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	33c0      	adds	r3, #192	; 0xc0
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	589b      	ldr	r3, [r3, r2]
 8000b42:	1dfa      	adds	r2, r7, #7
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	0011      	movs	r1, r2
 8000b48:	2203      	movs	r2, #3
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	00d2      	lsls	r2, r2, #3
 8000b4e:	21ff      	movs	r1, #255	; 0xff
 8000b50:	4091      	lsls	r1, r2
 8000b52:	000a      	movs	r2, r1
 8000b54:	43d2      	mvns	r2, r2
 8000b56:	401a      	ands	r2, r3
 8000b58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	019b      	lsls	r3, r3, #6
 8000b5e:	22ff      	movs	r2, #255	; 0xff
 8000b60:	401a      	ands	r2, r3
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	0018      	movs	r0, r3
 8000b68:	2303      	movs	r3, #3
 8000b6a:	4003      	ands	r3, r0
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b70:	481f      	ldr	r0, [pc, #124]	; (8000bf0 <__NVIC_SetPriority+0xd4>)
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	089b      	lsrs	r3, r3, #2
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	33c0      	adds	r3, #192	; 0xc0
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b82:	e031      	b.n	8000be8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b84:	4a1b      	ldr	r2, [pc, #108]	; (8000bf4 <__NVIC_SetPriority+0xd8>)
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	400b      	ands	r3, r1
 8000b90:	3b08      	subs	r3, #8
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	3306      	adds	r3, #6
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	18d3      	adds	r3, r2, r3
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1dfa      	adds	r2, r7, #7
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	400a      	ands	r2, r1
 8000ba8:	00d2      	lsls	r2, r2, #3
 8000baa:	21ff      	movs	r1, #255	; 0xff
 8000bac:	4091      	lsls	r1, r2
 8000bae:	000a      	movs	r2, r1
 8000bb0:	43d2      	mvns	r2, r2
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	019b      	lsls	r3, r3, #6
 8000bba:	22ff      	movs	r2, #255	; 0xff
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	4003      	ands	r3, r0
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <__NVIC_SetPriority+0xd8>)
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	001c      	movs	r4, r3
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	4023      	ands	r3, r4
 8000bd8:	3b08      	subs	r3, #8
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	3306      	adds	r3, #6
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	18c3      	adds	r3, r0, r3
 8000be4:	3304      	adds	r3, #4
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b003      	add	sp, #12
 8000bee:	bd90      	pop	{r4, r7, pc}
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	1e5a      	subs	r2, r3, #1
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	045b      	lsls	r3, r3, #17
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d301      	bcc.n	8000c10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e010      	b.n	8000c32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <SysTick_Config+0x44>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	3a01      	subs	r2, #1
 8000c16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c18:	2301      	movs	r3, #1
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	2103      	movs	r1, #3
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff ff7c 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SysTick_Config+0x44>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <SysTick_Config+0x44>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	1c02      	adds	r2, r0, #0
 8000c50:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b004      	add	sp, #16
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ffbf 	bl	8000bf8 <SysTick_Config>
 8000c7a:	0003      	movs	r3, r0
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b002      	add	sp, #8
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c92:	e147      	b.n	8000f24 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d100      	bne.n	8000cac <HAL_GPIO_Init+0x28>
 8000caa:	e138      	b.n	8000f1e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d005      	beq.n	8000cc4 <HAL_GPIO_Init+0x40>
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d130      	bne.n	8000d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	409a      	lsls	r2, r3
 8000cd2:	0013      	movs	r3, r2
 8000cd4:	43da      	mvns	r2, r3
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	409a      	lsls	r2, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	0013      	movs	r3, r2
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	091b      	lsrs	r3, r3, #4
 8000d10:	2201      	movs	r2, #1
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d017      	beq.n	8000d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	43da      	mvns	r2, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2203      	movs	r2, #3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d123      	bne.n	8000db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	08da      	lsrs	r2, r3, #3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	58d3      	ldr	r3, [r2, r3]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	2207      	movs	r2, #7
 8000d80:	4013      	ands	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	691a      	ldr	r2, [r3, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2107      	movs	r1, #7
 8000d9a:	400b      	ands	r3, r1
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	6939      	ldr	r1, [r7, #16]
 8000db4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	23c0      	movs	r3, #192	; 0xc0
 8000df0:	029b      	lsls	r3, r3, #10
 8000df2:	4013      	ands	r3, r2
 8000df4:	d100      	bne.n	8000df8 <HAL_GPIO_Init+0x174>
 8000df6:	e092      	b.n	8000f1e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000df8:	4a50      	ldr	r2, [pc, #320]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3318      	adds	r3, #24
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	589b      	ldr	r3, [r3, r2]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	220f      	movs	r2, #15
 8000e10:	409a      	lsls	r2, r3
 8000e12:	0013      	movs	r3, r2
 8000e14:	43da      	mvns	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	23a0      	movs	r3, #160	; 0xa0
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d013      	beq.n	8000e4e <HAL_GPIO_Init+0x1ca>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a45      	ldr	r2, [pc, #276]	; (8000f40 <HAL_GPIO_Init+0x2bc>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d00d      	beq.n	8000e4a <HAL_GPIO_Init+0x1c6>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a44      	ldr	r2, [pc, #272]	; (8000f44 <HAL_GPIO_Init+0x2c0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d007      	beq.n	8000e46 <HAL_GPIO_Init+0x1c2>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a43      	ldr	r2, [pc, #268]	; (8000f48 <HAL_GPIO_Init+0x2c4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d101      	bne.n	8000e42 <HAL_GPIO_Init+0x1be>
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x1cc>
 8000e42:	2305      	movs	r3, #5
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x1cc>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x1cc>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x1cc>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	2103      	movs	r1, #3
 8000e54:	400a      	ands	r2, r1
 8000e56:	00d2      	lsls	r2, r2, #3
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e60:	4936      	ldr	r1, [pc, #216]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3318      	adds	r3, #24
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	43da      	mvns	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	035b      	lsls	r3, r3, #13
 8000e86:	4013      	ands	r3, r2
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e92:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e98:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43da      	mvns	r2, r3
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	039b      	lsls	r3, r3, #14
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ec2:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000ec4:	2384      	movs	r3, #132	; 0x84
 8000ec6:	58d3      	ldr	r3, [r2, r3]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	029b      	lsls	r3, r3, #10
 8000edc:	4013      	ands	r3, r2
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ee8:	4914      	ldr	r1, [pc, #80]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000eea:	2284      	movs	r2, #132	; 0x84
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000ef0:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	58d3      	ldr	r3, [r2, r3]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	025b      	lsls	r3, r3, #9
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f16:	4909      	ldr	r1, [pc, #36]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	40da      	lsrs	r2, r3
 8000f2c:	1e13      	subs	r3, r2, #0
 8000f2e:	d000      	beq.n	8000f32 <HAL_GPIO_Init+0x2ae>
 8000f30:	e6b0      	b.n	8000c94 <HAL_GPIO_Init+0x10>
  }
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b006      	add	sp, #24
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	50000400 	.word	0x50000400
 8000f44:	50000800 	.word	0x50000800
 8000f48:	50000c00 	.word	0x50000c00

08000f4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d11f      	bne.n	8000fb0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	0013      	movs	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	189b      	adds	r3, r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4912      	ldr	r1, [pc, #72]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff f8be 	bl	8000100 <__udivsi3>
 8000f84:	0003      	movs	r3, r0
 8000f86:	3301      	adds	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f8a:	e008      	b.n	8000f9e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e001      	b.n	8000f9e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e009      	b.n	8000fb2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d0ed      	beq.n	8000f8c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b004      	add	sp, #16
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	40007000 	.word	0x40007000
 8000fc0:	fffff9ff 	.word	0xfffff9ff
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	000f4240 	.word	0x000f4240

08000fcc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	23e0      	movs	r3, #224	; 0xe0
 8000fd6:	01db      	lsls	r3, r3, #7
 8000fd8:	4013      	ands	r3, r2
}
 8000fda:	0018      	movs	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e2f3      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d100      	bne.n	8001002 <HAL_RCC_OscConfig+0x1e>
 8001000:	e07c      	b.n	80010fc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001002:	4bc3      	ldr	r3, [pc, #780]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2238      	movs	r2, #56	; 0x38
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800100c:	4bc0      	ldr	r3, [pc, #768]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2203      	movs	r2, #3
 8001012:	4013      	ands	r3, r2
 8001014:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	2b10      	cmp	r3, #16
 800101a:	d102      	bne.n	8001022 <HAL_RCC_OscConfig+0x3e>
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d002      	beq.n	8001028 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	2b08      	cmp	r3, #8
 8001026:	d10b      	bne.n	8001040 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	4bb9      	ldr	r3, [pc, #740]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	029b      	lsls	r3, r3, #10
 8001030:	4013      	ands	r3, r2
 8001032:	d062      	beq.n	80010fa <HAL_RCC_OscConfig+0x116>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d15e      	bne.n	80010fa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e2ce      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	025b      	lsls	r3, r3, #9
 8001048:	429a      	cmp	r2, r3
 800104a:	d107      	bne.n	800105c <HAL_RCC_OscConfig+0x78>
 800104c:	4bb0      	ldr	r3, [pc, #704]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4baf      	ldr	r3, [pc, #700]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	0249      	lsls	r1, r1, #9
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e020      	b.n	800109e <HAL_RCC_OscConfig+0xba>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	23a0      	movs	r3, #160	; 0xa0
 8001062:	02db      	lsls	r3, r3, #11
 8001064:	429a      	cmp	r2, r3
 8001066:	d10e      	bne.n	8001086 <HAL_RCC_OscConfig+0xa2>
 8001068:	4ba9      	ldr	r3, [pc, #676]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4ba8      	ldr	r3, [pc, #672]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	02c9      	lsls	r1, r1, #11
 8001072:	430a      	orrs	r2, r1
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	4ba6      	ldr	r3, [pc, #664]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4ba5      	ldr	r3, [pc, #660]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	0249      	lsls	r1, r1, #9
 8001080:	430a      	orrs	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e00b      	b.n	800109e <HAL_RCC_OscConfig+0xba>
 8001086:	4ba2      	ldr	r3, [pc, #648]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4ba1      	ldr	r3, [pc, #644]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 800108c:	49a1      	ldr	r1, [pc, #644]	; (8001314 <HAL_RCC_OscConfig+0x330>)
 800108e:	400a      	ands	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	4b9f      	ldr	r3, [pc, #636]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b9e      	ldr	r3, [pc, #632]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001098:	499f      	ldr	r1, [pc, #636]	; (8001318 <HAL_RCC_OscConfig+0x334>)
 800109a:	400a      	ands	r2, r1
 800109c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d014      	beq.n	80010d0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a6:	f7ff fd2f 	bl	8000b08 <HAL_GetTick>
 80010aa:	0003      	movs	r3, r0
 80010ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fd2a 	bl	8000b08 <HAL_GetTick>
 80010b4:	0002      	movs	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e28d      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c2:	4b93      	ldr	r3, [pc, #588]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	029b      	lsls	r3, r3, #10
 80010ca:	4013      	ands	r3, r2
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0xcc>
 80010ce:	e015      	b.n	80010fc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d0:	f7ff fd1a 	bl	8000b08 <HAL_GetTick>
 80010d4:	0003      	movs	r3, r0
 80010d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010da:	f7ff fd15 	bl	8000b08 <HAL_GetTick>
 80010de:	0002      	movs	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b64      	cmp	r3, #100	; 0x64
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e278      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ec:	4b88      	ldr	r3, [pc, #544]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	4013      	ands	r3, r2
 80010f6:	d1f0      	bne.n	80010da <HAL_RCC_OscConfig+0xf6>
 80010f8:	e000      	b.n	80010fc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2202      	movs	r2, #2
 8001102:	4013      	ands	r3, r2
 8001104:	d100      	bne.n	8001108 <HAL_RCC_OscConfig+0x124>
 8001106:	e099      	b.n	800123c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001108:	4b81      	ldr	r3, [pc, #516]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2238      	movs	r2, #56	; 0x38
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001112:	4b7f      	ldr	r3, [pc, #508]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2203      	movs	r2, #3
 8001118:	4013      	ands	r3, r2
 800111a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2b10      	cmp	r3, #16
 8001120:	d102      	bne.n	8001128 <HAL_RCC_OscConfig+0x144>
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d002      	beq.n	800112e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d135      	bne.n	800119a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800112e:	4b78      	ldr	r3, [pc, #480]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4013      	ands	r3, r2
 8001138:	d005      	beq.n	8001146 <HAL_RCC_OscConfig+0x162>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e24b      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001146:	4b72      	ldr	r3, [pc, #456]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4a74      	ldr	r2, [pc, #464]	; (800131c <HAL_RCC_OscConfig+0x338>)
 800114c:	4013      	ands	r3, r2
 800114e:	0019      	movs	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	021a      	lsls	r2, r3, #8
 8001156:	4b6e      	ldr	r3, [pc, #440]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001158:	430a      	orrs	r2, r1
 800115a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d112      	bne.n	8001188 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001162:	4b6b      	ldr	r3, [pc, #428]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a6e      	ldr	r2, [pc, #440]	; (8001320 <HAL_RCC_OscConfig+0x33c>)
 8001168:	4013      	ands	r3, r2
 800116a:	0019      	movs	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	4b67      	ldr	r3, [pc, #412]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001176:	4b66      	ldr	r3, [pc, #408]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	0adb      	lsrs	r3, r3, #11
 800117c:	2207      	movs	r2, #7
 800117e:	4013      	ands	r3, r2
 8001180:	4a68      	ldr	r2, [pc, #416]	; (8001324 <HAL_RCC_OscConfig+0x340>)
 8001182:	40da      	lsrs	r2, r3
 8001184:	4b68      	ldr	r3, [pc, #416]	; (8001328 <HAL_RCC_OscConfig+0x344>)
 8001186:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001188:	4b68      	ldr	r3, [pc, #416]	; (800132c <HAL_RCC_OscConfig+0x348>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff fc5f 	bl	8000a50 <HAL_InitTick>
 8001192:	1e03      	subs	r3, r0, #0
 8001194:	d051      	beq.n	800123a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e221      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d030      	beq.n	8001204 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011a2:	4b5b      	ldr	r3, [pc, #364]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a5e      	ldr	r2, [pc, #376]	; (8001320 <HAL_RCC_OscConfig+0x33c>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	0019      	movs	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	4b57      	ldr	r3, [pc, #348]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80011b6:	4b56      	ldr	r3, [pc, #344]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b55      	ldr	r3, [pc, #340]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	0049      	lsls	r1, r1, #1
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c4:	f7ff fca0 	bl	8000b08 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ce:	f7ff fc9b 	bl	8000b08 <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e1fe      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011e0:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4013      	ands	r3, r2
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b48      	ldr	r3, [pc, #288]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a4a      	ldr	r2, [pc, #296]	; (800131c <HAL_RCC_OscConfig+0x338>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	0019      	movs	r1, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	021a      	lsls	r2, r3, #8
 80011fc:	4b44      	ldr	r3, [pc, #272]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80011fe:	430a      	orrs	r2, r1
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	e01b      	b.n	800123c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001204:	4b42      	ldr	r3, [pc, #264]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b41      	ldr	r3, [pc, #260]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 800120a:	4949      	ldr	r1, [pc, #292]	; (8001330 <HAL_RCC_OscConfig+0x34c>)
 800120c:	400a      	ands	r2, r1
 800120e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fc7a 	bl	8000b08 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fc75 	bl	8000b08 <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1d8      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800122c:	4b38      	ldr	r3, [pc, #224]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4013      	ands	r3, r2
 8001236:	d1f0      	bne.n	800121a <HAL_RCC_OscConfig+0x236>
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800123a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2208      	movs	r2, #8
 8001242:	4013      	ands	r3, r2
 8001244:	d047      	beq.n	80012d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001246:	4b32      	ldr	r3, [pc, #200]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2238      	movs	r2, #56	; 0x38
 800124c:	4013      	ands	r3, r2
 800124e:	2b18      	cmp	r3, #24
 8001250:	d10a      	bne.n	8001268 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	2202      	movs	r2, #2
 8001258:	4013      	ands	r3, r2
 800125a:	d03c      	beq.n	80012d6 <HAL_RCC_OscConfig+0x2f2>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d138      	bne.n	80012d6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e1ba      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d019      	beq.n	80012a4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001272:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 8001276:	2101      	movs	r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fc44 	bl	8000b08 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001286:	f7ff fc3f 	bl	8000b08 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e1a2      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 800129a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129c:	2202      	movs	r2, #2
 800129e:	4013      	ands	r3, r2
 80012a0:	d0f1      	beq.n	8001286 <HAL_RCC_OscConfig+0x2a2>
 80012a2:	e018      	b.n	80012d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	438a      	bics	r2, r1
 80012ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc2a 	bl	8000b08 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ba:	f7ff fc25 	bl	8000b08 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e188      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80012ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d0:	2202      	movs	r2, #2
 80012d2:	4013      	ands	r3, r2
 80012d4:	d1f1      	bne.n	80012ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2204      	movs	r2, #4
 80012dc:	4013      	ands	r3, r2
 80012de:	d100      	bne.n	80012e2 <HAL_RCC_OscConfig+0x2fe>
 80012e0:	e0c6      	b.n	8001470 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	231f      	movs	r3, #31
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2238      	movs	r2, #56	; 0x38
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b20      	cmp	r3, #32
 80012f4:	d11e      	bne.n	8001334 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_RCC_OscConfig+0x32c>)
 80012f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fa:	2202      	movs	r2, #2
 80012fc:	4013      	ands	r3, r2
 80012fe:	d100      	bne.n	8001302 <HAL_RCC_OscConfig+0x31e>
 8001300:	e0b6      	b.n	8001470 <HAL_RCC_OscConfig+0x48c>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d000      	beq.n	800130c <HAL_RCC_OscConfig+0x328>
 800130a:	e0b1      	b.n	8001470 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e166      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
 8001310:	40021000 	.word	0x40021000
 8001314:	fffeffff 	.word	0xfffeffff
 8001318:	fffbffff 	.word	0xfffbffff
 800131c:	ffff80ff 	.word	0xffff80ff
 8001320:	ffffc7ff 	.word	0xffffc7ff
 8001324:	00f42400 	.word	0x00f42400
 8001328:	20000000 	.word	0x20000000
 800132c:	20000004 	.word	0x20000004
 8001330:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001334:	4bac      	ldr	r3, [pc, #688]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	055b      	lsls	r3, r3, #21
 800133c:	4013      	ands	r3, r2
 800133e:	d101      	bne.n	8001344 <HAL_RCC_OscConfig+0x360>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x362>
 8001344:	2300      	movs	r3, #0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d011      	beq.n	800136e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4ba7      	ldr	r3, [pc, #668]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 800134c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800134e:	4ba6      	ldr	r3, [pc, #664]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	0549      	lsls	r1, r1, #21
 8001354:	430a      	orrs	r2, r1
 8001356:	63da      	str	r2, [r3, #60]	; 0x3c
 8001358:	4ba3      	ldr	r3, [pc, #652]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 800135a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	055b      	lsls	r3, r3, #21
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001366:	231f      	movs	r3, #31
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800136e:	4b9f      	ldr	r3, [pc, #636]	; (80015ec <HAL_RCC_OscConfig+0x608>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4013      	ands	r3, r2
 8001378:	d11a      	bne.n	80013b0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800137a:	4b9c      	ldr	r3, [pc, #624]	; (80015ec <HAL_RCC_OscConfig+0x608>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b9b      	ldr	r3, [pc, #620]	; (80015ec <HAL_RCC_OscConfig+0x608>)
 8001380:	2180      	movs	r1, #128	; 0x80
 8001382:	0049      	lsls	r1, r1, #1
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001388:	f7ff fbbe 	bl	8000b08 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001392:	f7ff fbb9 	bl	8000b08 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e11c      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a4:	4b91      	ldr	r3, [pc, #580]	; (80015ec <HAL_RCC_OscConfig+0x608>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x3e2>
 80013b8:	4b8b      	ldr	r3, [pc, #556]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80013ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013bc:	4b8a      	ldr	r3, [pc, #552]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80013be:	2101      	movs	r1, #1
 80013c0:	430a      	orrs	r2, r1
 80013c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80013c4:	e01c      	b.n	8001400 <HAL_RCC_OscConfig+0x41c>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x404>
 80013ce:	4b86      	ldr	r3, [pc, #536]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80013d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013d2:	4b85      	ldr	r3, [pc, #532]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80013d4:	2104      	movs	r1, #4
 80013d6:	430a      	orrs	r2, r1
 80013d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80013da:	4b83      	ldr	r3, [pc, #524]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80013dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013de:	4b82      	ldr	r3, [pc, #520]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	430a      	orrs	r2, r1
 80013e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80013e6:	e00b      	b.n	8001400 <HAL_RCC_OscConfig+0x41c>
 80013e8:	4b7f      	ldr	r3, [pc, #508]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80013ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013ec:	4b7e      	ldr	r3, [pc, #504]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80013ee:	2101      	movs	r1, #1
 80013f0:	438a      	bics	r2, r1
 80013f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80013f4:	4b7c      	ldr	r3, [pc, #496]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80013f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013f8:	4b7b      	ldr	r3, [pc, #492]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80013fa:	2104      	movs	r1, #4
 80013fc:	438a      	bics	r2, r1
 80013fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d014      	beq.n	8001432 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fb7e 	bl	8000b08 <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001410:	e009      	b.n	8001426 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001412:	f7ff fb79 	bl	8000b08 <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	4a74      	ldr	r2, [pc, #464]	; (80015f0 <HAL_RCC_OscConfig+0x60c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e0db      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001426:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142a:	2202      	movs	r2, #2
 800142c:	4013      	ands	r3, r2
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x42e>
 8001430:	e013      	b.n	800145a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fb69 	bl	8000b08 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800143a:	e009      	b.n	8001450 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143c:	f7ff fb64 	bl	8000b08 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	4a6a      	ldr	r2, [pc, #424]	; (80015f0 <HAL_RCC_OscConfig+0x60c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e0c6      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001450:	4b65      	ldr	r3, [pc, #404]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	2202      	movs	r2, #2
 8001456:	4013      	ands	r3, r2
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800145a:	231f      	movs	r3, #31
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d105      	bne.n	8001470 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001464:	4b60      	ldr	r3, [pc, #384]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001468:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 800146a:	4962      	ldr	r1, [pc, #392]	; (80015f4 <HAL_RCC_OscConfig+0x610>)
 800146c:	400a      	ands	r2, r1
 800146e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d100      	bne.n	800147a <HAL_RCC_OscConfig+0x496>
 8001478:	e0b0      	b.n	80015dc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2238      	movs	r2, #56	; 0x38
 8001480:	4013      	ands	r3, r2
 8001482:	2b10      	cmp	r3, #16
 8001484:	d100      	bne.n	8001488 <HAL_RCC_OscConfig+0x4a4>
 8001486:	e078      	b.n	800157a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d153      	bne.n	8001538 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001490:	4b55      	ldr	r3, [pc, #340]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001496:	4958      	ldr	r1, [pc, #352]	; (80015f8 <HAL_RCC_OscConfig+0x614>)
 8001498:	400a      	ands	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fb34 	bl	8000b08 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fb2f 	bl	8000b08 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e092      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b8:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	049b      	lsls	r3, r3, #18
 80014c0:	4013      	ands	r3, r2
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c4:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	; (80015fc <HAL_RCC_OscConfig+0x618>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	0019      	movs	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1a      	ldr	r2, [r3, #32]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	431a      	orrs	r2, r3
 80014ec:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80014ee:	430a      	orrs	r2, r1
 80014f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	0449      	lsls	r1, r1, #17
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001500:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0549      	lsls	r1, r1, #21
 800150a:	430a      	orrs	r2, r1
 800150c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fafb 	bl	8000b08 <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff faf6 	bl	8000b08 <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e059      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	049b      	lsls	r3, r3, #18
 8001532:	4013      	ands	r3, r2
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x534>
 8001536:	e051      	b.n	80015dc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 800153e:	492e      	ldr	r1, [pc, #184]	; (80015f8 <HAL_RCC_OscConfig+0x614>)
 8001540:	400a      	ands	r2, r1
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fae0 	bl	8000b08 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154e:	f7ff fadb 	bl	8000b08 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e03e      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	049b      	lsls	r3, r3, #18
 8001568:	4013      	ands	r3, r2
 800156a:	d1f0      	bne.n	800154e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001572:	4923      	ldr	r1, [pc, #140]	; (8001600 <HAL_RCC_OscConfig+0x61c>)
 8001574:	400a      	ands	r2, r1
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	e030      	b.n	80015dc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e02b      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_RCC_OscConfig+0x604>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2203      	movs	r2, #3
 8001590:	401a      	ands	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	429a      	cmp	r2, r3
 8001598:	d11e      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2270      	movs	r2, #112	; 0x70
 800159e:	401a      	ands	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d117      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	23fe      	movs	r3, #254	; 0xfe
 80015ac:	01db      	lsls	r3, r3, #7
 80015ae:	401a      	ands	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d10e      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	23f8      	movs	r3, #248	; 0xf8
 80015be:	039b      	lsls	r3, r3, #14
 80015c0:	401a      	ands	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d106      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	0f5b      	lsrs	r3, r3, #29
 80015ce:	075a      	lsls	r2, r3, #29
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b008      	add	sp, #32
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40007000 	.word	0x40007000
 80015f0:	00001388 	.word	0x00001388
 80015f4:	efffffff 	.word	0xefffffff
 80015f8:	feffffff 	.word	0xfeffffff
 80015fc:	1fc1808c 	.word	0x1fc1808c
 8001600:	effefffc 	.word	0xeffefffc

08001604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0e9      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001618:	4b76      	ldr	r3, [pc, #472]	; (80017f4 <HAL_RCC_ClockConfig+0x1f0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2207      	movs	r2, #7
 800161e:	4013      	ands	r3, r2
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d91e      	bls.n	8001664 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b73      	ldr	r3, [pc, #460]	; (80017f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2207      	movs	r2, #7
 800162c:	4393      	bics	r3, r2
 800162e:	0019      	movs	r1, r3
 8001630:	4b70      	ldr	r3, [pc, #448]	; (80017f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001638:	f7ff fa66 	bl	8000b08 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001640:	e009      	b.n	8001656 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001642:	f7ff fa61 	bl	8000b08 <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	4a6a      	ldr	r2, [pc, #424]	; (80017f8 <HAL_RCC_ClockConfig+0x1f4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e0ca      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001656:	4b67      	ldr	r3, [pc, #412]	; (80017f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2207      	movs	r2, #7
 800165c:	4013      	ands	r3, r2
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2202      	movs	r2, #2
 800166a:	4013      	ands	r3, r2
 800166c:	d015      	beq.n	800169a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2204      	movs	r2, #4
 8001674:	4013      	ands	r3, r2
 8001676:	d006      	beq.n	8001686 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001678:	4b60      	ldr	r3, [pc, #384]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	4b5f      	ldr	r3, [pc, #380]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 800167e:	21e0      	movs	r1, #224	; 0xe0
 8001680:	01c9      	lsls	r1, r1, #7
 8001682:	430a      	orrs	r2, r1
 8001684:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	4a5d      	ldr	r2, [pc, #372]	; (8001800 <HAL_RCC_ClockConfig+0x1fc>)
 800168c:	4013      	ands	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 8001696:	430a      	orrs	r2, r1
 8001698:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2201      	movs	r2, #1
 80016a0:	4013      	ands	r3, r2
 80016a2:	d057      	beq.n	8001754 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	029b      	lsls	r3, r3, #10
 80016b4:	4013      	ands	r3, r2
 80016b6:	d12b      	bne.n	8001710 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e097      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d107      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c4:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	049b      	lsls	r3, r3, #18
 80016cc:	4013      	ands	r3, r2
 80016ce:	d11f      	bne.n	8001710 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e08b      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d107      	bne.n	80016ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016dc:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4013      	ands	r3, r2
 80016e6:	d113      	bne.n	8001710 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e07f      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f4:	4b41      	ldr	r3, [pc, #260]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 80016f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f8:	2202      	movs	r2, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	d108      	bne.n	8001710 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e074      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001702:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	2202      	movs	r2, #2
 8001708:	4013      	ands	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e06d      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001710:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2207      	movs	r2, #7
 8001716:	4393      	bics	r3, r2
 8001718:	0019      	movs	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 8001720:	430a      	orrs	r2, r1
 8001722:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001724:	f7ff f9f0 	bl	8000b08 <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172c:	e009      	b.n	8001742 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172e:	f7ff f9eb 	bl	8000b08 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <HAL_RCC_ClockConfig+0x1f4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e054      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2238      	movs	r2, #56	; 0x38
 8001748:	401a      	ands	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	429a      	cmp	r2, r3
 8001752:	d1ec      	bne.n	800172e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2207      	movs	r2, #7
 800175a:	4013      	ands	r3, r2
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d21e      	bcs.n	80017a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2207      	movs	r2, #7
 8001768:	4393      	bics	r3, r2
 800176a:	0019      	movs	r1, r3
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <HAL_RCC_ClockConfig+0x1f0>)
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001774:	f7ff f9c8 	bl	8000b08 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800177c:	e009      	b.n	8001792 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177e:	f7ff f9c3 	bl	8000b08 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <HAL_RCC_ClockConfig+0x1f4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e02c      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2207      	movs	r2, #7
 8001798:	4013      	ands	r3, r2
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d1ee      	bne.n	800177e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2204      	movs	r2, #4
 80017a6:	4013      	ands	r3, r2
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	4a15      	ldr	r2, [pc, #84]	; (8001804 <HAL_RCC_ClockConfig+0x200>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	0019      	movs	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017be:	f000 f829 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 80017c2:	0001      	movs	r1, r0
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_RCC_ClockConfig+0x1f8>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	220f      	movs	r2, #15
 80017cc:	401a      	ands	r2, r3
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_RCC_ClockConfig+0x204>)
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	58d3      	ldr	r3, [r2, r3]
 80017d4:	221f      	movs	r2, #31
 80017d6:	4013      	ands	r3, r2
 80017d8:	000a      	movs	r2, r1
 80017da:	40da      	lsrs	r2, r3
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_ClockConfig+0x208>)
 80017de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_ClockConfig+0x20c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff f933 	bl	8000a50 <HAL_InitTick>
 80017ea:	0003      	movs	r3, r0
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b004      	add	sp, #16
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40022000 	.word	0x40022000
 80017f8:	00001388 	.word	0x00001388
 80017fc:	40021000 	.word	0x40021000
 8001800:	fffff0ff 	.word	0xfffff0ff
 8001804:	ffff8fff 	.word	0xffff8fff
 8001808:	08002fd0 	.word	0x08002fd0
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800181a:	4b3c      	ldr	r3, [pc, #240]	; (800190c <HAL_RCC_GetSysClockFreq+0xf8>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2238      	movs	r2, #56	; 0x38
 8001820:	4013      	ands	r3, r2
 8001822:	d10f      	bne.n	8001844 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	0adb      	lsrs	r3, r3, #11
 800182a:	2207      	movs	r2, #7
 800182c:	4013      	ands	r3, r2
 800182e:	2201      	movs	r2, #1
 8001830:	409a      	lsls	r2, r3
 8001832:	0013      	movs	r3, r2
 8001834:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	4835      	ldr	r0, [pc, #212]	; (8001910 <HAL_RCC_GetSysClockFreq+0xfc>)
 800183a:	f7fe fc61 	bl	8000100 <__udivsi3>
 800183e:	0003      	movs	r3, r0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	e05d      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2238      	movs	r2, #56	; 0x38
 800184a:	4013      	ands	r3, r2
 800184c:	2b08      	cmp	r3, #8
 800184e:	d102      	bne.n	8001856 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_RCC_GetSysClockFreq+0x100>)
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e054      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2238      	movs	r2, #56	; 0x38
 800185c:	4013      	ands	r3, r2
 800185e:	2b10      	cmp	r3, #16
 8001860:	d138      	bne.n	80018d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2203      	movs	r2, #3
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <HAL_RCC_GetSysClockFreq+0xf8>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	2207      	movs	r2, #7
 8001874:	4013      	ands	r3, r2
 8001876:	3301      	adds	r3, #1
 8001878:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d10d      	bne.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	4824      	ldr	r0, [pc, #144]	; (8001914 <HAL_RCC_GetSysClockFreq+0x100>)
 8001884:	f7fe fc3c 	bl	8000100 <__udivsi3>
 8001888:	0003      	movs	r3, r0
 800188a:	0019      	movs	r1, r3
 800188c:	4b1f      	ldr	r3, [pc, #124]	; (800190c <HAL_RCC_GetSysClockFreq+0xf8>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	227f      	movs	r2, #127	; 0x7f
 8001894:	4013      	ands	r3, r2
 8001896:	434b      	muls	r3, r1
 8001898:	617b      	str	r3, [r7, #20]
        break;
 800189a:	e00d      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	481c      	ldr	r0, [pc, #112]	; (8001910 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018a0:	f7fe fc2e 	bl	8000100 <__udivsi3>
 80018a4:	0003      	movs	r3, r0
 80018a6:	0019      	movs	r1, r3
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	227f      	movs	r2, #127	; 0x7f
 80018b0:	4013      	ands	r3, r2
 80018b2:	434b      	muls	r3, r1
 80018b4:	617b      	str	r3, [r7, #20]
        break;
 80018b6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0f5b      	lsrs	r3, r3, #29
 80018be:	2207      	movs	r2, #7
 80018c0:	4013      	ands	r3, r2
 80018c2:	3301      	adds	r3, #1
 80018c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	6978      	ldr	r0, [r7, #20]
 80018ca:	f7fe fc19 	bl	8000100 <__udivsi3>
 80018ce:	0003      	movs	r3, r0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	e015      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2238      	movs	r2, #56	; 0x38
 80018da:	4013      	ands	r3, r2
 80018dc:	2b20      	cmp	r3, #32
 80018de:	d103      	bne.n	80018e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2238      	movs	r2, #56	; 0x38
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b18      	cmp	r3, #24
 80018f2:	d103      	bne.n	80018fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80018f4:	23fa      	movs	r3, #250	; 0xfa
 80018f6:	01db      	lsls	r3, r3, #7
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	e001      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001900:	693b      	ldr	r3, [r7, #16]
}
 8001902:	0018      	movs	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	b006      	add	sp, #24
 8001908:	bd80      	pop	{r7, pc}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	40021000 	.word	0x40021000
 8001910:	00f42400 	.word	0x00f42400
 8001914:	007a1200 	.word	0x007a1200

08001918 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800191c:	4b02      	ldr	r3, [pc, #8]	; (8001928 <HAL_RCC_GetHCLKFreq+0x10>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	20000000 	.word	0x20000000

0800192c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001930:	f7ff fff2 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001934:	0004      	movs	r4, r0
 8001936:	f7ff fb49 	bl	8000fcc <LL_RCC_GetAPB1Prescaler>
 800193a:	0003      	movs	r3, r0
 800193c:	0b1a      	lsrs	r2, r3, #12
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	58d3      	ldr	r3, [r2, r3]
 8001944:	221f      	movs	r2, #31
 8001946:	4013      	ands	r3, r2
 8001948:	40dc      	lsrs	r4, r3
 800194a:	0023      	movs	r3, r4
}
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bdb0      	pop	{r4, r5, r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	08003010 	.word	0x08003010

08001958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001960:	2313      	movs	r3, #19
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001968:	2312      	movs	r3, #18
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	029b      	lsls	r3, r3, #10
 8001978:	4013      	ands	r3, r2
 800197a:	d100      	bne.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800197c:	e0a3      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2011      	movs	r0, #17
 8001980:	183b      	adds	r3, r7, r0
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001986:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	055b      	lsls	r3, r3, #21
 800198e:	4013      	ands	r3, r2
 8001990:	d110      	bne.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001996:	4b7b      	ldr	r3, [pc, #492]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	0549      	lsls	r1, r1, #21
 800199c:	430a      	orrs	r2, r1
 800199e:	63da      	str	r2, [r3, #60]	; 0x3c
 80019a0:	4b78      	ldr	r3, [pc, #480]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	055b      	lsls	r3, r3, #21
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ae:	183b      	adds	r3, r7, r0
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b4:	4b74      	ldr	r3, [pc, #464]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019ba:	2180      	movs	r1, #128	; 0x80
 80019bc:	0049      	lsls	r1, r1, #1
 80019be:	430a      	orrs	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019c2:	f7ff f8a1 	bl	8000b08 <HAL_GetTick>
 80019c6:	0003      	movs	r3, r0
 80019c8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019ca:	e00b      	b.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019cc:	f7ff f89c 	bl	8000b08 <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d904      	bls.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80019da:	2313      	movs	r3, #19
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	2203      	movs	r2, #3
 80019e0:	701a      	strb	r2, [r3, #0]
        break;
 80019e2:	e005      	b.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019e4:	4b68      	ldr	r3, [pc, #416]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	d0ed      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80019f0:	2313      	movs	r3, #19
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d154      	bne.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80019fa:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019fe:	23c0      	movs	r3, #192	; 0xc0
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d019      	beq.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d014      	beq.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a16:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	4a5c      	ldr	r2, [pc, #368]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a20:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a24:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0249      	lsls	r1, r1, #9
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a2e:	4b55      	ldr	r3, [pc, #340]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a32:	4b54      	ldr	r3, [pc, #336]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a34:	4956      	ldr	r1, [pc, #344]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001a36:	400a      	ands	r2, r1
 8001a38:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a3a:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2201      	movs	r2, #1
 8001a44:	4013      	ands	r3, r2
 8001a46:	d016      	beq.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f85e 	bl	8000b08 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a50:	e00c      	b.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff f859 	bl	8000b08 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	4a4d      	ldr	r2, [pc, #308]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d904      	bls.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001a62:	2313      	movs	r3, #19
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	2203      	movs	r2, #3
 8001a68:	701a      	strb	r2, [r3, #0]
            break;
 8001a6a:	e004      	b.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6c:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	2202      	movs	r2, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d0ed      	beq.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001a76:	2313      	movs	r3, #19
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10a      	bne.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a80:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	4a41      	ldr	r2, [pc, #260]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a90:	430a      	orrs	r2, r1
 8001a92:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a94:	e00c      	b.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001a96:	2312      	movs	r3, #18
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2213      	movs	r2, #19
 8001a9c:	18ba      	adds	r2, r7, r2
 8001a9e:	7812      	ldrb	r2, [r2, #0]
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	e005      	b.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001aa4:	2312      	movs	r3, #18
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	2213      	movs	r2, #19
 8001aaa:	18ba      	adds	r2, r7, r2
 8001aac:	7812      	ldrb	r2, [r2, #0]
 8001aae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ab0:	2311      	movs	r3, #17
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d105      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aba:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ac0:	4935      	ldr	r1, [pc, #212]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4013      	ands	r3, r2
 8001ace:	d009      	beq.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	4393      	bics	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	4013      	ands	r3, r2
 8001aec:	d009      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001aee:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af2:	4a2a      	ldr	r2, [pc, #168]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001afe:	430a      	orrs	r2, r1
 8001b00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	01db      	lsls	r3, r3, #7
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d015      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	0899      	lsrs	r1, r3, #2
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	05db      	lsls	r3, r3, #23
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	0249      	lsls	r1, r1, #9
 8001b36:	430a      	orrs	r2, r1
 8001b38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4013      	ands	r3, r2
 8001b44:	d016      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b56:	430a      	orrs	r2, r1
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	01db      	lsls	r3, r3, #7
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d106      	bne.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	0249      	lsls	r1, r1, #9
 8001b70:	430a      	orrs	r2, r1
 8001b72:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001b74:	2312      	movs	r3, #18
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	781b      	ldrb	r3, [r3, #0]
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b006      	add	sp, #24
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	fffffcff 	.word	0xfffffcff
 8001b90:	fffeffff 	.word	0xfffeffff
 8001b94:	00001388 	.word	0x00001388
 8001b98:	efffffff 	.word	0xefffffff
 8001b9c:	ffffcfff 	.word	0xffffcfff
 8001ba0:	ffff3fff 	.word	0xffff3fff

08001ba4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e04a      	b.n	8001c4c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	223d      	movs	r2, #61	; 0x3d
 8001bba:	5c9b      	ldrb	r3, [r3, r2]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d107      	bne.n	8001bd2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	223c      	movs	r2, #60	; 0x3c
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7fe fdbf 	bl	8000750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223d      	movs	r2, #61	; 0x3d
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	0019      	movs	r1, r3
 8001be4:	0010      	movs	r0, r2
 8001be6:	f000 f935 	bl	8001e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2248      	movs	r2, #72	; 0x48
 8001bee:	2101      	movs	r1, #1
 8001bf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	223e      	movs	r2, #62	; 0x3e
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	223f      	movs	r2, #63	; 0x3f
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2240      	movs	r2, #64	; 0x40
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2241      	movs	r2, #65	; 0x41
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2242      	movs	r2, #66	; 0x42
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2243      	movs	r2, #67	; 0x43
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2244      	movs	r2, #68	; 0x44
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2245      	movs	r2, #69	; 0x45
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2246      	movs	r2, #70	; 0x46
 8001c36:	2101      	movs	r1, #1
 8001c38:	5499      	strb	r1, [r3, r2]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2247      	movs	r2, #71	; 0x47
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	223d      	movs	r2, #61	; 0x3d
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c60:	2317      	movs	r3, #23
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	223c      	movs	r2, #60	; 0x3c
 8001c6c:	5c9b      	ldrb	r3, [r3, r2]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e0e5      	b.n	8001e42 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	223c      	movs	r2, #60	; 0x3c
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b14      	cmp	r3, #20
 8001c82:	d900      	bls.n	8001c86 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001c84:	e0d1      	b.n	8001e2a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	009a      	lsls	r2, r3, #2
 8001c8a:	4b70      	ldr	r3, [pc, #448]	; (8001e4c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001c8c:	18d3      	adds	r3, r2, r3
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	0011      	movs	r1, r2
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 f954 	bl	8001f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2108      	movs	r1, #8
 8001cac:	430a      	orrs	r2, r1
 8001cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2104      	movs	r1, #4
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6999      	ldr	r1, [r3, #24]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	619a      	str	r2, [r3, #24]
      break;
 8001cd2:	e0af      	b.n	8001e34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	0011      	movs	r1, r2
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f000 f9b3 	bl	8002048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699a      	ldr	r2, [r3, #24]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0109      	lsls	r1, r1, #4
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4954      	ldr	r1, [pc, #336]	; (8001e50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6999      	ldr	r1, [r3, #24]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	021a      	lsls	r2, r3, #8
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	619a      	str	r2, [r3, #24]
      break;
 8001d18:	e08c      	b.n	8001e34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	0011      	movs	r1, r2
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 fa0e 	bl	8002144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69da      	ldr	r2, [r3, #28]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2108      	movs	r1, #8
 8001d34:	430a      	orrs	r2, r1
 8001d36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2104      	movs	r1, #4
 8001d44:	438a      	bics	r2, r1
 8001d46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69d9      	ldr	r1, [r3, #28]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	61da      	str	r2, [r3, #28]
      break;
 8001d5a:	e06b      	b.n	8001e34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	0011      	movs	r1, r2
 8001d64:	0018      	movs	r0, r3
 8001d66:	f000 fa6f 	bl	8002248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	0109      	lsls	r1, r1, #4
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4932      	ldr	r1, [pc, #200]	; (8001e50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001d88:	400a      	ands	r2, r1
 8001d8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69d9      	ldr	r1, [r3, #28]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	021a      	lsls	r2, r3, #8
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	61da      	str	r2, [r3, #28]
      break;
 8001da0:	e048      	b.n	8001e34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	0011      	movs	r1, r2
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 fab0 	bl	8002310 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2108      	movs	r1, #8
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2104      	movs	r1, #4
 8001dcc:	438a      	bics	r2, r1
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001de2:	e027      	b.n	8001e34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	0011      	movs	r1, r2
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 fae9 	bl	80023c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	0109      	lsls	r1, r1, #4
 8001e00:	430a      	orrs	r2, r1
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4910      	ldr	r1, [pc, #64]	; (8001e50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	021a      	lsls	r2, r3, #8
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001e28:	e004      	b.n	8001e34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001e2a:	2317      	movs	r3, #23
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
      break;
 8001e32:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	223c      	movs	r2, #60	; 0x3c
 8001e38:	2100      	movs	r1, #0
 8001e3a:	5499      	strb	r1, [r3, r2]

  return status;
 8001e3c:	2317      	movs	r3, #23
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	781b      	ldrb	r3, [r3, #0]
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b006      	add	sp, #24
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	08003030 	.word	0x08003030
 8001e50:	fffffbff 	.word	0xfffffbff

08001e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a32      	ldr	r2, [pc, #200]	; (8001f30 <TIM_Base_SetConfig+0xdc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d003      	beq.n	8001e74 <TIM_Base_SetConfig+0x20>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a31      	ldr	r2, [pc, #196]	; (8001f34 <TIM_Base_SetConfig+0xe0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d108      	bne.n	8001e86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2270      	movs	r2, #112	; 0x70
 8001e78:	4393      	bics	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <TIM_Base_SetConfig+0xdc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00f      	beq.n	8001eae <TIM_Base_SetConfig+0x5a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a28      	ldr	r2, [pc, #160]	; (8001f34 <TIM_Base_SetConfig+0xe0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00b      	beq.n	8001eae <TIM_Base_SetConfig+0x5a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <TIM_Base_SetConfig+0xe4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d007      	beq.n	8001eae <TIM_Base_SetConfig+0x5a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <TIM_Base_SetConfig+0xe8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d003      	beq.n	8001eae <TIM_Base_SetConfig+0x5a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <TIM_Base_SetConfig+0xec>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d108      	bne.n	8001ec0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <TIM_Base_SetConfig+0xf0>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	4393      	bics	r3, r2
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <TIM_Base_SetConfig+0xdc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <TIM_Base_SetConfig+0xaa>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <TIM_Base_SetConfig+0xe8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d003      	beq.n	8001efe <TIM_Base_SetConfig+0xaa>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <TIM_Base_SetConfig+0xec>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d103      	bne.n	8001f06 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2201      	movs	r2, #1
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d106      	bne.n	8001f26 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4393      	bics	r3, r2
 8001f20:	001a      	movs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]
  }
}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b004      	add	sp, #16
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	40012c00 	.word	0x40012c00
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40002000 	.word	0x40002000
 8001f3c:	40014400 	.word	0x40014400
 8001f40:	40014800 	.word	0x40014800
 8001f44:	fffffcff 	.word	0xfffffcff

08001f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4393      	bics	r3, r2
 8001f60:	001a      	movs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4a2e      	ldr	r2, [pc, #184]	; (8002030 <TIM_OC1_SetConfig+0xe8>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	4393      	bics	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4393      	bics	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a24      	ldr	r2, [pc, #144]	; (8002034 <TIM_OC1_SetConfig+0xec>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <TIM_OC1_SetConfig+0x6e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a23      	ldr	r2, [pc, #140]	; (8002038 <TIM_OC1_SetConfig+0xf0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d003      	beq.n	8001fb6 <TIM_OC1_SetConfig+0x6e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a22      	ldr	r2, [pc, #136]	; (800203c <TIM_OC1_SetConfig+0xf4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10c      	bne.n	8001fd0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	4393      	bics	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	4393      	bics	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a18      	ldr	r2, [pc, #96]	; (8002034 <TIM_OC1_SetConfig+0xec>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <TIM_OC1_SetConfig+0xa0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a17      	ldr	r2, [pc, #92]	; (8002038 <TIM_OC1_SetConfig+0xf0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <TIM_OC1_SetConfig+0xa0>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a16      	ldr	r2, [pc, #88]	; (800203c <TIM_OC1_SetConfig+0xf4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d111      	bne.n	800200c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4a15      	ldr	r2, [pc, #84]	; (8002040 <TIM_OC1_SetConfig+0xf8>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4a14      	ldr	r2, [pc, #80]	; (8002044 <TIM_OC1_SetConfig+0xfc>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	621a      	str	r2, [r3, #32]
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b006      	add	sp, #24
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	fffeff8f 	.word	0xfffeff8f
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40014400 	.word	0x40014400
 800203c:	40014800 	.word	0x40014800
 8002040:	fffffeff 	.word	0xfffffeff
 8002044:	fffffdff 	.word	0xfffffdff

08002048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	2210      	movs	r2, #16
 800205e:	4393      	bics	r3, r2
 8002060:	001a      	movs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a2c      	ldr	r2, [pc, #176]	; (8002128 <TIM_OC2_SetConfig+0xe0>)
 8002076:	4013      	ands	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a2b      	ldr	r2, [pc, #172]	; (800212c <TIM_OC2_SetConfig+0xe4>)
 800207e:	4013      	ands	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2220      	movs	r2, #32
 8002092:	4393      	bics	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a22      	ldr	r2, [pc, #136]	; (8002130 <TIM_OC2_SetConfig+0xe8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10d      	bne.n	80020c6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	4393      	bics	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2240      	movs	r2, #64	; 0x40
 80020c2:	4393      	bics	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <TIM_OC2_SetConfig+0xe8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <TIM_OC2_SetConfig+0x96>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a18      	ldr	r2, [pc, #96]	; (8002134 <TIM_OC2_SetConfig+0xec>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <TIM_OC2_SetConfig+0x96>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a17      	ldr	r2, [pc, #92]	; (8002138 <TIM_OC2_SetConfig+0xf0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d113      	bne.n	8002106 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4a16      	ldr	r2, [pc, #88]	; (800213c <TIM_OC2_SetConfig+0xf4>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4a15      	ldr	r2, [pc, #84]	; (8002140 <TIM_OC2_SetConfig+0xf8>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	621a      	str	r2, [r3, #32]
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b006      	add	sp, #24
 8002126:	bd80      	pop	{r7, pc}
 8002128:	feff8fff 	.word	0xfeff8fff
 800212c:	fffffcff 	.word	0xfffffcff
 8002130:	40012c00 	.word	0x40012c00
 8002134:	40014400 	.word	0x40014400
 8002138:	40014800 	.word	0x40014800
 800213c:	fffffbff 	.word	0xfffffbff
 8002140:	fffff7ff 	.word	0xfffff7ff

08002144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a31      	ldr	r2, [pc, #196]	; (8002220 <TIM_OC3_SetConfig+0xdc>)
 800215a:	401a      	ands	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4a2d      	ldr	r2, [pc, #180]	; (8002224 <TIM_OC3_SetConfig+0xe0>)
 8002170:	4013      	ands	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2203      	movs	r2, #3
 8002178:	4393      	bics	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <TIM_OC3_SetConfig+0xe4>)
 800218a:	4013      	ands	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a23      	ldr	r2, [pc, #140]	; (800222c <TIM_OC3_SetConfig+0xe8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10d      	bne.n	80021be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <TIM_OC3_SetConfig+0xec>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <TIM_OC3_SetConfig+0xf0>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a1a      	ldr	r2, [pc, #104]	; (800222c <TIM_OC3_SetConfig+0xe8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d007      	beq.n	80021d6 <TIM_OC3_SetConfig+0x92>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <TIM_OC3_SetConfig+0xf4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d003      	beq.n	80021d6 <TIM_OC3_SetConfig+0x92>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <TIM_OC3_SetConfig+0xf8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d113      	bne.n	80021fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <TIM_OC3_SetConfig+0xfc>)
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4a18      	ldr	r2, [pc, #96]	; (8002244 <TIM_OC3_SetConfig+0x100>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	621a      	str	r2, [r3, #32]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b006      	add	sp, #24
 800221e:	bd80      	pop	{r7, pc}
 8002220:	fffffeff 	.word	0xfffffeff
 8002224:	fffeff8f 	.word	0xfffeff8f
 8002228:	fffffdff 	.word	0xfffffdff
 800222c:	40012c00 	.word	0x40012c00
 8002230:	fffff7ff 	.word	0xfffff7ff
 8002234:	fffffbff 	.word	0xfffffbff
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800
 8002240:	ffffefff 	.word	0xffffefff
 8002244:	ffffdfff 	.word	0xffffdfff

08002248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <TIM_OC4_SetConfig+0xa8>)
 800225e:	401a      	ands	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <TIM_OC4_SetConfig+0xac>)
 8002274:	4013      	ands	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <TIM_OC4_SetConfig+0xb0>)
 800227c:	4013      	ands	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <TIM_OC4_SetConfig+0xb4>)
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	031b      	lsls	r3, r3, #12
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a17      	ldr	r2, [pc, #92]	; (8002300 <TIM_OC4_SetConfig+0xb8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d007      	beq.n	80022b8 <TIM_OC4_SetConfig+0x70>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a16      	ldr	r2, [pc, #88]	; (8002304 <TIM_OC4_SetConfig+0xbc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d003      	beq.n	80022b8 <TIM_OC4_SetConfig+0x70>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <TIM_OC4_SetConfig+0xc0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d109      	bne.n	80022cc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4a14      	ldr	r2, [pc, #80]	; (800230c <TIM_OC4_SetConfig+0xc4>)
 80022bc:	4013      	ands	r3, r2
 80022be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	019b      	lsls	r3, r3, #6
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	621a      	str	r2, [r3, #32]
}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b006      	add	sp, #24
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	ffffefff 	.word	0xffffefff
 80022f4:	feff8fff 	.word	0xfeff8fff
 80022f8:	fffffcff 	.word	0xfffffcff
 80022fc:	ffffdfff 	.word	0xffffdfff
 8002300:	40012c00 	.word	0x40012c00
 8002304:	40014400 	.word	0x40014400
 8002308:	40014800 	.word	0x40014800
 800230c:	ffffbfff 	.word	0xffffbfff

08002310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a21      	ldr	r2, [pc, #132]	; (80023ac <TIM_OC5_SetConfig+0x9c>)
 8002326:	401a      	ands	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a1d      	ldr	r2, [pc, #116]	; (80023b0 <TIM_OC5_SetConfig+0xa0>)
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <TIM_OC5_SetConfig+0xa4>)
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <TIM_OC5_SetConfig+0xa8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <TIM_OC5_SetConfig+0x66>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <TIM_OC5_SetConfig+0xac>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d003      	beq.n	8002376 <TIM_OC5_SetConfig+0x66>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <TIM_OC5_SetConfig+0xb0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d109      	bne.n	800238a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <TIM_OC5_SetConfig+0x9c>)
 800237a:	4013      	ands	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	621a      	str	r2, [r3, #32]
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b006      	add	sp, #24
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	fffeffff 	.word	0xfffeffff
 80023b0:	fffeff8f 	.word	0xfffeff8f
 80023b4:	fffdffff 	.word	0xfffdffff
 80023b8:	40012c00 	.word	0x40012c00
 80023bc:	40014400 	.word	0x40014400
 80023c0:	40014800 	.word	0x40014800

080023c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a22      	ldr	r2, [pc, #136]	; (8002464 <TIM_OC6_SetConfig+0xa0>)
 80023da:	401a      	ands	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <TIM_OC6_SetConfig+0xa4>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4a1a      	ldr	r2, [pc, #104]	; (800246c <TIM_OC6_SetConfig+0xa8>)
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	051b      	lsls	r3, r3, #20
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a16      	ldr	r2, [pc, #88]	; (8002470 <TIM_OC6_SetConfig+0xac>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <TIM_OC6_SetConfig+0x68>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a15      	ldr	r2, [pc, #84]	; (8002474 <TIM_OC6_SetConfig+0xb0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d003      	beq.n	800242c <TIM_OC6_SetConfig+0x68>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a14      	ldr	r2, [pc, #80]	; (8002478 <TIM_OC6_SetConfig+0xb4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d109      	bne.n	8002440 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	4a13      	ldr	r2, [pc, #76]	; (800247c <TIM_OC6_SetConfig+0xb8>)
 8002430:	4013      	ands	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	029b      	lsls	r3, r3, #10
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	621a      	str	r2, [r3, #32]
}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b006      	add	sp, #24
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	ffefffff 	.word	0xffefffff
 8002468:	feff8fff 	.word	0xfeff8fff
 800246c:	ffdfffff 	.word	0xffdfffff
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40014400 	.word	0x40014400
 8002478:	40014800 	.word	0x40014800
 800247c:	fffbffff 	.word	0xfffbffff

08002480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	223c      	movs	r2, #60	; 0x3c
 800248e:	5c9b      	ldrb	r3, [r3, r2]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002494:	2302      	movs	r3, #2
 8002496:	e04a      	b.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	223c      	movs	r2, #60	; 0x3c
 800249c:	2101      	movs	r1, #1
 800249e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	223d      	movs	r2, #61	; 0x3d
 80024a4:	2102      	movs	r1, #2
 80024a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d108      	bne.n	80024d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4a1d      	ldr	r2, [pc, #116]	; (800253c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2270      	movs	r2, #112	; 0x70
 80024d8:	4393      	bics	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a11      	ldr	r2, [pc, #68]	; (8002538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a10      	ldr	r2, [pc, #64]	; (8002540 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10c      	bne.n	800251c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2280      	movs	r2, #128	; 0x80
 8002506:	4393      	bics	r3, r2
 8002508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	4313      	orrs	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	223d      	movs	r2, #61	; 0x3d
 8002520:	2101      	movs	r1, #1
 8002522:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	223c      	movs	r2, #60	; 0x3c
 8002528:	2100      	movs	r1, #0
 800252a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b004      	add	sp, #16
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	40012c00 	.word	0x40012c00
 800253c:	ff0fffff 	.word	0xff0fffff
 8002540:	40000400 	.word	0x40000400

08002544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e046      	b.n	80025e4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2288      	movs	r2, #136	; 0x88
 800255a:	589b      	ldr	r3, [r3, r2]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d107      	bne.n	8002570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2284      	movs	r2, #132	; 0x84
 8002564:	2100      	movs	r1, #0
 8002566:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0018      	movs	r0, r3
 800256c:	f7fe f96e 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2288      	movs	r2, #136	; 0x88
 8002574:	2124      	movs	r1, #36	; 0x24
 8002576:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2101      	movs	r1, #1
 8002584:	438a      	bics	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	0018      	movs	r0, r3
 8002594:	f000 f996 	bl	80028c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f000 f828 	bl	80025f0 <UART_SetConfig>
 80025a0:	0003      	movs	r3, r0
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e01c      	b.n	80025e4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	490d      	ldr	r1, [pc, #52]	; (80025ec <HAL_UART_Init+0xa8>)
 80025b6:	400a      	ands	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	212a      	movs	r1, #42	; 0x2a
 80025c6:	438a      	bics	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 fa25 	bl	8002a2c <UART_CheckIdleState>
 80025e2:	0003      	movs	r3, r0
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b002      	add	sp, #8
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	ffffb7ff 	.word	0xffffb7ff

080025f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025f8:	231a      	movs	r3, #26
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	4313      	orrs	r3, r2
 8002616:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4aa1      	ldr	r2, [pc, #644]	; (80028a4 <UART_SetConfig+0x2b4>)
 8002620:	4013      	ands	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	430a      	orrs	r2, r1
 800262c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a9c      	ldr	r2, [pc, #624]	; (80028a8 <UART_SetConfig+0x2b8>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	4313      	orrs	r3, r2
 8002654:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a93      	ldr	r2, [pc, #588]	; (80028ac <UART_SetConfig+0x2bc>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	220f      	movs	r2, #15
 8002674:	4393      	bics	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a89      	ldr	r2, [pc, #548]	; (80028b0 <UART_SetConfig+0x2c0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d127      	bne.n	80026de <UART_SetConfig+0xee>
 800268e:	4b89      	ldr	r3, [pc, #548]	; (80028b4 <UART_SetConfig+0x2c4>)
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	2203      	movs	r2, #3
 8002694:	4013      	ands	r3, r2
 8002696:	2b03      	cmp	r3, #3
 8002698:	d017      	beq.n	80026ca <UART_SetConfig+0xda>
 800269a:	d81b      	bhi.n	80026d4 <UART_SetConfig+0xe4>
 800269c:	2b02      	cmp	r3, #2
 800269e:	d00a      	beq.n	80026b6 <UART_SetConfig+0xc6>
 80026a0:	d818      	bhi.n	80026d4 <UART_SetConfig+0xe4>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <UART_SetConfig+0xbc>
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d00a      	beq.n	80026c0 <UART_SetConfig+0xd0>
 80026aa:	e013      	b.n	80026d4 <UART_SetConfig+0xe4>
 80026ac:	231b      	movs	r3, #27
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	e021      	b.n	80026fa <UART_SetConfig+0x10a>
 80026b6:	231b      	movs	r3, #27
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2202      	movs	r2, #2
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	e01c      	b.n	80026fa <UART_SetConfig+0x10a>
 80026c0:	231b      	movs	r3, #27
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2204      	movs	r2, #4
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e017      	b.n	80026fa <UART_SetConfig+0x10a>
 80026ca:	231b      	movs	r3, #27
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	2208      	movs	r2, #8
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e012      	b.n	80026fa <UART_SetConfig+0x10a>
 80026d4:	231b      	movs	r3, #27
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2210      	movs	r2, #16
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	e00d      	b.n	80026fa <UART_SetConfig+0x10a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a75      	ldr	r2, [pc, #468]	; (80028b8 <UART_SetConfig+0x2c8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d104      	bne.n	80026f2 <UART_SetConfig+0x102>
 80026e8:	231b      	movs	r3, #27
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e003      	b.n	80026fa <UART_SetConfig+0x10a>
 80026f2:	231b      	movs	r3, #27
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2210      	movs	r2, #16
 80026f8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	429a      	cmp	r2, r3
 8002704:	d000      	beq.n	8002708 <UART_SetConfig+0x118>
 8002706:	e065      	b.n	80027d4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002708:	231b      	movs	r3, #27
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d015      	beq.n	800273e <UART_SetConfig+0x14e>
 8002712:	dc18      	bgt.n	8002746 <UART_SetConfig+0x156>
 8002714:	2b04      	cmp	r3, #4
 8002716:	d00d      	beq.n	8002734 <UART_SetConfig+0x144>
 8002718:	dc15      	bgt.n	8002746 <UART_SetConfig+0x156>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <UART_SetConfig+0x134>
 800271e:	2b02      	cmp	r3, #2
 8002720:	d005      	beq.n	800272e <UART_SetConfig+0x13e>
 8002722:	e010      	b.n	8002746 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002724:	f7ff f902 	bl	800192c <HAL_RCC_GetPCLK1Freq>
 8002728:	0003      	movs	r3, r0
 800272a:	617b      	str	r3, [r7, #20]
        break;
 800272c:	e012      	b.n	8002754 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <UART_SetConfig+0x2cc>)
 8002730:	617b      	str	r3, [r7, #20]
        break;
 8002732:	e00f      	b.n	8002754 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002734:	f7ff f86e 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 8002738:	0003      	movs	r3, r0
 800273a:	617b      	str	r3, [r7, #20]
        break;
 800273c:	e00a      	b.n	8002754 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	617b      	str	r3, [r7, #20]
        break;
 8002744:	e006      	b.n	8002754 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800274a:	231a      	movs	r3, #26
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
        break;
 8002752:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d100      	bne.n	800275c <UART_SetConfig+0x16c>
 800275a:	e08d      	b.n	8002878 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002760:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <UART_SetConfig+0x2d0>)
 8002762:	0052      	lsls	r2, r2, #1
 8002764:	5ad3      	ldrh	r3, [r2, r3]
 8002766:	0019      	movs	r1, r3
 8002768:	6978      	ldr	r0, [r7, #20]
 800276a:	f7fd fcc9 	bl	8000100 <__udivsi3>
 800276e:	0003      	movs	r3, r0
 8002770:	005a      	lsls	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	18d2      	adds	r2, r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0019      	movs	r1, r3
 8002780:	0010      	movs	r0, r2
 8002782:	f7fd fcbd 	bl	8000100 <__udivsi3>
 8002786:	0003      	movs	r3, r0
 8002788:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d91c      	bls.n	80027ca <UART_SetConfig+0x1da>
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	025b      	lsls	r3, r3, #9
 8002796:	429a      	cmp	r2, r3
 8002798:	d217      	bcs.n	80027ca <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	b29a      	uxth	r2, r3
 800279e:	200e      	movs	r0, #14
 80027a0:	183b      	adds	r3, r7, r0
 80027a2:	210f      	movs	r1, #15
 80027a4:	438a      	bics	r2, r1
 80027a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2207      	movs	r2, #7
 80027b0:	4013      	ands	r3, r2
 80027b2:	b299      	uxth	r1, r3
 80027b4:	183b      	adds	r3, r7, r0
 80027b6:	183a      	adds	r2, r7, r0
 80027b8:	8812      	ldrh	r2, [r2, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	183a      	adds	r2, r7, r0
 80027c4:	8812      	ldrh	r2, [r2, #0]
 80027c6:	60da      	str	r2, [r3, #12]
 80027c8:	e056      	b.n	8002878 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80027ca:	231a      	movs	r3, #26
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	e051      	b.n	8002878 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027d4:	231b      	movs	r3, #27
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d015      	beq.n	800280a <UART_SetConfig+0x21a>
 80027de:	dc18      	bgt.n	8002812 <UART_SetConfig+0x222>
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d00d      	beq.n	8002800 <UART_SetConfig+0x210>
 80027e4:	dc15      	bgt.n	8002812 <UART_SetConfig+0x222>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <UART_SetConfig+0x200>
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d005      	beq.n	80027fa <UART_SetConfig+0x20a>
 80027ee:	e010      	b.n	8002812 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027f0:	f7ff f89c 	bl	800192c <HAL_RCC_GetPCLK1Freq>
 80027f4:	0003      	movs	r3, r0
 80027f6:	617b      	str	r3, [r7, #20]
        break;
 80027f8:	e012      	b.n	8002820 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027fa:	4b30      	ldr	r3, [pc, #192]	; (80028bc <UART_SetConfig+0x2cc>)
 80027fc:	617b      	str	r3, [r7, #20]
        break;
 80027fe:	e00f      	b.n	8002820 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002800:	f7ff f808 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 8002804:	0003      	movs	r3, r0
 8002806:	617b      	str	r3, [r7, #20]
        break;
 8002808:	e00a      	b.n	8002820 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	617b      	str	r3, [r7, #20]
        break;
 8002810:	e006      	b.n	8002820 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002816:	231a      	movs	r3, #26
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
        break;
 800281e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d028      	beq.n	8002878 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282a:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <UART_SetConfig+0x2d0>)
 800282c:	0052      	lsls	r2, r2, #1
 800282e:	5ad3      	ldrh	r3, [r2, r3]
 8002830:	0019      	movs	r1, r3
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7fd fc64 	bl	8000100 <__udivsi3>
 8002838:	0003      	movs	r3, r0
 800283a:	001a      	movs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	18d2      	adds	r2, r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0019      	movs	r1, r3
 800284a:	0010      	movs	r0, r2
 800284c:	f7fd fc58 	bl	8000100 <__udivsi3>
 8002850:	0003      	movs	r3, r0
 8002852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	2b0f      	cmp	r3, #15
 8002858:	d90a      	bls.n	8002870 <UART_SetConfig+0x280>
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	025b      	lsls	r3, r3, #9
 8002860:	429a      	cmp	r2, r3
 8002862:	d205      	bcs.n	8002870 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	b29a      	uxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	e003      	b.n	8002878 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002870:	231a      	movs	r3, #26
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	226a      	movs	r2, #106	; 0x6a
 800287c:	2101      	movs	r1, #1
 800287e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2268      	movs	r2, #104	; 0x68
 8002884:	2101      	movs	r1, #1
 8002886:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002894:	231a      	movs	r3, #26
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	781b      	ldrb	r3, [r3, #0]
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b008      	add	sp, #32
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	cfff69f3 	.word	0xcfff69f3
 80028a8:	ffffcfff 	.word	0xffffcfff
 80028ac:	11fff4ff 	.word	0x11fff4ff
 80028b0:	40013800 	.word	0x40013800
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40004400 	.word	0x40004400
 80028bc:	00f42400 	.word	0x00f42400
 80028c0:	08003084 	.word	0x08003084

080028c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	2208      	movs	r2, #8
 80028d2:	4013      	ands	r3, r2
 80028d4:	d00b      	beq.n	80028ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a4a      	ldr	r2, [pc, #296]	; (8002a08 <UART_AdvFeatureConfig+0x144>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	2201      	movs	r2, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	d00b      	beq.n	8002910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4a43      	ldr	r2, [pc, #268]	; (8002a0c <UART_AdvFeatureConfig+0x148>)
 8002900:	4013      	ands	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	2202      	movs	r2, #2
 8002916:	4013      	ands	r3, r2
 8002918:	d00b      	beq.n	8002932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a3b      	ldr	r2, [pc, #236]	; (8002a10 <UART_AdvFeatureConfig+0x14c>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	2204      	movs	r2, #4
 8002938:	4013      	ands	r3, r2
 800293a:	d00b      	beq.n	8002954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a34      	ldr	r2, [pc, #208]	; (8002a14 <UART_AdvFeatureConfig+0x150>)
 8002944:	4013      	ands	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	2210      	movs	r2, #16
 800295a:	4013      	ands	r3, r2
 800295c:	d00b      	beq.n	8002976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a2c      	ldr	r2, [pc, #176]	; (8002a18 <UART_AdvFeatureConfig+0x154>)
 8002966:	4013      	ands	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	2220      	movs	r2, #32
 800297c:	4013      	ands	r3, r2
 800297e:	d00b      	beq.n	8002998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <UART_AdvFeatureConfig+0x158>)
 8002988:	4013      	ands	r3, r2
 800298a:	0019      	movs	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	2240      	movs	r2, #64	; 0x40
 800299e:	4013      	ands	r3, r2
 80029a0:	d01d      	beq.n	80029de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <UART_AdvFeatureConfig+0x15c>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	035b      	lsls	r3, r3, #13
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d10b      	bne.n	80029de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <UART_AdvFeatureConfig+0x160>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	4013      	ands	r3, r2
 80029e6:	d00b      	beq.n	8002a00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <UART_AdvFeatureConfig+0x164>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]
  }
}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b002      	add	sp, #8
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	ffff7fff 	.word	0xffff7fff
 8002a0c:	fffdffff 	.word	0xfffdffff
 8002a10:	fffeffff 	.word	0xfffeffff
 8002a14:	fffbffff 	.word	0xfffbffff
 8002a18:	ffffefff 	.word	0xffffefff
 8002a1c:	ffffdfff 	.word	0xffffdfff
 8002a20:	ffefffff 	.word	0xffefffff
 8002a24:	ff9fffff 	.word	0xff9fffff
 8002a28:	fff7ffff 	.word	0xfff7ffff

08002a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b092      	sub	sp, #72	; 0x48
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2290      	movs	r2, #144	; 0x90
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a3c:	f7fe f864 	bl	8000b08 <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d12d      	bne.n	8002aae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	0391      	lsls	r1, r2, #14
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4a47      	ldr	r2, [pc, #284]	; (8002b78 <UART_CheckIdleState+0x14c>)
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f000 f88e 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002a64:	1e03      	subs	r3, r0, #0
 8002a66:	d022      	beq.n	8002aae <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a68:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002a70:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a72:	2301      	movs	r3, #1
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	f383 8810 	msr	PRIMASK, r3
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	438a      	bics	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2288      	movs	r2, #136	; 0x88
 8002a9e:	2120      	movs	r1, #32
 8002aa0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2284      	movs	r2, #132	; 0x84
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e060      	b.n	8002b70 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d146      	bne.n	8002b4a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	03d1      	lsls	r1, r2, #15
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4a2c      	ldr	r2, [pc, #176]	; (8002b78 <UART_CheckIdleState+0x14c>)
 8002ac6:	9200      	str	r2, [sp, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f000 f859 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002ace:	1e03      	subs	r3, r0, #0
 8002ad0:	d03b      	beq.n	8002b4a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
 8002adc:	2301      	movs	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f383 8810 	msr	PRIMASK, r3
}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4922      	ldr	r1, [pc, #136]	; (8002b7c <UART_CheckIdleState+0x150>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f383 8810 	msr	PRIMASK, r3
}
 8002b02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b04:	f3ef 8310 	mrs	r3, PRIMASK
 8002b08:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b0a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f383 8810 	msr	PRIMASK, r3
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2101      	movs	r1, #1
 8002b26:	438a      	bics	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f383 8810 	msr	PRIMASK, r3
}
 8002b34:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	228c      	movs	r2, #140	; 0x8c
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2284      	movs	r2, #132	; 0x84
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e012      	b.n	8002b70 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2288      	movs	r2, #136	; 0x88
 8002b4e:	2120      	movs	r1, #32
 8002b50:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	228c      	movs	r2, #140	; 0x8c
 8002b56:	2120      	movs	r1, #32
 8002b58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2284      	movs	r2, #132	; 0x84
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b010      	add	sp, #64	; 0x40
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	01ffffff 	.word	0x01ffffff
 8002b7c:	fffffedf 	.word	0xfffffedf

08002b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b90:	e051      	b.n	8002c36 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	3301      	adds	r3, #1
 8002b96:	d04e      	beq.n	8002c36 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b98:	f7fd ffb6 	bl	8000b08 <HAL_GetTick>
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d302      	bcc.n	8002bae <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e051      	b.n	8002c56 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2204      	movs	r2, #4
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d03b      	beq.n	8002c36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d038      	beq.n	8002c36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d035      	beq.n	8002c36 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d111      	bne.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2208      	movs	r2, #8
 8002bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 f83c 	bl	8002c60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2290      	movs	r2, #144	; 0x90
 8002bec:	2108      	movs	r1, #8
 8002bee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2284      	movs	r2, #132	; 0x84
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e02c      	b.n	8002c56 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69da      	ldr	r2, [r3, #28]
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	401a      	ands	r2, r3
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d112      	bne.n	8002c36 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f000 f81f 	bl	8002c60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2290      	movs	r2, #144	; 0x90
 8002c26:	2120      	movs	r1, #32
 8002c28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2284      	movs	r2, #132	; 0x84
 8002c2e:	2100      	movs	r1, #0
 8002c30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e00f      	b.n	8002c56 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	425a      	negs	r2, r3
 8002c46:	4153      	adcs	r3, r2
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d09e      	beq.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b004      	add	sp, #16
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08e      	sub	sp, #56	; 0x38
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c68:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6c:	617b      	str	r3, [r7, #20]
  return(result);
 8002c6e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
 8002c72:	2301      	movs	r3, #1
 8002c74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f383 8810 	msr	PRIMASK, r3
}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4926      	ldr	r1, [pc, #152]	; (8002d24 <UART_EndRxTransfer+0xc4>)
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f383 8810 	msr	PRIMASK, r3
}
 8002c98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9e:	623b      	str	r3, [r7, #32]
  return(result);
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	f383 8810 	msr	PRIMASK, r3
}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	491b      	ldr	r1, [pc, #108]	; (8002d28 <UART_EndRxTransfer+0xc8>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	f383 8810 	msr	PRIMASK, r3
}
 8002cca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d118      	bne.n	8002d06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cda:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cde:	2301      	movs	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f383 8810 	msr	PRIMASK, r3
}
 8002ce8:	46c0      	nop			; (mov r8, r8)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2110      	movs	r1, #16
 8002cf6:	438a      	bics	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f383 8810 	msr	PRIMASK, r3
}
 8002d04:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	228c      	movs	r2, #140	; 0x8c
 8002d0a:	2120      	movs	r1, #32
 8002d0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b00e      	add	sp, #56	; 0x38
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	fffffedf 	.word	0xfffffedf
 8002d28:	effffffe 	.word	0xeffffffe

08002d2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2284      	movs	r2, #132	; 0x84
 8002d38:	5c9b      	ldrb	r3, [r3, r2]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_UARTEx_DisableFifoMode+0x16>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e027      	b.n	8002d92 <HAL_UARTEx_DisableFifoMode+0x66>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2284      	movs	r2, #132	; 0x84
 8002d46:	2101      	movs	r1, #1
 8002d48:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2288      	movs	r2, #136	; 0x88
 8002d4e:	2124      	movs	r1, #36	; 0x24
 8002d50:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	438a      	bics	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <HAL_UARTEx_DisableFifoMode+0x70>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2288      	movs	r2, #136	; 0x88
 8002d84:	2120      	movs	r1, #32
 8002d86:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2284      	movs	r2, #132	; 0x84
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	dfffffff 	.word	0xdfffffff

08002da0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2284      	movs	r2, #132	; 0x84
 8002dae:	5c9b      	ldrb	r3, [r3, r2]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e02e      	b.n	8002e16 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2284      	movs	r2, #132	; 0x84
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2288      	movs	r2, #136	; 0x88
 8002dc4:	2124      	movs	r1, #36	; 0x24
 8002dc6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	438a      	bics	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	08d9      	lsrs	r1, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 f854 	bl	8002ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2288      	movs	r2, #136	; 0x88
 8002e08:	2120      	movs	r1, #32
 8002e0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2284      	movs	r2, #132	; 0x84
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b004      	add	sp, #16
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2284      	movs	r2, #132	; 0x84
 8002e2e:	5c9b      	ldrb	r3, [r3, r2]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e02f      	b.n	8002e98 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2284      	movs	r2, #132	; 0x84
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2288      	movs	r2, #136	; 0x88
 8002e44:	2124      	movs	r1, #36	; 0x24
 8002e46:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	438a      	bics	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 f813 	bl	8002ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2288      	movs	r2, #136	; 0x88
 8002e8a:	2120      	movs	r1, #32
 8002e8c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2284      	movs	r2, #132	; 0x84
 8002e92:	2100      	movs	r1, #0
 8002e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b004      	add	sp, #16
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	f1ffffff 	.word	0xf1ffffff

08002ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d108      	bne.n	8002ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	226a      	movs	r2, #106	; 0x6a
 8002eb8:	2101      	movs	r1, #1
 8002eba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2268      	movs	r2, #104	; 0x68
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ec4:	e043      	b.n	8002f4e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002ec6:	260f      	movs	r6, #15
 8002ec8:	19bb      	adds	r3, r7, r6
 8002eca:	2208      	movs	r2, #8
 8002ecc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002ece:	200e      	movs	r0, #14
 8002ed0:	183b      	adds	r3, r7, r0
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	0e5b      	lsrs	r3, r3, #25
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	240d      	movs	r4, #13
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	2107      	movs	r1, #7
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	0f5b      	lsrs	r3, r3, #29
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	250c      	movs	r5, #12
 8002ef6:	197b      	adds	r3, r7, r5
 8002ef8:	2107      	movs	r1, #7
 8002efa:	400a      	ands	r2, r1
 8002efc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002efe:	183b      	adds	r3, r7, r0
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	197a      	adds	r2, r7, r5
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	4914      	ldr	r1, [pc, #80]	; (8002f58 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f08:	5c8a      	ldrb	r2, [r1, r2]
 8002f0a:	435a      	muls	r2, r3
 8002f0c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002f0e:	197b      	adds	r3, r7, r5
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <UARTEx_SetNbDataToProcess+0xb8>)
 8002f14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f16:	0019      	movs	r1, r3
 8002f18:	f7fd f97c 	bl	8000214 <__divsi3>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	b299      	uxth	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	226a      	movs	r2, #106	; 0x6a
 8002f24:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f26:	19bb      	adds	r3, r7, r6
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	193a      	adds	r2, r7, r4
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	490a      	ldr	r1, [pc, #40]	; (8002f58 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f30:	5c8a      	ldrb	r2, [r1, r2]
 8002f32:	435a      	muls	r2, r3
 8002f34:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f36:	193b      	adds	r3, r7, r4
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <UARTEx_SetNbDataToProcess+0xb8>)
 8002f3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f3e:	0019      	movs	r1, r3
 8002f40:	f7fd f968 	bl	8000214 <__divsi3>
 8002f44:	0003      	movs	r3, r0
 8002f46:	b299      	uxth	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2268      	movs	r2, #104	; 0x68
 8002f4c:	5299      	strh	r1, [r3, r2]
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b005      	add	sp, #20
 8002f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	0800309c 	.word	0x0800309c
 8002f5c:	080030a4 	.word	0x080030a4

08002f60 <__libc_init_array>:
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	2600      	movs	r6, #0
 8002f64:	4d0c      	ldr	r5, [pc, #48]	; (8002f98 <__libc_init_array+0x38>)
 8002f66:	4c0d      	ldr	r4, [pc, #52]	; (8002f9c <__libc_init_array+0x3c>)
 8002f68:	1b64      	subs	r4, r4, r5
 8002f6a:	10a4      	asrs	r4, r4, #2
 8002f6c:	42a6      	cmp	r6, r4
 8002f6e:	d109      	bne.n	8002f84 <__libc_init_array+0x24>
 8002f70:	2600      	movs	r6, #0
 8002f72:	f000 f821 	bl	8002fb8 <_init>
 8002f76:	4d0a      	ldr	r5, [pc, #40]	; (8002fa0 <__libc_init_array+0x40>)
 8002f78:	4c0a      	ldr	r4, [pc, #40]	; (8002fa4 <__libc_init_array+0x44>)
 8002f7a:	1b64      	subs	r4, r4, r5
 8002f7c:	10a4      	asrs	r4, r4, #2
 8002f7e:	42a6      	cmp	r6, r4
 8002f80:	d105      	bne.n	8002f8e <__libc_init_array+0x2e>
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
 8002f84:	00b3      	lsls	r3, r6, #2
 8002f86:	58eb      	ldr	r3, [r5, r3]
 8002f88:	4798      	blx	r3
 8002f8a:	3601      	adds	r6, #1
 8002f8c:	e7ee      	b.n	8002f6c <__libc_init_array+0xc>
 8002f8e:	00b3      	lsls	r3, r6, #2
 8002f90:	58eb      	ldr	r3, [r5, r3]
 8002f92:	4798      	blx	r3
 8002f94:	3601      	adds	r6, #1
 8002f96:	e7f2      	b.n	8002f7e <__libc_init_array+0x1e>
 8002f98:	080030ac 	.word	0x080030ac
 8002f9c:	080030ac 	.word	0x080030ac
 8002fa0:	080030ac 	.word	0x080030ac
 8002fa4:	080030b0 	.word	0x080030b0

08002fa8 <memset>:
 8002fa8:	0003      	movs	r3, r0
 8002faa:	1882      	adds	r2, r0, r2
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <memset+0xa>
 8002fb0:	4770      	bx	lr
 8002fb2:	7019      	strb	r1, [r3, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	e7f9      	b.n	8002fac <memset+0x4>

08002fb8 <_init>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr

08002fc4 <_fini>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr
