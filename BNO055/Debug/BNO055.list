
BNO055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006080  08006080  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006080  08006080  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006080  08006080  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006080  08006080  00016080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000114  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000190  20000190  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d90a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de0  00000000  00000000  0002d9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  0002f798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a60  00000000  00000000  000302c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd6b  00000000  00000000  00030d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e53f  00000000  00000000  0004ca8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e92b  00000000  00000000  0005afca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f98f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003904  00000000  00000000  000f9948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d50 	.word	0x08005d50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005d50 	.word	0x08005d50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	2007      	movs	r0, #7
 8000a6c:	f000 fa02 	bl	8000e74 <bno055_writeData>
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4619      	mov	r1, r3
 8000a86:	203d      	movs	r0, #61	; 0x3d
 8000a88:	f000 f9f4 	bl	8000e74 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d103      	bne.n	8000a9a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000a92:	2013      	movs	r0, #19
 8000a94:	f000 f9e2 	bl	8000e5c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000a98:	e002      	b.n	8000aa0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 f9de 	bl	8000e5c <bno055_delay>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ffe3 	bl	8000a78 <bno055_setOperationMode>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000aba:	200c      	movs	r0, #12
 8000abc:	f7ff ffdc 	bl	8000a78 <bno055_setOperationMode>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000ac8:	2120      	movs	r1, #32
 8000aca:	203f      	movs	r0, #63	; 0x3f
 8000acc:	f000 f9d2 	bl	8000e74 <bno055_writeData>
  bno055_delay(700);
 8000ad0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000ad4:	f000 f9c2 	bl	8000e5c <bno055_delay>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  bno055_reset();
 8000ae2:	f7ff ffef 	bl	8000ac4 <bno055_reset>

  uint8_t id = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 faab 	bl	800104c <bno055_readData>
  if (id != BNO055_ID) {
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2ba0      	cmp	r3, #160	; 0xa0
 8000afa:	d004      	beq.n	8000b06 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <bno055_setup+0x4c>)
 8000b02:	f003 fe69 	bl	80047d8 <iprintf>
  }
  bno055_setPage(0);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff ffa8 	bl	8000a5c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	203f      	movs	r0, #63	; 0x3f
 8000b10:	f000 f9b0 	bl	8000e74 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000b14:	f7ff ffc8 	bl	8000aa8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f000 f99f 	bl	8000e5c <bno055_delay>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08005d68 	.word	0x08005d68

08000b2c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000b2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b30:	b09e      	sub	sp, #120	; 0x78
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ff8e 	bl	8000a5c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b44:	2b20      	cmp	r3, #32
 8000b46:	d108      	bne.n	8000b5a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000b48:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b50:	2208      	movs	r2, #8
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fa7a 	bl	800104c <bno055_readData>
 8000b58:	e007      	b.n	8000b6a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000b5a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b62:	2206      	movs	r2, #6
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fa71 	bl	800104c <bno055_readData>

  double scale = 1;
 8000b6a:	f04f 0200 	mov.w	r2, #0
 8000b6e:	4b8b      	ldr	r3, [pc, #556]	; (8000d9c <bno055_getVector+0x270>)
 8000b70:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b78:	2b0e      	cmp	r3, #14
 8000b7a:	d109      	bne.n	8000b90 <bno055_getVector+0x64>
    scale = magScale;
 8000b7c:	4b88      	ldr	r3, [pc, #544]	; (8000da0 <bno055_getVector+0x274>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fcb7 	bl	80004f4 <__aeabi_ui2d>
 8000b86:	4602      	mov	r2, r0
 8000b88:	460b      	mov	r3, r1
 8000b8a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000b8e:	e03e      	b.n	8000c0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d007      	beq.n	8000ba8 <bno055_getVector+0x7c>
 8000b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b9c:	2b28      	cmp	r3, #40	; 0x28
 8000b9e:	d003      	beq.n	8000ba8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ba6:	d109      	bne.n	8000bbc <bno055_getVector+0x90>
    scale = accelScale;
 8000ba8:	4b7e      	ldr	r3, [pc, #504]	; (8000da4 <bno055_getVector+0x278>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fca1 	bl	80004f4 <__aeabi_ui2d>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000bba:	e028      	b.n	8000c0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bc0:	2b14      	cmp	r3, #20
 8000bc2:	d109      	bne.n	8000bd8 <bno055_getVector+0xac>
    scale = angularRateScale;
 8000bc4:	4b78      	ldr	r3, [pc, #480]	; (8000da8 <bno055_getVector+0x27c>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fc93 	bl	80004f4 <__aeabi_ui2d>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000bd6:	e01a      	b.n	8000c0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bdc:	2b1a      	cmp	r3, #26
 8000bde:	d109      	bne.n	8000bf4 <bno055_getVector+0xc8>
    scale = eulerScale;
 8000be0:	4b72      	ldr	r3, [pc, #456]	; (8000dac <bno055_getVector+0x280>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fc85 	bl	80004f4 <__aeabi_ui2d>
 8000bea:	4602      	mov	r2, r0
 8000bec:	460b      	mov	r3, r1
 8000bee:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000bf2:	e00c      	b.n	8000c0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	d108      	bne.n	8000c0e <bno055_getVector+0xe2>
    scale = quaScale;
 8000bfc:	4b6c      	ldr	r3, [pc, #432]	; (8000db0 <bno055_getVector+0x284>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fc77 	bl	80004f4 <__aeabi_ui2d>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c12:	2220      	movs	r2, #32
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fdd6 	bl	80047c8 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c20:	2b20      	cmp	r3, #32
 8000c22:	d150      	bne.n	8000cc6 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000c24:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000c28:	021b      	lsls	r3, r3, #8
 8000c2a:	b21a      	sxth	r2, r3
 8000c2c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc6c 	bl	8000514 <__aeabi_i2d>
 8000c3c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000c40:	f7ff fdfc 	bl	800083c <__aeabi_ddiv>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000c4c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc58 	bl	8000514 <__aeabi_i2d>
 8000c64:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000c68:	f7ff fde8 	bl	800083c <__aeabi_ddiv>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000c74:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc44 	bl	8000514 <__aeabi_i2d>
 8000c8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000c90:	f7ff fdd4 	bl	800083c <__aeabi_ddiv>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000c9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fc30 	bl	8000514 <__aeabi_i2d>
 8000cb4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000cb8:	f7ff fdc0 	bl	800083c <__aeabi_ddiv>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000cc4:	e03b      	b.n	8000d3e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000cc6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fc1b 	bl	8000514 <__aeabi_i2d>
 8000cde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000ce2:	f7ff fdab 	bl	800083c <__aeabi_ddiv>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	460b      	mov	r3, r1
 8000cea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000cee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fc07 	bl	8000514 <__aeabi_i2d>
 8000d06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000d0a:	f7ff fd97 	bl	800083c <__aeabi_ddiv>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000d16:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	b21a      	sxth	r2, r3
 8000d1e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fbf3 	bl	8000514 <__aeabi_i2d>
 8000d2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000d32:	f7ff fd83 	bl	800083c <__aeabi_ddiv>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8000d3e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000d42:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8000d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8000d56:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000d5a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000d5e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000d62:	ec49 8b14 	vmov	d4, r8, r9
 8000d66:	ec45 4b15 	vmov	d5, r4, r5
 8000d6a:	ec41 0b16 	vmov	d6, r0, r1
 8000d6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000d72:	eeb0 0a44 	vmov.f32	s0, s8
 8000d76:	eef0 0a64 	vmov.f32	s1, s9
 8000d7a:	eeb0 1a45 	vmov.f32	s2, s10
 8000d7e:	eef0 1a65 	vmov.f32	s3, s11
 8000d82:	eeb0 2a46 	vmov.f32	s4, s12
 8000d86:	eef0 2a66 	vmov.f32	s5, s13
 8000d8a:	eeb0 3a47 	vmov.f32	s6, s14
 8000d8e:	eef0 3a67 	vmov.f32	s7, s15
 8000d92:	3778      	adds	r7, #120	; 0x78
 8000d94:	46bd      	mov	sp, r7
 8000d96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000d9a:	bf00      	nop
 8000d9c:	3ff00000 	.word	0x3ff00000
 8000da0:	20000006 	.word	0x20000006
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000002 	.word	0x20000002
 8000dac:	20000004 	.word	0x20000004
 8000db0:	20000008 	.word	0x20000008

08000db4 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8000db4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000db8:	b090      	sub	sp, #64	; 0x40
 8000dba:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8000dbc:	201a      	movs	r0, #26
 8000dbe:	f7ff feb5 	bl	8000b2c <bno055_getVector>
 8000dc2:	eeb0 4a40 	vmov.f32	s8, s0
 8000dc6:	eef0 4a60 	vmov.f32	s9, s1
 8000dca:	eeb0 5a41 	vmov.f32	s10, s2
 8000dce:	eef0 5a61 	vmov.f32	s11, s3
 8000dd2:	eeb0 6a42 	vmov.f32	s12, s4
 8000dd6:	eef0 6a62 	vmov.f32	s13, s5
 8000dda:	eeb0 7a43 	vmov.f32	s14, s6
 8000dde:	eef0 7a63 	vmov.f32	s15, s7
 8000de2:	ed87 4b08 	vstr	d4, [r7, #32]
 8000de6:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000dea:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8000dee:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000df2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000df6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8000dfa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000dfe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000e02:	ec49 8b14 	vmov	d4, r8, r9
 8000e06:	ec45 4b15 	vmov	d5, r4, r5
 8000e0a:	ec41 0b16 	vmov	d6, r0, r1
 8000e0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e12:	eeb0 0a44 	vmov.f32	s0, s8
 8000e16:	eef0 0a64 	vmov.f32	s1, s9
 8000e1a:	eeb0 1a45 	vmov.f32	s2, s10
 8000e1e:	eef0 1a65 	vmov.f32	s3, s11
 8000e22:	eeb0 2a46 	vmov.f32	s4, s12
 8000e26:	eef0 2a66 	vmov.f32	s5, s13
 8000e2a:	eeb0 3a47 	vmov.f32	s6, s14
 8000e2e:	eef0 3a67 	vmov.f32	s7, s15
 8000e32:	3740      	adds	r7, #64	; 0x40
 8000e34:	46bd      	mov	sp, r7
 8000e36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000e3c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <bno055_assignI2C+0x1c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000098 	.word	0x20000098

08000e5c <bno055_delay>:

void bno055_delay(int time) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fc7e 	bl	8001768 <HAL_Delay>
#endif
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	733b      	strb	r3, [r7, #12]
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000e8c:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <bno055_writeData+0x184>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	f107 020c 	add.w	r2, r7, #12
 8000e94:	230a      	movs	r3, #10
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2302      	movs	r3, #2
 8000e9a:	2150      	movs	r1, #80	; 0x50
 8000e9c:	f000 ff70 	bl	8001d80 <HAL_I2C_Master_Transmit>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 80a0 	beq.w	8000fec <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d103      	bne.n	8000eba <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000eb2:	4852      	ldr	r0, [pc, #328]	; (8000ffc <bno055_writeData+0x188>)
 8000eb4:	f003 fd16 	bl	80048e4 <puts>
 8000eb8:	e012      	b.n	8000ee0 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d103      	bne.n	8000ec8 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000ec0:	484f      	ldr	r0, [pc, #316]	; (8001000 <bno055_writeData+0x18c>)
 8000ec2:	f003 fd0f 	bl	80048e4 <puts>
 8000ec6:	e00b      	b.n	8000ee0 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d103      	bne.n	8000ed6 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000ece:	484d      	ldr	r0, [pc, #308]	; (8001004 <bno055_writeData+0x190>)
 8000ed0:	f003 fd08 	bl	80048e4 <puts>
 8000ed4:	e004      	b.n	8000ee0 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	484b      	ldr	r0, [pc, #300]	; (8001008 <bno055_writeData+0x194>)
 8000edc:	f003 fc7c 	bl	80047d8 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000ee0:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <bno055_writeData+0x184>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 f943 	bl	8002170 <HAL_I2C_GetError>
 8000eea:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d07e      	beq.n	8000ff0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d103      	bne.n	8000f00 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000ef8:	4844      	ldr	r0, [pc, #272]	; (800100c <bno055_writeData+0x198>)
 8000efa:	f003 fcf3 	bl	80048e4 <puts>
 8000efe:	e021      	b.n	8000f44 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d103      	bne.n	8000f0e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000f06:	4842      	ldr	r0, [pc, #264]	; (8001010 <bno055_writeData+0x19c>)
 8000f08:	f003 fcec 	bl	80048e4 <puts>
 8000f0c:	e01a      	b.n	8000f44 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d103      	bne.n	8000f1c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000f14:	483f      	ldr	r0, [pc, #252]	; (8001014 <bno055_writeData+0x1a0>)
 8000f16:	f003 fce5 	bl	80048e4 <puts>
 8000f1a:	e013      	b.n	8000f44 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d103      	bne.n	8000f2a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000f22:	483d      	ldr	r0, [pc, #244]	; (8001018 <bno055_writeData+0x1a4>)
 8000f24:	f003 fcde 	bl	80048e4 <puts>
 8000f28:	e00c      	b.n	8000f44 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	2b10      	cmp	r3, #16
 8000f2e:	d103      	bne.n	8000f38 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000f30:	483a      	ldr	r0, [pc, #232]	; (800101c <bno055_writeData+0x1a8>)
 8000f32:	f003 fcd7 	bl	80048e4 <puts>
 8000f36:	e005      	b.n	8000f44 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	2b20      	cmp	r3, #32
 8000f3c:	d102      	bne.n	8000f44 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000f3e:	4838      	ldr	r0, [pc, #224]	; (8001020 <bno055_writeData+0x1ac>)
 8000f40:	f003 fcd0 	bl	80048e4 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <bno055_writeData+0x184>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 f903 	bl	8002154 <HAL_I2C_GetState>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d103      	bne.n	8000f60 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000f58:	4832      	ldr	r0, [pc, #200]	; (8001024 <bno055_writeData+0x1b0>)
 8000f5a:	f003 fcc3 	bl	80048e4 <puts>
 8000f5e:	e048      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b20      	cmp	r3, #32
 8000f64:	d103      	bne.n	8000f6e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000f66:	482f      	ldr	r0, [pc, #188]	; (8001024 <bno055_writeData+0x1b0>)
 8000f68:	f003 fcbc 	bl	80048e4 <puts>
 8000f6c:	e041      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b24      	cmp	r3, #36	; 0x24
 8000f72:	d103      	bne.n	8000f7c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000f74:	482c      	ldr	r0, [pc, #176]	; (8001028 <bno055_writeData+0x1b4>)
 8000f76:	f003 fcb5 	bl	80048e4 <puts>
 8000f7a:	e03a      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2b21      	cmp	r3, #33	; 0x21
 8000f80:	d103      	bne.n	8000f8a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000f82:	482a      	ldr	r0, [pc, #168]	; (800102c <bno055_writeData+0x1b8>)
 8000f84:	f003 fcae 	bl	80048e4 <puts>
 8000f88:	e033      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b22      	cmp	r3, #34	; 0x22
 8000f8e:	d103      	bne.n	8000f98 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000f90:	4827      	ldr	r0, [pc, #156]	; (8001030 <bno055_writeData+0x1bc>)
 8000f92:	f003 fca7 	bl	80048e4 <puts>
 8000f96:	e02c      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b28      	cmp	r3, #40	; 0x28
 8000f9c:	d103      	bne.n	8000fa6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000f9e:	4825      	ldr	r0, [pc, #148]	; (8001034 <bno055_writeData+0x1c0>)
 8000fa0:	f003 fca0 	bl	80048e4 <puts>
 8000fa4:	e025      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b29      	cmp	r3, #41	; 0x29
 8000faa:	d103      	bne.n	8000fb4 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000fac:	4822      	ldr	r0, [pc, #136]	; (8001038 <bno055_writeData+0x1c4>)
 8000fae:	f003 fc99 	bl	80048e4 <puts>
 8000fb2:	e01e      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8000fb8:	d103      	bne.n	8000fc2 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000fba:	4820      	ldr	r0, [pc, #128]	; (800103c <bno055_writeData+0x1c8>)
 8000fbc:	f003 fc92 	bl	80048e4 <puts>
 8000fc0:	e017      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	2b60      	cmp	r3, #96	; 0x60
 8000fc6:	d103      	bne.n	8000fd0 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000fc8:	481d      	ldr	r0, [pc, #116]	; (8001040 <bno055_writeData+0x1cc>)
 8000fca:	f003 fc8b 	bl	80048e4 <puts>
 8000fce:	e010      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2ba0      	cmp	r3, #160	; 0xa0
 8000fd4:	d103      	bne.n	8000fde <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <bno055_writeData+0x1d0>)
 8000fd8:	f003 fc84 	bl	80048e4 <puts>
 8000fdc:	e009      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2be0      	cmp	r3, #224	; 0xe0
 8000fe2:	d106      	bne.n	8000ff2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000fe4:	4818      	ldr	r0, [pc, #96]	; (8001048 <bno055_writeData+0x1d4>)
 8000fe6:	f003 fc7d 	bl	80048e4 <puts>
 8000fea:	e002      	b.n	8000ff2 <bno055_writeData+0x17e>
    return;
 8000fec:	bf00      	nop
 8000fee:	e000      	b.n	8000ff2 <bno055_writeData+0x17e>
    return;
 8000ff0:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000098 	.word	0x20000098
 8000ffc:	08005da4 	.word	0x08005da4
 8001000:	08005dc8 	.word	0x08005dc8
 8001004:	08005df0 	.word	0x08005df0
 8001008:	08005e14 	.word	0x08005e14
 800100c:	08005e2c 	.word	0x08005e2c
 8001010:	08005e40 	.word	0x08005e40
 8001014:	08005e54 	.word	0x08005e54
 8001018:	08005e68 	.word	0x08005e68
 800101c:	08005e7c 	.word	0x08005e7c
 8001020:	08005e90 	.word	0x08005e90
 8001024:	08005ea8 	.word	0x08005ea8
 8001028:	08005ec0 	.word	0x08005ec0
 800102c:	08005ed4 	.word	0x08005ed4
 8001030:	08005eec 	.word	0x08005eec
 8001034:	08005f04 	.word	0x08005f04
 8001038:	08005f1c 	.word	0x08005f1c
 800103c:	08005f3c 	.word	0x08005f3c
 8001040:	08005f5c 	.word	0x08005f5c
 8001044:	08005f74 	.word	0x08005f74
 8001048:	08005f8c 	.word	0x08005f8c

0800104c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <bno055_readData+0x40>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	1dfa      	adds	r2, r7, #7
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	2150      	movs	r1, #80	; 0x50
 800106a:	f000 fe89 	bl	8001d80 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <bno055_readData+0x40>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	b29b      	uxth	r3, r3
 8001076:	2264      	movs	r2, #100	; 0x64
 8001078:	9200      	str	r2, [sp, #0]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	2150      	movs	r1, #80	; 0x50
 800107e:	f000 ff73 	bl	8001f68 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000098 	.word	0x20000098

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <main+0xa8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fc28 	bl	80048f4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a4:	f000 fafa 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a8:	f000 f852 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ac:	f000 f912 	bl	80012d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010b0:	f000 f8e0 	bl	8001274 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010b4:	f000 f89e 	bl	80011f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 80010b8:	4820      	ldr	r0, [pc, #128]	; (800113c <main+0xac>)
 80010ba:	f7ff febf 	bl	8000e3c <bno055_assignI2C>
  bno055_setup();
 80010be:	f7ff fd0d 	bl	8000adc <bno055_setup>
  bno055_setOperationModeNDOF();
 80010c2:	f7ff fcf8 	bl	8000ab6 <bno055_setOperationModeNDOF>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buf[8];
  int i = 1234567;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <main+0xb0>)
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

	  bno055_vector_t v = bno055_getVectorEuler();
 80010ca:	f7ff fe73 	bl	8000db4 <bno055_getVectorEuler>
 80010ce:	eeb0 4a40 	vmov.f32	s8, s0
 80010d2:	eef0 4a60 	vmov.f32	s9, s1
 80010d6:	eeb0 5a41 	vmov.f32	s10, s2
 80010da:	eef0 5a61 	vmov.f32	s11, s3
 80010de:	eeb0 6a42 	vmov.f32	s12, s4
 80010e2:	eef0 6a62 	vmov.f32	s13, s5
 80010e6:	eeb0 7a43 	vmov.f32	s14, s6
 80010ea:	eef0 7a63 	vmov.f32	s15, s7
 80010ee:	ed87 4b00 	vstr	d4, [r7]
 80010f2:	ed87 5b02 	vstr	d5, [r7, #8]
 80010f6:	ed87 6b04 	vstr	d6, [r7, #16]
 80010fa:	ed87 7b06 	vstr	d7, [r7, #24]
	  i = (int)v.x;
 80010fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff fc81 	bl	8000a0c <__aeabi_d2iz>
 800110a:	4603      	mov	r3, r0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  snprintf(buf, 8, "%d", i);
 800110e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <main+0xb4>)
 8001116:	2108      	movs	r1, #8
 8001118:	f003 fcba 	bl	8004a90 <sniprintf>
	  printf("%s",buf);
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	4809      	ldr	r0, [pc, #36]	; (8001148 <main+0xb8>)
 8001124:	f003 fb58 	bl	80047d8 <iprintf>
	  printf("\r\n");
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <main+0xbc>)
 800112a:	f003 fbdb 	bl	80048e4 <puts>
	  HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f000 fb1a 	bl	8001768 <HAL_Delay>
  {
 8001134:	e7c9      	b.n	80010ca <main+0x3a>
 8001136:	bf00      	nop
 8001138:	20000018 	.word	0x20000018
 800113c:	2000009c 	.word	0x2000009c
 8001140:	0012d687 	.word	0x0012d687
 8001144:	08005fa4 	.word	0x08005fa4
 8001148:	08005fa8 	.word	0x08005fa8
 800114c:	08005fac 	.word	0x08005fac

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b096      	sub	sp, #88	; 0x58
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800115a:	2228      	movs	r2, #40	; 0x28
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fb32 	bl	80047c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001184:	2302      	movs	r3, #2
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118c:	2310      	movs	r3, #16
 800118e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fb1f 	bl	80027dc <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011a4:	f000 f8da 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fb48 	bl	8003858 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011ce:	f000 f8c5 	bl	800135c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011d2:	2320      	movs	r3, #32
 80011d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fd71 	bl	8003cc4 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011e8:	f000 f8b8 	bl	800135c <Error_Handler>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3758      	adds	r7, #88	; 0x58
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_I2C1_Init+0x74>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <MX_I2C1_Init+0x78>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_I2C1_Init+0x74>)
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <MX_I2C1_Init+0x7c>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_I2C1_Init+0x74>)
 800120c:	2201      	movs	r2, #1
 800120e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122e:	480e      	ldr	r0, [pc, #56]	; (8001268 <MX_I2C1_Init+0x74>)
 8001230:	f000 fd16 	bl	8001c60 <HAL_I2C_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800123a:	f000 f88f 	bl	800135c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <MX_I2C1_Init+0x74>)
 8001242:	f001 fa33 	bl	80026ac <HAL_I2CEx_ConfigAnalogFilter>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800124c:	f000 f886 	bl	800135c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001250:	2100      	movs	r1, #0
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_I2C1_Init+0x74>)
 8001254:	f001 fa75 	bl	8002742 <HAL_I2CEx_ConfigDigitalFilter>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800125e:	f000 f87d 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000009c 	.word	0x2000009c
 800126c:	40005400 	.word	0x40005400
 8001270:	2000090e 	.word	0x2000090e

08001274 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <MX_USART2_UART_Init+0x5c>)
 800127c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001280:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012b8:	f002 fe2a 	bl	8003f10 <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012c2:	f000 f84b 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200000f0 	.word	0x200000f0
 80012d0:	40004400 	.word	0x40004400

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_GPIO_Init+0x5c>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	4a14      	ldr	r2, [pc, #80]	; (8001330 <MX_GPIO_Init+0x5c>)
 80012e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e4:	6153      	str	r3, [r2, #20]
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_GPIO_Init+0x5c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_GPIO_Init+0x5c>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <MX_GPIO_Init+0x5c>)
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	6153      	str	r3, [r2, #20]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_GPIO_Init+0x5c>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_GPIO_Init+0x5c>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <MX_GPIO_Init+0x5c>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6153      	str	r3, [r2, #20]
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_GPIO_Init+0x5c>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	b29a      	uxth	r2, r3
 8001344:	230a      	movs	r3, #10
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <_write+0x24>)
 800134a:	f002 fe2f 	bl	8003fac <HAL_UART_Transmit>
  return len;
 800134e:	687b      	ldr	r3, [r7, #4]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200000f0 	.word	0x200000f0

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_MspInit+0x44>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_MspInit+0x44>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_MspInit+0x44>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_MspInit+0x44>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_MspInit+0x44>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_MspInit+0x44>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a17      	ldr	r2, [pc, #92]	; (800142c <HAL_I2C_MspInit+0x7c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d127      	bne.n	8001422 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_I2C_MspInit+0x80>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a16      	ldr	r2, [pc, #88]	; (8001430 <HAL_I2C_MspInit+0x80>)
 80013d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_I2C_MspInit+0x80>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ea:	23c0      	movs	r3, #192	; 0xc0
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ee:	2312      	movs	r3, #18
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013fa:	2304      	movs	r3, #4
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <HAL_I2C_MspInit+0x84>)
 8001406:	f000 fab9 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_I2C_MspInit+0x80>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_I2C_MspInit+0x80>)
 8001410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001414:	61d3      	str	r3, [r2, #28]
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_I2C_MspInit+0x80>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	; 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40005400 	.word	0x40005400
 8001430:	40021000 	.word	0x40021000
 8001434:	48000400 	.word	0x48000400

08001438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <HAL_UART_MspInit+0x80>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d129      	bne.n	80014ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_UART_MspInit+0x84>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <HAL_UART_MspInit+0x84>)
 8001460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_UART_MspInit+0x84>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_UART_MspInit+0x84>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_UART_MspInit+0x84>)
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	6153      	str	r3, [r2, #20]
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_UART_MspInit+0x84>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800148a:	f248 0304 	movw	r3, #32772	; 0x8004
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149c:	2307      	movs	r3, #7
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014aa:	f000 fa67 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40004400 	.word	0x40004400
 80014bc:	40021000 	.word	0x40021000

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150c:	f000 f90c 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e00a      	b.n	800153c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001526:	f3af 8000 	nop.w
 800152a:	4601      	mov	r1, r0
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	b2ca      	uxtb	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf0      	blt.n	8001526 <_read+0x12>
  }

  return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_close>:
  }
  return len;
}

int _close(int file)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001576:	605a      	str	r2, [r3, #4]
  return 0;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <_isatty>:

int _isatty(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f003 f8b6 	bl	8004758 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20003000 	.word	0x20003000
 8001618:	00000400 	.word	0x00000400
 800161c:	20000178 	.word	0x20000178
 8001620:	20000190 	.word	0x20000190

08001624 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800164c:	f7ff ffea 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <LoopForever+0x6>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	; (8001688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <LoopForever+0xe>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	; (8001694 <LoopForever+0x16>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f003 f875 	bl	8004764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167a:	f7ff fd09 	bl	8001090 <main>

0800167e <LoopForever>:

LoopForever:
    b LoopForever
 800167e:	e7fe      	b.n	800167e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001680:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800168c:	08006088 	.word	0x08006088
  ldr r2, =_sbss
 8001690:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001694:	20000190 	.word	0x20000190

08001698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>
	...

0800169c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x28>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x28>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f931 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fe56 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f93b 	bl	8001962 <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 f911 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000000c 	.word	0x2000000c
 8001720:	20000014 	.word	0x20000014
 8001724:	20000010 	.word	0x20000010

08001728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000014 	.word	0x20000014
 800174c:	2000017c 	.word	0x2000017c

08001750 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;  
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	2000017c 	.word	0x2000017c

08001768 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff ffee 	bl	8001750 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffde 	bl	8001750 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000014 	.word	0x20000014

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	; (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff47 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff5c 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff8e 	bl	8001868 <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5d 	bl	8001814 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffb0 	bl	80018d0 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	e14e      	b.n	8001c2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8140 	beq.w	8001c24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d005      	beq.n	80019bc <HAL_GPIO_Init+0x40>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d130      	bne.n	8001a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f2:	2201      	movs	r2, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	f003 0201 	and.w	r2, r3, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d017      	beq.n	8001a5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d123      	bne.n	8001aae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	08da      	lsrs	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3208      	adds	r2, #8
 8001aa8:	6939      	ldr	r1, [r7, #16]
 8001aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0203 	and.w	r2, r3, #3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 809a 	beq.w	8001c24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af0:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <HAL_GPIO_Init+0x2cc>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a54      	ldr	r2, [pc, #336]	; (8001c48 <HAL_GPIO_Init+0x2cc>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b52      	ldr	r3, [pc, #328]	; (8001c48 <HAL_GPIO_Init+0x2cc>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b08:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b32:	d013      	beq.n	8001b5c <HAL_GPIO_Init+0x1e0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a46      	ldr	r2, [pc, #280]	; (8001c50 <HAL_GPIO_Init+0x2d4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00d      	beq.n	8001b58 <HAL_GPIO_Init+0x1dc>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a45      	ldr	r2, [pc, #276]	; (8001c54 <HAL_GPIO_Init+0x2d8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d007      	beq.n	8001b54 <HAL_GPIO_Init+0x1d8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a44      	ldr	r2, [pc, #272]	; (8001c58 <HAL_GPIO_Init+0x2dc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_GPIO_Init+0x1d4>
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e006      	b.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b50:	2305      	movs	r3, #5
 8001b52:	e004      	b.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e002      	b.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	f002 0203 	and.w	r2, r2, #3
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	4093      	lsls	r3, r2
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b6e:	4937      	ldr	r1, [pc, #220]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7c:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ba0:	4a2e      	ldr	r2, [pc, #184]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bca:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3301      	adds	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f47f aea9 	bne.w	800198c <HAL_GPIO_Init+0x10>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000c00 	.word	0x48000c00
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e081      	b.n	8001d76 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fb92 	bl	80013b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2224      	movs	r2, #36	; 0x24
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	e006      	b.n	8001ce8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ce6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d104      	bne.n	8001cfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69d9      	ldr	r1, [r3, #28]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	817b      	strh	r3, [r7, #10]
 8001d90:	4613      	mov	r3, r2
 8001d92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	f040 80da 	bne.w	8001f56 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_I2C_Master_Transmit+0x30>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e0d3      	b.n	8001f58 <HAL_I2C_Master_Transmit+0x1d8>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001db8:	f7ff fcca 	bl	8001750 <HAL_GetTick>
 8001dbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2319      	movs	r3, #25
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fa00 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0be      	b.n	8001f58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2221      	movs	r2, #33	; 0x21
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2210      	movs	r2, #16
 8001de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	893a      	ldrh	r2, [r7, #8]
 8001dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2bff      	cmp	r3, #255	; 0xff
 8001e0a:	d90e      	bls.n	8001e2a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	22ff      	movs	r2, #255	; 0xff
 8001e10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	8979      	ldrh	r1, [r7, #10]
 8001e1a:	4b51      	ldr	r3, [pc, #324]	; (8001f60 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fc10 	bl	8002648 <I2C_TransferConfig>
 8001e28:	e06c      	b.n	8001f04 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	8979      	ldrh	r1, [r7, #10]
 8001e3c:	4b48      	ldr	r3, [pc, #288]	; (8001f60 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fbff 	bl	8002648 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e4a:	e05b      	b.n	8001f04 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	6a39      	ldr	r1, [r7, #32]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 fa0c 	bl	800226e <I2C_WaitOnTXISFlagUntilTimeout>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e07b      	b.n	8001f58 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d034      	beq.n	8001f04 <HAL_I2C_Master_Transmit+0x184>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d130      	bne.n	8001f04 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 f98f 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e04d      	b.n	8001f58 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2bff      	cmp	r3, #255	; 0xff
 8001ec4:	d90e      	bls.n	8001ee4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	22ff      	movs	r2, #255	; 0xff
 8001eca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	8979      	ldrh	r1, [r7, #10]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fbb3 	bl	8002648 <I2C_TransferConfig>
 8001ee2:	e00f      	b.n	8001f04 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	8979      	ldrh	r1, [r7, #10]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 fba2 	bl	8002648 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d19e      	bne.n	8001e4c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	6a39      	ldr	r1, [r7, #32]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f9f2 	bl	80022fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e01a      	b.n	8001f58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2220      	movs	r2, #32
 8001f28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_I2C_Master_Transmit+0x1e4>)
 8001f36:	400b      	ands	r3, r1
 8001f38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001f56:	2302      	movs	r3, #2
  }
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	80002000 	.word	0x80002000
 8001f64:	fe00e800 	.word	0xfe00e800

08001f68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	461a      	mov	r2, r3
 8001f74:	460b      	mov	r3, r1
 8001f76:	817b      	strh	r3, [r7, #10]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	f040 80db 	bne.w	8002140 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_I2C_Master_Receive+0x30>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e0d4      	b.n	8002142 <HAL_I2C_Master_Receive+0x1da>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fa0:	f7ff fbd6 	bl	8001750 <HAL_GetTick>
 8001fa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2319      	movs	r3, #25
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f90c 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0bf      	b.n	8002142 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2222      	movs	r2, #34	; 0x22
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2210      	movs	r2, #16
 8001fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	893a      	ldrh	r2, [r7, #8]
 8001fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2bff      	cmp	r3, #255	; 0xff
 8001ff2:	d90e      	bls.n	8002012 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	8979      	ldrh	r1, [r7, #10]
 8002002:	4b52      	ldr	r3, [pc, #328]	; (800214c <HAL_I2C_Master_Receive+0x1e4>)
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fb1c 	bl	8002648 <I2C_TransferConfig>
 8002010:	e06d      	b.n	80020ee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	b2da      	uxtb	r2, r3
 8002022:	8979      	ldrh	r1, [r7, #10]
 8002024:	4b49      	ldr	r3, [pc, #292]	; (800214c <HAL_I2C_Master_Receive+0x1e4>)
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fb0b 	bl	8002648 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002032:	e05c      	b.n	80020ee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	6a39      	ldr	r1, [r7, #32]
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 f9a3 	bl	8002384 <I2C_WaitOnRXNEFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e07c      	b.n	8002142 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d034      	beq.n	80020ee <HAL_I2C_Master_Receive+0x186>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	d130      	bne.n	80020ee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f89a 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e04d      	b.n	8002142 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2bff      	cmp	r3, #255	; 0xff
 80020ae:	d90e      	bls.n	80020ce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	22ff      	movs	r2, #255	; 0xff
 80020b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	8979      	ldrh	r1, [r7, #10]
 80020be:	2300      	movs	r3, #0
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 fabe 	bl	8002648 <I2C_TransferConfig>
 80020cc:	e00f      	b.n	80020ee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	8979      	ldrh	r1, [r7, #10]
 80020e0:	2300      	movs	r3, #0
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 faad 	bl	8002648 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d19d      	bne.n	8002034 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	6a39      	ldr	r1, [r7, #32]
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f8fd 	bl	80022fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e01a      	b.n	8002142 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2220      	movs	r2, #32
 8002112:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_I2C_Master_Receive+0x1e8>)
 8002120:	400b      	ands	r3, r1
 8002122:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	e000      	b.n	8002142 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002140:	2302      	movs	r3, #2
  }
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	80002400 	.word	0x80002400
 8002150:	fe00e800 	.word	0xfe00e800

08002154 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002162:	b2db      	uxtb	r3, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d103      	bne.n	80021a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d007      	beq.n	80021c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	619a      	str	r2, [r3, #24]
  }
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e0:	e031      	b.n	8002246 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d02d      	beq.n	8002246 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ea:	f7ff fab1 	bl	8001750 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d122      	bne.n	8002246 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	4013      	ands	r3, r2
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	429a      	cmp	r2, r3
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	429a      	cmp	r2, r3
 800221c:	d113      	bne.n	8002246 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f043 0220 	orr.w	r2, r3, #32
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4013      	ands	r3, r2
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	429a      	cmp	r2, r3
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	429a      	cmp	r2, r3
 8002262:	d0be      	beq.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800227a:	e033      	b.n	80022e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f901 	bl	8002488 <I2C_IsErrorOccurred>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e031      	b.n	80022f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002296:	d025      	beq.n	80022e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002298:	f7ff fa5a 	bl	8001750 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d302      	bcc.n	80022ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11a      	bne.n	80022e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d013      	beq.n	80022e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e007      	b.n	80022f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d1c4      	bne.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002308:	e02f      	b.n	800236a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f8ba 	bl	8002488 <I2C_IsErrorOccurred>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e02d      	b.n	800237a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231e:	f7ff fa17 	bl	8001750 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	d302      	bcc.n	8002334 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d11a      	bne.n	800236a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b20      	cmp	r3, #32
 8002340:	d013      	beq.n	800236a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f043 0220 	orr.w	r2, r3, #32
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e007      	b.n	800237a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b20      	cmp	r3, #32
 8002376:	d1c8      	bne.n	800230a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002390:	e06b      	b.n	800246a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f876 	bl	8002488 <I2C_IsErrorOccurred>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e069      	b.n	800247a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d138      	bne.n	8002426 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d105      	bne.n	80023ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e055      	b.n	800247a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b10      	cmp	r3, #16
 80023da:	d107      	bne.n	80023ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2210      	movs	r2, #16
 80023e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2204      	movs	r2, #4
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44
 80023ea:	e002      	b.n	80023f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2220      	movs	r2, #32
 80023f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002406:	400b      	ands	r3, r1
 8002408:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e029      	b.n	800247a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002426:	f7ff f993 	bl	8001750 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d116      	bne.n	800246a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b04      	cmp	r3, #4
 8002448:	d00f      	beq.n	800246a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f043 0220 	orr.w	r2, r3, #32
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e007      	b.n	800247a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b04      	cmp	r3, #4
 8002476:	d18c      	bne.n	8002392 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	fe00e800 	.word	0xfe00e800

08002488 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d068      	beq.n	8002586 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2210      	movs	r2, #16
 80024ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024bc:	e049      	b.n	8002552 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d045      	beq.n	8002552 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024c6:	f7ff f943 	bl	8001750 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d302      	bcc.n	80024dc <I2C_IsErrorOccurred+0x54>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d13a      	bne.n	8002552 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024fe:	d121      	bne.n	8002544 <I2C_IsErrorOccurred+0xbc>
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002506:	d01d      	beq.n	8002544 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b20      	cmp	r3, #32
 800250c:	d01a      	beq.n	8002544 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800251c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800251e:	f7ff f917 	bl	8001750 <HAL_GetTick>
 8002522:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002524:	e00e      	b.n	8002544 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002526:	f7ff f913 	bl	8001750 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b19      	cmp	r3, #25
 8002532:	d907      	bls.n	8002544 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002542:	e006      	b.n	8002552 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b20      	cmp	r3, #32
 8002550:	d1e9      	bne.n	8002526 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b20      	cmp	r3, #32
 800255e:	d003      	beq.n	8002568 <I2C_IsErrorOccurred+0xe0>
 8002560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0aa      	beq.n	80024be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2220      	movs	r2, #32
 8002576:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	f043 0304 	orr.w	r3, r3, #4
 800257e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00b      	beq.n	80025b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80025f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01c      	beq.n	8002636 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff fdc3 	bl	8002188 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <I2C_IsErrorOccurred+0x1bc>)
 800260e:	400b      	ands	r3, r1
 8002610:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	431a      	orrs	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800263a:	4618      	mov	r0, r3
 800263c:	3728      	adds	r7, #40	; 0x28
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	fe00e800 	.word	0xfe00e800

08002648 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	817b      	strh	r3, [r7, #10]
 8002656:	4613      	mov	r3, r2
 8002658:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002660:	7a7b      	ldrb	r3, [r7, #9]
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002668:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	4313      	orrs	r3, r2
 8002672:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002676:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	0d5b      	lsrs	r3, r3, #21
 8002682:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <I2C_TransferConfig+0x60>)
 8002688:	430b      	orrs	r3, r1
 800268a:	43db      	mvns	r3, r3
 800268c:	ea02 0103 	and.w	r1, r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	03ff63ff 	.word	0x03ff63ff

080026ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d138      	bne.n	8002734 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e032      	b.n	8002736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	; 0x24
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6819      	ldr	r1, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e000      	b.n	8002736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002734:	2302      	movs	r3, #2
  }
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b20      	cmp	r3, #32
 8002756:	d139      	bne.n	80027cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002762:	2302      	movs	r3, #2
 8002764:	e033      	b.n	80027ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2224      	movs	r2, #36	; 0x24
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0201 	bic.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002794:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f001 b823 	b.w	8003848 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 817d 	beq.w	8002b12 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002818:	4bbc      	ldr	r3, [pc, #752]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b04      	cmp	r3, #4
 8002822:	d00c      	beq.n	800283e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002824:	4bb9      	ldr	r3, [pc, #740]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d15c      	bne.n	80028ea <HAL_RCC_OscConfig+0x10e>
 8002830:	4bb6      	ldr	r3, [pc, #728]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d155      	bne.n	80028ea <HAL_RCC_OscConfig+0x10e>
 800283e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002842:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002852:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d102      	bne.n	8002870 <HAL_RCC_OscConfig+0x94>
 800286a:	4ba8      	ldr	r3, [pc, #672]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	e015      	b.n	800289c <HAL_RCC_OscConfig+0xc0>
 8002870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002874:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002888:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800288c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002898:	4b9c      	ldr	r3, [pc, #624]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028a0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80028a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80028a8:	fa92 f2a2 	rbit	r2, r2
 80028ac:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80028b0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80028b4:	fab2 f282 	clz	r2, r2
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	f042 0220 	orr.w	r2, r2, #32
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	f002 021f 	and.w	r2, r2, #31
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 811f 	beq.w	8002b10 <HAL_RCC_OscConfig+0x334>
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 8116 	bne.w	8002b10 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f000 bfaf 	b.w	8003848 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x12e>
 80028fc:	4b83      	ldr	r3, [pc, #524]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a82      	ldr	r2, [pc, #520]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e036      	b.n	8002978 <HAL_RCC_OscConfig+0x19c>
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x158>
 800291a:	4b7c      	ldr	r3, [pc, #496]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a7b      	ldr	r2, [pc, #492]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b79      	ldr	r3, [pc, #484]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a78      	ldr	r2, [pc, #480]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 800292c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e021      	b.n	8002978 <HAL_RCC_OscConfig+0x19c>
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x184>
 8002946:	4b71      	ldr	r3, [pc, #452]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a70      	ldr	r2, [pc, #448]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b6e      	ldr	r3, [pc, #440]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6d      	ldr	r2, [pc, #436]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0x19c>
 8002960:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a69      	ldr	r2, [pc, #420]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b67      	ldr	r3, [pc, #412]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a66      	ldr	r2, [pc, #408]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002976:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002978:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	f023 020f 	bic.w	r2, r3, #15
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	495f      	ldr	r1, [pc, #380]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 800298e:	4313      	orrs	r3, r2
 8002990:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d059      	beq.n	8002a56 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fed5 	bl	8001750 <HAL_GetTick>
 80029a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ac:	f7fe fed0 	bl	8001750 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b64      	cmp	r3, #100	; 0x64
 80029ba:	d902      	bls.n	80029c2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	f000 bf43 	b.w	8003848 <HAL_RCC_OscConfig+0x106c>
 80029c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80029d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_OscConfig+0x218>
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	e015      	b.n	8002a20 <HAL_RCC_OscConfig+0x244>
 80029f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a10:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002a1c:	4b3b      	ldr	r3, [pc, #236]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a24:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002a28:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a2c:	fa92 f2a2 	rbit	r2, r2
 8002a30:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002a34:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002a38:	fab2 f282 	clz	r2, r2
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	f042 0220 	orr.w	r2, r2, #32
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	f002 021f 	and.w	r2, r2, #31
 8002a48:	2101      	movs	r1, #1
 8002a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ab      	beq.n	80029ac <HAL_RCC_OscConfig+0x1d0>
 8002a54:	e05d      	b.n	8002b12 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fe7b 	bl	8001750 <HAL_GetTick>
 8002a5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7fe fe76 	bl	8001750 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d902      	bls.n	8002a76 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	f000 bee9 	b.w	8003848 <HAL_RCC_OscConfig+0x106c>
 8002a76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a7a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a8a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2cc>
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	e015      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2f8>
 8002aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ac0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ac4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <HAL_RCC_OscConfig+0x330>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ad8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002adc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ae8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002aec:	fab2 f282 	clz	r2, r2
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	f042 0220 	orr.w	r2, r2, #32
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f002 021f 	and.w	r2, r2, #31
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f202 	lsl.w	r2, r1, r2
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ab      	bne.n	8002a60 <HAL_RCC_OscConfig+0x284>
 8002b08:	e003      	b.n	8002b12 <HAL_RCC_OscConfig+0x336>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 817d 	beq.w	8002e22 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b28:	4ba6      	ldr	r3, [pc, #664]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b34:	4ba3      	ldr	r3, [pc, #652]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d172      	bne.n	8002c26 <HAL_RCC_OscConfig+0x44a>
 8002b40:	4ba0      	ldr	r3, [pc, #640]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d16c      	bne.n	8002c26 <HAL_RCC_OscConfig+0x44a>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002b5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_RCC_OscConfig+0x3a0>
 8002b76:	4b93      	ldr	r3, [pc, #588]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	e013      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3c8>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ba0:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002baa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002bae:	fa92 f2a2 	rbit	r2, r2
 8002bb2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002bb6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002bba:	fab2 f282 	clz	r2, r2
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f042 0220 	orr.w	r2, r2, #32
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f002 021f 	and.w	r2, r2, #31
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCC_OscConfig+0x410>
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	f000 be2e 	b.w	8003848 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b75      	ldr	r3, [pc, #468]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	21f8      	movs	r1, #248	; 0xf8
 8002c02:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c0a:	fa91 f1a1 	rbit	r1, r1
 8002c0e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002c12:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c16:	fab1 f181 	clz	r1, r1
 8002c1a:	b2c9      	uxtb	r1, r1
 8002c1c:	408b      	lsls	r3, r1
 8002c1e:	4969      	ldr	r1, [pc, #420]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c24:	e0fd      	b.n	8002e22 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8088 	beq.w	8002d48 <HAL_RCC_OscConfig+0x56c>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002c4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2301      	movs	r3, #1
 8002c62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe fd74 	bl	8001750 <HAL_GetTick>
 8002c68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6e:	f7fe fd6f 	bl	8001750 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d902      	bls.n	8002c84 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	f000 bde2 	b.w	8003848 <HAL_RCC_OscConfig+0x106c>
 8002c84:	2302      	movs	r3, #2
 8002c86:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d102      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4d8>
 8002cae:	4b45      	ldr	r3, [pc, #276]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	e013      	b.n	8002cdc <HAL_RCC_OscConfig+0x500>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ccc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002cd8:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ce2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ce6:	fa92 f2a2 	rbit	r2, r2
 8002cea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002cee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002cf2:	fab2 f282 	clz	r2, r2
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	f042 0220 	orr.w	r2, r2, #32
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	f002 021f 	and.w	r2, r2, #31
 8002d02:	2101      	movs	r1, #1
 8002d04:	fa01 f202 	lsl.w	r2, r1, r2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0af      	beq.n	8002c6e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	21f8      	movs	r1, #248	; 0xf8
 8002d24:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d2c:	fa91 f1a1 	rbit	r1, r1
 8002d30:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002d34:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002d38:	fab1 f181 	clz	r1, r1
 8002d3c:	b2c9      	uxtb	r1, r1
 8002d3e:	408b      	lsls	r3, r1
 8002d40:	4920      	ldr	r1, [pc, #128]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
 8002d46:	e06c      	b.n	8002e22 <HAL_RCC_OscConfig+0x646>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002d5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2300      	movs	r3, #0
 8002d72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fcec 	bl	8001750 <HAL_GetTick>
 8002d78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7fe fce7 	bl	8001750 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d902      	bls.n	8002d94 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	f000 bd5a 	b.w	8003848 <HAL_RCC_OscConfig+0x106c>
 8002d94:	2302      	movs	r3, #2
 8002d96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d104      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5ec>
 8002dbe:	4b01      	ldr	r3, [pc, #4]	; (8002dc4 <HAL_RCC_OscConfig+0x5e8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	e015      	b.n	8002df0 <HAL_RCC_OscConfig+0x614>
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	2302      	movs	r3, #2
 8002dca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002dda:	2302      	movs	r3, #2
 8002ddc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002de0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002dec:	4bc8      	ldr	r3, [pc, #800]	; (8003110 <HAL_RCC_OscConfig+0x934>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2202      	movs	r2, #2
 8002df2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002df6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002dfa:	fa92 f2a2 	rbit	r2, r2
 8002dfe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002e02:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e06:	fab2 f282 	clz	r2, r2
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	f042 0220 	orr.w	r2, r2, #32
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	f002 021f 	and.w	r2, r2, #31
 8002e16:	2101      	movs	r1, #1
 8002e18:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ad      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8110 	beq.w	8003058 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d079      	beq.n	8002f3c <HAL_RCC_OscConfig+0x760>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	4bab      	ldr	r3, [pc, #684]	; (8003114 <HAL_RCC_OscConfig+0x938>)
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2301      	movs	r3, #1
 8002e70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e72:	f7fe fc6d 	bl	8001750 <HAL_GetTick>
 8002e76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e7c:	f7fe fc68 	bl	8001750 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d902      	bls.n	8002e92 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	f000 bcdb 	b.w	8003848 <HAL_RCC_OscConfig+0x106c>
 8002e92:	2302      	movs	r3, #2
 8002e94:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002eac:	2202      	movs	r2, #2
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	fa93 f2a3 	rbit	r2, r3
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f2a3 	rbit	r2, r3
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002eea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eec:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x934>)
 8002eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ef8:	2102      	movs	r1, #2
 8002efa:	6019      	str	r1, [r3, #0]
 8002efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	fa93 f1a3 	rbit	r1, r3
 8002f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f12:	6019      	str	r1, [r3, #0]
  return result;
 8002f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f18:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2101      	movs	r1, #1
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0a0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x6a0>
 8002f3a:	e08d      	b.n	8003058 <HAL_RCC_OscConfig+0x87c>
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	fa93 f2a3 	rbit	r2, r3
 8002f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f5e:	601a      	str	r2, [r3, #0]
  return result;
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b68      	ldr	r3, [pc, #416]	; (8003114 <HAL_RCC_OscConfig+0x938>)
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fbe7 	bl	8001750 <HAL_GetTick>
 8002f82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f88:	f7fe fbe2 	bl	8001750 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d902      	bls.n	8002f9e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	f000 bc55 	b.w	8003848 <HAL_RCC_OscConfig+0x106c>
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fca:	2202      	movs	r2, #2
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	fa93 f2a3 	rbit	r2, r3
 8002fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002fee:	2202      	movs	r2, #2
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f2a3 	rbit	r2, r3
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003008:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300a:	4b41      	ldr	r3, [pc, #260]	; (8003110 <HAL_RCC_OscConfig+0x934>)
 800300c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800300e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003012:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003016:	2102      	movs	r1, #2
 8003018:	6019      	str	r1, [r3, #0]
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f1a3 	rbit	r1, r3
 8003028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003030:	6019      	str	r1, [r3, #0]
  return result;
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	2101      	movs	r1, #1
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d197      	bne.n	8002f88 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 81a1 	beq.w	80033b0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003074:	4b26      	ldr	r3, [pc, #152]	; (8003110 <HAL_RCC_OscConfig+0x934>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d116      	bne.n	80030ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	4b23      	ldr	r3, [pc, #140]	; (8003110 <HAL_RCC_OscConfig+0x934>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <HAL_RCC_OscConfig+0x934>)
 8003086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308a:	61d3      	str	r3, [r2, #28]
 800308c:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_RCC_OscConfig+0x934>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80030a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ae:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HAL_RCC_OscConfig+0x93c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d11a      	bne.n	80030f0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <HAL_RCC_OscConfig+0x93c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a16      	ldr	r2, [pc, #88]	; (8003118 <HAL_RCC_OscConfig+0x93c>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c6:	f7fe fb43 	bl	8001750 <HAL_GetTick>
 80030ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ce:	e009      	b.n	80030e4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d0:	f7fe fb3e 	bl	8001750 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b64      	cmp	r3, #100	; 0x64
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e3b1      	b.n	8003848 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <HAL_RCC_OscConfig+0x93c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ef      	beq.n	80030d0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10d      	bne.n	800311c <HAL_RCC_OscConfig+0x940>
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_RCC_OscConfig+0x934>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a02      	ldr	r2, [pc, #8]	; (8003110 <HAL_RCC_OscConfig+0x934>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6213      	str	r3, [r2, #32]
 800310c:	e03c      	b.n	8003188 <HAL_RCC_OscConfig+0x9ac>
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
 8003114:	10908120 	.word	0x10908120
 8003118:	40007000 	.word	0x40007000
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10c      	bne.n	8003146 <HAL_RCC_OscConfig+0x96a>
 800312c:	4bc1      	ldr	r3, [pc, #772]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4ac0      	ldr	r2, [pc, #768]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	6213      	str	r3, [r2, #32]
 8003138:	4bbe      	ldr	r3, [pc, #760]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4abd      	ldr	r2, [pc, #756]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 800313e:	f023 0304 	bic.w	r3, r3, #4
 8003142:	6213      	str	r3, [r2, #32]
 8003144:	e020      	b.n	8003188 <HAL_RCC_OscConfig+0x9ac>
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b05      	cmp	r3, #5
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x994>
 8003156:	4bb7      	ldr	r3, [pc, #732]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4ab6      	ldr	r2, [pc, #728]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 800315c:	f043 0304 	orr.w	r3, r3, #4
 8003160:	6213      	str	r3, [r2, #32]
 8003162:	4bb4      	ldr	r3, [pc, #720]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4ab3      	ldr	r2, [pc, #716]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6213      	str	r3, [r2, #32]
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0x9ac>
 8003170:	4bb0      	ldr	r3, [pc, #704]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4aaf      	ldr	r2, [pc, #700]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6213      	str	r3, [r2, #32]
 800317c:	4bad      	ldr	r3, [pc, #692]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4aac      	ldr	r2, [pc, #688]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 8003182:	f023 0304 	bic.w	r3, r3, #4
 8003186:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8081 	beq.w	800329c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fe fad9 	bl	8001750 <HAL_GetTick>
 800319e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	e00b      	b.n	80031bc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fe fad4 	bl	8001750 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e345      	b.n	8003848 <HAL_RCC_OscConfig+0x106c>
 80031bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031c4:	2202      	movs	r2, #2
 80031c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fa93 f2a3 	rbit	r2, r3
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031e8:	2202      	movs	r2, #2
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	fa93 f2a3 	rbit	r2, r3
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003202:	601a      	str	r2, [r3, #0]
  return result;
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800320c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d102      	bne.n	8003228 <HAL_RCC_OscConfig+0xa4c>
 8003222:	4b84      	ldr	r3, [pc, #528]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	e013      	b.n	8003250 <HAL_RCC_OscConfig+0xa74>
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003230:	2202      	movs	r2, #2
 8003232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	fa93 f2a3 	rbit	r2, r3
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	4b79      	ldr	r3, [pc, #484]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003254:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003258:	2102      	movs	r1, #2
 800325a:	6011      	str	r1, [r2, #0]
 800325c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003260:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	fa92 f1a2 	rbit	r1, r2
 800326a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800326e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003272:	6011      	str	r1, [r2, #0]
  return result;
 8003274:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003278:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	fab2 f282 	clz	r2, r2
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	f002 021f 	and.w	r2, r2, #31
 800328e:	2101      	movs	r1, #1
 8003290:	fa01 f202 	lsl.w	r2, r1, r2
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d084      	beq.n	80031a4 <HAL_RCC_OscConfig+0x9c8>
 800329a:	e07f      	b.n	800339c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7fe fa58 	bl	8001750 <HAL_GetTick>
 80032a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a4:	e00b      	b.n	80032be <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fe fa53 	bl	8001750 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e2c4      	b.n	8003848 <HAL_RCC_OscConfig+0x106c>
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80032c6:	2202      	movs	r2, #2
 80032c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	fa93 f2a3 	rbit	r2, r3
 80032d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032ea:	2202      	movs	r2, #2
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f2a3 	rbit	r2, r3
 80032fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003300:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003304:	601a      	str	r2, [r3, #0]
  return result;
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800330e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f043 0302 	orr.w	r3, r3, #2
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d102      	bne.n	800332a <HAL_RCC_OscConfig+0xb4e>
 8003324:	4b43      	ldr	r3, [pc, #268]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	e013      	b.n	8003352 <HAL_RCC_OscConfig+0xb76>
 800332a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003332:	2202      	movs	r2, #2
 8003334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	fa93 f2a3 	rbit	r2, r3
 8003344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003348:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	4b39      	ldr	r3, [pc, #228]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003356:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800335a:	2102      	movs	r1, #2
 800335c:	6011      	str	r1, [r2, #0]
 800335e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003362:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	fa92 f1a2 	rbit	r1, r2
 800336c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003370:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003374:	6011      	str	r1, [r2, #0]
  return result;
 8003376:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800337a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	fab2 f282 	clz	r2, r2
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	f002 021f 	and.w	r2, r2, #31
 8003390:	2101      	movs	r1, #1
 8003392:	fa01 f202 	lsl.w	r2, r1, r2
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d184      	bne.n	80032a6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800339c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d105      	bne.n	80033b0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a4:	4b23      	ldr	r3, [pc, #140]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	4a22      	ldr	r2, [pc, #136]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 80033aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8242 	beq.w	8003846 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c2:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <HAL_RCC_OscConfig+0xc58>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	f000 8213 	beq.w	80037f6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	f040 8162 	bne.w	80036a6 <HAL_RCC_OscConfig+0xeca>
 80033e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	fa93 f2a3 	rbit	r2, r3
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003406:	601a      	str	r2, [r3, #0]
  return result;
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003410:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800341c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	461a      	mov	r2, r3
 8003424:	2300      	movs	r3, #0
 8003426:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe f992 	bl	8001750 <HAL_GetTick>
 800342c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003430:	e00c      	b.n	800344c <HAL_RCC_OscConfig+0xc70>
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003438:	f7fe f98a 	bl	8001750 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e1fd      	b.n	8003848 <HAL_RCC_OscConfig+0x106c>
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	fa93 f2a3 	rbit	r2, r3
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003470:	601a      	str	r2, [r3, #0]
  return result;
 8003472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003476:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800347a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d102      	bne.n	8003496 <HAL_RCC_OscConfig+0xcba>
 8003490:	4bb0      	ldr	r3, [pc, #704]	; (8003754 <HAL_RCC_OscConfig+0xf78>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	e027      	b.n	80034e6 <HAL_RCC_OscConfig+0xd0a>
 8003496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800349e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	fa93 f2a3 	rbit	r2, r3
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80034c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	fa93 f2a3 	rbit	r2, r3
 80034d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	4b9c      	ldr	r3, [pc, #624]	; (8003754 <HAL_RCC_OscConfig+0xf78>)
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ea:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034f2:	6011      	str	r1, [r2, #0]
 80034f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034f8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	fa92 f1a2 	rbit	r1, r2
 8003502:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003506:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800350a:	6011      	str	r1, [r2, #0]
  return result;
 800350c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003510:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	fab2 f282 	clz	r2, r2
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f042 0220 	orr.w	r2, r2, #32
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	f002 021f 	and.w	r2, r2, #31
 8003526:	2101      	movs	r1, #1
 8003528:	fa01 f202 	lsl.w	r2, r1, r2
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d182      	bne.n	8003438 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003532:	4b88      	ldr	r3, [pc, #544]	; (8003754 <HAL_RCC_OscConfig+0xf78>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800353a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	430b      	orrs	r3, r1
 8003554:	497f      	ldr	r1, [pc, #508]	; (8003754 <HAL_RCC_OscConfig+0xf78>)
 8003556:	4313      	orrs	r3, r2
 8003558:	604b      	str	r3, [r1, #4]
 800355a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003562:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003566:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	fa93 f2a3 	rbit	r2, r3
 8003576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800357e:	601a      	str	r2, [r3, #0]
  return result;
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003588:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003594:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	461a      	mov	r2, r3
 800359c:	2301      	movs	r3, #1
 800359e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe f8d6 	bl	8001750 <HAL_GetTick>
 80035a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a8:	e009      	b.n	80035be <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fe f8d1 	bl	8001750 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e144      	b.n	8003848 <HAL_RCC_OscConfig+0x106c>
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80035c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	fa93 f2a3 	rbit	r2, r3
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035e2:	601a      	str	r2, [r3, #0]
  return result;
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d102      	bne.n	8003608 <HAL_RCC_OscConfig+0xe2c>
 8003602:	4b54      	ldr	r3, [pc, #336]	; (8003754 <HAL_RCC_OscConfig+0xf78>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	e027      	b.n	8003658 <HAL_RCC_OscConfig+0xe7c>
 8003608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	fa93 f2a3 	rbit	r2, r3
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003632:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003636:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	fa93 f2a3 	rbit	r2, r3
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	4b3f      	ldr	r3, [pc, #252]	; (8003754 <HAL_RCC_OscConfig+0xf78>)
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800365c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003660:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003664:	6011      	str	r1, [r2, #0]
 8003666:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800366a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	fa92 f1a2 	rbit	r1, r2
 8003674:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003678:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800367c:	6011      	str	r1, [r2, #0]
  return result;
 800367e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003682:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	fab2 f282 	clz	r2, r2
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	f042 0220 	orr.w	r2, r2, #32
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	f002 021f 	and.w	r2, r2, #31
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f202 	lsl.w	r2, r1, r2
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d082      	beq.n	80035aa <HAL_RCC_OscConfig+0xdce>
 80036a4:	e0cf      	b.n	8003846 <HAL_RCC_OscConfig+0x106a>
 80036a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036aa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80036ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	fa93 f2a3 	rbit	r2, r3
 80036c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036ca:	601a      	str	r2, [r3, #0]
  return result;
 80036cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	461a      	mov	r2, r3
 80036e8:	2300      	movs	r3, #0
 80036ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe f830 	bl	8001750 <HAL_GetTick>
 80036f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f4:	e009      	b.n	800370a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fe f82b 	bl	8001750 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e09e      	b.n	8003848 <HAL_RCC_OscConfig+0x106c>
 800370a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	fa93 f2a3 	rbit	r2, r3
 8003726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800372e:	601a      	str	r2, [r3, #0]
  return result;
 8003730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003734:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003738:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d104      	bne.n	8003758 <HAL_RCC_OscConfig+0xf7c>
 800374e:	4b01      	ldr	r3, [pc, #4]	; (8003754 <HAL_RCC_OscConfig+0xf78>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	e029      	b.n	80037a8 <HAL_RCC_OscConfig+0xfcc>
 8003754:	40021000 	.word	0x40021000
 8003758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	fa93 f2a3 	rbit	r2, r3
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003782:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003790:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	fa93 f2a3 	rbit	r2, r3
 800379a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <HAL_RCC_OscConfig+0x1078>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ac:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80037b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037b4:	6011      	str	r1, [r2, #0]
 80037b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ba:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	fa92 f1a2 	rbit	r1, r2
 80037c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037c8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037cc:	6011      	str	r1, [r2, #0]
  return result;
 80037ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037d2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	fab2 f282 	clz	r2, r2
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	f042 0220 	orr.w	r2, r2, #32
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	f002 021f 	and.w	r2, r2, #31
 80037e8:	2101      	movs	r1, #1
 80037ea:	fa01 f202 	lsl.w	r2, r1, r2
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d180      	bne.n	80036f6 <HAL_RCC_OscConfig+0xf1a>
 80037f4:	e027      	b.n	8003846 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e01e      	b.n	8003848 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCC_OscConfig+0x1078>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003812:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003816:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	429a      	cmp	r2, r3
 8003828:	d10b      	bne.n	8003842 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800382a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800382e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000

08003858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b09e      	sub	sp, #120	; 0x78
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e162      	b.n	8003b36 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003870:	4b90      	ldr	r3, [pc, #576]	; (8003ab4 <HAL_RCC_ClockConfig+0x25c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d910      	bls.n	80038a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b8d      	ldr	r3, [pc, #564]	; (8003ab4 <HAL_RCC_ClockConfig+0x25c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 0207 	bic.w	r2, r3, #7
 8003886:	498b      	ldr	r1, [pc, #556]	; (8003ab4 <HAL_RCC_ClockConfig+0x25c>)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b89      	ldr	r3, [pc, #548]	; (8003ab4 <HAL_RCC_ClockConfig+0x25c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e14a      	b.n	8003b36 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	4b82      	ldr	r3, [pc, #520]	; (8003ab8 <HAL_RCC_ClockConfig+0x260>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	497f      	ldr	r1, [pc, #508]	; (8003ab8 <HAL_RCC_ClockConfig+0x260>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80dc 	beq.w	8003a84 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d13c      	bne.n	800394e <HAL_RCC_ClockConfig+0xf6>
 80038d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038dc:	fa93 f3a3 	rbit	r3, r3
 80038e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d102      	bne.n	80038fe <HAL_RCC_ClockConfig+0xa6>
 80038f8:	4b6f      	ldr	r3, [pc, #444]	; (8003ab8 <HAL_RCC_ClockConfig+0x260>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	e00f      	b.n	800391e <HAL_RCC_ClockConfig+0xc6>
 80038fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003902:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	667b      	str	r3, [r7, #100]	; 0x64
 800390c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003910:	663b      	str	r3, [r7, #96]	; 0x60
 8003912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800391a:	4b67      	ldr	r3, [pc, #412]	; (8003ab8 <HAL_RCC_ClockConfig+0x260>)
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003922:	65ba      	str	r2, [r7, #88]	; 0x58
 8003924:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003926:	fa92 f2a2 	rbit	r2, r2
 800392a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800392c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800392e:	fab2 f282 	clz	r2, r2
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	f042 0220 	orr.w	r2, r2, #32
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	f002 021f 	and.w	r2, r2, #31
 800393e:	2101      	movs	r1, #1
 8003940:	fa01 f202 	lsl.w	r2, r1, r2
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d17b      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0f3      	b.n	8003b36 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d13c      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x178>
 8003956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800395a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003966:	fab3 f383 	clz	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d102      	bne.n	8003980 <HAL_RCC_ClockConfig+0x128>
 800397a:	4b4f      	ldr	r3, [pc, #316]	; (8003ab8 <HAL_RCC_ClockConfig+0x260>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	e00f      	b.n	80039a0 <HAL_RCC_ClockConfig+0x148>
 8003980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003984:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003988:	fa93 f3a3 	rbit	r3, r3
 800398c:	647b      	str	r3, [r7, #68]	; 0x44
 800398e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003992:	643b      	str	r3, [r7, #64]	; 0x40
 8003994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800399c:	4b46      	ldr	r3, [pc, #280]	; (8003ab8 <HAL_RCC_ClockConfig+0x260>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80039a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039a8:	fa92 f2a2 	rbit	r2, r2
 80039ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80039ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b0:	fab2 f282 	clz	r2, r2
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	f042 0220 	orr.w	r2, r2, #32
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	f002 021f 	and.w	r2, r2, #31
 80039c0:	2101      	movs	r1, #1
 80039c2:	fa01 f202 	lsl.w	r2, r1, r2
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d13a      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0b2      	b.n	8003b36 <HAL_RCC_ClockConfig+0x2de>
 80039d0:	2302      	movs	r3, #2
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	fa93 f3a3 	rbit	r3, r3
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d102      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x1a0>
 80039f2:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <HAL_RCC_ClockConfig+0x260>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	e00d      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1bc>
 80039f8:	2302      	movs	r3, #2
 80039fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
 8003a04:	2302      	movs	r3, #2
 8003a06:	623b      	str	r3, [r7, #32]
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	4b29      	ldr	r3, [pc, #164]	; (8003ab8 <HAL_RCC_ClockConfig+0x260>)
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	2202      	movs	r2, #2
 8003a16:	61ba      	str	r2, [r7, #24]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	fa92 f2a2 	rbit	r2, r2
 8003a1e:	617a      	str	r2, [r7, #20]
  return result;
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	fab2 f282 	clz	r2, r2
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	f042 0220 	orr.w	r2, r2, #32
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	f002 021f 	and.w	r2, r2, #31
 8003a32:	2101      	movs	r1, #1
 8003a34:	fa01 f202 	lsl.w	r2, r1, r2
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e079      	b.n	8003b36 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_RCC_ClockConfig+0x260>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f023 0203 	bic.w	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	491a      	ldr	r1, [pc, #104]	; (8003ab8 <HAL_RCC_ClockConfig+0x260>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a54:	f7fd fe7c 	bl	8001750 <HAL_GetTick>
 8003a58:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a5c:	f7fd fe78 	bl	8001750 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e061      	b.n	8003b36 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <HAL_RCC_ClockConfig+0x260>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 020c 	and.w	r2, r3, #12
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d1eb      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCC_ClockConfig+0x25c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d214      	bcs.n	8003abc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_RCC_ClockConfig+0x25c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 0207 	bic.w	r2, r3, #7
 8003a9a:	4906      	ldr	r1, [pc, #24]	; (8003ab4 <HAL_RCC_ClockConfig+0x25c>)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <HAL_RCC_ClockConfig+0x25c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e040      	b.n	8003b36 <HAL_RCC_ClockConfig+0x2de>
 8003ab4:	40022000 	.word	0x40022000
 8003ab8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCC_ClockConfig+0x2e8>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	491a      	ldr	r1, [pc, #104]	; (8003b40 <HAL_RCC_ClockConfig+0x2e8>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae6:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <HAL_RCC_ClockConfig+0x2e8>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4912      	ldr	r1, [pc, #72]	; (8003b40 <HAL_RCC_ClockConfig+0x2e8>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003afa:	f000 f829 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8003afe:	4601      	mov	r1, r0
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <HAL_RCC_ClockConfig+0x2e8>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b08:	22f0      	movs	r2, #240	; 0xf0
 8003b0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	fa92 f2a2 	rbit	r2, r2
 8003b12:	60fa      	str	r2, [r7, #12]
  return result;
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	fab2 f282 	clz	r2, r2
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	40d3      	lsrs	r3, r2
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <HAL_RCC_ClockConfig+0x2ec>)
 8003b20:	5cd3      	ldrb	r3, [r2, r3]
 8003b22:	fa21 f303 	lsr.w	r3, r1, r3
 8003b26:	4a08      	ldr	r2, [pc, #32]	; (8003b48 <HAL_RCC_ClockConfig+0x2f0>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <HAL_RCC_ClockConfig+0x2f4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fdca 	bl	80016c8 <HAL_InitTick>
  
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3778      	adds	r7, #120	; 0x78
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	08005fb0 	.word	0x08005fb0
 8003b48:	2000000c 	.word	0x2000000c
 8003b4c:	20000010 	.word	0x20000010

08003b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b08b      	sub	sp, #44	; 0x2c
 8003b54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d002      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x30>
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCC_GetSysClockFreq+0x36>
 8003b7e:	e03c      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b80:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b82:	623b      	str	r3, [r7, #32]
      break;
 8003b84:	e03c      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b8c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b90:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	fa92 f2a2 	rbit	r2, r2
 8003b98:	607a      	str	r2, [r7, #4]
  return result;
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	fab2 f282 	clz	r2, r2
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	40d3      	lsrs	r3, r2
 8003ba4:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ba6:	5cd3      	ldrb	r3, [r2, r3]
 8003ba8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003baa:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	220f      	movs	r2, #15
 8003bb4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	fa92 f2a2 	rbit	r2, r2
 8003bbc:	60fa      	str	r2, [r7, #12]
  return result;
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	fab2 f282 	clz	r2, r2
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	40d3      	lsrs	r3, r2
 8003bc8:	4a14      	ldr	r2, [pc, #80]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003bca:	5cd3      	ldrb	r3, [r2, r3]
 8003bcc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bd8:	4a0e      	ldr	r2, [pc, #56]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
 8003be8:	e004      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	623b      	str	r3, [r7, #32]
      break;
 8003bf8:	e002      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bfc:	623b      	str	r3, [r7, #32]
      break;
 8003bfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c00:	6a3b      	ldr	r3, [r7, #32]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	372c      	adds	r7, #44	; 0x2c
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	007a1200 	.word	0x007a1200
 8003c18:	08005fc8 	.word	0x08005fc8
 8003c1c:	08005fd8 	.word	0x08005fd8
 8003c20:	003d0900 	.word	0x003d0900

08003c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c42:	f7ff ffef 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c46:	4601      	mov	r1, r0
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c50:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	fa92 f2a2 	rbit	r2, r2
 8003c5c:	603a      	str	r2, [r7, #0]
  return result;
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	fab2 f282 	clz	r2, r2
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	40d3      	lsrs	r3, r2
 8003c68:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c6a:	5cd3      	ldrb	r3, [r2, r3]
 8003c6c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	08005fc0 	.word	0x08005fc0

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c86:	f7ff ffcd 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c8a:	4601      	mov	r1, r0
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c94:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	fa92 f2a2 	rbit	r2, r2
 8003ca0:	603a      	str	r2, [r7, #0]
  return result;
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	fab2 f282 	clz	r2, r2
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	40d3      	lsrs	r3, r2
 8003cac:	4a04      	ldr	r2, [pc, #16]	; (8003cc0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003cae:	5cd3      	ldrb	r3, [r2, r3]
 8003cb0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	08005fc0 	.word	0x08005fc0

08003cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b092      	sub	sp, #72	; 0x48
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80cd 	beq.w	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce8:	4b86      	ldr	r3, [pc, #536]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10e      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf4:	4b83      	ldr	r3, [pc, #524]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	4a82      	ldr	r2, [pc, #520]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	61d3      	str	r3, [r2, #28]
 8003d00:	4b80      	ldr	r3, [pc, #512]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d12:	4b7d      	ldr	r3, [pc, #500]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d118      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1e:	4b7a      	ldr	r3, [pc, #488]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a79      	ldr	r2, [pc, #484]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2a:	f7fd fd11 	bl	8001750 <HAL_GetTick>
 8003d2e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	e008      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d32:	f7fd fd0d 	bl	8001750 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b64      	cmp	r3, #100	; 0x64
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e0db      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d44:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d50:	4b6c      	ldr	r3, [pc, #432]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d58:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d07d      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d076      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d6e:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d7c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d88:	fab3 f383 	clz	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4b5e      	ldr	r3, [pc, #376]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	461a      	mov	r2, r3
 8003d98:	2301      	movs	r3, #1
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b55      	ldr	r3, [pc, #340]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003db6:	4413      	add	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dc0:	4a50      	ldr	r2, [pc, #320]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d045      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fcbe 	bl	8001750 <HAL_GetTick>
 8003dd4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd6:	e00a      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd8:	f7fd fcba 	bl	8001750 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e086      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003dee:	2302      	movs	r3, #2
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	fa93 f3a3 	rbit	r3, r3
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	623b      	str	r3, [r7, #32]
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	61fb      	str	r3, [r7, #28]
  return result;
 8003e06:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f043 0302 	orr.w	r3, r3, #2
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d102      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003e1c:	4b39      	ldr	r3, [pc, #228]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	e007      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	fa93 f3a3 	rbit	r3, r3
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	4b35      	ldr	r3, [pc, #212]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2202      	movs	r2, #2
 8003e34:	613a      	str	r2, [r7, #16]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	fa92 f2a2 	rbit	r2, r2
 8003e3c:	60fa      	str	r2, [r7, #12]
  return result;
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	fab2 f282 	clz	r2, r2
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	f002 021f 	and.w	r2, r2, #31
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f202 	lsl.w	r2, r1, r2
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0bd      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4926      	ldr	r1, [pc, #152]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d105      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e76:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e80:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f023 0203 	bic.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	491a      	ldr	r1, [pc, #104]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eac:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	f023 0210 	bic.w	r2, r3, #16
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4912      	ldr	r1, [pc, #72]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	490b      	ldr	r1, [pc, #44]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3748      	adds	r7, #72	; 0x48
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	10908100 	.word	0x10908100

08003f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e040      	b.n	8003fa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fd fa80 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2224      	movs	r2, #36	; 0x24
 8003f3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f8b6 	bl	80040c0 <UART_SetConfig>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e022      	b.n	8003fa4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9e0 	bl	800432c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fa67 	bl	8004470 <UART_CheckIdleState>
 8003fa2:	4603      	mov	r3, r0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d178      	bne.n	80040b6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_UART_Transmit+0x24>
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e071      	b.n	80040b8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2221      	movs	r2, #33	; 0x21
 8003fe0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe2:	f7fd fbb5 	bl	8001750 <HAL_GetTick>
 8003fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d108      	bne.n	8004014 <HAL_UART_Transmit+0x68>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e003      	b.n	800401c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800401c:	e030      	b.n	8004080 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	2180      	movs	r1, #128	; 0x80
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fac9 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d004      	beq.n	800403e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e03c      	b.n	80040b8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	881a      	ldrh	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004050:	b292      	uxth	r2, r2
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	3302      	adds	r3, #2
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	e008      	b.n	800406e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	781a      	ldrb	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b292      	uxth	r2, r2
 8004066:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	3301      	adds	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1c8      	bne.n	800401e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2200      	movs	r2, #0
 8004094:	2140      	movs	r1, #64	; 0x40
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fa92 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d004      	beq.n	80040ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e005      	b.n	80040b8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e000      	b.n	80040b8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
  }
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4b8a      	ldr	r3, [pc, #552]	; (8004314 <UART_SetConfig+0x254>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	6979      	ldr	r1, [r7, #20]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	430a      	orrs	r2, r1
 8004130:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a78      	ldr	r2, [pc, #480]	; (8004318 <UART_SetConfig+0x258>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d120      	bne.n	800417e <UART_SetConfig+0xbe>
 800413c:	4b77      	ldr	r3, [pc, #476]	; (800431c <UART_SetConfig+0x25c>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	2b03      	cmp	r3, #3
 8004146:	d817      	bhi.n	8004178 <UART_SetConfig+0xb8>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <UART_SetConfig+0x90>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004161 	.word	0x08004161
 8004154:	0800416d 	.word	0x0800416d
 8004158:	08004173 	.word	0x08004173
 800415c:	08004167 	.word	0x08004167
 8004160:	2300      	movs	r3, #0
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e01d      	b.n	80041a2 <UART_SetConfig+0xe2>
 8004166:	2302      	movs	r3, #2
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e01a      	b.n	80041a2 <UART_SetConfig+0xe2>
 800416c:	2304      	movs	r3, #4
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e017      	b.n	80041a2 <UART_SetConfig+0xe2>
 8004172:	2308      	movs	r3, #8
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e014      	b.n	80041a2 <UART_SetConfig+0xe2>
 8004178:	2310      	movs	r3, #16
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e011      	b.n	80041a2 <UART_SetConfig+0xe2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a67      	ldr	r2, [pc, #412]	; (8004320 <UART_SetConfig+0x260>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d102      	bne.n	800418e <UART_SetConfig+0xce>
 8004188:	2300      	movs	r3, #0
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e009      	b.n	80041a2 <UART_SetConfig+0xe2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a64      	ldr	r2, [pc, #400]	; (8004324 <UART_SetConfig+0x264>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d102      	bne.n	800419e <UART_SetConfig+0xde>
 8004198:	2300      	movs	r3, #0
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e001      	b.n	80041a2 <UART_SetConfig+0xe2>
 800419e:	2310      	movs	r3, #16
 80041a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041aa:	d15a      	bne.n	8004262 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80041ac:	7ffb      	ldrb	r3, [r7, #31]
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d827      	bhi.n	8004202 <UART_SetConfig+0x142>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <UART_SetConfig+0xf8>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041dd 	.word	0x080041dd
 80041bc:	080041e5 	.word	0x080041e5
 80041c0:	080041ed 	.word	0x080041ed
 80041c4:	08004203 	.word	0x08004203
 80041c8:	080041f3 	.word	0x080041f3
 80041cc:	08004203 	.word	0x08004203
 80041d0:	08004203 	.word	0x08004203
 80041d4:	08004203 	.word	0x08004203
 80041d8:	080041fb 	.word	0x080041fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041dc:	f7ff fd2e 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 80041e0:	61b8      	str	r0, [r7, #24]
        break;
 80041e2:	e013      	b.n	800420c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041e4:	f7ff fd4c 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 80041e8:	61b8      	str	r0, [r7, #24]
        break;
 80041ea:	e00f      	b.n	800420c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ec:	4b4e      	ldr	r3, [pc, #312]	; (8004328 <UART_SetConfig+0x268>)
 80041ee:	61bb      	str	r3, [r7, #24]
        break;
 80041f0:	e00c      	b.n	800420c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041f2:	f7ff fcad 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 80041f6:	61b8      	str	r0, [r7, #24]
        break;
 80041f8:	e008      	b.n	800420c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fe:	61bb      	str	r3, [r7, #24]
        break;
 8004200:	e004      	b.n	800420c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	77bb      	strb	r3, [r7, #30]
        break;
 800420a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d074      	beq.n	80042fc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	005a      	lsls	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	441a      	add	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b0f      	cmp	r3, #15
 800422c:	d916      	bls.n	800425c <UART_SetConfig+0x19c>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004234:	d212      	bcs.n	800425c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f023 030f 	bic.w	r3, r3, #15
 800423e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	b29b      	uxth	r3, r3
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	b29a      	uxth	r2, r3
 800424c:	89fb      	ldrh	r3, [r7, #14]
 800424e:	4313      	orrs	r3, r2
 8004250:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	89fa      	ldrh	r2, [r7, #14]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	e04f      	b.n	80042fc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	77bb      	strb	r3, [r7, #30]
 8004260:	e04c      	b.n	80042fc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004262:	7ffb      	ldrb	r3, [r7, #31]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d828      	bhi.n	80042ba <UART_SetConfig+0x1fa>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0x1b0>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	08004295 	.word	0x08004295
 8004274:	0800429d 	.word	0x0800429d
 8004278:	080042a5 	.word	0x080042a5
 800427c:	080042bb 	.word	0x080042bb
 8004280:	080042ab 	.word	0x080042ab
 8004284:	080042bb 	.word	0x080042bb
 8004288:	080042bb 	.word	0x080042bb
 800428c:	080042bb 	.word	0x080042bb
 8004290:	080042b3 	.word	0x080042b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004294:	f7ff fcd2 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8004298:	61b8      	str	r0, [r7, #24]
        break;
 800429a:	e013      	b.n	80042c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800429c:	f7ff fcf0 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 80042a0:	61b8      	str	r0, [r7, #24]
        break;
 80042a2:	e00f      	b.n	80042c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a4:	4b20      	ldr	r3, [pc, #128]	; (8004328 <UART_SetConfig+0x268>)
 80042a6:	61bb      	str	r3, [r7, #24]
        break;
 80042a8:	e00c      	b.n	80042c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042aa:	f7ff fc51 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 80042ae:	61b8      	str	r0, [r7, #24]
        break;
 80042b0:	e008      	b.n	80042c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b6:	61bb      	str	r3, [r7, #24]
        break;
 80042b8:	e004      	b.n	80042c4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	77bb      	strb	r3, [r7, #30]
        break;
 80042c2:	bf00      	nop
    }

    if (pclk != 0U)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d018      	beq.n	80042fc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	085a      	lsrs	r2, r3, #1
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	441a      	add	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b0f      	cmp	r3, #15
 80042e2:	d909      	bls.n	80042f8 <UART_SetConfig+0x238>
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ea:	d205      	bcs.n	80042f8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	e001      	b.n	80042fc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004308:	7fbb      	ldrb	r3, [r7, #30]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	efff69f3 	.word	0xefff69f3
 8004318:	40013800 	.word	0x40013800
 800431c:	40021000 	.word	0x40021000
 8004320:	40004400 	.word	0x40004400
 8004324:	40004800 	.word	0x40004800
 8004328:	007a1200 	.word	0x007a1200

0800432c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01a      	beq.n	8004442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442a:	d10a      	bne.n	8004442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  }
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b098      	sub	sp, #96	; 0x60
 8004474:	af02      	add	r7, sp, #8
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004480:	f7fd f966 	bl	8001750 <HAL_GetTick>
 8004484:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b08      	cmp	r3, #8
 8004492:	d12e      	bne.n	80044f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800449c:	2200      	movs	r2, #0
 800449e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f88c 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d021      	beq.n	80044f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c2:	653b      	str	r3, [r7, #80]	; 0x50
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044cc:	647b      	str	r3, [r7, #68]	; 0x44
 80044ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e6      	bne.n	80044ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e062      	b.n	80045b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d149      	bne.n	8004594 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004508:	2200      	movs	r2, #0
 800450a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f856 	bl	80045c0 <UART_WaitOnFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d03c      	beq.n	8004594 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	623b      	str	r3, [r7, #32]
   return(result);
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800452e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004538:	633b      	str	r3, [r7, #48]	; 0x30
 800453a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800453e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e6      	bne.n	800451a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3308      	adds	r3, #8
 8004552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	60fb      	str	r3, [r7, #12]
   return(result);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	64bb      	str	r3, [r7, #72]	; 0x48
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3308      	adds	r3, #8
 800456a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800456c:	61fa      	str	r2, [r7, #28]
 800456e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	69b9      	ldr	r1, [r7, #24]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	617b      	str	r3, [r7, #20]
   return(result);
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e5      	bne.n	800454c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e011      	b.n	80045b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3758      	adds	r7, #88	; 0x58
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d0:	e049      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d045      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045da:	f7fd f8b9 	bl	8001750 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d302      	bcc.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e048      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d031      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b08      	cmp	r3, #8
 800460e:	d110      	bne.n	8004632 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2208      	movs	r2, #8
 8004616:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f838 	bl	800468e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2208      	movs	r2, #8
 8004622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e029      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004640:	d111      	bne.n	8004666 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800464a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f81e 	bl	800468e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e00f      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	429a      	cmp	r2, r3
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	429a      	cmp	r2, r3
 8004682:	d0a6      	beq.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800468e:	b480      	push	{r7}
 8004690:	b095      	sub	sp, #84	; 0x54
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b4:	643b      	str	r3, [r7, #64]	; 0x40
 80046b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e6      	bne.n	8004696 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3308      	adds	r3, #8
 80046ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e5      	bne.n	80046c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004700:	2b01      	cmp	r3, #1
 8004702:	d118      	bne.n	8004736 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	60bb      	str	r3, [r7, #8]
   return(result);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e6      	bne.n	8004704 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	669a      	str	r2, [r3, #104]	; 0x68
}
 800474a:	bf00      	nop
 800474c:	3754      	adds	r7, #84	; 0x54
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <__errno>:
 8004758:	4b01      	ldr	r3, [pc, #4]	; (8004760 <__errno+0x8>)
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	20000018 	.word	0x20000018

08004764 <__libc_init_array>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	4d0d      	ldr	r5, [pc, #52]	; (800479c <__libc_init_array+0x38>)
 8004768:	4c0d      	ldr	r4, [pc, #52]	; (80047a0 <__libc_init_array+0x3c>)
 800476a:	1b64      	subs	r4, r4, r5
 800476c:	10a4      	asrs	r4, r4, #2
 800476e:	2600      	movs	r6, #0
 8004770:	42a6      	cmp	r6, r4
 8004772:	d109      	bne.n	8004788 <__libc_init_array+0x24>
 8004774:	4d0b      	ldr	r5, [pc, #44]	; (80047a4 <__libc_init_array+0x40>)
 8004776:	4c0c      	ldr	r4, [pc, #48]	; (80047a8 <__libc_init_array+0x44>)
 8004778:	f001 faea 	bl	8005d50 <_init>
 800477c:	1b64      	subs	r4, r4, r5
 800477e:	10a4      	asrs	r4, r4, #2
 8004780:	2600      	movs	r6, #0
 8004782:	42a6      	cmp	r6, r4
 8004784:	d105      	bne.n	8004792 <__libc_init_array+0x2e>
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	f855 3b04 	ldr.w	r3, [r5], #4
 800478c:	4798      	blx	r3
 800478e:	3601      	adds	r6, #1
 8004790:	e7ee      	b.n	8004770 <__libc_init_array+0xc>
 8004792:	f855 3b04 	ldr.w	r3, [r5], #4
 8004796:	4798      	blx	r3
 8004798:	3601      	adds	r6, #1
 800479a:	e7f2      	b.n	8004782 <__libc_init_array+0x1e>
 800479c:	08006080 	.word	0x08006080
 80047a0:	08006080 	.word	0x08006080
 80047a4:	08006080 	.word	0x08006080
 80047a8:	08006084 	.word	0x08006084

080047ac <memcpy>:
 80047ac:	440a      	add	r2, r1
 80047ae:	4291      	cmp	r1, r2
 80047b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80047b4:	d100      	bne.n	80047b8 <memcpy+0xc>
 80047b6:	4770      	bx	lr
 80047b8:	b510      	push	{r4, lr}
 80047ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047c2:	4291      	cmp	r1, r2
 80047c4:	d1f9      	bne.n	80047ba <memcpy+0xe>
 80047c6:	bd10      	pop	{r4, pc}

080047c8 <memset>:
 80047c8:	4402      	add	r2, r0
 80047ca:	4603      	mov	r3, r0
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d100      	bne.n	80047d2 <memset+0xa>
 80047d0:	4770      	bx	lr
 80047d2:	f803 1b01 	strb.w	r1, [r3], #1
 80047d6:	e7f9      	b.n	80047cc <memset+0x4>

080047d8 <iprintf>:
 80047d8:	b40f      	push	{r0, r1, r2, r3}
 80047da:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <iprintf+0x2c>)
 80047dc:	b513      	push	{r0, r1, r4, lr}
 80047de:	681c      	ldr	r4, [r3, #0]
 80047e0:	b124      	cbz	r4, 80047ec <iprintf+0x14>
 80047e2:	69a3      	ldr	r3, [r4, #24]
 80047e4:	b913      	cbnz	r3, 80047ec <iprintf+0x14>
 80047e6:	4620      	mov	r0, r4
 80047e8:	f000 fb60 	bl	8004eac <__sinit>
 80047ec:	ab05      	add	r3, sp, #20
 80047ee:	9a04      	ldr	r2, [sp, #16]
 80047f0:	68a1      	ldr	r1, [r4, #8]
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	4620      	mov	r0, r4
 80047f6:	f000 fecd 	bl	8005594 <_vfiprintf_r>
 80047fa:	b002      	add	sp, #8
 80047fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004800:	b004      	add	sp, #16
 8004802:	4770      	bx	lr
 8004804:	20000018 	.word	0x20000018

08004808 <_puts_r>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	460e      	mov	r6, r1
 800480c:	4605      	mov	r5, r0
 800480e:	b118      	cbz	r0, 8004818 <_puts_r+0x10>
 8004810:	6983      	ldr	r3, [r0, #24]
 8004812:	b90b      	cbnz	r3, 8004818 <_puts_r+0x10>
 8004814:	f000 fb4a 	bl	8004eac <__sinit>
 8004818:	69ab      	ldr	r3, [r5, #24]
 800481a:	68ac      	ldr	r4, [r5, #8]
 800481c:	b913      	cbnz	r3, 8004824 <_puts_r+0x1c>
 800481e:	4628      	mov	r0, r5
 8004820:	f000 fb44 	bl	8004eac <__sinit>
 8004824:	4b2c      	ldr	r3, [pc, #176]	; (80048d8 <_puts_r+0xd0>)
 8004826:	429c      	cmp	r4, r3
 8004828:	d120      	bne.n	800486c <_puts_r+0x64>
 800482a:	686c      	ldr	r4, [r5, #4]
 800482c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800482e:	07db      	lsls	r3, r3, #31
 8004830:	d405      	bmi.n	800483e <_puts_r+0x36>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	0598      	lsls	r0, r3, #22
 8004836:	d402      	bmi.n	800483e <_puts_r+0x36>
 8004838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800483a:	f000 fbd5 	bl	8004fe8 <__retarget_lock_acquire_recursive>
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	0719      	lsls	r1, r3, #28
 8004842:	d51d      	bpl.n	8004880 <_puts_r+0x78>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	b1db      	cbz	r3, 8004880 <_puts_r+0x78>
 8004848:	3e01      	subs	r6, #1
 800484a:	68a3      	ldr	r3, [r4, #8]
 800484c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004850:	3b01      	subs	r3, #1
 8004852:	60a3      	str	r3, [r4, #8]
 8004854:	bb39      	cbnz	r1, 80048a6 <_puts_r+0x9e>
 8004856:	2b00      	cmp	r3, #0
 8004858:	da38      	bge.n	80048cc <_puts_r+0xc4>
 800485a:	4622      	mov	r2, r4
 800485c:	210a      	movs	r1, #10
 800485e:	4628      	mov	r0, r5
 8004860:	f000 f94a 	bl	8004af8 <__swbuf_r>
 8004864:	3001      	adds	r0, #1
 8004866:	d011      	beq.n	800488c <_puts_r+0x84>
 8004868:	250a      	movs	r5, #10
 800486a:	e011      	b.n	8004890 <_puts_r+0x88>
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <_puts_r+0xd4>)
 800486e:	429c      	cmp	r4, r3
 8004870:	d101      	bne.n	8004876 <_puts_r+0x6e>
 8004872:	68ac      	ldr	r4, [r5, #8]
 8004874:	e7da      	b.n	800482c <_puts_r+0x24>
 8004876:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <_puts_r+0xd8>)
 8004878:	429c      	cmp	r4, r3
 800487a:	bf08      	it	eq
 800487c:	68ec      	ldreq	r4, [r5, #12]
 800487e:	e7d5      	b.n	800482c <_puts_r+0x24>
 8004880:	4621      	mov	r1, r4
 8004882:	4628      	mov	r0, r5
 8004884:	f000 f98a 	bl	8004b9c <__swsetup_r>
 8004888:	2800      	cmp	r0, #0
 800488a:	d0dd      	beq.n	8004848 <_puts_r+0x40>
 800488c:	f04f 35ff 	mov.w	r5, #4294967295
 8004890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004892:	07da      	lsls	r2, r3, #31
 8004894:	d405      	bmi.n	80048a2 <_puts_r+0x9a>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	059b      	lsls	r3, r3, #22
 800489a:	d402      	bmi.n	80048a2 <_puts_r+0x9a>
 800489c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800489e:	f000 fba4 	bl	8004fea <__retarget_lock_release_recursive>
 80048a2:	4628      	mov	r0, r5
 80048a4:	bd70      	pop	{r4, r5, r6, pc}
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	da04      	bge.n	80048b4 <_puts_r+0xac>
 80048aa:	69a2      	ldr	r2, [r4, #24]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	dc06      	bgt.n	80048be <_puts_r+0xb6>
 80048b0:	290a      	cmp	r1, #10
 80048b2:	d004      	beq.n	80048be <_puts_r+0xb6>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	6022      	str	r2, [r4, #0]
 80048ba:	7019      	strb	r1, [r3, #0]
 80048bc:	e7c5      	b.n	800484a <_puts_r+0x42>
 80048be:	4622      	mov	r2, r4
 80048c0:	4628      	mov	r0, r5
 80048c2:	f000 f919 	bl	8004af8 <__swbuf_r>
 80048c6:	3001      	adds	r0, #1
 80048c8:	d1bf      	bne.n	800484a <_puts_r+0x42>
 80048ca:	e7df      	b.n	800488c <_puts_r+0x84>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	250a      	movs	r5, #10
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	6022      	str	r2, [r4, #0]
 80048d4:	701d      	strb	r5, [r3, #0]
 80048d6:	e7db      	b.n	8004890 <_puts_r+0x88>
 80048d8:	0800600c 	.word	0x0800600c
 80048dc:	0800602c 	.word	0x0800602c
 80048e0:	08005fec 	.word	0x08005fec

080048e4 <puts>:
 80048e4:	4b02      	ldr	r3, [pc, #8]	; (80048f0 <puts+0xc>)
 80048e6:	4601      	mov	r1, r0
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	f7ff bf8d 	b.w	8004808 <_puts_r>
 80048ee:	bf00      	nop
 80048f0:	20000018 	.word	0x20000018

080048f4 <setbuf>:
 80048f4:	2900      	cmp	r1, #0
 80048f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fa:	bf0c      	ite	eq
 80048fc:	2202      	moveq	r2, #2
 80048fe:	2200      	movne	r2, #0
 8004900:	f000 b800 	b.w	8004904 <setvbuf>

08004904 <setvbuf>:
 8004904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004908:	461d      	mov	r5, r3
 800490a:	4b5d      	ldr	r3, [pc, #372]	; (8004a80 <setvbuf+0x17c>)
 800490c:	681f      	ldr	r7, [r3, #0]
 800490e:	4604      	mov	r4, r0
 8004910:	460e      	mov	r6, r1
 8004912:	4690      	mov	r8, r2
 8004914:	b127      	cbz	r7, 8004920 <setvbuf+0x1c>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	b913      	cbnz	r3, 8004920 <setvbuf+0x1c>
 800491a:	4638      	mov	r0, r7
 800491c:	f000 fac6 	bl	8004eac <__sinit>
 8004920:	4b58      	ldr	r3, [pc, #352]	; (8004a84 <setvbuf+0x180>)
 8004922:	429c      	cmp	r4, r3
 8004924:	d167      	bne.n	80049f6 <setvbuf+0xf2>
 8004926:	687c      	ldr	r4, [r7, #4]
 8004928:	f1b8 0f02 	cmp.w	r8, #2
 800492c:	d006      	beq.n	800493c <setvbuf+0x38>
 800492e:	f1b8 0f01 	cmp.w	r8, #1
 8004932:	f200 809f 	bhi.w	8004a74 <setvbuf+0x170>
 8004936:	2d00      	cmp	r5, #0
 8004938:	f2c0 809c 	blt.w	8004a74 <setvbuf+0x170>
 800493c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800493e:	07db      	lsls	r3, r3, #31
 8004940:	d405      	bmi.n	800494e <setvbuf+0x4a>
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	0598      	lsls	r0, r3, #22
 8004946:	d402      	bmi.n	800494e <setvbuf+0x4a>
 8004948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800494a:	f000 fb4d 	bl	8004fe8 <__retarget_lock_acquire_recursive>
 800494e:	4621      	mov	r1, r4
 8004950:	4638      	mov	r0, r7
 8004952:	f000 fa17 	bl	8004d84 <_fflush_r>
 8004956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004958:	b141      	cbz	r1, 800496c <setvbuf+0x68>
 800495a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800495e:	4299      	cmp	r1, r3
 8004960:	d002      	beq.n	8004968 <setvbuf+0x64>
 8004962:	4638      	mov	r0, r7
 8004964:	f000 fbb0 	bl	80050c8 <_free_r>
 8004968:	2300      	movs	r3, #0
 800496a:	6363      	str	r3, [r4, #52]	; 0x34
 800496c:	2300      	movs	r3, #0
 800496e:	61a3      	str	r3, [r4, #24]
 8004970:	6063      	str	r3, [r4, #4]
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	0619      	lsls	r1, r3, #24
 8004976:	d503      	bpl.n	8004980 <setvbuf+0x7c>
 8004978:	6921      	ldr	r1, [r4, #16]
 800497a:	4638      	mov	r0, r7
 800497c:	f000 fba4 	bl	80050c8 <_free_r>
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	f1b8 0f02 	cmp.w	r8, #2
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	d06c      	beq.n	8004a6c <setvbuf+0x168>
 8004992:	ab01      	add	r3, sp, #4
 8004994:	466a      	mov	r2, sp
 8004996:	4621      	mov	r1, r4
 8004998:	4638      	mov	r0, r7
 800499a:	f000 fb27 	bl	8004fec <__swhatbuf_r>
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	4318      	orrs	r0, r3
 80049a2:	81a0      	strh	r0, [r4, #12]
 80049a4:	2d00      	cmp	r5, #0
 80049a6:	d130      	bne.n	8004a0a <setvbuf+0x106>
 80049a8:	9d00      	ldr	r5, [sp, #0]
 80049aa:	4628      	mov	r0, r5
 80049ac:	f000 fb84 	bl	80050b8 <malloc>
 80049b0:	4606      	mov	r6, r0
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d155      	bne.n	8004a62 <setvbuf+0x15e>
 80049b6:	f8dd 9000 	ldr.w	r9, [sp]
 80049ba:	45a9      	cmp	r9, r5
 80049bc:	d14a      	bne.n	8004a54 <setvbuf+0x150>
 80049be:	f04f 35ff 	mov.w	r5, #4294967295
 80049c2:	2200      	movs	r2, #0
 80049c4:	60a2      	str	r2, [r4, #8]
 80049c6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80049ca:	6022      	str	r2, [r4, #0]
 80049cc:	6122      	str	r2, [r4, #16]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d4:	6162      	str	r2, [r4, #20]
 80049d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d8:	f043 0302 	orr.w	r3, r3, #2
 80049dc:	07d2      	lsls	r2, r2, #31
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	d405      	bmi.n	80049ee <setvbuf+0xea>
 80049e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80049e6:	d102      	bne.n	80049ee <setvbuf+0xea>
 80049e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ea:	f000 fafe 	bl	8004fea <__retarget_lock_release_recursive>
 80049ee:	4628      	mov	r0, r5
 80049f0:	b003      	add	sp, #12
 80049f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049f6:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <setvbuf+0x184>)
 80049f8:	429c      	cmp	r4, r3
 80049fa:	d101      	bne.n	8004a00 <setvbuf+0xfc>
 80049fc:	68bc      	ldr	r4, [r7, #8]
 80049fe:	e793      	b.n	8004928 <setvbuf+0x24>
 8004a00:	4b22      	ldr	r3, [pc, #136]	; (8004a8c <setvbuf+0x188>)
 8004a02:	429c      	cmp	r4, r3
 8004a04:	bf08      	it	eq
 8004a06:	68fc      	ldreq	r4, [r7, #12]
 8004a08:	e78e      	b.n	8004928 <setvbuf+0x24>
 8004a0a:	2e00      	cmp	r6, #0
 8004a0c:	d0cd      	beq.n	80049aa <setvbuf+0xa6>
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	b913      	cbnz	r3, 8004a18 <setvbuf+0x114>
 8004a12:	4638      	mov	r0, r7
 8004a14:	f000 fa4a 	bl	8004eac <__sinit>
 8004a18:	f1b8 0f01 	cmp.w	r8, #1
 8004a1c:	bf08      	it	eq
 8004a1e:	89a3      	ldrheq	r3, [r4, #12]
 8004a20:	6026      	str	r6, [r4, #0]
 8004a22:	bf04      	itt	eq
 8004a24:	f043 0301 	orreq.w	r3, r3, #1
 8004a28:	81a3      	strheq	r3, [r4, #12]
 8004a2a:	89a2      	ldrh	r2, [r4, #12]
 8004a2c:	f012 0308 	ands.w	r3, r2, #8
 8004a30:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004a34:	d01c      	beq.n	8004a70 <setvbuf+0x16c>
 8004a36:	07d3      	lsls	r3, r2, #31
 8004a38:	bf41      	itttt	mi
 8004a3a:	2300      	movmi	r3, #0
 8004a3c:	426d      	negmi	r5, r5
 8004a3e:	60a3      	strmi	r3, [r4, #8]
 8004a40:	61a5      	strmi	r5, [r4, #24]
 8004a42:	bf58      	it	pl
 8004a44:	60a5      	strpl	r5, [r4, #8]
 8004a46:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004a48:	f015 0501 	ands.w	r5, r5, #1
 8004a4c:	d115      	bne.n	8004a7a <setvbuf+0x176>
 8004a4e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004a52:	e7c8      	b.n	80049e6 <setvbuf+0xe2>
 8004a54:	4648      	mov	r0, r9
 8004a56:	f000 fb2f 	bl	80050b8 <malloc>
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d0ae      	beq.n	80049be <setvbuf+0xba>
 8004a60:	464d      	mov	r5, r9
 8004a62:	89a3      	ldrh	r3, [r4, #12]
 8004a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a68:	81a3      	strh	r3, [r4, #12]
 8004a6a:	e7d0      	b.n	8004a0e <setvbuf+0x10a>
 8004a6c:	2500      	movs	r5, #0
 8004a6e:	e7a8      	b.n	80049c2 <setvbuf+0xbe>
 8004a70:	60a3      	str	r3, [r4, #8]
 8004a72:	e7e8      	b.n	8004a46 <setvbuf+0x142>
 8004a74:	f04f 35ff 	mov.w	r5, #4294967295
 8004a78:	e7b9      	b.n	80049ee <setvbuf+0xea>
 8004a7a:	2500      	movs	r5, #0
 8004a7c:	e7b7      	b.n	80049ee <setvbuf+0xea>
 8004a7e:	bf00      	nop
 8004a80:	20000018 	.word	0x20000018
 8004a84:	0800600c 	.word	0x0800600c
 8004a88:	0800602c 	.word	0x0800602c
 8004a8c:	08005fec 	.word	0x08005fec

08004a90 <sniprintf>:
 8004a90:	b40c      	push	{r2, r3}
 8004a92:	b530      	push	{r4, r5, lr}
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <sniprintf+0x64>)
 8004a96:	1e0c      	subs	r4, r1, #0
 8004a98:	681d      	ldr	r5, [r3, #0]
 8004a9a:	b09d      	sub	sp, #116	; 0x74
 8004a9c:	da08      	bge.n	8004ab0 <sniprintf+0x20>
 8004a9e:	238b      	movs	r3, #139	; 0x8b
 8004aa0:	602b      	str	r3, [r5, #0]
 8004aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa6:	b01d      	add	sp, #116	; 0x74
 8004aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004aac:	b002      	add	sp, #8
 8004aae:	4770      	bx	lr
 8004ab0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004ab4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004ab8:	bf14      	ite	ne
 8004aba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004abe:	4623      	moveq	r3, r4
 8004ac0:	9304      	str	r3, [sp, #16]
 8004ac2:	9307      	str	r3, [sp, #28]
 8004ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ac8:	9002      	str	r0, [sp, #8]
 8004aca:	9006      	str	r0, [sp, #24]
 8004acc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ad0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004ad2:	ab21      	add	r3, sp, #132	; 0x84
 8004ad4:	a902      	add	r1, sp, #8
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	f000 fc31 	bl	8005340 <_svfiprintf_r>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	bfbc      	itt	lt
 8004ae2:	238b      	movlt	r3, #139	; 0x8b
 8004ae4:	602b      	strlt	r3, [r5, #0]
 8004ae6:	2c00      	cmp	r4, #0
 8004ae8:	d0dd      	beq.n	8004aa6 <sniprintf+0x16>
 8004aea:	9b02      	ldr	r3, [sp, #8]
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
 8004af0:	e7d9      	b.n	8004aa6 <sniprintf+0x16>
 8004af2:	bf00      	nop
 8004af4:	20000018 	.word	0x20000018

08004af8 <__swbuf_r>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	460e      	mov	r6, r1
 8004afc:	4614      	mov	r4, r2
 8004afe:	4605      	mov	r5, r0
 8004b00:	b118      	cbz	r0, 8004b0a <__swbuf_r+0x12>
 8004b02:	6983      	ldr	r3, [r0, #24]
 8004b04:	b90b      	cbnz	r3, 8004b0a <__swbuf_r+0x12>
 8004b06:	f000 f9d1 	bl	8004eac <__sinit>
 8004b0a:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <__swbuf_r+0x98>)
 8004b0c:	429c      	cmp	r4, r3
 8004b0e:	d12b      	bne.n	8004b68 <__swbuf_r+0x70>
 8004b10:	686c      	ldr	r4, [r5, #4]
 8004b12:	69a3      	ldr	r3, [r4, #24]
 8004b14:	60a3      	str	r3, [r4, #8]
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	071a      	lsls	r2, r3, #28
 8004b1a:	d52f      	bpl.n	8004b7c <__swbuf_r+0x84>
 8004b1c:	6923      	ldr	r3, [r4, #16]
 8004b1e:	b36b      	cbz	r3, 8004b7c <__swbuf_r+0x84>
 8004b20:	6923      	ldr	r3, [r4, #16]
 8004b22:	6820      	ldr	r0, [r4, #0]
 8004b24:	1ac0      	subs	r0, r0, r3
 8004b26:	6963      	ldr	r3, [r4, #20]
 8004b28:	b2f6      	uxtb	r6, r6
 8004b2a:	4283      	cmp	r3, r0
 8004b2c:	4637      	mov	r7, r6
 8004b2e:	dc04      	bgt.n	8004b3a <__swbuf_r+0x42>
 8004b30:	4621      	mov	r1, r4
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 f926 	bl	8004d84 <_fflush_r>
 8004b38:	bb30      	cbnz	r0, 8004b88 <__swbuf_r+0x90>
 8004b3a:	68a3      	ldr	r3, [r4, #8]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	60a3      	str	r3, [r4, #8]
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	6022      	str	r2, [r4, #0]
 8004b46:	701e      	strb	r6, [r3, #0]
 8004b48:	6963      	ldr	r3, [r4, #20]
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	4283      	cmp	r3, r0
 8004b4e:	d004      	beq.n	8004b5a <__swbuf_r+0x62>
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	07db      	lsls	r3, r3, #31
 8004b54:	d506      	bpl.n	8004b64 <__swbuf_r+0x6c>
 8004b56:	2e0a      	cmp	r6, #10
 8004b58:	d104      	bne.n	8004b64 <__swbuf_r+0x6c>
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f000 f911 	bl	8004d84 <_fflush_r>
 8004b62:	b988      	cbnz	r0, 8004b88 <__swbuf_r+0x90>
 8004b64:	4638      	mov	r0, r7
 8004b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <__swbuf_r+0x9c>)
 8004b6a:	429c      	cmp	r4, r3
 8004b6c:	d101      	bne.n	8004b72 <__swbuf_r+0x7a>
 8004b6e:	68ac      	ldr	r4, [r5, #8]
 8004b70:	e7cf      	b.n	8004b12 <__swbuf_r+0x1a>
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <__swbuf_r+0xa0>)
 8004b74:	429c      	cmp	r4, r3
 8004b76:	bf08      	it	eq
 8004b78:	68ec      	ldreq	r4, [r5, #12]
 8004b7a:	e7ca      	b.n	8004b12 <__swbuf_r+0x1a>
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f000 f80c 	bl	8004b9c <__swsetup_r>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	d0cb      	beq.n	8004b20 <__swbuf_r+0x28>
 8004b88:	f04f 37ff 	mov.w	r7, #4294967295
 8004b8c:	e7ea      	b.n	8004b64 <__swbuf_r+0x6c>
 8004b8e:	bf00      	nop
 8004b90:	0800600c 	.word	0x0800600c
 8004b94:	0800602c 	.word	0x0800602c
 8004b98:	08005fec 	.word	0x08005fec

08004b9c <__swsetup_r>:
 8004b9c:	4b32      	ldr	r3, [pc, #200]	; (8004c68 <__swsetup_r+0xcc>)
 8004b9e:	b570      	push	{r4, r5, r6, lr}
 8004ba0:	681d      	ldr	r5, [r3, #0]
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	b125      	cbz	r5, 8004bb2 <__swsetup_r+0x16>
 8004ba8:	69ab      	ldr	r3, [r5, #24]
 8004baa:	b913      	cbnz	r3, 8004bb2 <__swsetup_r+0x16>
 8004bac:	4628      	mov	r0, r5
 8004bae:	f000 f97d 	bl	8004eac <__sinit>
 8004bb2:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <__swsetup_r+0xd0>)
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	d10f      	bne.n	8004bd8 <__swsetup_r+0x3c>
 8004bb8:	686c      	ldr	r4, [r5, #4]
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bc0:	0719      	lsls	r1, r3, #28
 8004bc2:	d42c      	bmi.n	8004c1e <__swsetup_r+0x82>
 8004bc4:	06dd      	lsls	r5, r3, #27
 8004bc6:	d411      	bmi.n	8004bec <__swsetup_r+0x50>
 8004bc8:	2309      	movs	r3, #9
 8004bca:	6033      	str	r3, [r6, #0]
 8004bcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd6:	e03e      	b.n	8004c56 <__swsetup_r+0xba>
 8004bd8:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <__swsetup_r+0xd4>)
 8004bda:	429c      	cmp	r4, r3
 8004bdc:	d101      	bne.n	8004be2 <__swsetup_r+0x46>
 8004bde:	68ac      	ldr	r4, [r5, #8]
 8004be0:	e7eb      	b.n	8004bba <__swsetup_r+0x1e>
 8004be2:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <__swsetup_r+0xd8>)
 8004be4:	429c      	cmp	r4, r3
 8004be6:	bf08      	it	eq
 8004be8:	68ec      	ldreq	r4, [r5, #12]
 8004bea:	e7e6      	b.n	8004bba <__swsetup_r+0x1e>
 8004bec:	0758      	lsls	r0, r3, #29
 8004bee:	d512      	bpl.n	8004c16 <__swsetup_r+0x7a>
 8004bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bf2:	b141      	cbz	r1, 8004c06 <__swsetup_r+0x6a>
 8004bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bf8:	4299      	cmp	r1, r3
 8004bfa:	d002      	beq.n	8004c02 <__swsetup_r+0x66>
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f000 fa63 	bl	80050c8 <_free_r>
 8004c02:	2300      	movs	r3, #0
 8004c04:	6363      	str	r3, [r4, #52]	; 0x34
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	6063      	str	r3, [r4, #4]
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	f043 0308 	orr.w	r3, r3, #8
 8004c1c:	81a3      	strh	r3, [r4, #12]
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	b94b      	cbnz	r3, 8004c36 <__swsetup_r+0x9a>
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2c:	d003      	beq.n	8004c36 <__swsetup_r+0x9a>
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4630      	mov	r0, r6
 8004c32:	f000 fa01 	bl	8005038 <__smakebuf_r>
 8004c36:	89a0      	ldrh	r0, [r4, #12]
 8004c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c3c:	f010 0301 	ands.w	r3, r0, #1
 8004c40:	d00a      	beq.n	8004c58 <__swsetup_r+0xbc>
 8004c42:	2300      	movs	r3, #0
 8004c44:	60a3      	str	r3, [r4, #8]
 8004c46:	6963      	ldr	r3, [r4, #20]
 8004c48:	425b      	negs	r3, r3
 8004c4a:	61a3      	str	r3, [r4, #24]
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	b943      	cbnz	r3, 8004c62 <__swsetup_r+0xc6>
 8004c50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c54:	d1ba      	bne.n	8004bcc <__swsetup_r+0x30>
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
 8004c58:	0781      	lsls	r1, r0, #30
 8004c5a:	bf58      	it	pl
 8004c5c:	6963      	ldrpl	r3, [r4, #20]
 8004c5e:	60a3      	str	r3, [r4, #8]
 8004c60:	e7f4      	b.n	8004c4c <__swsetup_r+0xb0>
 8004c62:	2000      	movs	r0, #0
 8004c64:	e7f7      	b.n	8004c56 <__swsetup_r+0xba>
 8004c66:	bf00      	nop
 8004c68:	20000018 	.word	0x20000018
 8004c6c:	0800600c 	.word	0x0800600c
 8004c70:	0800602c 	.word	0x0800602c
 8004c74:	08005fec 	.word	0x08005fec

08004c78 <__sflush_r>:
 8004c78:	898a      	ldrh	r2, [r1, #12]
 8004c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7e:	4605      	mov	r5, r0
 8004c80:	0710      	lsls	r0, r2, #28
 8004c82:	460c      	mov	r4, r1
 8004c84:	d458      	bmi.n	8004d38 <__sflush_r+0xc0>
 8004c86:	684b      	ldr	r3, [r1, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	dc05      	bgt.n	8004c98 <__sflush_r+0x20>
 8004c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	dc02      	bgt.n	8004c98 <__sflush_r+0x20>
 8004c92:	2000      	movs	r0, #0
 8004c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c9a:	2e00      	cmp	r6, #0
 8004c9c:	d0f9      	beq.n	8004c92 <__sflush_r+0x1a>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ca4:	682f      	ldr	r7, [r5, #0]
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	d032      	beq.n	8004d10 <__sflush_r+0x98>
 8004caa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	075a      	lsls	r2, r3, #29
 8004cb0:	d505      	bpl.n	8004cbe <__sflush_r+0x46>
 8004cb2:	6863      	ldr	r3, [r4, #4]
 8004cb4:	1ac0      	subs	r0, r0, r3
 8004cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cb8:	b10b      	cbz	r3, 8004cbe <__sflush_r+0x46>
 8004cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cbc:	1ac0      	subs	r0, r0, r3
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cc4:	6a21      	ldr	r1, [r4, #32]
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b0      	blx	r6
 8004cca:	1c43      	adds	r3, r0, #1
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	d106      	bne.n	8004cde <__sflush_r+0x66>
 8004cd0:	6829      	ldr	r1, [r5, #0]
 8004cd2:	291d      	cmp	r1, #29
 8004cd4:	d82c      	bhi.n	8004d30 <__sflush_r+0xb8>
 8004cd6:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <__sflush_r+0x108>)
 8004cd8:	40ca      	lsrs	r2, r1
 8004cda:	07d6      	lsls	r6, r2, #31
 8004cdc:	d528      	bpl.n	8004d30 <__sflush_r+0xb8>
 8004cde:	2200      	movs	r2, #0
 8004ce0:	6062      	str	r2, [r4, #4]
 8004ce2:	04d9      	lsls	r1, r3, #19
 8004ce4:	6922      	ldr	r2, [r4, #16]
 8004ce6:	6022      	str	r2, [r4, #0]
 8004ce8:	d504      	bpl.n	8004cf4 <__sflush_r+0x7c>
 8004cea:	1c42      	adds	r2, r0, #1
 8004cec:	d101      	bne.n	8004cf2 <__sflush_r+0x7a>
 8004cee:	682b      	ldr	r3, [r5, #0]
 8004cf0:	b903      	cbnz	r3, 8004cf4 <__sflush_r+0x7c>
 8004cf2:	6560      	str	r0, [r4, #84]	; 0x54
 8004cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cf6:	602f      	str	r7, [r5, #0]
 8004cf8:	2900      	cmp	r1, #0
 8004cfa:	d0ca      	beq.n	8004c92 <__sflush_r+0x1a>
 8004cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d00:	4299      	cmp	r1, r3
 8004d02:	d002      	beq.n	8004d0a <__sflush_r+0x92>
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 f9df 	bl	80050c8 <_free_r>
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8004d0e:	e7c1      	b.n	8004c94 <__sflush_r+0x1c>
 8004d10:	6a21      	ldr	r1, [r4, #32]
 8004d12:	2301      	movs	r3, #1
 8004d14:	4628      	mov	r0, r5
 8004d16:	47b0      	blx	r6
 8004d18:	1c41      	adds	r1, r0, #1
 8004d1a:	d1c7      	bne.n	8004cac <__sflush_r+0x34>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0c4      	beq.n	8004cac <__sflush_r+0x34>
 8004d22:	2b1d      	cmp	r3, #29
 8004d24:	d001      	beq.n	8004d2a <__sflush_r+0xb2>
 8004d26:	2b16      	cmp	r3, #22
 8004d28:	d101      	bne.n	8004d2e <__sflush_r+0xb6>
 8004d2a:	602f      	str	r7, [r5, #0]
 8004d2c:	e7b1      	b.n	8004c92 <__sflush_r+0x1a>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d34:	81a3      	strh	r3, [r4, #12]
 8004d36:	e7ad      	b.n	8004c94 <__sflush_r+0x1c>
 8004d38:	690f      	ldr	r7, [r1, #16]
 8004d3a:	2f00      	cmp	r7, #0
 8004d3c:	d0a9      	beq.n	8004c92 <__sflush_r+0x1a>
 8004d3e:	0793      	lsls	r3, r2, #30
 8004d40:	680e      	ldr	r6, [r1, #0]
 8004d42:	bf08      	it	eq
 8004d44:	694b      	ldreq	r3, [r1, #20]
 8004d46:	600f      	str	r7, [r1, #0]
 8004d48:	bf18      	it	ne
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	eba6 0807 	sub.w	r8, r6, r7
 8004d50:	608b      	str	r3, [r1, #8]
 8004d52:	f1b8 0f00 	cmp.w	r8, #0
 8004d56:	dd9c      	ble.n	8004c92 <__sflush_r+0x1a>
 8004d58:	6a21      	ldr	r1, [r4, #32]
 8004d5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d5c:	4643      	mov	r3, r8
 8004d5e:	463a      	mov	r2, r7
 8004d60:	4628      	mov	r0, r5
 8004d62:	47b0      	blx	r6
 8004d64:	2800      	cmp	r0, #0
 8004d66:	dc06      	bgt.n	8004d76 <__sflush_r+0xfe>
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d6e:	81a3      	strh	r3, [r4, #12]
 8004d70:	f04f 30ff 	mov.w	r0, #4294967295
 8004d74:	e78e      	b.n	8004c94 <__sflush_r+0x1c>
 8004d76:	4407      	add	r7, r0
 8004d78:	eba8 0800 	sub.w	r8, r8, r0
 8004d7c:	e7e9      	b.n	8004d52 <__sflush_r+0xda>
 8004d7e:	bf00      	nop
 8004d80:	20400001 	.word	0x20400001

08004d84 <_fflush_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	690b      	ldr	r3, [r1, #16]
 8004d88:	4605      	mov	r5, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	b913      	cbnz	r3, 8004d94 <_fflush_r+0x10>
 8004d8e:	2500      	movs	r5, #0
 8004d90:	4628      	mov	r0, r5
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	b118      	cbz	r0, 8004d9e <_fflush_r+0x1a>
 8004d96:	6983      	ldr	r3, [r0, #24]
 8004d98:	b90b      	cbnz	r3, 8004d9e <_fflush_r+0x1a>
 8004d9a:	f000 f887 	bl	8004eac <__sinit>
 8004d9e:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <_fflush_r+0x6c>)
 8004da0:	429c      	cmp	r4, r3
 8004da2:	d11b      	bne.n	8004ddc <_fflush_r+0x58>
 8004da4:	686c      	ldr	r4, [r5, #4]
 8004da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0ef      	beq.n	8004d8e <_fflush_r+0xa>
 8004dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004db0:	07d0      	lsls	r0, r2, #31
 8004db2:	d404      	bmi.n	8004dbe <_fflush_r+0x3a>
 8004db4:	0599      	lsls	r1, r3, #22
 8004db6:	d402      	bmi.n	8004dbe <_fflush_r+0x3a>
 8004db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dba:	f000 f915 	bl	8004fe8 <__retarget_lock_acquire_recursive>
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	f7ff ff59 	bl	8004c78 <__sflush_r>
 8004dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dc8:	07da      	lsls	r2, r3, #31
 8004dca:	4605      	mov	r5, r0
 8004dcc:	d4e0      	bmi.n	8004d90 <_fflush_r+0xc>
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	059b      	lsls	r3, r3, #22
 8004dd2:	d4dd      	bmi.n	8004d90 <_fflush_r+0xc>
 8004dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dd6:	f000 f908 	bl	8004fea <__retarget_lock_release_recursive>
 8004dda:	e7d9      	b.n	8004d90 <_fflush_r+0xc>
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <_fflush_r+0x70>)
 8004dde:	429c      	cmp	r4, r3
 8004de0:	d101      	bne.n	8004de6 <_fflush_r+0x62>
 8004de2:	68ac      	ldr	r4, [r5, #8]
 8004de4:	e7df      	b.n	8004da6 <_fflush_r+0x22>
 8004de6:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <_fflush_r+0x74>)
 8004de8:	429c      	cmp	r4, r3
 8004dea:	bf08      	it	eq
 8004dec:	68ec      	ldreq	r4, [r5, #12]
 8004dee:	e7da      	b.n	8004da6 <_fflush_r+0x22>
 8004df0:	0800600c 	.word	0x0800600c
 8004df4:	0800602c 	.word	0x0800602c
 8004df8:	08005fec 	.word	0x08005fec

08004dfc <std>:
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	b510      	push	{r4, lr}
 8004e00:	4604      	mov	r4, r0
 8004e02:	e9c0 3300 	strd	r3, r3, [r0]
 8004e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e0a:	6083      	str	r3, [r0, #8]
 8004e0c:	8181      	strh	r1, [r0, #12]
 8004e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e10:	81c2      	strh	r2, [r0, #14]
 8004e12:	6183      	str	r3, [r0, #24]
 8004e14:	4619      	mov	r1, r3
 8004e16:	2208      	movs	r2, #8
 8004e18:	305c      	adds	r0, #92	; 0x5c
 8004e1a:	f7ff fcd5 	bl	80047c8 <memset>
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <std+0x38>)
 8004e20:	6263      	str	r3, [r4, #36]	; 0x24
 8004e22:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <std+0x3c>)
 8004e24:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <std+0x40>)
 8004e28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <std+0x44>)
 8004e2c:	6224      	str	r4, [r4, #32]
 8004e2e:	6323      	str	r3, [r4, #48]	; 0x30
 8004e30:	bd10      	pop	{r4, pc}
 8004e32:	bf00      	nop
 8004e34:	08005b3d 	.word	0x08005b3d
 8004e38:	08005b5f 	.word	0x08005b5f
 8004e3c:	08005b97 	.word	0x08005b97
 8004e40:	08005bbb 	.word	0x08005bbb

08004e44 <_cleanup_r>:
 8004e44:	4901      	ldr	r1, [pc, #4]	; (8004e4c <_cleanup_r+0x8>)
 8004e46:	f000 b8af 	b.w	8004fa8 <_fwalk_reent>
 8004e4a:	bf00      	nop
 8004e4c:	08004d85 	.word	0x08004d85

08004e50 <__sfmoreglue>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	2268      	movs	r2, #104	; 0x68
 8004e54:	1e4d      	subs	r5, r1, #1
 8004e56:	4355      	muls	r5, r2
 8004e58:	460e      	mov	r6, r1
 8004e5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e5e:	f000 f99f 	bl	80051a0 <_malloc_r>
 8004e62:	4604      	mov	r4, r0
 8004e64:	b140      	cbz	r0, 8004e78 <__sfmoreglue+0x28>
 8004e66:	2100      	movs	r1, #0
 8004e68:	e9c0 1600 	strd	r1, r6, [r0]
 8004e6c:	300c      	adds	r0, #12
 8004e6e:	60a0      	str	r0, [r4, #8]
 8004e70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e74:	f7ff fca8 	bl	80047c8 <memset>
 8004e78:	4620      	mov	r0, r4
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}

08004e7c <__sfp_lock_acquire>:
 8004e7c:	4801      	ldr	r0, [pc, #4]	; (8004e84 <__sfp_lock_acquire+0x8>)
 8004e7e:	f000 b8b3 	b.w	8004fe8 <__retarget_lock_acquire_recursive>
 8004e82:	bf00      	nop
 8004e84:	20000181 	.word	0x20000181

08004e88 <__sfp_lock_release>:
 8004e88:	4801      	ldr	r0, [pc, #4]	; (8004e90 <__sfp_lock_release+0x8>)
 8004e8a:	f000 b8ae 	b.w	8004fea <__retarget_lock_release_recursive>
 8004e8e:	bf00      	nop
 8004e90:	20000181 	.word	0x20000181

08004e94 <__sinit_lock_acquire>:
 8004e94:	4801      	ldr	r0, [pc, #4]	; (8004e9c <__sinit_lock_acquire+0x8>)
 8004e96:	f000 b8a7 	b.w	8004fe8 <__retarget_lock_acquire_recursive>
 8004e9a:	bf00      	nop
 8004e9c:	20000182 	.word	0x20000182

08004ea0 <__sinit_lock_release>:
 8004ea0:	4801      	ldr	r0, [pc, #4]	; (8004ea8 <__sinit_lock_release+0x8>)
 8004ea2:	f000 b8a2 	b.w	8004fea <__retarget_lock_release_recursive>
 8004ea6:	bf00      	nop
 8004ea8:	20000182 	.word	0x20000182

08004eac <__sinit>:
 8004eac:	b510      	push	{r4, lr}
 8004eae:	4604      	mov	r4, r0
 8004eb0:	f7ff fff0 	bl	8004e94 <__sinit_lock_acquire>
 8004eb4:	69a3      	ldr	r3, [r4, #24]
 8004eb6:	b11b      	cbz	r3, 8004ec0 <__sinit+0x14>
 8004eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ebc:	f7ff bff0 	b.w	8004ea0 <__sinit_lock_release>
 8004ec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ec4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ec6:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <__sinit+0x68>)
 8004ec8:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <__sinit+0x6c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ece:	42a3      	cmp	r3, r4
 8004ed0:	bf04      	itt	eq
 8004ed2:	2301      	moveq	r3, #1
 8004ed4:	61a3      	streq	r3, [r4, #24]
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f000 f820 	bl	8004f1c <__sfp>
 8004edc:	6060      	str	r0, [r4, #4]
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f000 f81c 	bl	8004f1c <__sfp>
 8004ee4:	60a0      	str	r0, [r4, #8]
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 f818 	bl	8004f1c <__sfp>
 8004eec:	2200      	movs	r2, #0
 8004eee:	60e0      	str	r0, [r4, #12]
 8004ef0:	2104      	movs	r1, #4
 8004ef2:	6860      	ldr	r0, [r4, #4]
 8004ef4:	f7ff ff82 	bl	8004dfc <std>
 8004ef8:	68a0      	ldr	r0, [r4, #8]
 8004efa:	2201      	movs	r2, #1
 8004efc:	2109      	movs	r1, #9
 8004efe:	f7ff ff7d 	bl	8004dfc <std>
 8004f02:	68e0      	ldr	r0, [r4, #12]
 8004f04:	2202      	movs	r2, #2
 8004f06:	2112      	movs	r1, #18
 8004f08:	f7ff ff78 	bl	8004dfc <std>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	61a3      	str	r3, [r4, #24]
 8004f10:	e7d2      	b.n	8004eb8 <__sinit+0xc>
 8004f12:	bf00      	nop
 8004f14:	08005fe8 	.word	0x08005fe8
 8004f18:	08004e45 	.word	0x08004e45

08004f1c <__sfp>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	4607      	mov	r7, r0
 8004f20:	f7ff ffac 	bl	8004e7c <__sfp_lock_acquire>
 8004f24:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <__sfp+0x84>)
 8004f26:	681e      	ldr	r6, [r3, #0]
 8004f28:	69b3      	ldr	r3, [r6, #24]
 8004f2a:	b913      	cbnz	r3, 8004f32 <__sfp+0x16>
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	f7ff ffbd 	bl	8004eac <__sinit>
 8004f32:	3648      	adds	r6, #72	; 0x48
 8004f34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	d503      	bpl.n	8004f44 <__sfp+0x28>
 8004f3c:	6833      	ldr	r3, [r6, #0]
 8004f3e:	b30b      	cbz	r3, 8004f84 <__sfp+0x68>
 8004f40:	6836      	ldr	r6, [r6, #0]
 8004f42:	e7f7      	b.n	8004f34 <__sfp+0x18>
 8004f44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f48:	b9d5      	cbnz	r5, 8004f80 <__sfp+0x64>
 8004f4a:	4b16      	ldr	r3, [pc, #88]	; (8004fa4 <__sfp+0x88>)
 8004f4c:	60e3      	str	r3, [r4, #12]
 8004f4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f52:	6665      	str	r5, [r4, #100]	; 0x64
 8004f54:	f000 f847 	bl	8004fe6 <__retarget_lock_init_recursive>
 8004f58:	f7ff ff96 	bl	8004e88 <__sfp_lock_release>
 8004f5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f64:	6025      	str	r5, [r4, #0]
 8004f66:	61a5      	str	r5, [r4, #24]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f70:	f7ff fc2a 	bl	80047c8 <memset>
 8004f74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f80:	3468      	adds	r4, #104	; 0x68
 8004f82:	e7d9      	b.n	8004f38 <__sfp+0x1c>
 8004f84:	2104      	movs	r1, #4
 8004f86:	4638      	mov	r0, r7
 8004f88:	f7ff ff62 	bl	8004e50 <__sfmoreglue>
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	6030      	str	r0, [r6, #0]
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d1d5      	bne.n	8004f40 <__sfp+0x24>
 8004f94:	f7ff ff78 	bl	8004e88 <__sfp_lock_release>
 8004f98:	230c      	movs	r3, #12
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	e7ee      	b.n	8004f7c <__sfp+0x60>
 8004f9e:	bf00      	nop
 8004fa0:	08005fe8 	.word	0x08005fe8
 8004fa4:	ffff0001 	.word	0xffff0001

08004fa8 <_fwalk_reent>:
 8004fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fac:	4606      	mov	r6, r0
 8004fae:	4688      	mov	r8, r1
 8004fb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fb4:	2700      	movs	r7, #0
 8004fb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fba:	f1b9 0901 	subs.w	r9, r9, #1
 8004fbe:	d505      	bpl.n	8004fcc <_fwalk_reent+0x24>
 8004fc0:	6824      	ldr	r4, [r4, #0]
 8004fc2:	2c00      	cmp	r4, #0
 8004fc4:	d1f7      	bne.n	8004fb6 <_fwalk_reent+0xe>
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fcc:	89ab      	ldrh	r3, [r5, #12]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d907      	bls.n	8004fe2 <_fwalk_reent+0x3a>
 8004fd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	d003      	beq.n	8004fe2 <_fwalk_reent+0x3a>
 8004fda:	4629      	mov	r1, r5
 8004fdc:	4630      	mov	r0, r6
 8004fde:	47c0      	blx	r8
 8004fe0:	4307      	orrs	r7, r0
 8004fe2:	3568      	adds	r5, #104	; 0x68
 8004fe4:	e7e9      	b.n	8004fba <_fwalk_reent+0x12>

08004fe6 <__retarget_lock_init_recursive>:
 8004fe6:	4770      	bx	lr

08004fe8 <__retarget_lock_acquire_recursive>:
 8004fe8:	4770      	bx	lr

08004fea <__retarget_lock_release_recursive>:
 8004fea:	4770      	bx	lr

08004fec <__swhatbuf_r>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	460e      	mov	r6, r1
 8004ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff4:	2900      	cmp	r1, #0
 8004ff6:	b096      	sub	sp, #88	; 0x58
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	461d      	mov	r5, r3
 8004ffc:	da08      	bge.n	8005010 <__swhatbuf_r+0x24>
 8004ffe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	602a      	str	r2, [r5, #0]
 8005006:	061a      	lsls	r2, r3, #24
 8005008:	d410      	bmi.n	800502c <__swhatbuf_r+0x40>
 800500a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800500e:	e00e      	b.n	800502e <__swhatbuf_r+0x42>
 8005010:	466a      	mov	r2, sp
 8005012:	f000 fdf9 	bl	8005c08 <_fstat_r>
 8005016:	2800      	cmp	r0, #0
 8005018:	dbf1      	blt.n	8004ffe <__swhatbuf_r+0x12>
 800501a:	9a01      	ldr	r2, [sp, #4]
 800501c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005020:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005024:	425a      	negs	r2, r3
 8005026:	415a      	adcs	r2, r3
 8005028:	602a      	str	r2, [r5, #0]
 800502a:	e7ee      	b.n	800500a <__swhatbuf_r+0x1e>
 800502c:	2340      	movs	r3, #64	; 0x40
 800502e:	2000      	movs	r0, #0
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	b016      	add	sp, #88	; 0x58
 8005034:	bd70      	pop	{r4, r5, r6, pc}
	...

08005038 <__smakebuf_r>:
 8005038:	898b      	ldrh	r3, [r1, #12]
 800503a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800503c:	079d      	lsls	r5, r3, #30
 800503e:	4606      	mov	r6, r0
 8005040:	460c      	mov	r4, r1
 8005042:	d507      	bpl.n	8005054 <__smakebuf_r+0x1c>
 8005044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	2301      	movs	r3, #1
 800504e:	6163      	str	r3, [r4, #20]
 8005050:	b002      	add	sp, #8
 8005052:	bd70      	pop	{r4, r5, r6, pc}
 8005054:	ab01      	add	r3, sp, #4
 8005056:	466a      	mov	r2, sp
 8005058:	f7ff ffc8 	bl	8004fec <__swhatbuf_r>
 800505c:	9900      	ldr	r1, [sp, #0]
 800505e:	4605      	mov	r5, r0
 8005060:	4630      	mov	r0, r6
 8005062:	f000 f89d 	bl	80051a0 <_malloc_r>
 8005066:	b948      	cbnz	r0, 800507c <__smakebuf_r+0x44>
 8005068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506c:	059a      	lsls	r2, r3, #22
 800506e:	d4ef      	bmi.n	8005050 <__smakebuf_r+0x18>
 8005070:	f023 0303 	bic.w	r3, r3, #3
 8005074:	f043 0302 	orr.w	r3, r3, #2
 8005078:	81a3      	strh	r3, [r4, #12]
 800507a:	e7e3      	b.n	8005044 <__smakebuf_r+0xc>
 800507c:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <__smakebuf_r+0x7c>)
 800507e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	6020      	str	r0, [r4, #0]
 8005084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005088:	81a3      	strh	r3, [r4, #12]
 800508a:	9b00      	ldr	r3, [sp, #0]
 800508c:	6163      	str	r3, [r4, #20]
 800508e:	9b01      	ldr	r3, [sp, #4]
 8005090:	6120      	str	r0, [r4, #16]
 8005092:	b15b      	cbz	r3, 80050ac <__smakebuf_r+0x74>
 8005094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005098:	4630      	mov	r0, r6
 800509a:	f000 fdc7 	bl	8005c2c <_isatty_r>
 800509e:	b128      	cbz	r0, 80050ac <__smakebuf_r+0x74>
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	81a3      	strh	r3, [r4, #12]
 80050ac:	89a0      	ldrh	r0, [r4, #12]
 80050ae:	4305      	orrs	r5, r0
 80050b0:	81a5      	strh	r5, [r4, #12]
 80050b2:	e7cd      	b.n	8005050 <__smakebuf_r+0x18>
 80050b4:	08004e45 	.word	0x08004e45

080050b8 <malloc>:
 80050b8:	4b02      	ldr	r3, [pc, #8]	; (80050c4 <malloc+0xc>)
 80050ba:	4601      	mov	r1, r0
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	f000 b86f 	b.w	80051a0 <_malloc_r>
 80050c2:	bf00      	nop
 80050c4:	20000018 	.word	0x20000018

080050c8 <_free_r>:
 80050c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ca:	2900      	cmp	r1, #0
 80050cc:	d044      	beq.n	8005158 <_free_r+0x90>
 80050ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d2:	9001      	str	r0, [sp, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f1a1 0404 	sub.w	r4, r1, #4
 80050da:	bfb8      	it	lt
 80050dc:	18e4      	addlt	r4, r4, r3
 80050de:	f000 fde1 	bl	8005ca4 <__malloc_lock>
 80050e2:	4a1e      	ldr	r2, [pc, #120]	; (800515c <_free_r+0x94>)
 80050e4:	9801      	ldr	r0, [sp, #4]
 80050e6:	6813      	ldr	r3, [r2, #0]
 80050e8:	b933      	cbnz	r3, 80050f8 <_free_r+0x30>
 80050ea:	6063      	str	r3, [r4, #4]
 80050ec:	6014      	str	r4, [r2, #0]
 80050ee:	b003      	add	sp, #12
 80050f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050f4:	f000 bddc 	b.w	8005cb0 <__malloc_unlock>
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	d908      	bls.n	800510e <_free_r+0x46>
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	1961      	adds	r1, r4, r5
 8005100:	428b      	cmp	r3, r1
 8005102:	bf01      	itttt	eq
 8005104:	6819      	ldreq	r1, [r3, #0]
 8005106:	685b      	ldreq	r3, [r3, #4]
 8005108:	1949      	addeq	r1, r1, r5
 800510a:	6021      	streq	r1, [r4, #0]
 800510c:	e7ed      	b.n	80050ea <_free_r+0x22>
 800510e:	461a      	mov	r2, r3
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	b10b      	cbz	r3, 8005118 <_free_r+0x50>
 8005114:	42a3      	cmp	r3, r4
 8005116:	d9fa      	bls.n	800510e <_free_r+0x46>
 8005118:	6811      	ldr	r1, [r2, #0]
 800511a:	1855      	adds	r5, r2, r1
 800511c:	42a5      	cmp	r5, r4
 800511e:	d10b      	bne.n	8005138 <_free_r+0x70>
 8005120:	6824      	ldr	r4, [r4, #0]
 8005122:	4421      	add	r1, r4
 8005124:	1854      	adds	r4, r2, r1
 8005126:	42a3      	cmp	r3, r4
 8005128:	6011      	str	r1, [r2, #0]
 800512a:	d1e0      	bne.n	80050ee <_free_r+0x26>
 800512c:	681c      	ldr	r4, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	6053      	str	r3, [r2, #4]
 8005132:	4421      	add	r1, r4
 8005134:	6011      	str	r1, [r2, #0]
 8005136:	e7da      	b.n	80050ee <_free_r+0x26>
 8005138:	d902      	bls.n	8005140 <_free_r+0x78>
 800513a:	230c      	movs	r3, #12
 800513c:	6003      	str	r3, [r0, #0]
 800513e:	e7d6      	b.n	80050ee <_free_r+0x26>
 8005140:	6825      	ldr	r5, [r4, #0]
 8005142:	1961      	adds	r1, r4, r5
 8005144:	428b      	cmp	r3, r1
 8005146:	bf04      	itt	eq
 8005148:	6819      	ldreq	r1, [r3, #0]
 800514a:	685b      	ldreq	r3, [r3, #4]
 800514c:	6063      	str	r3, [r4, #4]
 800514e:	bf04      	itt	eq
 8005150:	1949      	addeq	r1, r1, r5
 8005152:	6021      	streq	r1, [r4, #0]
 8005154:	6054      	str	r4, [r2, #4]
 8005156:	e7ca      	b.n	80050ee <_free_r+0x26>
 8005158:	b003      	add	sp, #12
 800515a:	bd30      	pop	{r4, r5, pc}
 800515c:	20000184 	.word	0x20000184

08005160 <sbrk_aligned>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	4e0e      	ldr	r6, [pc, #56]	; (800519c <sbrk_aligned+0x3c>)
 8005164:	460c      	mov	r4, r1
 8005166:	6831      	ldr	r1, [r6, #0]
 8005168:	4605      	mov	r5, r0
 800516a:	b911      	cbnz	r1, 8005172 <sbrk_aligned+0x12>
 800516c:	f000 fcd6 	bl	8005b1c <_sbrk_r>
 8005170:	6030      	str	r0, [r6, #0]
 8005172:	4621      	mov	r1, r4
 8005174:	4628      	mov	r0, r5
 8005176:	f000 fcd1 	bl	8005b1c <_sbrk_r>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d00a      	beq.n	8005194 <sbrk_aligned+0x34>
 800517e:	1cc4      	adds	r4, r0, #3
 8005180:	f024 0403 	bic.w	r4, r4, #3
 8005184:	42a0      	cmp	r0, r4
 8005186:	d007      	beq.n	8005198 <sbrk_aligned+0x38>
 8005188:	1a21      	subs	r1, r4, r0
 800518a:	4628      	mov	r0, r5
 800518c:	f000 fcc6 	bl	8005b1c <_sbrk_r>
 8005190:	3001      	adds	r0, #1
 8005192:	d101      	bne.n	8005198 <sbrk_aligned+0x38>
 8005194:	f04f 34ff 	mov.w	r4, #4294967295
 8005198:	4620      	mov	r0, r4
 800519a:	bd70      	pop	{r4, r5, r6, pc}
 800519c:	20000188 	.word	0x20000188

080051a0 <_malloc_r>:
 80051a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a4:	1ccd      	adds	r5, r1, #3
 80051a6:	f025 0503 	bic.w	r5, r5, #3
 80051aa:	3508      	adds	r5, #8
 80051ac:	2d0c      	cmp	r5, #12
 80051ae:	bf38      	it	cc
 80051b0:	250c      	movcc	r5, #12
 80051b2:	2d00      	cmp	r5, #0
 80051b4:	4607      	mov	r7, r0
 80051b6:	db01      	blt.n	80051bc <_malloc_r+0x1c>
 80051b8:	42a9      	cmp	r1, r5
 80051ba:	d905      	bls.n	80051c8 <_malloc_r+0x28>
 80051bc:	230c      	movs	r3, #12
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	2600      	movs	r6, #0
 80051c2:	4630      	mov	r0, r6
 80051c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c8:	4e2e      	ldr	r6, [pc, #184]	; (8005284 <_malloc_r+0xe4>)
 80051ca:	f000 fd6b 	bl	8005ca4 <__malloc_lock>
 80051ce:	6833      	ldr	r3, [r6, #0]
 80051d0:	461c      	mov	r4, r3
 80051d2:	bb34      	cbnz	r4, 8005222 <_malloc_r+0x82>
 80051d4:	4629      	mov	r1, r5
 80051d6:	4638      	mov	r0, r7
 80051d8:	f7ff ffc2 	bl	8005160 <sbrk_aligned>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	4604      	mov	r4, r0
 80051e0:	d14d      	bne.n	800527e <_malloc_r+0xde>
 80051e2:	6834      	ldr	r4, [r6, #0]
 80051e4:	4626      	mov	r6, r4
 80051e6:	2e00      	cmp	r6, #0
 80051e8:	d140      	bne.n	800526c <_malloc_r+0xcc>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	4631      	mov	r1, r6
 80051ee:	4638      	mov	r0, r7
 80051f0:	eb04 0803 	add.w	r8, r4, r3
 80051f4:	f000 fc92 	bl	8005b1c <_sbrk_r>
 80051f8:	4580      	cmp	r8, r0
 80051fa:	d13a      	bne.n	8005272 <_malloc_r+0xd2>
 80051fc:	6821      	ldr	r1, [r4, #0]
 80051fe:	3503      	adds	r5, #3
 8005200:	1a6d      	subs	r5, r5, r1
 8005202:	f025 0503 	bic.w	r5, r5, #3
 8005206:	3508      	adds	r5, #8
 8005208:	2d0c      	cmp	r5, #12
 800520a:	bf38      	it	cc
 800520c:	250c      	movcc	r5, #12
 800520e:	4629      	mov	r1, r5
 8005210:	4638      	mov	r0, r7
 8005212:	f7ff ffa5 	bl	8005160 <sbrk_aligned>
 8005216:	3001      	adds	r0, #1
 8005218:	d02b      	beq.n	8005272 <_malloc_r+0xd2>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	442b      	add	r3, r5
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	e00e      	b.n	8005240 <_malloc_r+0xa0>
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	1b52      	subs	r2, r2, r5
 8005226:	d41e      	bmi.n	8005266 <_malloc_r+0xc6>
 8005228:	2a0b      	cmp	r2, #11
 800522a:	d916      	bls.n	800525a <_malloc_r+0xba>
 800522c:	1961      	adds	r1, r4, r5
 800522e:	42a3      	cmp	r3, r4
 8005230:	6025      	str	r5, [r4, #0]
 8005232:	bf18      	it	ne
 8005234:	6059      	strne	r1, [r3, #4]
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	bf08      	it	eq
 800523a:	6031      	streq	r1, [r6, #0]
 800523c:	5162      	str	r2, [r4, r5]
 800523e:	604b      	str	r3, [r1, #4]
 8005240:	4638      	mov	r0, r7
 8005242:	f104 060b 	add.w	r6, r4, #11
 8005246:	f000 fd33 	bl	8005cb0 <__malloc_unlock>
 800524a:	f026 0607 	bic.w	r6, r6, #7
 800524e:	1d23      	adds	r3, r4, #4
 8005250:	1af2      	subs	r2, r6, r3
 8005252:	d0b6      	beq.n	80051c2 <_malloc_r+0x22>
 8005254:	1b9b      	subs	r3, r3, r6
 8005256:	50a3      	str	r3, [r4, r2]
 8005258:	e7b3      	b.n	80051c2 <_malloc_r+0x22>
 800525a:	6862      	ldr	r2, [r4, #4]
 800525c:	42a3      	cmp	r3, r4
 800525e:	bf0c      	ite	eq
 8005260:	6032      	streq	r2, [r6, #0]
 8005262:	605a      	strne	r2, [r3, #4]
 8005264:	e7ec      	b.n	8005240 <_malloc_r+0xa0>
 8005266:	4623      	mov	r3, r4
 8005268:	6864      	ldr	r4, [r4, #4]
 800526a:	e7b2      	b.n	80051d2 <_malloc_r+0x32>
 800526c:	4634      	mov	r4, r6
 800526e:	6876      	ldr	r6, [r6, #4]
 8005270:	e7b9      	b.n	80051e6 <_malloc_r+0x46>
 8005272:	230c      	movs	r3, #12
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	4638      	mov	r0, r7
 8005278:	f000 fd1a 	bl	8005cb0 <__malloc_unlock>
 800527c:	e7a1      	b.n	80051c2 <_malloc_r+0x22>
 800527e:	6025      	str	r5, [r4, #0]
 8005280:	e7de      	b.n	8005240 <_malloc_r+0xa0>
 8005282:	bf00      	nop
 8005284:	20000184 	.word	0x20000184

08005288 <__ssputs_r>:
 8005288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800528c:	688e      	ldr	r6, [r1, #8]
 800528e:	429e      	cmp	r6, r3
 8005290:	4682      	mov	sl, r0
 8005292:	460c      	mov	r4, r1
 8005294:	4690      	mov	r8, r2
 8005296:	461f      	mov	r7, r3
 8005298:	d838      	bhi.n	800530c <__ssputs_r+0x84>
 800529a:	898a      	ldrh	r2, [r1, #12]
 800529c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052a0:	d032      	beq.n	8005308 <__ssputs_r+0x80>
 80052a2:	6825      	ldr	r5, [r4, #0]
 80052a4:	6909      	ldr	r1, [r1, #16]
 80052a6:	eba5 0901 	sub.w	r9, r5, r1
 80052aa:	6965      	ldr	r5, [r4, #20]
 80052ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052b4:	3301      	adds	r3, #1
 80052b6:	444b      	add	r3, r9
 80052b8:	106d      	asrs	r5, r5, #1
 80052ba:	429d      	cmp	r5, r3
 80052bc:	bf38      	it	cc
 80052be:	461d      	movcc	r5, r3
 80052c0:	0553      	lsls	r3, r2, #21
 80052c2:	d531      	bpl.n	8005328 <__ssputs_r+0xa0>
 80052c4:	4629      	mov	r1, r5
 80052c6:	f7ff ff6b 	bl	80051a0 <_malloc_r>
 80052ca:	4606      	mov	r6, r0
 80052cc:	b950      	cbnz	r0, 80052e4 <__ssputs_r+0x5c>
 80052ce:	230c      	movs	r3, #12
 80052d0:	f8ca 3000 	str.w	r3, [sl]
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052da:	81a3      	strh	r3, [r4, #12]
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295
 80052e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e4:	6921      	ldr	r1, [r4, #16]
 80052e6:	464a      	mov	r2, r9
 80052e8:	f7ff fa60 	bl	80047ac <memcpy>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	6126      	str	r6, [r4, #16]
 80052fa:	6165      	str	r5, [r4, #20]
 80052fc:	444e      	add	r6, r9
 80052fe:	eba5 0509 	sub.w	r5, r5, r9
 8005302:	6026      	str	r6, [r4, #0]
 8005304:	60a5      	str	r5, [r4, #8]
 8005306:	463e      	mov	r6, r7
 8005308:	42be      	cmp	r6, r7
 800530a:	d900      	bls.n	800530e <__ssputs_r+0x86>
 800530c:	463e      	mov	r6, r7
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	4632      	mov	r2, r6
 8005312:	4641      	mov	r1, r8
 8005314:	f000 fcac 	bl	8005c70 <memmove>
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	1b9b      	subs	r3, r3, r6
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	4433      	add	r3, r6
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	2000      	movs	r0, #0
 8005326:	e7db      	b.n	80052e0 <__ssputs_r+0x58>
 8005328:	462a      	mov	r2, r5
 800532a:	f000 fcc7 	bl	8005cbc <_realloc_r>
 800532e:	4606      	mov	r6, r0
 8005330:	2800      	cmp	r0, #0
 8005332:	d1e1      	bne.n	80052f8 <__ssputs_r+0x70>
 8005334:	6921      	ldr	r1, [r4, #16]
 8005336:	4650      	mov	r0, sl
 8005338:	f7ff fec6 	bl	80050c8 <_free_r>
 800533c:	e7c7      	b.n	80052ce <__ssputs_r+0x46>
	...

08005340 <_svfiprintf_r>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	4698      	mov	r8, r3
 8005346:	898b      	ldrh	r3, [r1, #12]
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	b09d      	sub	sp, #116	; 0x74
 800534c:	4607      	mov	r7, r0
 800534e:	460d      	mov	r5, r1
 8005350:	4614      	mov	r4, r2
 8005352:	d50e      	bpl.n	8005372 <_svfiprintf_r+0x32>
 8005354:	690b      	ldr	r3, [r1, #16]
 8005356:	b963      	cbnz	r3, 8005372 <_svfiprintf_r+0x32>
 8005358:	2140      	movs	r1, #64	; 0x40
 800535a:	f7ff ff21 	bl	80051a0 <_malloc_r>
 800535e:	6028      	str	r0, [r5, #0]
 8005360:	6128      	str	r0, [r5, #16]
 8005362:	b920      	cbnz	r0, 800536e <_svfiprintf_r+0x2e>
 8005364:	230c      	movs	r3, #12
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	e0d1      	b.n	8005512 <_svfiprintf_r+0x1d2>
 800536e:	2340      	movs	r3, #64	; 0x40
 8005370:	616b      	str	r3, [r5, #20]
 8005372:	2300      	movs	r3, #0
 8005374:	9309      	str	r3, [sp, #36]	; 0x24
 8005376:	2320      	movs	r3, #32
 8005378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800537c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005380:	2330      	movs	r3, #48	; 0x30
 8005382:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800552c <_svfiprintf_r+0x1ec>
 8005386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800538a:	f04f 0901 	mov.w	r9, #1
 800538e:	4623      	mov	r3, r4
 8005390:	469a      	mov	sl, r3
 8005392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005396:	b10a      	cbz	r2, 800539c <_svfiprintf_r+0x5c>
 8005398:	2a25      	cmp	r2, #37	; 0x25
 800539a:	d1f9      	bne.n	8005390 <_svfiprintf_r+0x50>
 800539c:	ebba 0b04 	subs.w	fp, sl, r4
 80053a0:	d00b      	beq.n	80053ba <_svfiprintf_r+0x7a>
 80053a2:	465b      	mov	r3, fp
 80053a4:	4622      	mov	r2, r4
 80053a6:	4629      	mov	r1, r5
 80053a8:	4638      	mov	r0, r7
 80053aa:	f7ff ff6d 	bl	8005288 <__ssputs_r>
 80053ae:	3001      	adds	r0, #1
 80053b0:	f000 80aa 	beq.w	8005508 <_svfiprintf_r+0x1c8>
 80053b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053b6:	445a      	add	r2, fp
 80053b8:	9209      	str	r2, [sp, #36]	; 0x24
 80053ba:	f89a 3000 	ldrb.w	r3, [sl]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 80a2 	beq.w	8005508 <_svfiprintf_r+0x1c8>
 80053c4:	2300      	movs	r3, #0
 80053c6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053ce:	f10a 0a01 	add.w	sl, sl, #1
 80053d2:	9304      	str	r3, [sp, #16]
 80053d4:	9307      	str	r3, [sp, #28]
 80053d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053da:	931a      	str	r3, [sp, #104]	; 0x68
 80053dc:	4654      	mov	r4, sl
 80053de:	2205      	movs	r2, #5
 80053e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e4:	4851      	ldr	r0, [pc, #324]	; (800552c <_svfiprintf_r+0x1ec>)
 80053e6:	f7fa fef3 	bl	80001d0 <memchr>
 80053ea:	9a04      	ldr	r2, [sp, #16]
 80053ec:	b9d8      	cbnz	r0, 8005426 <_svfiprintf_r+0xe6>
 80053ee:	06d0      	lsls	r0, r2, #27
 80053f0:	bf44      	itt	mi
 80053f2:	2320      	movmi	r3, #32
 80053f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f8:	0711      	lsls	r1, r2, #28
 80053fa:	bf44      	itt	mi
 80053fc:	232b      	movmi	r3, #43	; 0x2b
 80053fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005402:	f89a 3000 	ldrb.w	r3, [sl]
 8005406:	2b2a      	cmp	r3, #42	; 0x2a
 8005408:	d015      	beq.n	8005436 <_svfiprintf_r+0xf6>
 800540a:	9a07      	ldr	r2, [sp, #28]
 800540c:	4654      	mov	r4, sl
 800540e:	2000      	movs	r0, #0
 8005410:	f04f 0c0a 	mov.w	ip, #10
 8005414:	4621      	mov	r1, r4
 8005416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800541a:	3b30      	subs	r3, #48	; 0x30
 800541c:	2b09      	cmp	r3, #9
 800541e:	d94e      	bls.n	80054be <_svfiprintf_r+0x17e>
 8005420:	b1b0      	cbz	r0, 8005450 <_svfiprintf_r+0x110>
 8005422:	9207      	str	r2, [sp, #28]
 8005424:	e014      	b.n	8005450 <_svfiprintf_r+0x110>
 8005426:	eba0 0308 	sub.w	r3, r0, r8
 800542a:	fa09 f303 	lsl.w	r3, r9, r3
 800542e:	4313      	orrs	r3, r2
 8005430:	9304      	str	r3, [sp, #16]
 8005432:	46a2      	mov	sl, r4
 8005434:	e7d2      	b.n	80053dc <_svfiprintf_r+0x9c>
 8005436:	9b03      	ldr	r3, [sp, #12]
 8005438:	1d19      	adds	r1, r3, #4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	9103      	str	r1, [sp, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfbb      	ittet	lt
 8005442:	425b      	neglt	r3, r3
 8005444:	f042 0202 	orrlt.w	r2, r2, #2
 8005448:	9307      	strge	r3, [sp, #28]
 800544a:	9307      	strlt	r3, [sp, #28]
 800544c:	bfb8      	it	lt
 800544e:	9204      	strlt	r2, [sp, #16]
 8005450:	7823      	ldrb	r3, [r4, #0]
 8005452:	2b2e      	cmp	r3, #46	; 0x2e
 8005454:	d10c      	bne.n	8005470 <_svfiprintf_r+0x130>
 8005456:	7863      	ldrb	r3, [r4, #1]
 8005458:	2b2a      	cmp	r3, #42	; 0x2a
 800545a:	d135      	bne.n	80054c8 <_svfiprintf_r+0x188>
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	1d1a      	adds	r2, r3, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	9203      	str	r2, [sp, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	bfb8      	it	lt
 8005468:	f04f 33ff 	movlt.w	r3, #4294967295
 800546c:	3402      	adds	r4, #2
 800546e:	9305      	str	r3, [sp, #20]
 8005470:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800553c <_svfiprintf_r+0x1fc>
 8005474:	7821      	ldrb	r1, [r4, #0]
 8005476:	2203      	movs	r2, #3
 8005478:	4650      	mov	r0, sl
 800547a:	f7fa fea9 	bl	80001d0 <memchr>
 800547e:	b140      	cbz	r0, 8005492 <_svfiprintf_r+0x152>
 8005480:	2340      	movs	r3, #64	; 0x40
 8005482:	eba0 000a 	sub.w	r0, r0, sl
 8005486:	fa03 f000 	lsl.w	r0, r3, r0
 800548a:	9b04      	ldr	r3, [sp, #16]
 800548c:	4303      	orrs	r3, r0
 800548e:	3401      	adds	r4, #1
 8005490:	9304      	str	r3, [sp, #16]
 8005492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005496:	4826      	ldr	r0, [pc, #152]	; (8005530 <_svfiprintf_r+0x1f0>)
 8005498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800549c:	2206      	movs	r2, #6
 800549e:	f7fa fe97 	bl	80001d0 <memchr>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d038      	beq.n	8005518 <_svfiprintf_r+0x1d8>
 80054a6:	4b23      	ldr	r3, [pc, #140]	; (8005534 <_svfiprintf_r+0x1f4>)
 80054a8:	bb1b      	cbnz	r3, 80054f2 <_svfiprintf_r+0x1b2>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	3307      	adds	r3, #7
 80054ae:	f023 0307 	bic.w	r3, r3, #7
 80054b2:	3308      	adds	r3, #8
 80054b4:	9303      	str	r3, [sp, #12]
 80054b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b8:	4433      	add	r3, r6
 80054ba:	9309      	str	r3, [sp, #36]	; 0x24
 80054bc:	e767      	b.n	800538e <_svfiprintf_r+0x4e>
 80054be:	fb0c 3202 	mla	r2, ip, r2, r3
 80054c2:	460c      	mov	r4, r1
 80054c4:	2001      	movs	r0, #1
 80054c6:	e7a5      	b.n	8005414 <_svfiprintf_r+0xd4>
 80054c8:	2300      	movs	r3, #0
 80054ca:	3401      	adds	r4, #1
 80054cc:	9305      	str	r3, [sp, #20]
 80054ce:	4619      	mov	r1, r3
 80054d0:	f04f 0c0a 	mov.w	ip, #10
 80054d4:	4620      	mov	r0, r4
 80054d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054da:	3a30      	subs	r2, #48	; 0x30
 80054dc:	2a09      	cmp	r2, #9
 80054de:	d903      	bls.n	80054e8 <_svfiprintf_r+0x1a8>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0c5      	beq.n	8005470 <_svfiprintf_r+0x130>
 80054e4:	9105      	str	r1, [sp, #20]
 80054e6:	e7c3      	b.n	8005470 <_svfiprintf_r+0x130>
 80054e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054ec:	4604      	mov	r4, r0
 80054ee:	2301      	movs	r3, #1
 80054f0:	e7f0      	b.n	80054d4 <_svfiprintf_r+0x194>
 80054f2:	ab03      	add	r3, sp, #12
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	462a      	mov	r2, r5
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <_svfiprintf_r+0x1f8>)
 80054fa:	a904      	add	r1, sp, #16
 80054fc:	4638      	mov	r0, r7
 80054fe:	f3af 8000 	nop.w
 8005502:	1c42      	adds	r2, r0, #1
 8005504:	4606      	mov	r6, r0
 8005506:	d1d6      	bne.n	80054b6 <_svfiprintf_r+0x176>
 8005508:	89ab      	ldrh	r3, [r5, #12]
 800550a:	065b      	lsls	r3, r3, #25
 800550c:	f53f af2c 	bmi.w	8005368 <_svfiprintf_r+0x28>
 8005510:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005512:	b01d      	add	sp, #116	; 0x74
 8005514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005518:	ab03      	add	r3, sp, #12
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	462a      	mov	r2, r5
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <_svfiprintf_r+0x1f8>)
 8005520:	a904      	add	r1, sp, #16
 8005522:	4638      	mov	r0, r7
 8005524:	f000 f9d4 	bl	80058d0 <_printf_i>
 8005528:	e7eb      	b.n	8005502 <_svfiprintf_r+0x1c2>
 800552a:	bf00      	nop
 800552c:	0800604c 	.word	0x0800604c
 8005530:	08006056 	.word	0x08006056
 8005534:	00000000 	.word	0x00000000
 8005538:	08005289 	.word	0x08005289
 800553c:	08006052 	.word	0x08006052

08005540 <__sfputc_r>:
 8005540:	6893      	ldr	r3, [r2, #8]
 8005542:	3b01      	subs	r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	b410      	push	{r4}
 8005548:	6093      	str	r3, [r2, #8]
 800554a:	da08      	bge.n	800555e <__sfputc_r+0x1e>
 800554c:	6994      	ldr	r4, [r2, #24]
 800554e:	42a3      	cmp	r3, r4
 8005550:	db01      	blt.n	8005556 <__sfputc_r+0x16>
 8005552:	290a      	cmp	r1, #10
 8005554:	d103      	bne.n	800555e <__sfputc_r+0x1e>
 8005556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800555a:	f7ff bacd 	b.w	8004af8 <__swbuf_r>
 800555e:	6813      	ldr	r3, [r2, #0]
 8005560:	1c58      	adds	r0, r3, #1
 8005562:	6010      	str	r0, [r2, #0]
 8005564:	7019      	strb	r1, [r3, #0]
 8005566:	4608      	mov	r0, r1
 8005568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800556c:	4770      	bx	lr

0800556e <__sfputs_r>:
 800556e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005570:	4606      	mov	r6, r0
 8005572:	460f      	mov	r7, r1
 8005574:	4614      	mov	r4, r2
 8005576:	18d5      	adds	r5, r2, r3
 8005578:	42ac      	cmp	r4, r5
 800557a:	d101      	bne.n	8005580 <__sfputs_r+0x12>
 800557c:	2000      	movs	r0, #0
 800557e:	e007      	b.n	8005590 <__sfputs_r+0x22>
 8005580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005584:	463a      	mov	r2, r7
 8005586:	4630      	mov	r0, r6
 8005588:	f7ff ffda 	bl	8005540 <__sfputc_r>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d1f3      	bne.n	8005578 <__sfputs_r+0xa>
 8005590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005594 <_vfiprintf_r>:
 8005594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005598:	460d      	mov	r5, r1
 800559a:	b09d      	sub	sp, #116	; 0x74
 800559c:	4614      	mov	r4, r2
 800559e:	4698      	mov	r8, r3
 80055a0:	4606      	mov	r6, r0
 80055a2:	b118      	cbz	r0, 80055ac <_vfiprintf_r+0x18>
 80055a4:	6983      	ldr	r3, [r0, #24]
 80055a6:	b90b      	cbnz	r3, 80055ac <_vfiprintf_r+0x18>
 80055a8:	f7ff fc80 	bl	8004eac <__sinit>
 80055ac:	4b89      	ldr	r3, [pc, #548]	; (80057d4 <_vfiprintf_r+0x240>)
 80055ae:	429d      	cmp	r5, r3
 80055b0:	d11b      	bne.n	80055ea <_vfiprintf_r+0x56>
 80055b2:	6875      	ldr	r5, [r6, #4]
 80055b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055b6:	07d9      	lsls	r1, r3, #31
 80055b8:	d405      	bmi.n	80055c6 <_vfiprintf_r+0x32>
 80055ba:	89ab      	ldrh	r3, [r5, #12]
 80055bc:	059a      	lsls	r2, r3, #22
 80055be:	d402      	bmi.n	80055c6 <_vfiprintf_r+0x32>
 80055c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055c2:	f7ff fd11 	bl	8004fe8 <__retarget_lock_acquire_recursive>
 80055c6:	89ab      	ldrh	r3, [r5, #12]
 80055c8:	071b      	lsls	r3, r3, #28
 80055ca:	d501      	bpl.n	80055d0 <_vfiprintf_r+0x3c>
 80055cc:	692b      	ldr	r3, [r5, #16]
 80055ce:	b9eb      	cbnz	r3, 800560c <_vfiprintf_r+0x78>
 80055d0:	4629      	mov	r1, r5
 80055d2:	4630      	mov	r0, r6
 80055d4:	f7ff fae2 	bl	8004b9c <__swsetup_r>
 80055d8:	b1c0      	cbz	r0, 800560c <_vfiprintf_r+0x78>
 80055da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055dc:	07dc      	lsls	r4, r3, #31
 80055de:	d50e      	bpl.n	80055fe <_vfiprintf_r+0x6a>
 80055e0:	f04f 30ff 	mov.w	r0, #4294967295
 80055e4:	b01d      	add	sp, #116	; 0x74
 80055e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ea:	4b7b      	ldr	r3, [pc, #492]	; (80057d8 <_vfiprintf_r+0x244>)
 80055ec:	429d      	cmp	r5, r3
 80055ee:	d101      	bne.n	80055f4 <_vfiprintf_r+0x60>
 80055f0:	68b5      	ldr	r5, [r6, #8]
 80055f2:	e7df      	b.n	80055b4 <_vfiprintf_r+0x20>
 80055f4:	4b79      	ldr	r3, [pc, #484]	; (80057dc <_vfiprintf_r+0x248>)
 80055f6:	429d      	cmp	r5, r3
 80055f8:	bf08      	it	eq
 80055fa:	68f5      	ldreq	r5, [r6, #12]
 80055fc:	e7da      	b.n	80055b4 <_vfiprintf_r+0x20>
 80055fe:	89ab      	ldrh	r3, [r5, #12]
 8005600:	0598      	lsls	r0, r3, #22
 8005602:	d4ed      	bmi.n	80055e0 <_vfiprintf_r+0x4c>
 8005604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005606:	f7ff fcf0 	bl	8004fea <__retarget_lock_release_recursive>
 800560a:	e7e9      	b.n	80055e0 <_vfiprintf_r+0x4c>
 800560c:	2300      	movs	r3, #0
 800560e:	9309      	str	r3, [sp, #36]	; 0x24
 8005610:	2320      	movs	r3, #32
 8005612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005616:	f8cd 800c 	str.w	r8, [sp, #12]
 800561a:	2330      	movs	r3, #48	; 0x30
 800561c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80057e0 <_vfiprintf_r+0x24c>
 8005620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005624:	f04f 0901 	mov.w	r9, #1
 8005628:	4623      	mov	r3, r4
 800562a:	469a      	mov	sl, r3
 800562c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005630:	b10a      	cbz	r2, 8005636 <_vfiprintf_r+0xa2>
 8005632:	2a25      	cmp	r2, #37	; 0x25
 8005634:	d1f9      	bne.n	800562a <_vfiprintf_r+0x96>
 8005636:	ebba 0b04 	subs.w	fp, sl, r4
 800563a:	d00b      	beq.n	8005654 <_vfiprintf_r+0xc0>
 800563c:	465b      	mov	r3, fp
 800563e:	4622      	mov	r2, r4
 8005640:	4629      	mov	r1, r5
 8005642:	4630      	mov	r0, r6
 8005644:	f7ff ff93 	bl	800556e <__sfputs_r>
 8005648:	3001      	adds	r0, #1
 800564a:	f000 80aa 	beq.w	80057a2 <_vfiprintf_r+0x20e>
 800564e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005650:	445a      	add	r2, fp
 8005652:	9209      	str	r2, [sp, #36]	; 0x24
 8005654:	f89a 3000 	ldrb.w	r3, [sl]
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80a2 	beq.w	80057a2 <_vfiprintf_r+0x20e>
 800565e:	2300      	movs	r3, #0
 8005660:	f04f 32ff 	mov.w	r2, #4294967295
 8005664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005668:	f10a 0a01 	add.w	sl, sl, #1
 800566c:	9304      	str	r3, [sp, #16]
 800566e:	9307      	str	r3, [sp, #28]
 8005670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005674:	931a      	str	r3, [sp, #104]	; 0x68
 8005676:	4654      	mov	r4, sl
 8005678:	2205      	movs	r2, #5
 800567a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800567e:	4858      	ldr	r0, [pc, #352]	; (80057e0 <_vfiprintf_r+0x24c>)
 8005680:	f7fa fda6 	bl	80001d0 <memchr>
 8005684:	9a04      	ldr	r2, [sp, #16]
 8005686:	b9d8      	cbnz	r0, 80056c0 <_vfiprintf_r+0x12c>
 8005688:	06d1      	lsls	r1, r2, #27
 800568a:	bf44      	itt	mi
 800568c:	2320      	movmi	r3, #32
 800568e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005692:	0713      	lsls	r3, r2, #28
 8005694:	bf44      	itt	mi
 8005696:	232b      	movmi	r3, #43	; 0x2b
 8005698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800569c:	f89a 3000 	ldrb.w	r3, [sl]
 80056a0:	2b2a      	cmp	r3, #42	; 0x2a
 80056a2:	d015      	beq.n	80056d0 <_vfiprintf_r+0x13c>
 80056a4:	9a07      	ldr	r2, [sp, #28]
 80056a6:	4654      	mov	r4, sl
 80056a8:	2000      	movs	r0, #0
 80056aa:	f04f 0c0a 	mov.w	ip, #10
 80056ae:	4621      	mov	r1, r4
 80056b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056b4:	3b30      	subs	r3, #48	; 0x30
 80056b6:	2b09      	cmp	r3, #9
 80056b8:	d94e      	bls.n	8005758 <_vfiprintf_r+0x1c4>
 80056ba:	b1b0      	cbz	r0, 80056ea <_vfiprintf_r+0x156>
 80056bc:	9207      	str	r2, [sp, #28]
 80056be:	e014      	b.n	80056ea <_vfiprintf_r+0x156>
 80056c0:	eba0 0308 	sub.w	r3, r0, r8
 80056c4:	fa09 f303 	lsl.w	r3, r9, r3
 80056c8:	4313      	orrs	r3, r2
 80056ca:	9304      	str	r3, [sp, #16]
 80056cc:	46a2      	mov	sl, r4
 80056ce:	e7d2      	b.n	8005676 <_vfiprintf_r+0xe2>
 80056d0:	9b03      	ldr	r3, [sp, #12]
 80056d2:	1d19      	adds	r1, r3, #4
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	9103      	str	r1, [sp, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bfbb      	ittet	lt
 80056dc:	425b      	neglt	r3, r3
 80056de:	f042 0202 	orrlt.w	r2, r2, #2
 80056e2:	9307      	strge	r3, [sp, #28]
 80056e4:	9307      	strlt	r3, [sp, #28]
 80056e6:	bfb8      	it	lt
 80056e8:	9204      	strlt	r2, [sp, #16]
 80056ea:	7823      	ldrb	r3, [r4, #0]
 80056ec:	2b2e      	cmp	r3, #46	; 0x2e
 80056ee:	d10c      	bne.n	800570a <_vfiprintf_r+0x176>
 80056f0:	7863      	ldrb	r3, [r4, #1]
 80056f2:	2b2a      	cmp	r3, #42	; 0x2a
 80056f4:	d135      	bne.n	8005762 <_vfiprintf_r+0x1ce>
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	1d1a      	adds	r2, r3, #4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	9203      	str	r2, [sp, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bfb8      	it	lt
 8005702:	f04f 33ff 	movlt.w	r3, #4294967295
 8005706:	3402      	adds	r4, #2
 8005708:	9305      	str	r3, [sp, #20]
 800570a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80057f0 <_vfiprintf_r+0x25c>
 800570e:	7821      	ldrb	r1, [r4, #0]
 8005710:	2203      	movs	r2, #3
 8005712:	4650      	mov	r0, sl
 8005714:	f7fa fd5c 	bl	80001d0 <memchr>
 8005718:	b140      	cbz	r0, 800572c <_vfiprintf_r+0x198>
 800571a:	2340      	movs	r3, #64	; 0x40
 800571c:	eba0 000a 	sub.w	r0, r0, sl
 8005720:	fa03 f000 	lsl.w	r0, r3, r0
 8005724:	9b04      	ldr	r3, [sp, #16]
 8005726:	4303      	orrs	r3, r0
 8005728:	3401      	adds	r4, #1
 800572a:	9304      	str	r3, [sp, #16]
 800572c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005730:	482c      	ldr	r0, [pc, #176]	; (80057e4 <_vfiprintf_r+0x250>)
 8005732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005736:	2206      	movs	r2, #6
 8005738:	f7fa fd4a 	bl	80001d0 <memchr>
 800573c:	2800      	cmp	r0, #0
 800573e:	d03f      	beq.n	80057c0 <_vfiprintf_r+0x22c>
 8005740:	4b29      	ldr	r3, [pc, #164]	; (80057e8 <_vfiprintf_r+0x254>)
 8005742:	bb1b      	cbnz	r3, 800578c <_vfiprintf_r+0x1f8>
 8005744:	9b03      	ldr	r3, [sp, #12]
 8005746:	3307      	adds	r3, #7
 8005748:	f023 0307 	bic.w	r3, r3, #7
 800574c:	3308      	adds	r3, #8
 800574e:	9303      	str	r3, [sp, #12]
 8005750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005752:	443b      	add	r3, r7
 8005754:	9309      	str	r3, [sp, #36]	; 0x24
 8005756:	e767      	b.n	8005628 <_vfiprintf_r+0x94>
 8005758:	fb0c 3202 	mla	r2, ip, r2, r3
 800575c:	460c      	mov	r4, r1
 800575e:	2001      	movs	r0, #1
 8005760:	e7a5      	b.n	80056ae <_vfiprintf_r+0x11a>
 8005762:	2300      	movs	r3, #0
 8005764:	3401      	adds	r4, #1
 8005766:	9305      	str	r3, [sp, #20]
 8005768:	4619      	mov	r1, r3
 800576a:	f04f 0c0a 	mov.w	ip, #10
 800576e:	4620      	mov	r0, r4
 8005770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005774:	3a30      	subs	r2, #48	; 0x30
 8005776:	2a09      	cmp	r2, #9
 8005778:	d903      	bls.n	8005782 <_vfiprintf_r+0x1ee>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0c5      	beq.n	800570a <_vfiprintf_r+0x176>
 800577e:	9105      	str	r1, [sp, #20]
 8005780:	e7c3      	b.n	800570a <_vfiprintf_r+0x176>
 8005782:	fb0c 2101 	mla	r1, ip, r1, r2
 8005786:	4604      	mov	r4, r0
 8005788:	2301      	movs	r3, #1
 800578a:	e7f0      	b.n	800576e <_vfiprintf_r+0x1da>
 800578c:	ab03      	add	r3, sp, #12
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	462a      	mov	r2, r5
 8005792:	4b16      	ldr	r3, [pc, #88]	; (80057ec <_vfiprintf_r+0x258>)
 8005794:	a904      	add	r1, sp, #16
 8005796:	4630      	mov	r0, r6
 8005798:	f3af 8000 	nop.w
 800579c:	4607      	mov	r7, r0
 800579e:	1c78      	adds	r0, r7, #1
 80057a0:	d1d6      	bne.n	8005750 <_vfiprintf_r+0x1bc>
 80057a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057a4:	07d9      	lsls	r1, r3, #31
 80057a6:	d405      	bmi.n	80057b4 <_vfiprintf_r+0x220>
 80057a8:	89ab      	ldrh	r3, [r5, #12]
 80057aa:	059a      	lsls	r2, r3, #22
 80057ac:	d402      	bmi.n	80057b4 <_vfiprintf_r+0x220>
 80057ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057b0:	f7ff fc1b 	bl	8004fea <__retarget_lock_release_recursive>
 80057b4:	89ab      	ldrh	r3, [r5, #12]
 80057b6:	065b      	lsls	r3, r3, #25
 80057b8:	f53f af12 	bmi.w	80055e0 <_vfiprintf_r+0x4c>
 80057bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057be:	e711      	b.n	80055e4 <_vfiprintf_r+0x50>
 80057c0:	ab03      	add	r3, sp, #12
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	462a      	mov	r2, r5
 80057c6:	4b09      	ldr	r3, [pc, #36]	; (80057ec <_vfiprintf_r+0x258>)
 80057c8:	a904      	add	r1, sp, #16
 80057ca:	4630      	mov	r0, r6
 80057cc:	f000 f880 	bl	80058d0 <_printf_i>
 80057d0:	e7e4      	b.n	800579c <_vfiprintf_r+0x208>
 80057d2:	bf00      	nop
 80057d4:	0800600c 	.word	0x0800600c
 80057d8:	0800602c 	.word	0x0800602c
 80057dc:	08005fec 	.word	0x08005fec
 80057e0:	0800604c 	.word	0x0800604c
 80057e4:	08006056 	.word	0x08006056
 80057e8:	00000000 	.word	0x00000000
 80057ec:	0800556f 	.word	0x0800556f
 80057f0:	08006052 	.word	0x08006052

080057f4 <_printf_common>:
 80057f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	4616      	mov	r6, r2
 80057fa:	4699      	mov	r9, r3
 80057fc:	688a      	ldr	r2, [r1, #8]
 80057fe:	690b      	ldr	r3, [r1, #16]
 8005800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005804:	4293      	cmp	r3, r2
 8005806:	bfb8      	it	lt
 8005808:	4613      	movlt	r3, r2
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005810:	4607      	mov	r7, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b10a      	cbz	r2, 800581a <_printf_common+0x26>
 8005816:	3301      	adds	r3, #1
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	0699      	lsls	r1, r3, #26
 800581e:	bf42      	ittt	mi
 8005820:	6833      	ldrmi	r3, [r6, #0]
 8005822:	3302      	addmi	r3, #2
 8005824:	6033      	strmi	r3, [r6, #0]
 8005826:	6825      	ldr	r5, [r4, #0]
 8005828:	f015 0506 	ands.w	r5, r5, #6
 800582c:	d106      	bne.n	800583c <_printf_common+0x48>
 800582e:	f104 0a19 	add.w	sl, r4, #25
 8005832:	68e3      	ldr	r3, [r4, #12]
 8005834:	6832      	ldr	r2, [r6, #0]
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	42ab      	cmp	r3, r5
 800583a:	dc26      	bgt.n	800588a <_printf_common+0x96>
 800583c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005840:	1e13      	subs	r3, r2, #0
 8005842:	6822      	ldr	r2, [r4, #0]
 8005844:	bf18      	it	ne
 8005846:	2301      	movne	r3, #1
 8005848:	0692      	lsls	r2, r2, #26
 800584a:	d42b      	bmi.n	80058a4 <_printf_common+0xb0>
 800584c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005850:	4649      	mov	r1, r9
 8005852:	4638      	mov	r0, r7
 8005854:	47c0      	blx	r8
 8005856:	3001      	adds	r0, #1
 8005858:	d01e      	beq.n	8005898 <_printf_common+0xa4>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	68e5      	ldr	r5, [r4, #12]
 800585e:	6832      	ldr	r2, [r6, #0]
 8005860:	f003 0306 	and.w	r3, r3, #6
 8005864:	2b04      	cmp	r3, #4
 8005866:	bf08      	it	eq
 8005868:	1aad      	subeq	r5, r5, r2
 800586a:	68a3      	ldr	r3, [r4, #8]
 800586c:	6922      	ldr	r2, [r4, #16]
 800586e:	bf0c      	ite	eq
 8005870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005874:	2500      	movne	r5, #0
 8005876:	4293      	cmp	r3, r2
 8005878:	bfc4      	itt	gt
 800587a:	1a9b      	subgt	r3, r3, r2
 800587c:	18ed      	addgt	r5, r5, r3
 800587e:	2600      	movs	r6, #0
 8005880:	341a      	adds	r4, #26
 8005882:	42b5      	cmp	r5, r6
 8005884:	d11a      	bne.n	80058bc <_printf_common+0xc8>
 8005886:	2000      	movs	r0, #0
 8005888:	e008      	b.n	800589c <_printf_common+0xa8>
 800588a:	2301      	movs	r3, #1
 800588c:	4652      	mov	r2, sl
 800588e:	4649      	mov	r1, r9
 8005890:	4638      	mov	r0, r7
 8005892:	47c0      	blx	r8
 8005894:	3001      	adds	r0, #1
 8005896:	d103      	bne.n	80058a0 <_printf_common+0xac>
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a0:	3501      	adds	r5, #1
 80058a2:	e7c6      	b.n	8005832 <_printf_common+0x3e>
 80058a4:	18e1      	adds	r1, r4, r3
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	2030      	movs	r0, #48	; 0x30
 80058aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ae:	4422      	add	r2, r4
 80058b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b8:	3302      	adds	r3, #2
 80058ba:	e7c7      	b.n	800584c <_printf_common+0x58>
 80058bc:	2301      	movs	r3, #1
 80058be:	4622      	mov	r2, r4
 80058c0:	4649      	mov	r1, r9
 80058c2:	4638      	mov	r0, r7
 80058c4:	47c0      	blx	r8
 80058c6:	3001      	adds	r0, #1
 80058c8:	d0e6      	beq.n	8005898 <_printf_common+0xa4>
 80058ca:	3601      	adds	r6, #1
 80058cc:	e7d9      	b.n	8005882 <_printf_common+0x8e>
	...

080058d0 <_printf_i>:
 80058d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	7e0f      	ldrb	r7, [r1, #24]
 80058d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058d8:	2f78      	cmp	r7, #120	; 0x78
 80058da:	4691      	mov	r9, r2
 80058dc:	4680      	mov	r8, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	469a      	mov	sl, r3
 80058e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058e6:	d807      	bhi.n	80058f8 <_printf_i+0x28>
 80058e8:	2f62      	cmp	r7, #98	; 0x62
 80058ea:	d80a      	bhi.n	8005902 <_printf_i+0x32>
 80058ec:	2f00      	cmp	r7, #0
 80058ee:	f000 80d8 	beq.w	8005aa2 <_printf_i+0x1d2>
 80058f2:	2f58      	cmp	r7, #88	; 0x58
 80058f4:	f000 80a3 	beq.w	8005a3e <_printf_i+0x16e>
 80058f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005900:	e03a      	b.n	8005978 <_printf_i+0xa8>
 8005902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005906:	2b15      	cmp	r3, #21
 8005908:	d8f6      	bhi.n	80058f8 <_printf_i+0x28>
 800590a:	a101      	add	r1, pc, #4	; (adr r1, 8005910 <_printf_i+0x40>)
 800590c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005910:	08005969 	.word	0x08005969
 8005914:	0800597d 	.word	0x0800597d
 8005918:	080058f9 	.word	0x080058f9
 800591c:	080058f9 	.word	0x080058f9
 8005920:	080058f9 	.word	0x080058f9
 8005924:	080058f9 	.word	0x080058f9
 8005928:	0800597d 	.word	0x0800597d
 800592c:	080058f9 	.word	0x080058f9
 8005930:	080058f9 	.word	0x080058f9
 8005934:	080058f9 	.word	0x080058f9
 8005938:	080058f9 	.word	0x080058f9
 800593c:	08005a89 	.word	0x08005a89
 8005940:	080059ad 	.word	0x080059ad
 8005944:	08005a6b 	.word	0x08005a6b
 8005948:	080058f9 	.word	0x080058f9
 800594c:	080058f9 	.word	0x080058f9
 8005950:	08005aab 	.word	0x08005aab
 8005954:	080058f9 	.word	0x080058f9
 8005958:	080059ad 	.word	0x080059ad
 800595c:	080058f9 	.word	0x080058f9
 8005960:	080058f9 	.word	0x080058f9
 8005964:	08005a73 	.word	0x08005a73
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	1d1a      	adds	r2, r3, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	602a      	str	r2, [r5, #0]
 8005970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005978:	2301      	movs	r3, #1
 800597a:	e0a3      	b.n	8005ac4 <_printf_i+0x1f4>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	6829      	ldr	r1, [r5, #0]
 8005980:	0606      	lsls	r6, r0, #24
 8005982:	f101 0304 	add.w	r3, r1, #4
 8005986:	d50a      	bpl.n	800599e <_printf_i+0xce>
 8005988:	680e      	ldr	r6, [r1, #0]
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	2e00      	cmp	r6, #0
 800598e:	da03      	bge.n	8005998 <_printf_i+0xc8>
 8005990:	232d      	movs	r3, #45	; 0x2d
 8005992:	4276      	negs	r6, r6
 8005994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005998:	485e      	ldr	r0, [pc, #376]	; (8005b14 <_printf_i+0x244>)
 800599a:	230a      	movs	r3, #10
 800599c:	e019      	b.n	80059d2 <_printf_i+0x102>
 800599e:	680e      	ldr	r6, [r1, #0]
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059a6:	bf18      	it	ne
 80059a8:	b236      	sxthne	r6, r6
 80059aa:	e7ef      	b.n	800598c <_printf_i+0xbc>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	1d19      	adds	r1, r3, #4
 80059b2:	6029      	str	r1, [r5, #0]
 80059b4:	0601      	lsls	r1, r0, #24
 80059b6:	d501      	bpl.n	80059bc <_printf_i+0xec>
 80059b8:	681e      	ldr	r6, [r3, #0]
 80059ba:	e002      	b.n	80059c2 <_printf_i+0xf2>
 80059bc:	0646      	lsls	r6, r0, #25
 80059be:	d5fb      	bpl.n	80059b8 <_printf_i+0xe8>
 80059c0:	881e      	ldrh	r6, [r3, #0]
 80059c2:	4854      	ldr	r0, [pc, #336]	; (8005b14 <_printf_i+0x244>)
 80059c4:	2f6f      	cmp	r7, #111	; 0x6f
 80059c6:	bf0c      	ite	eq
 80059c8:	2308      	moveq	r3, #8
 80059ca:	230a      	movne	r3, #10
 80059cc:	2100      	movs	r1, #0
 80059ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059d2:	6865      	ldr	r5, [r4, #4]
 80059d4:	60a5      	str	r5, [r4, #8]
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	bfa2      	ittt	ge
 80059da:	6821      	ldrge	r1, [r4, #0]
 80059dc:	f021 0104 	bicge.w	r1, r1, #4
 80059e0:	6021      	strge	r1, [r4, #0]
 80059e2:	b90e      	cbnz	r6, 80059e8 <_printf_i+0x118>
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	d04d      	beq.n	8005a84 <_printf_i+0x1b4>
 80059e8:	4615      	mov	r5, r2
 80059ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ee:	fb03 6711 	mls	r7, r3, r1, r6
 80059f2:	5dc7      	ldrb	r7, [r0, r7]
 80059f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f8:	4637      	mov	r7, r6
 80059fa:	42bb      	cmp	r3, r7
 80059fc:	460e      	mov	r6, r1
 80059fe:	d9f4      	bls.n	80059ea <_printf_i+0x11a>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d10b      	bne.n	8005a1c <_printf_i+0x14c>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	07de      	lsls	r6, r3, #31
 8005a08:	d508      	bpl.n	8005a1c <_printf_i+0x14c>
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	6861      	ldr	r1, [r4, #4]
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	bfde      	ittt	le
 8005a12:	2330      	movle	r3, #48	; 0x30
 8005a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a1c:	1b52      	subs	r2, r2, r5
 8005a1e:	6122      	str	r2, [r4, #16]
 8005a20:	f8cd a000 	str.w	sl, [sp]
 8005a24:	464b      	mov	r3, r9
 8005a26:	aa03      	add	r2, sp, #12
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	f7ff fee2 	bl	80057f4 <_printf_common>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d14c      	bne.n	8005ace <_printf_i+0x1fe>
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	b004      	add	sp, #16
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	4835      	ldr	r0, [pc, #212]	; (8005b14 <_printf_i+0x244>)
 8005a40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a44:	6829      	ldr	r1, [r5, #0]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a4c:	6029      	str	r1, [r5, #0]
 8005a4e:	061d      	lsls	r5, r3, #24
 8005a50:	d514      	bpl.n	8005a7c <_printf_i+0x1ac>
 8005a52:	07df      	lsls	r7, r3, #31
 8005a54:	bf44      	itt	mi
 8005a56:	f043 0320 	orrmi.w	r3, r3, #32
 8005a5a:	6023      	strmi	r3, [r4, #0]
 8005a5c:	b91e      	cbnz	r6, 8005a66 <_printf_i+0x196>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	f023 0320 	bic.w	r3, r3, #32
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	2310      	movs	r3, #16
 8005a68:	e7b0      	b.n	80059cc <_printf_i+0xfc>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	f043 0320 	orr.w	r3, r3, #32
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	2378      	movs	r3, #120	; 0x78
 8005a74:	4828      	ldr	r0, [pc, #160]	; (8005b18 <_printf_i+0x248>)
 8005a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a7a:	e7e3      	b.n	8005a44 <_printf_i+0x174>
 8005a7c:	0659      	lsls	r1, r3, #25
 8005a7e:	bf48      	it	mi
 8005a80:	b2b6      	uxthmi	r6, r6
 8005a82:	e7e6      	b.n	8005a52 <_printf_i+0x182>
 8005a84:	4615      	mov	r5, r2
 8005a86:	e7bb      	b.n	8005a00 <_printf_i+0x130>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	6826      	ldr	r6, [r4, #0]
 8005a8c:	6961      	ldr	r1, [r4, #20]
 8005a8e:	1d18      	adds	r0, r3, #4
 8005a90:	6028      	str	r0, [r5, #0]
 8005a92:	0635      	lsls	r5, r6, #24
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	d501      	bpl.n	8005a9c <_printf_i+0x1cc>
 8005a98:	6019      	str	r1, [r3, #0]
 8005a9a:	e002      	b.n	8005aa2 <_printf_i+0x1d2>
 8005a9c:	0670      	lsls	r0, r6, #25
 8005a9e:	d5fb      	bpl.n	8005a98 <_printf_i+0x1c8>
 8005aa0:	8019      	strh	r1, [r3, #0]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	4615      	mov	r5, r2
 8005aa8:	e7ba      	b.n	8005a20 <_printf_i+0x150>
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	1d1a      	adds	r2, r3, #4
 8005aae:	602a      	str	r2, [r5, #0]
 8005ab0:	681d      	ldr	r5, [r3, #0]
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f7fa fb8a 	bl	80001d0 <memchr>
 8005abc:	b108      	cbz	r0, 8005ac2 <_printf_i+0x1f2>
 8005abe:	1b40      	subs	r0, r0, r5
 8005ac0:	6060      	str	r0, [r4, #4]
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	6123      	str	r3, [r4, #16]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005acc:	e7a8      	b.n	8005a20 <_printf_i+0x150>
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	47d0      	blx	sl
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d0ab      	beq.n	8005a34 <_printf_i+0x164>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	079b      	lsls	r3, r3, #30
 8005ae0:	d413      	bmi.n	8005b0a <_printf_i+0x23a>
 8005ae2:	68e0      	ldr	r0, [r4, #12]
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	4298      	cmp	r0, r3
 8005ae8:	bfb8      	it	lt
 8005aea:	4618      	movlt	r0, r3
 8005aec:	e7a4      	b.n	8005a38 <_printf_i+0x168>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4632      	mov	r2, r6
 8005af2:	4649      	mov	r1, r9
 8005af4:	4640      	mov	r0, r8
 8005af6:	47d0      	blx	sl
 8005af8:	3001      	adds	r0, #1
 8005afa:	d09b      	beq.n	8005a34 <_printf_i+0x164>
 8005afc:	3501      	adds	r5, #1
 8005afe:	68e3      	ldr	r3, [r4, #12]
 8005b00:	9903      	ldr	r1, [sp, #12]
 8005b02:	1a5b      	subs	r3, r3, r1
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	dcf2      	bgt.n	8005aee <_printf_i+0x21e>
 8005b08:	e7eb      	b.n	8005ae2 <_printf_i+0x212>
 8005b0a:	2500      	movs	r5, #0
 8005b0c:	f104 0619 	add.w	r6, r4, #25
 8005b10:	e7f5      	b.n	8005afe <_printf_i+0x22e>
 8005b12:	bf00      	nop
 8005b14:	0800605d 	.word	0x0800605d
 8005b18:	0800606e 	.word	0x0800606e

08005b1c <_sbrk_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4d06      	ldr	r5, [pc, #24]	; (8005b38 <_sbrk_r+0x1c>)
 8005b20:	2300      	movs	r3, #0
 8005b22:	4604      	mov	r4, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	602b      	str	r3, [r5, #0]
 8005b28:	f7fb fd46 	bl	80015b8 <_sbrk>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_sbrk_r+0x1a>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_sbrk_r+0x1a>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	2000018c 	.word	0x2000018c

08005b3c <__sread>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	460c      	mov	r4, r1
 8005b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b44:	f000 f8ea 	bl	8005d1c <_read_r>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	bfab      	itete	ge
 8005b4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b50:	181b      	addge	r3, r3, r0
 8005b52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b56:	bfac      	ite	ge
 8005b58:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b5a:	81a3      	strhlt	r3, [r4, #12]
 8005b5c:	bd10      	pop	{r4, pc}

08005b5e <__swrite>:
 8005b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b62:	461f      	mov	r7, r3
 8005b64:	898b      	ldrh	r3, [r1, #12]
 8005b66:	05db      	lsls	r3, r3, #23
 8005b68:	4605      	mov	r5, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	4616      	mov	r6, r2
 8005b6e:	d505      	bpl.n	8005b7c <__swrite+0x1e>
 8005b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b74:	2302      	movs	r3, #2
 8005b76:	2200      	movs	r2, #0
 8005b78:	f000 f868 	bl	8005c4c <_lseek_r>
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b86:	81a3      	strh	r3, [r4, #12]
 8005b88:	4632      	mov	r2, r6
 8005b8a:	463b      	mov	r3, r7
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b92:	f000 b817 	b.w	8005bc4 <_write_r>

08005b96 <__sseek>:
 8005b96:	b510      	push	{r4, lr}
 8005b98:	460c      	mov	r4, r1
 8005b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9e:	f000 f855 	bl	8005c4c <_lseek_r>
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	bf15      	itete	ne
 8005ba8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005baa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bb2:	81a3      	strheq	r3, [r4, #12]
 8005bb4:	bf18      	it	ne
 8005bb6:	81a3      	strhne	r3, [r4, #12]
 8005bb8:	bd10      	pop	{r4, pc}

08005bba <__sclose>:
 8005bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bbe:	f000 b813 	b.w	8005be8 <_close_r>
	...

08005bc4 <_write_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4d07      	ldr	r5, [pc, #28]	; (8005be4 <_write_r+0x20>)
 8005bc8:	4604      	mov	r4, r0
 8005bca:	4608      	mov	r0, r1
 8005bcc:	4611      	mov	r1, r2
 8005bce:	2200      	movs	r2, #0
 8005bd0:	602a      	str	r2, [r5, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f7fb fbae 	bl	8001334 <_write>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_write_r+0x1e>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_write_r+0x1e>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	2000018c 	.word	0x2000018c

08005be8 <_close_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d06      	ldr	r5, [pc, #24]	; (8005c04 <_close_r+0x1c>)
 8005bec:	2300      	movs	r3, #0
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f7fb fcab 	bl	800154e <_close>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_close_r+0x1a>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_close_r+0x1a>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	2000018c 	.word	0x2000018c

08005c08 <_fstat_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4d07      	ldr	r5, [pc, #28]	; (8005c28 <_fstat_r+0x20>)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	4604      	mov	r4, r0
 8005c10:	4608      	mov	r0, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	602b      	str	r3, [r5, #0]
 8005c16:	f7fb fca6 	bl	8001566 <_fstat>
 8005c1a:	1c43      	adds	r3, r0, #1
 8005c1c:	d102      	bne.n	8005c24 <_fstat_r+0x1c>
 8005c1e:	682b      	ldr	r3, [r5, #0]
 8005c20:	b103      	cbz	r3, 8005c24 <_fstat_r+0x1c>
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	bd38      	pop	{r3, r4, r5, pc}
 8005c26:	bf00      	nop
 8005c28:	2000018c 	.word	0x2000018c

08005c2c <_isatty_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4d06      	ldr	r5, [pc, #24]	; (8005c48 <_isatty_r+0x1c>)
 8005c30:	2300      	movs	r3, #0
 8005c32:	4604      	mov	r4, r0
 8005c34:	4608      	mov	r0, r1
 8005c36:	602b      	str	r3, [r5, #0]
 8005c38:	f7fb fca5 	bl	8001586 <_isatty>
 8005c3c:	1c43      	adds	r3, r0, #1
 8005c3e:	d102      	bne.n	8005c46 <_isatty_r+0x1a>
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	b103      	cbz	r3, 8005c46 <_isatty_r+0x1a>
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
 8005c48:	2000018c 	.word	0x2000018c

08005c4c <_lseek_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4d07      	ldr	r5, [pc, #28]	; (8005c6c <_lseek_r+0x20>)
 8005c50:	4604      	mov	r4, r0
 8005c52:	4608      	mov	r0, r1
 8005c54:	4611      	mov	r1, r2
 8005c56:	2200      	movs	r2, #0
 8005c58:	602a      	str	r2, [r5, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f7fb fc9e 	bl	800159c <_lseek>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d102      	bne.n	8005c6a <_lseek_r+0x1e>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	b103      	cbz	r3, 8005c6a <_lseek_r+0x1e>
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	2000018c 	.word	0x2000018c

08005c70 <memmove>:
 8005c70:	4288      	cmp	r0, r1
 8005c72:	b510      	push	{r4, lr}
 8005c74:	eb01 0402 	add.w	r4, r1, r2
 8005c78:	d902      	bls.n	8005c80 <memmove+0x10>
 8005c7a:	4284      	cmp	r4, r0
 8005c7c:	4623      	mov	r3, r4
 8005c7e:	d807      	bhi.n	8005c90 <memmove+0x20>
 8005c80:	1e43      	subs	r3, r0, #1
 8005c82:	42a1      	cmp	r1, r4
 8005c84:	d008      	beq.n	8005c98 <memmove+0x28>
 8005c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c8e:	e7f8      	b.n	8005c82 <memmove+0x12>
 8005c90:	4402      	add	r2, r0
 8005c92:	4601      	mov	r1, r0
 8005c94:	428a      	cmp	r2, r1
 8005c96:	d100      	bne.n	8005c9a <memmove+0x2a>
 8005c98:	bd10      	pop	{r4, pc}
 8005c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ca2:	e7f7      	b.n	8005c94 <memmove+0x24>

08005ca4 <__malloc_lock>:
 8005ca4:	4801      	ldr	r0, [pc, #4]	; (8005cac <__malloc_lock+0x8>)
 8005ca6:	f7ff b99f 	b.w	8004fe8 <__retarget_lock_acquire_recursive>
 8005caa:	bf00      	nop
 8005cac:	20000180 	.word	0x20000180

08005cb0 <__malloc_unlock>:
 8005cb0:	4801      	ldr	r0, [pc, #4]	; (8005cb8 <__malloc_unlock+0x8>)
 8005cb2:	f7ff b99a 	b.w	8004fea <__retarget_lock_release_recursive>
 8005cb6:	bf00      	nop
 8005cb8:	20000180 	.word	0x20000180

08005cbc <_realloc_r>:
 8005cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	4614      	mov	r4, r2
 8005cc4:	460e      	mov	r6, r1
 8005cc6:	b921      	cbnz	r1, 8005cd2 <_realloc_r+0x16>
 8005cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ccc:	4611      	mov	r1, r2
 8005cce:	f7ff ba67 	b.w	80051a0 <_malloc_r>
 8005cd2:	b92a      	cbnz	r2, 8005ce0 <_realloc_r+0x24>
 8005cd4:	f7ff f9f8 	bl	80050c8 <_free_r>
 8005cd8:	4625      	mov	r5, r4
 8005cda:	4628      	mov	r0, r5
 8005cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce0:	f000 f82e 	bl	8005d40 <_malloc_usable_size_r>
 8005ce4:	4284      	cmp	r4, r0
 8005ce6:	4607      	mov	r7, r0
 8005ce8:	d802      	bhi.n	8005cf0 <_realloc_r+0x34>
 8005cea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005cee:	d812      	bhi.n	8005d16 <_realloc_r+0x5a>
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	f7ff fa54 	bl	80051a0 <_malloc_r>
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d0ed      	beq.n	8005cda <_realloc_r+0x1e>
 8005cfe:	42bc      	cmp	r4, r7
 8005d00:	4622      	mov	r2, r4
 8005d02:	4631      	mov	r1, r6
 8005d04:	bf28      	it	cs
 8005d06:	463a      	movcs	r2, r7
 8005d08:	f7fe fd50 	bl	80047ac <memcpy>
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4640      	mov	r0, r8
 8005d10:	f7ff f9da 	bl	80050c8 <_free_r>
 8005d14:	e7e1      	b.n	8005cda <_realloc_r+0x1e>
 8005d16:	4635      	mov	r5, r6
 8005d18:	e7df      	b.n	8005cda <_realloc_r+0x1e>
	...

08005d1c <_read_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4d07      	ldr	r5, [pc, #28]	; (8005d3c <_read_r+0x20>)
 8005d20:	4604      	mov	r4, r0
 8005d22:	4608      	mov	r0, r1
 8005d24:	4611      	mov	r1, r2
 8005d26:	2200      	movs	r2, #0
 8005d28:	602a      	str	r2, [r5, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f7fb fbf2 	bl	8001514 <_read>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d102      	bne.n	8005d3a <_read_r+0x1e>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	b103      	cbz	r3, 8005d3a <_read_r+0x1e>
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	2000018c 	.word	0x2000018c

08005d40 <_malloc_usable_size_r>:
 8005d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d44:	1f18      	subs	r0, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bfbc      	itt	lt
 8005d4a:	580b      	ldrlt	r3, [r1, r0]
 8005d4c:	18c0      	addlt	r0, r0, r3
 8005d4e:	4770      	bx	lr

08005d50 <_init>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr

08005d5c <_fini>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr
