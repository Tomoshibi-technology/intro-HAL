
Motor_Test_G0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e7c  08005e7c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e7c  08005e7c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e7c  08005e7c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  2000001c  08005ea0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08005ea0  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001140f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227a  00000000  00000000  00031453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  000336d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  000344e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d26  00000000  00000000  00035258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c7a  00000000  00000000  00049f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086718  00000000  00000000  0005abf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1310  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003450  00000000  00000000  000e1360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000001c 	.word	0x2000001c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005d88 	.word	0x08005d88

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000020 	.word	0x20000020
 80000fc:	08005d88 	.word	0x08005d88

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0008      	movs	r0, r1
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 f89f 	bl	8000538 <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 f82b 	bl	8000460 <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 f891 	bl	8000538 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 f887 	bl	8000538 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 f837 	bl	80004ac <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 f82d 	bl	80004ac <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__eqsf2>:
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	0042      	lsls	r2, r0, #1
 8000464:	0245      	lsls	r5, r0, #9
 8000466:	024e      	lsls	r6, r1, #9
 8000468:	004c      	lsls	r4, r1, #1
 800046a:	0fc3      	lsrs	r3, r0, #31
 800046c:	0a6d      	lsrs	r5, r5, #9
 800046e:	2001      	movs	r0, #1
 8000470:	0e12      	lsrs	r2, r2, #24
 8000472:	0a76      	lsrs	r6, r6, #9
 8000474:	0e24      	lsrs	r4, r4, #24
 8000476:	0fc9      	lsrs	r1, r1, #31
 8000478:	2aff      	cmp	r2, #255	; 0xff
 800047a:	d006      	beq.n	800048a <__eqsf2+0x2a>
 800047c:	2cff      	cmp	r4, #255	; 0xff
 800047e:	d003      	beq.n	8000488 <__eqsf2+0x28>
 8000480:	42a2      	cmp	r2, r4
 8000482:	d101      	bne.n	8000488 <__eqsf2+0x28>
 8000484:	42b5      	cmp	r5, r6
 8000486:	d006      	beq.n	8000496 <__eqsf2+0x36>
 8000488:	bd70      	pop	{r4, r5, r6, pc}
 800048a:	2d00      	cmp	r5, #0
 800048c:	d1fc      	bne.n	8000488 <__eqsf2+0x28>
 800048e:	2cff      	cmp	r4, #255	; 0xff
 8000490:	d1fa      	bne.n	8000488 <__eqsf2+0x28>
 8000492:	2e00      	cmp	r6, #0
 8000494:	d1f8      	bne.n	8000488 <__eqsf2+0x28>
 8000496:	428b      	cmp	r3, r1
 8000498:	d006      	beq.n	80004a8 <__eqsf2+0x48>
 800049a:	2001      	movs	r0, #1
 800049c:	2a00      	cmp	r2, #0
 800049e:	d1f3      	bne.n	8000488 <__eqsf2+0x28>
 80004a0:	0028      	movs	r0, r5
 80004a2:	1e43      	subs	r3, r0, #1
 80004a4:	4198      	sbcs	r0, r3
 80004a6:	e7ef      	b.n	8000488 <__eqsf2+0x28>
 80004a8:	2000      	movs	r0, #0
 80004aa:	e7ed      	b.n	8000488 <__eqsf2+0x28>

080004ac <__gesf2>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	0042      	lsls	r2, r0, #1
 80004b0:	0245      	lsls	r5, r0, #9
 80004b2:	024e      	lsls	r6, r1, #9
 80004b4:	004c      	lsls	r4, r1, #1
 80004b6:	0fc3      	lsrs	r3, r0, #31
 80004b8:	0a6d      	lsrs	r5, r5, #9
 80004ba:	0e12      	lsrs	r2, r2, #24
 80004bc:	0a76      	lsrs	r6, r6, #9
 80004be:	0e24      	lsrs	r4, r4, #24
 80004c0:	0fc8      	lsrs	r0, r1, #31
 80004c2:	2aff      	cmp	r2, #255	; 0xff
 80004c4:	d01b      	beq.n	80004fe <__gesf2+0x52>
 80004c6:	2cff      	cmp	r4, #255	; 0xff
 80004c8:	d00e      	beq.n	80004e8 <__gesf2+0x3c>
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d11b      	bne.n	8000506 <__gesf2+0x5a>
 80004ce:	2c00      	cmp	r4, #0
 80004d0:	d101      	bne.n	80004d6 <__gesf2+0x2a>
 80004d2:	2e00      	cmp	r6, #0
 80004d4:	d01c      	beq.n	8000510 <__gesf2+0x64>
 80004d6:	2d00      	cmp	r5, #0
 80004d8:	d00c      	beq.n	80004f4 <__gesf2+0x48>
 80004da:	4283      	cmp	r3, r0
 80004dc:	d01c      	beq.n	8000518 <__gesf2+0x6c>
 80004de:	2102      	movs	r1, #2
 80004e0:	1e58      	subs	r0, r3, #1
 80004e2:	4008      	ands	r0, r1
 80004e4:	3801      	subs	r0, #1
 80004e6:	bd70      	pop	{r4, r5, r6, pc}
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d122      	bne.n	8000532 <__gesf2+0x86>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	d1f4      	bne.n	80004da <__gesf2+0x2e>
 80004f0:	2d00      	cmp	r5, #0
 80004f2:	d1f2      	bne.n	80004da <__gesf2+0x2e>
 80004f4:	2800      	cmp	r0, #0
 80004f6:	d1f6      	bne.n	80004e6 <__gesf2+0x3a>
 80004f8:	2001      	movs	r0, #1
 80004fa:	4240      	negs	r0, r0
 80004fc:	e7f3      	b.n	80004e6 <__gesf2+0x3a>
 80004fe:	2d00      	cmp	r5, #0
 8000500:	d117      	bne.n	8000532 <__gesf2+0x86>
 8000502:	2cff      	cmp	r4, #255	; 0xff
 8000504:	d0f0      	beq.n	80004e8 <__gesf2+0x3c>
 8000506:	2c00      	cmp	r4, #0
 8000508:	d1e7      	bne.n	80004da <__gesf2+0x2e>
 800050a:	2e00      	cmp	r6, #0
 800050c:	d1e5      	bne.n	80004da <__gesf2+0x2e>
 800050e:	e7e6      	b.n	80004de <__gesf2+0x32>
 8000510:	2000      	movs	r0, #0
 8000512:	2d00      	cmp	r5, #0
 8000514:	d0e7      	beq.n	80004e6 <__gesf2+0x3a>
 8000516:	e7e2      	b.n	80004de <__gesf2+0x32>
 8000518:	42a2      	cmp	r2, r4
 800051a:	dc05      	bgt.n	8000528 <__gesf2+0x7c>
 800051c:	dbea      	blt.n	80004f4 <__gesf2+0x48>
 800051e:	42b5      	cmp	r5, r6
 8000520:	d802      	bhi.n	8000528 <__gesf2+0x7c>
 8000522:	d3e7      	bcc.n	80004f4 <__gesf2+0x48>
 8000524:	2000      	movs	r0, #0
 8000526:	e7de      	b.n	80004e6 <__gesf2+0x3a>
 8000528:	4243      	negs	r3, r0
 800052a:	4158      	adcs	r0, r3
 800052c:	0040      	lsls	r0, r0, #1
 800052e:	3801      	subs	r0, #1
 8000530:	e7d9      	b.n	80004e6 <__gesf2+0x3a>
 8000532:	2002      	movs	r0, #2
 8000534:	4240      	negs	r0, r0
 8000536:	e7d6      	b.n	80004e6 <__gesf2+0x3a>

08000538 <__lesf2>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	0042      	lsls	r2, r0, #1
 800053c:	0245      	lsls	r5, r0, #9
 800053e:	024e      	lsls	r6, r1, #9
 8000540:	004c      	lsls	r4, r1, #1
 8000542:	0fc3      	lsrs	r3, r0, #31
 8000544:	0a6d      	lsrs	r5, r5, #9
 8000546:	0e12      	lsrs	r2, r2, #24
 8000548:	0a76      	lsrs	r6, r6, #9
 800054a:	0e24      	lsrs	r4, r4, #24
 800054c:	0fc8      	lsrs	r0, r1, #31
 800054e:	2aff      	cmp	r2, #255	; 0xff
 8000550:	d00b      	beq.n	800056a <__lesf2+0x32>
 8000552:	2cff      	cmp	r4, #255	; 0xff
 8000554:	d00d      	beq.n	8000572 <__lesf2+0x3a>
 8000556:	2a00      	cmp	r2, #0
 8000558:	d11f      	bne.n	800059a <__lesf2+0x62>
 800055a:	2c00      	cmp	r4, #0
 800055c:	d116      	bne.n	800058c <__lesf2+0x54>
 800055e:	2e00      	cmp	r6, #0
 8000560:	d114      	bne.n	800058c <__lesf2+0x54>
 8000562:	2000      	movs	r0, #0
 8000564:	2d00      	cmp	r5, #0
 8000566:	d010      	beq.n	800058a <__lesf2+0x52>
 8000568:	e009      	b.n	800057e <__lesf2+0x46>
 800056a:	2d00      	cmp	r5, #0
 800056c:	d10c      	bne.n	8000588 <__lesf2+0x50>
 800056e:	2cff      	cmp	r4, #255	; 0xff
 8000570:	d113      	bne.n	800059a <__lesf2+0x62>
 8000572:	2e00      	cmp	r6, #0
 8000574:	d108      	bne.n	8000588 <__lesf2+0x50>
 8000576:	2a00      	cmp	r2, #0
 8000578:	d008      	beq.n	800058c <__lesf2+0x54>
 800057a:	4283      	cmp	r3, r0
 800057c:	d012      	beq.n	80005a4 <__lesf2+0x6c>
 800057e:	2102      	movs	r1, #2
 8000580:	1e58      	subs	r0, r3, #1
 8000582:	4008      	ands	r0, r1
 8000584:	3801      	subs	r0, #1
 8000586:	e000      	b.n	800058a <__lesf2+0x52>
 8000588:	2002      	movs	r0, #2
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	2d00      	cmp	r5, #0
 800058e:	d1f4      	bne.n	800057a <__lesf2+0x42>
 8000590:	2800      	cmp	r0, #0
 8000592:	d1fa      	bne.n	800058a <__lesf2+0x52>
 8000594:	2001      	movs	r0, #1
 8000596:	4240      	negs	r0, r0
 8000598:	e7f7      	b.n	800058a <__lesf2+0x52>
 800059a:	2c00      	cmp	r4, #0
 800059c:	d1ed      	bne.n	800057a <__lesf2+0x42>
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d1eb      	bne.n	800057a <__lesf2+0x42>
 80005a2:	e7ec      	b.n	800057e <__lesf2+0x46>
 80005a4:	42a2      	cmp	r2, r4
 80005a6:	dc05      	bgt.n	80005b4 <__lesf2+0x7c>
 80005a8:	dbf2      	blt.n	8000590 <__lesf2+0x58>
 80005aa:	42b5      	cmp	r5, r6
 80005ac:	d802      	bhi.n	80005b4 <__lesf2+0x7c>
 80005ae:	d3ef      	bcc.n	8000590 <__lesf2+0x58>
 80005b0:	2000      	movs	r0, #0
 80005b2:	e7ea      	b.n	800058a <__lesf2+0x52>
 80005b4:	4243      	negs	r3, r0
 80005b6:	4158      	adcs	r0, r3
 80005b8:	0040      	lsls	r0, r0, #1
 80005ba:	3801      	subs	r0, #1
 80005bc:	e7e5      	b.n	800058a <__lesf2+0x52>
 80005be:	46c0      	nop			; (mov r8, r8)

080005c0 <__aeabi_f2iz>:
 80005c0:	0241      	lsls	r1, r0, #9
 80005c2:	0042      	lsls	r2, r0, #1
 80005c4:	0fc3      	lsrs	r3, r0, #31
 80005c6:	0a49      	lsrs	r1, r1, #9
 80005c8:	2000      	movs	r0, #0
 80005ca:	0e12      	lsrs	r2, r2, #24
 80005cc:	2a7e      	cmp	r2, #126	; 0x7e
 80005ce:	dd03      	ble.n	80005d8 <__aeabi_f2iz+0x18>
 80005d0:	2a9d      	cmp	r2, #157	; 0x9d
 80005d2:	dd02      	ble.n	80005da <__aeabi_f2iz+0x1a>
 80005d4:	4a09      	ldr	r2, [pc, #36]	; (80005fc <__aeabi_f2iz+0x3c>)
 80005d6:	1898      	adds	r0, r3, r2
 80005d8:	4770      	bx	lr
 80005da:	2080      	movs	r0, #128	; 0x80
 80005dc:	0400      	lsls	r0, r0, #16
 80005de:	4301      	orrs	r1, r0
 80005e0:	2a95      	cmp	r2, #149	; 0x95
 80005e2:	dc07      	bgt.n	80005f4 <__aeabi_f2iz+0x34>
 80005e4:	2096      	movs	r0, #150	; 0x96
 80005e6:	1a82      	subs	r2, r0, r2
 80005e8:	40d1      	lsrs	r1, r2
 80005ea:	4248      	negs	r0, r1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f3      	bne.n	80005d8 <__aeabi_f2iz+0x18>
 80005f0:	0008      	movs	r0, r1
 80005f2:	e7f1      	b.n	80005d8 <__aeabi_f2iz+0x18>
 80005f4:	3a96      	subs	r2, #150	; 0x96
 80005f6:	4091      	lsls	r1, r2
 80005f8:	e7f7      	b.n	80005ea <__aeabi_f2iz+0x2a>
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	7fffffff 	.word	0x7fffffff

08000600 <__aeabi_dadd>:
 8000600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000602:	464f      	mov	r7, r9
 8000604:	4646      	mov	r6, r8
 8000606:	46d6      	mov	lr, sl
 8000608:	000d      	movs	r5, r1
 800060a:	0004      	movs	r4, r0
 800060c:	b5c0      	push	{r6, r7, lr}
 800060e:	001f      	movs	r7, r3
 8000610:	0011      	movs	r1, r2
 8000612:	0328      	lsls	r0, r5, #12
 8000614:	0f62      	lsrs	r2, r4, #29
 8000616:	0a40      	lsrs	r0, r0, #9
 8000618:	4310      	orrs	r0, r2
 800061a:	007a      	lsls	r2, r7, #1
 800061c:	0d52      	lsrs	r2, r2, #21
 800061e:	00e3      	lsls	r3, r4, #3
 8000620:	033c      	lsls	r4, r7, #12
 8000622:	4691      	mov	r9, r2
 8000624:	0a64      	lsrs	r4, r4, #9
 8000626:	0ffa      	lsrs	r2, r7, #31
 8000628:	0f4f      	lsrs	r7, r1, #29
 800062a:	006e      	lsls	r6, r5, #1
 800062c:	4327      	orrs	r7, r4
 800062e:	4692      	mov	sl, r2
 8000630:	46b8      	mov	r8, r7
 8000632:	0d76      	lsrs	r6, r6, #21
 8000634:	0fed      	lsrs	r5, r5, #31
 8000636:	00c9      	lsls	r1, r1, #3
 8000638:	4295      	cmp	r5, r2
 800063a:	d100      	bne.n	800063e <__aeabi_dadd+0x3e>
 800063c:	e099      	b.n	8000772 <__aeabi_dadd+0x172>
 800063e:	464c      	mov	r4, r9
 8000640:	1b34      	subs	r4, r6, r4
 8000642:	46a4      	mov	ip, r4
 8000644:	2c00      	cmp	r4, #0
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x4a>
 8000648:	e07c      	b.n	8000744 <__aeabi_dadd+0x144>
 800064a:	464a      	mov	r2, r9
 800064c:	2a00      	cmp	r2, #0
 800064e:	d100      	bne.n	8000652 <__aeabi_dadd+0x52>
 8000650:	e0b8      	b.n	80007c4 <__aeabi_dadd+0x1c4>
 8000652:	4ac5      	ldr	r2, [pc, #788]	; (8000968 <__aeabi_dadd+0x368>)
 8000654:	4296      	cmp	r6, r2
 8000656:	d100      	bne.n	800065a <__aeabi_dadd+0x5a>
 8000658:	e11c      	b.n	8000894 <__aeabi_dadd+0x294>
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	003c      	movs	r4, r7
 800065e:	0412      	lsls	r2, r2, #16
 8000660:	4314      	orrs	r4, r2
 8000662:	46a0      	mov	r8, r4
 8000664:	4662      	mov	r2, ip
 8000666:	2a38      	cmp	r2, #56	; 0x38
 8000668:	dd00      	ble.n	800066c <__aeabi_dadd+0x6c>
 800066a:	e161      	b.n	8000930 <__aeabi_dadd+0x330>
 800066c:	2a1f      	cmp	r2, #31
 800066e:	dd00      	ble.n	8000672 <__aeabi_dadd+0x72>
 8000670:	e1cc      	b.n	8000a0c <__aeabi_dadd+0x40c>
 8000672:	4664      	mov	r4, ip
 8000674:	2220      	movs	r2, #32
 8000676:	1b12      	subs	r2, r2, r4
 8000678:	4644      	mov	r4, r8
 800067a:	4094      	lsls	r4, r2
 800067c:	000f      	movs	r7, r1
 800067e:	46a1      	mov	r9, r4
 8000680:	4664      	mov	r4, ip
 8000682:	4091      	lsls	r1, r2
 8000684:	40e7      	lsrs	r7, r4
 8000686:	464c      	mov	r4, r9
 8000688:	1e4a      	subs	r2, r1, #1
 800068a:	4191      	sbcs	r1, r2
 800068c:	433c      	orrs	r4, r7
 800068e:	4642      	mov	r2, r8
 8000690:	4321      	orrs	r1, r4
 8000692:	4664      	mov	r4, ip
 8000694:	40e2      	lsrs	r2, r4
 8000696:	1a80      	subs	r0, r0, r2
 8000698:	1a5c      	subs	r4, r3, r1
 800069a:	42a3      	cmp	r3, r4
 800069c:	419b      	sbcs	r3, r3
 800069e:	425f      	negs	r7, r3
 80006a0:	1bc7      	subs	r7, r0, r7
 80006a2:	023b      	lsls	r3, r7, #8
 80006a4:	d400      	bmi.n	80006a8 <__aeabi_dadd+0xa8>
 80006a6:	e0d0      	b.n	800084a <__aeabi_dadd+0x24a>
 80006a8:	027f      	lsls	r7, r7, #9
 80006aa:	0a7f      	lsrs	r7, r7, #9
 80006ac:	2f00      	cmp	r7, #0
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0xb2>
 80006b0:	e0ff      	b.n	80008b2 <__aeabi_dadd+0x2b2>
 80006b2:	0038      	movs	r0, r7
 80006b4:	f000 ff42 	bl	800153c <__clzsi2>
 80006b8:	0001      	movs	r1, r0
 80006ba:	3908      	subs	r1, #8
 80006bc:	2320      	movs	r3, #32
 80006be:	0022      	movs	r2, r4
 80006c0:	1a5b      	subs	r3, r3, r1
 80006c2:	408f      	lsls	r7, r1
 80006c4:	40da      	lsrs	r2, r3
 80006c6:	408c      	lsls	r4, r1
 80006c8:	4317      	orrs	r7, r2
 80006ca:	42b1      	cmp	r1, r6
 80006cc:	da00      	bge.n	80006d0 <__aeabi_dadd+0xd0>
 80006ce:	e0ff      	b.n	80008d0 <__aeabi_dadd+0x2d0>
 80006d0:	1b89      	subs	r1, r1, r6
 80006d2:	1c4b      	adds	r3, r1, #1
 80006d4:	2b1f      	cmp	r3, #31
 80006d6:	dd00      	ble.n	80006da <__aeabi_dadd+0xda>
 80006d8:	e0a8      	b.n	800082c <__aeabi_dadd+0x22c>
 80006da:	2220      	movs	r2, #32
 80006dc:	0039      	movs	r1, r7
 80006de:	1ad2      	subs	r2, r2, r3
 80006e0:	0020      	movs	r0, r4
 80006e2:	4094      	lsls	r4, r2
 80006e4:	4091      	lsls	r1, r2
 80006e6:	40d8      	lsrs	r0, r3
 80006e8:	1e62      	subs	r2, r4, #1
 80006ea:	4194      	sbcs	r4, r2
 80006ec:	40df      	lsrs	r7, r3
 80006ee:	2600      	movs	r6, #0
 80006f0:	4301      	orrs	r1, r0
 80006f2:	430c      	orrs	r4, r1
 80006f4:	0763      	lsls	r3, r4, #29
 80006f6:	d009      	beq.n	800070c <__aeabi_dadd+0x10c>
 80006f8:	230f      	movs	r3, #15
 80006fa:	4023      	ands	r3, r4
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	d005      	beq.n	800070c <__aeabi_dadd+0x10c>
 8000700:	1d23      	adds	r3, r4, #4
 8000702:	42a3      	cmp	r3, r4
 8000704:	41a4      	sbcs	r4, r4
 8000706:	4264      	negs	r4, r4
 8000708:	193f      	adds	r7, r7, r4
 800070a:	001c      	movs	r4, r3
 800070c:	023b      	lsls	r3, r7, #8
 800070e:	d400      	bmi.n	8000712 <__aeabi_dadd+0x112>
 8000710:	e09e      	b.n	8000850 <__aeabi_dadd+0x250>
 8000712:	4b95      	ldr	r3, [pc, #596]	; (8000968 <__aeabi_dadd+0x368>)
 8000714:	3601      	adds	r6, #1
 8000716:	429e      	cmp	r6, r3
 8000718:	d100      	bne.n	800071c <__aeabi_dadd+0x11c>
 800071a:	e0b7      	b.n	800088c <__aeabi_dadd+0x28c>
 800071c:	4a93      	ldr	r2, [pc, #588]	; (800096c <__aeabi_dadd+0x36c>)
 800071e:	08e4      	lsrs	r4, r4, #3
 8000720:	4017      	ands	r7, r2
 8000722:	077b      	lsls	r3, r7, #29
 8000724:	0571      	lsls	r1, r6, #21
 8000726:	027f      	lsls	r7, r7, #9
 8000728:	4323      	orrs	r3, r4
 800072a:	0b3f      	lsrs	r7, r7, #12
 800072c:	0d4a      	lsrs	r2, r1, #21
 800072e:	0512      	lsls	r2, r2, #20
 8000730:	433a      	orrs	r2, r7
 8000732:	07ed      	lsls	r5, r5, #31
 8000734:	432a      	orrs	r2, r5
 8000736:	0018      	movs	r0, r3
 8000738:	0011      	movs	r1, r2
 800073a:	bce0      	pop	{r5, r6, r7}
 800073c:	46ba      	mov	sl, r7
 800073e:	46b1      	mov	r9, r6
 8000740:	46a8      	mov	r8, r5
 8000742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000744:	2c00      	cmp	r4, #0
 8000746:	d04b      	beq.n	80007e0 <__aeabi_dadd+0x1e0>
 8000748:	464c      	mov	r4, r9
 800074a:	1ba4      	subs	r4, r4, r6
 800074c:	46a4      	mov	ip, r4
 800074e:	2e00      	cmp	r6, #0
 8000750:	d000      	beq.n	8000754 <__aeabi_dadd+0x154>
 8000752:	e123      	b.n	800099c <__aeabi_dadd+0x39c>
 8000754:	0004      	movs	r4, r0
 8000756:	431c      	orrs	r4, r3
 8000758:	d100      	bne.n	800075c <__aeabi_dadd+0x15c>
 800075a:	e1af      	b.n	8000abc <__aeabi_dadd+0x4bc>
 800075c:	4662      	mov	r2, ip
 800075e:	1e54      	subs	r4, r2, #1
 8000760:	2a01      	cmp	r2, #1
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x166>
 8000764:	e215      	b.n	8000b92 <__aeabi_dadd+0x592>
 8000766:	4d80      	ldr	r5, [pc, #512]	; (8000968 <__aeabi_dadd+0x368>)
 8000768:	45ac      	cmp	ip, r5
 800076a:	d100      	bne.n	800076e <__aeabi_dadd+0x16e>
 800076c:	e1c8      	b.n	8000b00 <__aeabi_dadd+0x500>
 800076e:	46a4      	mov	ip, r4
 8000770:	e11b      	b.n	80009aa <__aeabi_dadd+0x3aa>
 8000772:	464a      	mov	r2, r9
 8000774:	1ab2      	subs	r2, r6, r2
 8000776:	4694      	mov	ip, r2
 8000778:	2a00      	cmp	r2, #0
 800077a:	dc00      	bgt.n	800077e <__aeabi_dadd+0x17e>
 800077c:	e0ac      	b.n	80008d8 <__aeabi_dadd+0x2d8>
 800077e:	464a      	mov	r2, r9
 8000780:	2a00      	cmp	r2, #0
 8000782:	d043      	beq.n	800080c <__aeabi_dadd+0x20c>
 8000784:	4a78      	ldr	r2, [pc, #480]	; (8000968 <__aeabi_dadd+0x368>)
 8000786:	4296      	cmp	r6, r2
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x18c>
 800078a:	e1af      	b.n	8000aec <__aeabi_dadd+0x4ec>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	003c      	movs	r4, r7
 8000790:	0412      	lsls	r2, r2, #16
 8000792:	4314      	orrs	r4, r2
 8000794:	46a0      	mov	r8, r4
 8000796:	4662      	mov	r2, ip
 8000798:	2a38      	cmp	r2, #56	; 0x38
 800079a:	dc67      	bgt.n	800086c <__aeabi_dadd+0x26c>
 800079c:	2a1f      	cmp	r2, #31
 800079e:	dc00      	bgt.n	80007a2 <__aeabi_dadd+0x1a2>
 80007a0:	e15f      	b.n	8000a62 <__aeabi_dadd+0x462>
 80007a2:	4647      	mov	r7, r8
 80007a4:	3a20      	subs	r2, #32
 80007a6:	40d7      	lsrs	r7, r2
 80007a8:	4662      	mov	r2, ip
 80007aa:	2a20      	cmp	r2, #32
 80007ac:	d005      	beq.n	80007ba <__aeabi_dadd+0x1ba>
 80007ae:	4664      	mov	r4, ip
 80007b0:	2240      	movs	r2, #64	; 0x40
 80007b2:	1b12      	subs	r2, r2, r4
 80007b4:	4644      	mov	r4, r8
 80007b6:	4094      	lsls	r4, r2
 80007b8:	4321      	orrs	r1, r4
 80007ba:	1e4a      	subs	r2, r1, #1
 80007bc:	4191      	sbcs	r1, r2
 80007be:	000c      	movs	r4, r1
 80007c0:	433c      	orrs	r4, r7
 80007c2:	e057      	b.n	8000874 <__aeabi_dadd+0x274>
 80007c4:	003a      	movs	r2, r7
 80007c6:	430a      	orrs	r2, r1
 80007c8:	d100      	bne.n	80007cc <__aeabi_dadd+0x1cc>
 80007ca:	e105      	b.n	80009d8 <__aeabi_dadd+0x3d8>
 80007cc:	0022      	movs	r2, r4
 80007ce:	3a01      	subs	r2, #1
 80007d0:	2c01      	cmp	r4, #1
 80007d2:	d100      	bne.n	80007d6 <__aeabi_dadd+0x1d6>
 80007d4:	e182      	b.n	8000adc <__aeabi_dadd+0x4dc>
 80007d6:	4c64      	ldr	r4, [pc, #400]	; (8000968 <__aeabi_dadd+0x368>)
 80007d8:	45a4      	cmp	ip, r4
 80007da:	d05b      	beq.n	8000894 <__aeabi_dadd+0x294>
 80007dc:	4694      	mov	ip, r2
 80007de:	e741      	b.n	8000664 <__aeabi_dadd+0x64>
 80007e0:	4c63      	ldr	r4, [pc, #396]	; (8000970 <__aeabi_dadd+0x370>)
 80007e2:	1c77      	adds	r7, r6, #1
 80007e4:	4227      	tst	r7, r4
 80007e6:	d000      	beq.n	80007ea <__aeabi_dadd+0x1ea>
 80007e8:	e0c4      	b.n	8000974 <__aeabi_dadd+0x374>
 80007ea:	0004      	movs	r4, r0
 80007ec:	431c      	orrs	r4, r3
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d000      	beq.n	80007f4 <__aeabi_dadd+0x1f4>
 80007f2:	e169      	b.n	8000ac8 <__aeabi_dadd+0x4c8>
 80007f4:	2c00      	cmp	r4, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x1fa>
 80007f8:	e1bf      	b.n	8000b7a <__aeabi_dadd+0x57a>
 80007fa:	4644      	mov	r4, r8
 80007fc:	430c      	orrs	r4, r1
 80007fe:	d000      	beq.n	8000802 <__aeabi_dadd+0x202>
 8000800:	e1d0      	b.n	8000ba4 <__aeabi_dadd+0x5a4>
 8000802:	0742      	lsls	r2, r0, #29
 8000804:	08db      	lsrs	r3, r3, #3
 8000806:	4313      	orrs	r3, r2
 8000808:	08c0      	lsrs	r0, r0, #3
 800080a:	e029      	b.n	8000860 <__aeabi_dadd+0x260>
 800080c:	003a      	movs	r2, r7
 800080e:	430a      	orrs	r2, r1
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x214>
 8000812:	e170      	b.n	8000af6 <__aeabi_dadd+0x4f6>
 8000814:	4662      	mov	r2, ip
 8000816:	4664      	mov	r4, ip
 8000818:	3a01      	subs	r2, #1
 800081a:	2c01      	cmp	r4, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_dadd+0x220>
 800081e:	e0e0      	b.n	80009e2 <__aeabi_dadd+0x3e2>
 8000820:	4c51      	ldr	r4, [pc, #324]	; (8000968 <__aeabi_dadd+0x368>)
 8000822:	45a4      	cmp	ip, r4
 8000824:	d100      	bne.n	8000828 <__aeabi_dadd+0x228>
 8000826:	e161      	b.n	8000aec <__aeabi_dadd+0x4ec>
 8000828:	4694      	mov	ip, r2
 800082a:	e7b4      	b.n	8000796 <__aeabi_dadd+0x196>
 800082c:	003a      	movs	r2, r7
 800082e:	391f      	subs	r1, #31
 8000830:	40ca      	lsrs	r2, r1
 8000832:	0011      	movs	r1, r2
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x240>
 8000838:	2240      	movs	r2, #64	; 0x40
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	409f      	lsls	r7, r3
 800083e:	433c      	orrs	r4, r7
 8000840:	1e63      	subs	r3, r4, #1
 8000842:	419c      	sbcs	r4, r3
 8000844:	2700      	movs	r7, #0
 8000846:	2600      	movs	r6, #0
 8000848:	430c      	orrs	r4, r1
 800084a:	0763      	lsls	r3, r4, #29
 800084c:	d000      	beq.n	8000850 <__aeabi_dadd+0x250>
 800084e:	e753      	b.n	80006f8 <__aeabi_dadd+0xf8>
 8000850:	46b4      	mov	ip, r6
 8000852:	08e4      	lsrs	r4, r4, #3
 8000854:	077b      	lsls	r3, r7, #29
 8000856:	4323      	orrs	r3, r4
 8000858:	08f8      	lsrs	r0, r7, #3
 800085a:	4a43      	ldr	r2, [pc, #268]	; (8000968 <__aeabi_dadd+0x368>)
 800085c:	4594      	cmp	ip, r2
 800085e:	d01d      	beq.n	800089c <__aeabi_dadd+0x29c>
 8000860:	4662      	mov	r2, ip
 8000862:	0307      	lsls	r7, r0, #12
 8000864:	0552      	lsls	r2, r2, #21
 8000866:	0b3f      	lsrs	r7, r7, #12
 8000868:	0d52      	lsrs	r2, r2, #21
 800086a:	e760      	b.n	800072e <__aeabi_dadd+0x12e>
 800086c:	4644      	mov	r4, r8
 800086e:	430c      	orrs	r4, r1
 8000870:	1e62      	subs	r2, r4, #1
 8000872:	4194      	sbcs	r4, r2
 8000874:	18e4      	adds	r4, r4, r3
 8000876:	429c      	cmp	r4, r3
 8000878:	419b      	sbcs	r3, r3
 800087a:	425f      	negs	r7, r3
 800087c:	183f      	adds	r7, r7, r0
 800087e:	023b      	lsls	r3, r7, #8
 8000880:	d5e3      	bpl.n	800084a <__aeabi_dadd+0x24a>
 8000882:	4b39      	ldr	r3, [pc, #228]	; (8000968 <__aeabi_dadd+0x368>)
 8000884:	3601      	adds	r6, #1
 8000886:	429e      	cmp	r6, r3
 8000888:	d000      	beq.n	800088c <__aeabi_dadd+0x28c>
 800088a:	e0b5      	b.n	80009f8 <__aeabi_dadd+0x3f8>
 800088c:	0032      	movs	r2, r6
 800088e:	2700      	movs	r7, #0
 8000890:	2300      	movs	r3, #0
 8000892:	e74c      	b.n	800072e <__aeabi_dadd+0x12e>
 8000894:	0742      	lsls	r2, r0, #29
 8000896:	08db      	lsrs	r3, r3, #3
 8000898:	4313      	orrs	r3, r2
 800089a:	08c0      	lsrs	r0, r0, #3
 800089c:	001a      	movs	r2, r3
 800089e:	4302      	orrs	r2, r0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x2a4>
 80008a2:	e1e1      	b.n	8000c68 <__aeabi_dadd+0x668>
 80008a4:	2780      	movs	r7, #128	; 0x80
 80008a6:	033f      	lsls	r7, r7, #12
 80008a8:	4307      	orrs	r7, r0
 80008aa:	033f      	lsls	r7, r7, #12
 80008ac:	4a2e      	ldr	r2, [pc, #184]	; (8000968 <__aeabi_dadd+0x368>)
 80008ae:	0b3f      	lsrs	r7, r7, #12
 80008b0:	e73d      	b.n	800072e <__aeabi_dadd+0x12e>
 80008b2:	0020      	movs	r0, r4
 80008b4:	f000 fe42 	bl	800153c <__clzsi2>
 80008b8:	0001      	movs	r1, r0
 80008ba:	3118      	adds	r1, #24
 80008bc:	291f      	cmp	r1, #31
 80008be:	dc00      	bgt.n	80008c2 <__aeabi_dadd+0x2c2>
 80008c0:	e6fc      	b.n	80006bc <__aeabi_dadd+0xbc>
 80008c2:	3808      	subs	r0, #8
 80008c4:	4084      	lsls	r4, r0
 80008c6:	0027      	movs	r7, r4
 80008c8:	2400      	movs	r4, #0
 80008ca:	42b1      	cmp	r1, r6
 80008cc:	db00      	blt.n	80008d0 <__aeabi_dadd+0x2d0>
 80008ce:	e6ff      	b.n	80006d0 <__aeabi_dadd+0xd0>
 80008d0:	4a26      	ldr	r2, [pc, #152]	; (800096c <__aeabi_dadd+0x36c>)
 80008d2:	1a76      	subs	r6, r6, r1
 80008d4:	4017      	ands	r7, r2
 80008d6:	e70d      	b.n	80006f4 <__aeabi_dadd+0xf4>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d02f      	beq.n	800093c <__aeabi_dadd+0x33c>
 80008dc:	464a      	mov	r2, r9
 80008de:	1b92      	subs	r2, r2, r6
 80008e0:	4694      	mov	ip, r2
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x2e8>
 80008e6:	e0ad      	b.n	8000a44 <__aeabi_dadd+0x444>
 80008e8:	4a1f      	ldr	r2, [pc, #124]	; (8000968 <__aeabi_dadd+0x368>)
 80008ea:	4591      	cmp	r9, r2
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x2f0>
 80008ee:	e10f      	b.n	8000b10 <__aeabi_dadd+0x510>
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	0412      	lsls	r2, r2, #16
 80008f4:	4310      	orrs	r0, r2
 80008f6:	4662      	mov	r2, ip
 80008f8:	2a38      	cmp	r2, #56	; 0x38
 80008fa:	dd00      	ble.n	80008fe <__aeabi_dadd+0x2fe>
 80008fc:	e10f      	b.n	8000b1e <__aeabi_dadd+0x51e>
 80008fe:	2a1f      	cmp	r2, #31
 8000900:	dd00      	ble.n	8000904 <__aeabi_dadd+0x304>
 8000902:	e180      	b.n	8000c06 <__aeabi_dadd+0x606>
 8000904:	4664      	mov	r4, ip
 8000906:	2220      	movs	r2, #32
 8000908:	001e      	movs	r6, r3
 800090a:	1b12      	subs	r2, r2, r4
 800090c:	4667      	mov	r7, ip
 800090e:	0004      	movs	r4, r0
 8000910:	4093      	lsls	r3, r2
 8000912:	4094      	lsls	r4, r2
 8000914:	40fe      	lsrs	r6, r7
 8000916:	1e5a      	subs	r2, r3, #1
 8000918:	4193      	sbcs	r3, r2
 800091a:	40f8      	lsrs	r0, r7
 800091c:	4334      	orrs	r4, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	4480      	add	r8, r0
 8000922:	1864      	adds	r4, r4, r1
 8000924:	428c      	cmp	r4, r1
 8000926:	41bf      	sbcs	r7, r7
 8000928:	427f      	negs	r7, r7
 800092a:	464e      	mov	r6, r9
 800092c:	4447      	add	r7, r8
 800092e:	e7a6      	b.n	800087e <__aeabi_dadd+0x27e>
 8000930:	4642      	mov	r2, r8
 8000932:	430a      	orrs	r2, r1
 8000934:	0011      	movs	r1, r2
 8000936:	1e4a      	subs	r2, r1, #1
 8000938:	4191      	sbcs	r1, r2
 800093a:	e6ad      	b.n	8000698 <__aeabi_dadd+0x98>
 800093c:	4c0c      	ldr	r4, [pc, #48]	; (8000970 <__aeabi_dadd+0x370>)
 800093e:	1c72      	adds	r2, r6, #1
 8000940:	4222      	tst	r2, r4
 8000942:	d000      	beq.n	8000946 <__aeabi_dadd+0x346>
 8000944:	e0a1      	b.n	8000a8a <__aeabi_dadd+0x48a>
 8000946:	0002      	movs	r2, r0
 8000948:	431a      	orrs	r2, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d000      	beq.n	8000950 <__aeabi_dadd+0x350>
 800094e:	e0fa      	b.n	8000b46 <__aeabi_dadd+0x546>
 8000950:	2a00      	cmp	r2, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x356>
 8000954:	e145      	b.n	8000be2 <__aeabi_dadd+0x5e2>
 8000956:	003a      	movs	r2, r7
 8000958:	430a      	orrs	r2, r1
 800095a:	d000      	beq.n	800095e <__aeabi_dadd+0x35e>
 800095c:	e146      	b.n	8000bec <__aeabi_dadd+0x5ec>
 800095e:	0742      	lsls	r2, r0, #29
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	4313      	orrs	r3, r2
 8000964:	08c0      	lsrs	r0, r0, #3
 8000966:	e77b      	b.n	8000860 <__aeabi_dadd+0x260>
 8000968:	000007ff 	.word	0x000007ff
 800096c:	ff7fffff 	.word	0xff7fffff
 8000970:	000007fe 	.word	0x000007fe
 8000974:	4647      	mov	r7, r8
 8000976:	1a5c      	subs	r4, r3, r1
 8000978:	1bc2      	subs	r2, r0, r7
 800097a:	42a3      	cmp	r3, r4
 800097c:	41bf      	sbcs	r7, r7
 800097e:	427f      	negs	r7, r7
 8000980:	46b9      	mov	r9, r7
 8000982:	0017      	movs	r7, r2
 8000984:	464a      	mov	r2, r9
 8000986:	1abf      	subs	r7, r7, r2
 8000988:	023a      	lsls	r2, r7, #8
 800098a:	d500      	bpl.n	800098e <__aeabi_dadd+0x38e>
 800098c:	e08d      	b.n	8000aaa <__aeabi_dadd+0x4aa>
 800098e:	0023      	movs	r3, r4
 8000990:	433b      	orrs	r3, r7
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x396>
 8000994:	e68a      	b.n	80006ac <__aeabi_dadd+0xac>
 8000996:	2000      	movs	r0, #0
 8000998:	2500      	movs	r5, #0
 800099a:	e761      	b.n	8000860 <__aeabi_dadd+0x260>
 800099c:	4cb4      	ldr	r4, [pc, #720]	; (8000c70 <__aeabi_dadd+0x670>)
 800099e:	45a1      	cmp	r9, r4
 80009a0:	d100      	bne.n	80009a4 <__aeabi_dadd+0x3a4>
 80009a2:	e0ad      	b.n	8000b00 <__aeabi_dadd+0x500>
 80009a4:	2480      	movs	r4, #128	; 0x80
 80009a6:	0424      	lsls	r4, r4, #16
 80009a8:	4320      	orrs	r0, r4
 80009aa:	4664      	mov	r4, ip
 80009ac:	2c38      	cmp	r4, #56	; 0x38
 80009ae:	dc3d      	bgt.n	8000a2c <__aeabi_dadd+0x42c>
 80009b0:	4662      	mov	r2, ip
 80009b2:	2c1f      	cmp	r4, #31
 80009b4:	dd00      	ble.n	80009b8 <__aeabi_dadd+0x3b8>
 80009b6:	e0b7      	b.n	8000b28 <__aeabi_dadd+0x528>
 80009b8:	2520      	movs	r5, #32
 80009ba:	001e      	movs	r6, r3
 80009bc:	1b2d      	subs	r5, r5, r4
 80009be:	0004      	movs	r4, r0
 80009c0:	40ab      	lsls	r3, r5
 80009c2:	40ac      	lsls	r4, r5
 80009c4:	40d6      	lsrs	r6, r2
 80009c6:	40d0      	lsrs	r0, r2
 80009c8:	4642      	mov	r2, r8
 80009ca:	1e5d      	subs	r5, r3, #1
 80009cc:	41ab      	sbcs	r3, r5
 80009ce:	4334      	orrs	r4, r6
 80009d0:	1a12      	subs	r2, r2, r0
 80009d2:	4690      	mov	r8, r2
 80009d4:	4323      	orrs	r3, r4
 80009d6:	e02c      	b.n	8000a32 <__aeabi_dadd+0x432>
 80009d8:	0742      	lsls	r2, r0, #29
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	4313      	orrs	r3, r2
 80009de:	08c0      	lsrs	r0, r0, #3
 80009e0:	e73b      	b.n	800085a <__aeabi_dadd+0x25a>
 80009e2:	185c      	adds	r4, r3, r1
 80009e4:	429c      	cmp	r4, r3
 80009e6:	419b      	sbcs	r3, r3
 80009e8:	4440      	add	r0, r8
 80009ea:	425b      	negs	r3, r3
 80009ec:	18c7      	adds	r7, r0, r3
 80009ee:	2601      	movs	r6, #1
 80009f0:	023b      	lsls	r3, r7, #8
 80009f2:	d400      	bmi.n	80009f6 <__aeabi_dadd+0x3f6>
 80009f4:	e729      	b.n	800084a <__aeabi_dadd+0x24a>
 80009f6:	2602      	movs	r6, #2
 80009f8:	4a9e      	ldr	r2, [pc, #632]	; (8000c74 <__aeabi_dadd+0x674>)
 80009fa:	0863      	lsrs	r3, r4, #1
 80009fc:	4017      	ands	r7, r2
 80009fe:	2201      	movs	r2, #1
 8000a00:	4014      	ands	r4, r2
 8000a02:	431c      	orrs	r4, r3
 8000a04:	07fb      	lsls	r3, r7, #31
 8000a06:	431c      	orrs	r4, r3
 8000a08:	087f      	lsrs	r7, r7, #1
 8000a0a:	e673      	b.n	80006f4 <__aeabi_dadd+0xf4>
 8000a0c:	4644      	mov	r4, r8
 8000a0e:	3a20      	subs	r2, #32
 8000a10:	40d4      	lsrs	r4, r2
 8000a12:	4662      	mov	r2, ip
 8000a14:	2a20      	cmp	r2, #32
 8000a16:	d005      	beq.n	8000a24 <__aeabi_dadd+0x424>
 8000a18:	4667      	mov	r7, ip
 8000a1a:	2240      	movs	r2, #64	; 0x40
 8000a1c:	1bd2      	subs	r2, r2, r7
 8000a1e:	4647      	mov	r7, r8
 8000a20:	4097      	lsls	r7, r2
 8000a22:	4339      	orrs	r1, r7
 8000a24:	1e4a      	subs	r2, r1, #1
 8000a26:	4191      	sbcs	r1, r2
 8000a28:	4321      	orrs	r1, r4
 8000a2a:	e635      	b.n	8000698 <__aeabi_dadd+0x98>
 8000a2c:	4303      	orrs	r3, r0
 8000a2e:	1e58      	subs	r0, r3, #1
 8000a30:	4183      	sbcs	r3, r0
 8000a32:	1acc      	subs	r4, r1, r3
 8000a34:	42a1      	cmp	r1, r4
 8000a36:	41bf      	sbcs	r7, r7
 8000a38:	4643      	mov	r3, r8
 8000a3a:	427f      	negs	r7, r7
 8000a3c:	4655      	mov	r5, sl
 8000a3e:	464e      	mov	r6, r9
 8000a40:	1bdf      	subs	r7, r3, r7
 8000a42:	e62e      	b.n	80006a2 <__aeabi_dadd+0xa2>
 8000a44:	0002      	movs	r2, r0
 8000a46:	431a      	orrs	r2, r3
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x44c>
 8000a4a:	e0bd      	b.n	8000bc8 <__aeabi_dadd+0x5c8>
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	4664      	mov	r4, ip
 8000a50:	3a01      	subs	r2, #1
 8000a52:	2c01      	cmp	r4, #1
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dadd+0x458>
 8000a56:	e0e5      	b.n	8000c24 <__aeabi_dadd+0x624>
 8000a58:	4c85      	ldr	r4, [pc, #532]	; (8000c70 <__aeabi_dadd+0x670>)
 8000a5a:	45a4      	cmp	ip, r4
 8000a5c:	d058      	beq.n	8000b10 <__aeabi_dadd+0x510>
 8000a5e:	4694      	mov	ip, r2
 8000a60:	e749      	b.n	80008f6 <__aeabi_dadd+0x2f6>
 8000a62:	4664      	mov	r4, ip
 8000a64:	2220      	movs	r2, #32
 8000a66:	1b12      	subs	r2, r2, r4
 8000a68:	4644      	mov	r4, r8
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	000f      	movs	r7, r1
 8000a6e:	46a1      	mov	r9, r4
 8000a70:	4664      	mov	r4, ip
 8000a72:	4091      	lsls	r1, r2
 8000a74:	40e7      	lsrs	r7, r4
 8000a76:	464c      	mov	r4, r9
 8000a78:	1e4a      	subs	r2, r1, #1
 8000a7a:	4191      	sbcs	r1, r2
 8000a7c:	433c      	orrs	r4, r7
 8000a7e:	4642      	mov	r2, r8
 8000a80:	430c      	orrs	r4, r1
 8000a82:	4661      	mov	r1, ip
 8000a84:	40ca      	lsrs	r2, r1
 8000a86:	1880      	adds	r0, r0, r2
 8000a88:	e6f4      	b.n	8000874 <__aeabi_dadd+0x274>
 8000a8a:	4c79      	ldr	r4, [pc, #484]	; (8000c70 <__aeabi_dadd+0x670>)
 8000a8c:	42a2      	cmp	r2, r4
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x492>
 8000a90:	e6fd      	b.n	800088e <__aeabi_dadd+0x28e>
 8000a92:	1859      	adds	r1, r3, r1
 8000a94:	4299      	cmp	r1, r3
 8000a96:	419b      	sbcs	r3, r3
 8000a98:	4440      	add	r0, r8
 8000a9a:	425f      	negs	r7, r3
 8000a9c:	19c7      	adds	r7, r0, r7
 8000a9e:	07fc      	lsls	r4, r7, #31
 8000aa0:	0849      	lsrs	r1, r1, #1
 8000aa2:	0016      	movs	r6, r2
 8000aa4:	430c      	orrs	r4, r1
 8000aa6:	087f      	lsrs	r7, r7, #1
 8000aa8:	e6cf      	b.n	800084a <__aeabi_dadd+0x24a>
 8000aaa:	1acc      	subs	r4, r1, r3
 8000aac:	42a1      	cmp	r1, r4
 8000aae:	41bf      	sbcs	r7, r7
 8000ab0:	4643      	mov	r3, r8
 8000ab2:	427f      	negs	r7, r7
 8000ab4:	1a18      	subs	r0, r3, r0
 8000ab6:	4655      	mov	r5, sl
 8000ab8:	1bc7      	subs	r7, r0, r7
 8000aba:	e5f7      	b.n	80006ac <__aeabi_dadd+0xac>
 8000abc:	08c9      	lsrs	r1, r1, #3
 8000abe:	077b      	lsls	r3, r7, #29
 8000ac0:	4655      	mov	r5, sl
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	08f8      	lsrs	r0, r7, #3
 8000ac6:	e6c8      	b.n	800085a <__aeabi_dadd+0x25a>
 8000ac8:	2c00      	cmp	r4, #0
 8000aca:	d000      	beq.n	8000ace <__aeabi_dadd+0x4ce>
 8000acc:	e081      	b.n	8000bd2 <__aeabi_dadd+0x5d2>
 8000ace:	4643      	mov	r3, r8
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	d115      	bne.n	8000b00 <__aeabi_dadd+0x500>
 8000ad4:	2080      	movs	r0, #128	; 0x80
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	0300      	lsls	r0, r0, #12
 8000ada:	e6e3      	b.n	80008a4 <__aeabi_dadd+0x2a4>
 8000adc:	1a5c      	subs	r4, r3, r1
 8000ade:	42a3      	cmp	r3, r4
 8000ae0:	419b      	sbcs	r3, r3
 8000ae2:	1bc7      	subs	r7, r0, r7
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	1aff      	subs	r7, r7, r3
 8000aea:	e5da      	b.n	80006a2 <__aeabi_dadd+0xa2>
 8000aec:	0742      	lsls	r2, r0, #29
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	08c0      	lsrs	r0, r0, #3
 8000af4:	e6d2      	b.n	800089c <__aeabi_dadd+0x29c>
 8000af6:	0742      	lsls	r2, r0, #29
 8000af8:	08db      	lsrs	r3, r3, #3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	08c0      	lsrs	r0, r0, #3
 8000afe:	e6ac      	b.n	800085a <__aeabi_dadd+0x25a>
 8000b00:	4643      	mov	r3, r8
 8000b02:	4642      	mov	r2, r8
 8000b04:	08c9      	lsrs	r1, r1, #3
 8000b06:	075b      	lsls	r3, r3, #29
 8000b08:	4655      	mov	r5, sl
 8000b0a:	430b      	orrs	r3, r1
 8000b0c:	08d0      	lsrs	r0, r2, #3
 8000b0e:	e6c5      	b.n	800089c <__aeabi_dadd+0x29c>
 8000b10:	4643      	mov	r3, r8
 8000b12:	4642      	mov	r2, r8
 8000b14:	075b      	lsls	r3, r3, #29
 8000b16:	08c9      	lsrs	r1, r1, #3
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	08d0      	lsrs	r0, r2, #3
 8000b1c:	e6be      	b.n	800089c <__aeabi_dadd+0x29c>
 8000b1e:	4303      	orrs	r3, r0
 8000b20:	001c      	movs	r4, r3
 8000b22:	1e63      	subs	r3, r4, #1
 8000b24:	419c      	sbcs	r4, r3
 8000b26:	e6fc      	b.n	8000922 <__aeabi_dadd+0x322>
 8000b28:	0002      	movs	r2, r0
 8000b2a:	3c20      	subs	r4, #32
 8000b2c:	40e2      	lsrs	r2, r4
 8000b2e:	0014      	movs	r4, r2
 8000b30:	4662      	mov	r2, ip
 8000b32:	2a20      	cmp	r2, #32
 8000b34:	d003      	beq.n	8000b3e <__aeabi_dadd+0x53e>
 8000b36:	2540      	movs	r5, #64	; 0x40
 8000b38:	1aad      	subs	r5, r5, r2
 8000b3a:	40a8      	lsls	r0, r5
 8000b3c:	4303      	orrs	r3, r0
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	4183      	sbcs	r3, r0
 8000b42:	4323      	orrs	r3, r4
 8000b44:	e775      	b.n	8000a32 <__aeabi_dadd+0x432>
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	d0e2      	beq.n	8000b10 <__aeabi_dadd+0x510>
 8000b4a:	003a      	movs	r2, r7
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	d0cd      	beq.n	8000aec <__aeabi_dadd+0x4ec>
 8000b50:	0742      	lsls	r2, r0, #29
 8000b52:	08db      	lsrs	r3, r3, #3
 8000b54:	4313      	orrs	r3, r2
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	08c0      	lsrs	r0, r0, #3
 8000b5a:	0312      	lsls	r2, r2, #12
 8000b5c:	4210      	tst	r0, r2
 8000b5e:	d006      	beq.n	8000b6e <__aeabi_dadd+0x56e>
 8000b60:	08fc      	lsrs	r4, r7, #3
 8000b62:	4214      	tst	r4, r2
 8000b64:	d103      	bne.n	8000b6e <__aeabi_dadd+0x56e>
 8000b66:	0020      	movs	r0, r4
 8000b68:	08cb      	lsrs	r3, r1, #3
 8000b6a:	077a      	lsls	r2, r7, #29
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	0f5a      	lsrs	r2, r3, #29
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	0752      	lsls	r2, r2, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	e690      	b.n	800089c <__aeabi_dadd+0x29c>
 8000b7a:	4643      	mov	r3, r8
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x582>
 8000b80:	e709      	b.n	8000996 <__aeabi_dadd+0x396>
 8000b82:	4643      	mov	r3, r8
 8000b84:	4642      	mov	r2, r8
 8000b86:	08c9      	lsrs	r1, r1, #3
 8000b88:	075b      	lsls	r3, r3, #29
 8000b8a:	4655      	mov	r5, sl
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	08d0      	lsrs	r0, r2, #3
 8000b90:	e666      	b.n	8000860 <__aeabi_dadd+0x260>
 8000b92:	1acc      	subs	r4, r1, r3
 8000b94:	42a1      	cmp	r1, r4
 8000b96:	4189      	sbcs	r1, r1
 8000b98:	1a3f      	subs	r7, r7, r0
 8000b9a:	4249      	negs	r1, r1
 8000b9c:	4655      	mov	r5, sl
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	1a7f      	subs	r7, r7, r1
 8000ba2:	e57e      	b.n	80006a2 <__aeabi_dadd+0xa2>
 8000ba4:	4642      	mov	r2, r8
 8000ba6:	1a5c      	subs	r4, r3, r1
 8000ba8:	1a87      	subs	r7, r0, r2
 8000baa:	42a3      	cmp	r3, r4
 8000bac:	4192      	sbcs	r2, r2
 8000bae:	4252      	negs	r2, r2
 8000bb0:	1abf      	subs	r7, r7, r2
 8000bb2:	023a      	lsls	r2, r7, #8
 8000bb4:	d53d      	bpl.n	8000c32 <__aeabi_dadd+0x632>
 8000bb6:	1acc      	subs	r4, r1, r3
 8000bb8:	42a1      	cmp	r1, r4
 8000bba:	4189      	sbcs	r1, r1
 8000bbc:	4643      	mov	r3, r8
 8000bbe:	4249      	negs	r1, r1
 8000bc0:	1a1f      	subs	r7, r3, r0
 8000bc2:	4655      	mov	r5, sl
 8000bc4:	1a7f      	subs	r7, r7, r1
 8000bc6:	e595      	b.n	80006f4 <__aeabi_dadd+0xf4>
 8000bc8:	077b      	lsls	r3, r7, #29
 8000bca:	08c9      	lsrs	r1, r1, #3
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	08f8      	lsrs	r0, r7, #3
 8000bd0:	e643      	b.n	800085a <__aeabi_dadd+0x25a>
 8000bd2:	4644      	mov	r4, r8
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	430c      	orrs	r4, r1
 8000bd8:	d130      	bne.n	8000c3c <__aeabi_dadd+0x63c>
 8000bda:	0742      	lsls	r2, r0, #29
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	08c0      	lsrs	r0, r0, #3
 8000be0:	e65c      	b.n	800089c <__aeabi_dadd+0x29c>
 8000be2:	077b      	lsls	r3, r7, #29
 8000be4:	08c9      	lsrs	r1, r1, #3
 8000be6:	430b      	orrs	r3, r1
 8000be8:	08f8      	lsrs	r0, r7, #3
 8000bea:	e639      	b.n	8000860 <__aeabi_dadd+0x260>
 8000bec:	185c      	adds	r4, r3, r1
 8000bee:	429c      	cmp	r4, r3
 8000bf0:	419b      	sbcs	r3, r3
 8000bf2:	4440      	add	r0, r8
 8000bf4:	425b      	negs	r3, r3
 8000bf6:	18c7      	adds	r7, r0, r3
 8000bf8:	023b      	lsls	r3, r7, #8
 8000bfa:	d400      	bmi.n	8000bfe <__aeabi_dadd+0x5fe>
 8000bfc:	e625      	b.n	800084a <__aeabi_dadd+0x24a>
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <__aeabi_dadd+0x674>)
 8000c00:	2601      	movs	r6, #1
 8000c02:	401f      	ands	r7, r3
 8000c04:	e621      	b.n	800084a <__aeabi_dadd+0x24a>
 8000c06:	0004      	movs	r4, r0
 8000c08:	3a20      	subs	r2, #32
 8000c0a:	40d4      	lsrs	r4, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	2a20      	cmp	r2, #32
 8000c10:	d004      	beq.n	8000c1c <__aeabi_dadd+0x61c>
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	4666      	mov	r6, ip
 8000c16:	1b92      	subs	r2, r2, r6
 8000c18:	4090      	lsls	r0, r2
 8000c1a:	4303      	orrs	r3, r0
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	4193      	sbcs	r3, r2
 8000c20:	431c      	orrs	r4, r3
 8000c22:	e67e      	b.n	8000922 <__aeabi_dadd+0x322>
 8000c24:	185c      	adds	r4, r3, r1
 8000c26:	428c      	cmp	r4, r1
 8000c28:	4189      	sbcs	r1, r1
 8000c2a:	4440      	add	r0, r8
 8000c2c:	4249      	negs	r1, r1
 8000c2e:	1847      	adds	r7, r0, r1
 8000c30:	e6dd      	b.n	80009ee <__aeabi_dadd+0x3ee>
 8000c32:	0023      	movs	r3, r4
 8000c34:	433b      	orrs	r3, r7
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x63a>
 8000c38:	e6ad      	b.n	8000996 <__aeabi_dadd+0x396>
 8000c3a:	e606      	b.n	800084a <__aeabi_dadd+0x24a>
 8000c3c:	0744      	lsls	r4, r0, #29
 8000c3e:	4323      	orrs	r3, r4
 8000c40:	2480      	movs	r4, #128	; 0x80
 8000c42:	08c0      	lsrs	r0, r0, #3
 8000c44:	0324      	lsls	r4, r4, #12
 8000c46:	4220      	tst	r0, r4
 8000c48:	d008      	beq.n	8000c5c <__aeabi_dadd+0x65c>
 8000c4a:	4642      	mov	r2, r8
 8000c4c:	08d6      	lsrs	r6, r2, #3
 8000c4e:	4226      	tst	r6, r4
 8000c50:	d104      	bne.n	8000c5c <__aeabi_dadd+0x65c>
 8000c52:	4655      	mov	r5, sl
 8000c54:	0030      	movs	r0, r6
 8000c56:	08cb      	lsrs	r3, r1, #3
 8000c58:	0751      	lsls	r1, r2, #29
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	0f5a      	lsrs	r2, r3, #29
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	08db      	lsrs	r3, r3, #3
 8000c62:	0752      	lsls	r2, r2, #29
 8000c64:	4313      	orrs	r3, r2
 8000c66:	e619      	b.n	800089c <__aeabi_dadd+0x29c>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	4a01      	ldr	r2, [pc, #4]	; (8000c70 <__aeabi_dadd+0x670>)
 8000c6c:	001f      	movs	r7, r3
 8000c6e:	e55e      	b.n	800072e <__aeabi_dadd+0x12e>
 8000c70:	000007ff 	.word	0x000007ff
 8000c74:	ff7fffff 	.word	0xff7fffff

08000c78 <__aeabi_dsub>:
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7a:	4657      	mov	r7, sl
 8000c7c:	464e      	mov	r6, r9
 8000c7e:	4645      	mov	r5, r8
 8000c80:	46de      	mov	lr, fp
 8000c82:	b5e0      	push	{r5, r6, r7, lr}
 8000c84:	001e      	movs	r6, r3
 8000c86:	0017      	movs	r7, r2
 8000c88:	004a      	lsls	r2, r1, #1
 8000c8a:	030b      	lsls	r3, r1, #12
 8000c8c:	0d52      	lsrs	r2, r2, #21
 8000c8e:	0a5b      	lsrs	r3, r3, #9
 8000c90:	4690      	mov	r8, r2
 8000c92:	0f42      	lsrs	r2, r0, #29
 8000c94:	431a      	orrs	r2, r3
 8000c96:	0fcd      	lsrs	r5, r1, #31
 8000c98:	4ccd      	ldr	r4, [pc, #820]	; (8000fd0 <__aeabi_dsub+0x358>)
 8000c9a:	0331      	lsls	r1, r6, #12
 8000c9c:	00c3      	lsls	r3, r0, #3
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	0070      	lsls	r0, r6, #1
 8000ca2:	0f7a      	lsrs	r2, r7, #29
 8000ca4:	0a49      	lsrs	r1, r1, #9
 8000ca6:	00ff      	lsls	r7, r7, #3
 8000ca8:	469a      	mov	sl, r3
 8000caa:	46b9      	mov	r9, r7
 8000cac:	0d40      	lsrs	r0, r0, #21
 8000cae:	0ff6      	lsrs	r6, r6, #31
 8000cb0:	4311      	orrs	r1, r2
 8000cb2:	42a0      	cmp	r0, r4
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_dsub+0x40>
 8000cb6:	e0b1      	b.n	8000e1c <__aeabi_dsub+0x1a4>
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4056      	eors	r6, r2
 8000cbc:	46b3      	mov	fp, r6
 8000cbe:	42b5      	cmp	r5, r6
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dsub+0x4c>
 8000cc2:	e088      	b.n	8000dd6 <__aeabi_dsub+0x15e>
 8000cc4:	4642      	mov	r2, r8
 8000cc6:	1a12      	subs	r2, r2, r0
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	dc00      	bgt.n	8000cce <__aeabi_dsub+0x56>
 8000ccc:	e0ae      	b.n	8000e2c <__aeabi_dsub+0x1b4>
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dsub+0x5c>
 8000cd2:	e0c1      	b.n	8000e58 <__aeabi_dsub+0x1e0>
 8000cd4:	48be      	ldr	r0, [pc, #760]	; (8000fd0 <__aeabi_dsub+0x358>)
 8000cd6:	4580      	cmp	r8, r0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dsub+0x64>
 8000cda:	e151      	b.n	8000f80 <__aeabi_dsub+0x308>
 8000cdc:	2080      	movs	r0, #128	; 0x80
 8000cde:	0400      	lsls	r0, r0, #16
 8000ce0:	4301      	orrs	r1, r0
 8000ce2:	2a38      	cmp	r2, #56	; 0x38
 8000ce4:	dd00      	ble.n	8000ce8 <__aeabi_dsub+0x70>
 8000ce6:	e17b      	b.n	8000fe0 <__aeabi_dsub+0x368>
 8000ce8:	2a1f      	cmp	r2, #31
 8000cea:	dd00      	ble.n	8000cee <__aeabi_dsub+0x76>
 8000cec:	e1ee      	b.n	80010cc <__aeabi_dsub+0x454>
 8000cee:	2020      	movs	r0, #32
 8000cf0:	003e      	movs	r6, r7
 8000cf2:	1a80      	subs	r0, r0, r2
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	40d6      	lsrs	r6, r2
 8000cf8:	40d1      	lsrs	r1, r2
 8000cfa:	4087      	lsls	r7, r0
 8000cfc:	4662      	mov	r2, ip
 8000cfe:	4084      	lsls	r4, r0
 8000d00:	1a52      	subs	r2, r2, r1
 8000d02:	1e78      	subs	r0, r7, #1
 8000d04:	4187      	sbcs	r7, r0
 8000d06:	4694      	mov	ip, r2
 8000d08:	4334      	orrs	r4, r6
 8000d0a:	4327      	orrs	r7, r4
 8000d0c:	1bdc      	subs	r4, r3, r7
 8000d0e:	42a3      	cmp	r3, r4
 8000d10:	419b      	sbcs	r3, r3
 8000d12:	4662      	mov	r2, ip
 8000d14:	425b      	negs	r3, r3
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	4699      	mov	r9, r3
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	d400      	bmi.n	8000d22 <__aeabi_dsub+0xaa>
 8000d20:	e118      	b.n	8000f54 <__aeabi_dsub+0x2dc>
 8000d22:	464b      	mov	r3, r9
 8000d24:	0258      	lsls	r0, r3, #9
 8000d26:	0a43      	lsrs	r3, r0, #9
 8000d28:	4699      	mov	r9, r3
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dsub+0xba>
 8000d30:	e137      	b.n	8000fa2 <__aeabi_dsub+0x32a>
 8000d32:	4648      	mov	r0, r9
 8000d34:	f000 fc02 	bl	800153c <__clzsi2>
 8000d38:	0001      	movs	r1, r0
 8000d3a:	3908      	subs	r1, #8
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	0022      	movs	r2, r4
 8000d40:	4648      	mov	r0, r9
 8000d42:	1a5b      	subs	r3, r3, r1
 8000d44:	40da      	lsrs	r2, r3
 8000d46:	4088      	lsls	r0, r1
 8000d48:	408c      	lsls	r4, r1
 8000d4a:	4643      	mov	r3, r8
 8000d4c:	4310      	orrs	r0, r2
 8000d4e:	4588      	cmp	r8, r1
 8000d50:	dd00      	ble.n	8000d54 <__aeabi_dsub+0xdc>
 8000d52:	e136      	b.n	8000fc2 <__aeabi_dsub+0x34a>
 8000d54:	1ac9      	subs	r1, r1, r3
 8000d56:	1c4b      	adds	r3, r1, #1
 8000d58:	2b1f      	cmp	r3, #31
 8000d5a:	dd00      	ble.n	8000d5e <__aeabi_dsub+0xe6>
 8000d5c:	e0ea      	b.n	8000f34 <__aeabi_dsub+0x2bc>
 8000d5e:	2220      	movs	r2, #32
 8000d60:	0026      	movs	r6, r4
 8000d62:	1ad2      	subs	r2, r2, r3
 8000d64:	0001      	movs	r1, r0
 8000d66:	4094      	lsls	r4, r2
 8000d68:	40de      	lsrs	r6, r3
 8000d6a:	40d8      	lsrs	r0, r3
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4091      	lsls	r1, r2
 8000d70:	1e62      	subs	r2, r4, #1
 8000d72:	4194      	sbcs	r4, r2
 8000d74:	4681      	mov	r9, r0
 8000d76:	4698      	mov	r8, r3
 8000d78:	4331      	orrs	r1, r6
 8000d7a:	430c      	orrs	r4, r1
 8000d7c:	0763      	lsls	r3, r4, #29
 8000d7e:	d009      	beq.n	8000d94 <__aeabi_dsub+0x11c>
 8000d80:	230f      	movs	r3, #15
 8000d82:	4023      	ands	r3, r4
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d005      	beq.n	8000d94 <__aeabi_dsub+0x11c>
 8000d88:	1d23      	adds	r3, r4, #4
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	41a4      	sbcs	r4, r4
 8000d8e:	4264      	negs	r4, r4
 8000d90:	44a1      	add	r9, r4
 8000d92:	001c      	movs	r4, r3
 8000d94:	464b      	mov	r3, r9
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	d400      	bmi.n	8000d9c <__aeabi_dsub+0x124>
 8000d9a:	e0de      	b.n	8000f5a <__aeabi_dsub+0x2e2>
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	4b8c      	ldr	r3, [pc, #560]	; (8000fd0 <__aeabi_dsub+0x358>)
 8000da0:	3101      	adds	r1, #1
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dsub+0x130>
 8000da6:	e0e7      	b.n	8000f78 <__aeabi_dsub+0x300>
 8000da8:	464b      	mov	r3, r9
 8000daa:	488a      	ldr	r0, [pc, #552]	; (8000fd4 <__aeabi_dsub+0x35c>)
 8000dac:	08e4      	lsrs	r4, r4, #3
 8000dae:	4003      	ands	r3, r0
 8000db0:	0018      	movs	r0, r3
 8000db2:	0549      	lsls	r1, r1, #21
 8000db4:	075b      	lsls	r3, r3, #29
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	4323      	orrs	r3, r4
 8000dba:	0d4a      	lsrs	r2, r1, #21
 8000dbc:	0b04      	lsrs	r4, r0, #12
 8000dbe:	0512      	lsls	r2, r2, #20
 8000dc0:	07ed      	lsls	r5, r5, #31
 8000dc2:	4322      	orrs	r2, r4
 8000dc4:	432a      	orrs	r2, r5
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	0011      	movs	r1, r2
 8000dca:	bcf0      	pop	{r4, r5, r6, r7}
 8000dcc:	46bb      	mov	fp, r7
 8000dce:	46b2      	mov	sl, r6
 8000dd0:	46a9      	mov	r9, r5
 8000dd2:	46a0      	mov	r8, r4
 8000dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dd6:	4642      	mov	r2, r8
 8000dd8:	1a12      	subs	r2, r2, r0
 8000dda:	2a00      	cmp	r2, #0
 8000ddc:	dd52      	ble.n	8000e84 <__aeabi_dsub+0x20c>
 8000dde:	2800      	cmp	r0, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dsub+0x16c>
 8000de2:	e09c      	b.n	8000f1e <__aeabi_dsub+0x2a6>
 8000de4:	45a0      	cmp	r8, r4
 8000de6:	d100      	bne.n	8000dea <__aeabi_dsub+0x172>
 8000de8:	e0ca      	b.n	8000f80 <__aeabi_dsub+0x308>
 8000dea:	2080      	movs	r0, #128	; 0x80
 8000dec:	0400      	lsls	r0, r0, #16
 8000dee:	4301      	orrs	r1, r0
 8000df0:	2a38      	cmp	r2, #56	; 0x38
 8000df2:	dd00      	ble.n	8000df6 <__aeabi_dsub+0x17e>
 8000df4:	e149      	b.n	800108a <__aeabi_dsub+0x412>
 8000df6:	2a1f      	cmp	r2, #31
 8000df8:	dc00      	bgt.n	8000dfc <__aeabi_dsub+0x184>
 8000dfa:	e197      	b.n	800112c <__aeabi_dsub+0x4b4>
 8000dfc:	0010      	movs	r0, r2
 8000dfe:	000e      	movs	r6, r1
 8000e00:	3820      	subs	r0, #32
 8000e02:	40c6      	lsrs	r6, r0
 8000e04:	2a20      	cmp	r2, #32
 8000e06:	d004      	beq.n	8000e12 <__aeabi_dsub+0x19a>
 8000e08:	2040      	movs	r0, #64	; 0x40
 8000e0a:	1a82      	subs	r2, r0, r2
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	430f      	orrs	r7, r1
 8000e10:	46b9      	mov	r9, r7
 8000e12:	464c      	mov	r4, r9
 8000e14:	1e62      	subs	r2, r4, #1
 8000e16:	4194      	sbcs	r4, r2
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e13a      	b.n	8001092 <__aeabi_dsub+0x41a>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	433a      	orrs	r2, r7
 8000e20:	d028      	beq.n	8000e74 <__aeabi_dsub+0x1fc>
 8000e22:	46b3      	mov	fp, r6
 8000e24:	42b5      	cmp	r5, r6
 8000e26:	d02b      	beq.n	8000e80 <__aeabi_dsub+0x208>
 8000e28:	4a6b      	ldr	r2, [pc, #428]	; (8000fd8 <__aeabi_dsub+0x360>)
 8000e2a:	4442      	add	r2, r8
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d05d      	beq.n	8000eec <__aeabi_dsub+0x274>
 8000e30:	4642      	mov	r2, r8
 8000e32:	4644      	mov	r4, r8
 8000e34:	1a82      	subs	r2, r0, r2
 8000e36:	2c00      	cmp	r4, #0
 8000e38:	d000      	beq.n	8000e3c <__aeabi_dsub+0x1c4>
 8000e3a:	e0f5      	b.n	8001028 <__aeabi_dsub+0x3b0>
 8000e3c:	4665      	mov	r5, ip
 8000e3e:	431d      	orrs	r5, r3
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dsub+0x1cc>
 8000e42:	e19c      	b.n	800117e <__aeabi_dsub+0x506>
 8000e44:	1e55      	subs	r5, r2, #1
 8000e46:	2a01      	cmp	r2, #1
 8000e48:	d100      	bne.n	8000e4c <__aeabi_dsub+0x1d4>
 8000e4a:	e1fb      	b.n	8001244 <__aeabi_dsub+0x5cc>
 8000e4c:	4c60      	ldr	r4, [pc, #384]	; (8000fd0 <__aeabi_dsub+0x358>)
 8000e4e:	42a2      	cmp	r2, r4
 8000e50:	d100      	bne.n	8000e54 <__aeabi_dsub+0x1dc>
 8000e52:	e1bd      	b.n	80011d0 <__aeabi_dsub+0x558>
 8000e54:	002a      	movs	r2, r5
 8000e56:	e0f0      	b.n	800103a <__aeabi_dsub+0x3c2>
 8000e58:	0008      	movs	r0, r1
 8000e5a:	4338      	orrs	r0, r7
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_dsub+0x1e8>
 8000e5e:	e0c3      	b.n	8000fe8 <__aeabi_dsub+0x370>
 8000e60:	1e50      	subs	r0, r2, #1
 8000e62:	2a01      	cmp	r2, #1
 8000e64:	d100      	bne.n	8000e68 <__aeabi_dsub+0x1f0>
 8000e66:	e1a8      	b.n	80011ba <__aeabi_dsub+0x542>
 8000e68:	4c59      	ldr	r4, [pc, #356]	; (8000fd0 <__aeabi_dsub+0x358>)
 8000e6a:	42a2      	cmp	r2, r4
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dsub+0x1f8>
 8000e6e:	e087      	b.n	8000f80 <__aeabi_dsub+0x308>
 8000e70:	0002      	movs	r2, r0
 8000e72:	e736      	b.n	8000ce2 <__aeabi_dsub+0x6a>
 8000e74:	2201      	movs	r2, #1
 8000e76:	4056      	eors	r6, r2
 8000e78:	46b3      	mov	fp, r6
 8000e7a:	42b5      	cmp	r5, r6
 8000e7c:	d000      	beq.n	8000e80 <__aeabi_dsub+0x208>
 8000e7e:	e721      	b.n	8000cc4 <__aeabi_dsub+0x4c>
 8000e80:	4a55      	ldr	r2, [pc, #340]	; (8000fd8 <__aeabi_dsub+0x360>)
 8000e82:	4442      	add	r2, r8
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d100      	bne.n	8000e8a <__aeabi_dsub+0x212>
 8000e88:	e0b5      	b.n	8000ff6 <__aeabi_dsub+0x37e>
 8000e8a:	4642      	mov	r2, r8
 8000e8c:	4644      	mov	r4, r8
 8000e8e:	1a82      	subs	r2, r0, r2
 8000e90:	2c00      	cmp	r4, #0
 8000e92:	d100      	bne.n	8000e96 <__aeabi_dsub+0x21e>
 8000e94:	e138      	b.n	8001108 <__aeabi_dsub+0x490>
 8000e96:	4e4e      	ldr	r6, [pc, #312]	; (8000fd0 <__aeabi_dsub+0x358>)
 8000e98:	42b0      	cmp	r0, r6
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_dsub+0x226>
 8000e9c:	e1de      	b.n	800125c <__aeabi_dsub+0x5e4>
 8000e9e:	2680      	movs	r6, #128	; 0x80
 8000ea0:	4664      	mov	r4, ip
 8000ea2:	0436      	lsls	r6, r6, #16
 8000ea4:	4334      	orrs	r4, r6
 8000ea6:	46a4      	mov	ip, r4
 8000ea8:	2a38      	cmp	r2, #56	; 0x38
 8000eaa:	dd00      	ble.n	8000eae <__aeabi_dsub+0x236>
 8000eac:	e196      	b.n	80011dc <__aeabi_dsub+0x564>
 8000eae:	2a1f      	cmp	r2, #31
 8000eb0:	dd00      	ble.n	8000eb4 <__aeabi_dsub+0x23c>
 8000eb2:	e224      	b.n	80012fe <__aeabi_dsub+0x686>
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	1ab4      	subs	r4, r6, r2
 8000eb8:	46a2      	mov	sl, r4
 8000eba:	4664      	mov	r4, ip
 8000ebc:	4656      	mov	r6, sl
 8000ebe:	40b4      	lsls	r4, r6
 8000ec0:	46a1      	mov	r9, r4
 8000ec2:	001c      	movs	r4, r3
 8000ec4:	464e      	mov	r6, r9
 8000ec6:	40d4      	lsrs	r4, r2
 8000ec8:	4326      	orrs	r6, r4
 8000eca:	0034      	movs	r4, r6
 8000ecc:	4656      	mov	r6, sl
 8000ece:	40b3      	lsls	r3, r6
 8000ed0:	1e5e      	subs	r6, r3, #1
 8000ed2:	41b3      	sbcs	r3, r6
 8000ed4:	431c      	orrs	r4, r3
 8000ed6:	4663      	mov	r3, ip
 8000ed8:	40d3      	lsrs	r3, r2
 8000eda:	18c9      	adds	r1, r1, r3
 8000edc:	19e4      	adds	r4, r4, r7
 8000ede:	42bc      	cmp	r4, r7
 8000ee0:	41bf      	sbcs	r7, r7
 8000ee2:	427f      	negs	r7, r7
 8000ee4:	46b9      	mov	r9, r7
 8000ee6:	4680      	mov	r8, r0
 8000ee8:	4489      	add	r9, r1
 8000eea:	e0d8      	b.n	800109e <__aeabi_dsub+0x426>
 8000eec:	4640      	mov	r0, r8
 8000eee:	4c3b      	ldr	r4, [pc, #236]	; (8000fdc <__aeabi_dsub+0x364>)
 8000ef0:	3001      	adds	r0, #1
 8000ef2:	4220      	tst	r0, r4
 8000ef4:	d000      	beq.n	8000ef8 <__aeabi_dsub+0x280>
 8000ef6:	e0b4      	b.n	8001062 <__aeabi_dsub+0x3ea>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d000      	beq.n	8000f00 <__aeabi_dsub+0x288>
 8000efe:	e144      	b.n	800118a <__aeabi_dsub+0x512>
 8000f00:	4660      	mov	r0, ip
 8000f02:	4318      	orrs	r0, r3
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dsub+0x290>
 8000f06:	e190      	b.n	800122a <__aeabi_dsub+0x5b2>
 8000f08:	0008      	movs	r0, r1
 8000f0a:	4338      	orrs	r0, r7
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_dsub+0x298>
 8000f0e:	e1aa      	b.n	8001266 <__aeabi_dsub+0x5ee>
 8000f10:	4661      	mov	r1, ip
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	0749      	lsls	r1, r1, #29
 8000f16:	430b      	orrs	r3, r1
 8000f18:	4661      	mov	r1, ip
 8000f1a:	08cc      	lsrs	r4, r1, #3
 8000f1c:	e027      	b.n	8000f6e <__aeabi_dsub+0x2f6>
 8000f1e:	0008      	movs	r0, r1
 8000f20:	4338      	orrs	r0, r7
 8000f22:	d061      	beq.n	8000fe8 <__aeabi_dsub+0x370>
 8000f24:	1e50      	subs	r0, r2, #1
 8000f26:	2a01      	cmp	r2, #1
 8000f28:	d100      	bne.n	8000f2c <__aeabi_dsub+0x2b4>
 8000f2a:	e139      	b.n	80011a0 <__aeabi_dsub+0x528>
 8000f2c:	42a2      	cmp	r2, r4
 8000f2e:	d027      	beq.n	8000f80 <__aeabi_dsub+0x308>
 8000f30:	0002      	movs	r2, r0
 8000f32:	e75d      	b.n	8000df0 <__aeabi_dsub+0x178>
 8000f34:	0002      	movs	r2, r0
 8000f36:	391f      	subs	r1, #31
 8000f38:	40ca      	lsrs	r2, r1
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	2b20      	cmp	r3, #32
 8000f3e:	d003      	beq.n	8000f48 <__aeabi_dsub+0x2d0>
 8000f40:	2240      	movs	r2, #64	; 0x40
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	4098      	lsls	r0, r3
 8000f46:	4304      	orrs	r4, r0
 8000f48:	1e63      	subs	r3, r4, #1
 8000f4a:	419c      	sbcs	r4, r3
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	4699      	mov	r9, r3
 8000f50:	4698      	mov	r8, r3
 8000f52:	430c      	orrs	r4, r1
 8000f54:	0763      	lsls	r3, r4, #29
 8000f56:	d000      	beq.n	8000f5a <__aeabi_dsub+0x2e2>
 8000f58:	e712      	b.n	8000d80 <__aeabi_dsub+0x108>
 8000f5a:	464b      	mov	r3, r9
 8000f5c:	464a      	mov	r2, r9
 8000f5e:	08e4      	lsrs	r4, r4, #3
 8000f60:	075b      	lsls	r3, r3, #29
 8000f62:	4323      	orrs	r3, r4
 8000f64:	08d4      	lsrs	r4, r2, #3
 8000f66:	4642      	mov	r2, r8
 8000f68:	4919      	ldr	r1, [pc, #100]	; (8000fd0 <__aeabi_dsub+0x358>)
 8000f6a:	428a      	cmp	r2, r1
 8000f6c:	d00e      	beq.n	8000f8c <__aeabi_dsub+0x314>
 8000f6e:	0324      	lsls	r4, r4, #12
 8000f70:	0552      	lsls	r2, r2, #21
 8000f72:	0b24      	lsrs	r4, r4, #12
 8000f74:	0d52      	lsrs	r2, r2, #21
 8000f76:	e722      	b.n	8000dbe <__aeabi_dsub+0x146>
 8000f78:	000a      	movs	r2, r1
 8000f7a:	2400      	movs	r4, #0
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e71e      	b.n	8000dbe <__aeabi_dsub+0x146>
 8000f80:	08db      	lsrs	r3, r3, #3
 8000f82:	4662      	mov	r2, ip
 8000f84:	0752      	lsls	r2, r2, #29
 8000f86:	4313      	orrs	r3, r2
 8000f88:	4662      	mov	r2, ip
 8000f8a:	08d4      	lsrs	r4, r2, #3
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	4322      	orrs	r2, r4
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dsub+0x31c>
 8000f92:	e1fc      	b.n	800138e <__aeabi_dsub+0x716>
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	0312      	lsls	r2, r2, #12
 8000f98:	4314      	orrs	r4, r2
 8000f9a:	0324      	lsls	r4, r4, #12
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <__aeabi_dsub+0x358>)
 8000f9e:	0b24      	lsrs	r4, r4, #12
 8000fa0:	e70d      	b.n	8000dbe <__aeabi_dsub+0x146>
 8000fa2:	0020      	movs	r0, r4
 8000fa4:	f000 faca 	bl	800153c <__clzsi2>
 8000fa8:	0001      	movs	r1, r0
 8000faa:	3118      	adds	r1, #24
 8000fac:	291f      	cmp	r1, #31
 8000fae:	dc00      	bgt.n	8000fb2 <__aeabi_dsub+0x33a>
 8000fb0:	e6c4      	b.n	8000d3c <__aeabi_dsub+0xc4>
 8000fb2:	3808      	subs	r0, #8
 8000fb4:	4084      	lsls	r4, r0
 8000fb6:	4643      	mov	r3, r8
 8000fb8:	0020      	movs	r0, r4
 8000fba:	2400      	movs	r4, #0
 8000fbc:	4588      	cmp	r8, r1
 8000fbe:	dc00      	bgt.n	8000fc2 <__aeabi_dsub+0x34a>
 8000fc0:	e6c8      	b.n	8000d54 <__aeabi_dsub+0xdc>
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__aeabi_dsub+0x35c>)
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	4010      	ands	r0, r2
 8000fc8:	4698      	mov	r8, r3
 8000fca:	4681      	mov	r9, r0
 8000fcc:	e6d6      	b.n	8000d7c <__aeabi_dsub+0x104>
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	000007ff 	.word	0x000007ff
 8000fd4:	ff7fffff 	.word	0xff7fffff
 8000fd8:	fffff801 	.word	0xfffff801
 8000fdc:	000007fe 	.word	0x000007fe
 8000fe0:	430f      	orrs	r7, r1
 8000fe2:	1e7a      	subs	r2, r7, #1
 8000fe4:	4197      	sbcs	r7, r2
 8000fe6:	e691      	b.n	8000d0c <__aeabi_dsub+0x94>
 8000fe8:	4661      	mov	r1, ip
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	0749      	lsls	r1, r1, #29
 8000fee:	430b      	orrs	r3, r1
 8000ff0:	4661      	mov	r1, ip
 8000ff2:	08cc      	lsrs	r4, r1, #3
 8000ff4:	e7b8      	b.n	8000f68 <__aeabi_dsub+0x2f0>
 8000ff6:	4640      	mov	r0, r8
 8000ff8:	4cd3      	ldr	r4, [pc, #844]	; (8001348 <__aeabi_dsub+0x6d0>)
 8000ffa:	3001      	adds	r0, #1
 8000ffc:	4220      	tst	r0, r4
 8000ffe:	d000      	beq.n	8001002 <__aeabi_dsub+0x38a>
 8001000:	e0a2      	b.n	8001148 <__aeabi_dsub+0x4d0>
 8001002:	4640      	mov	r0, r8
 8001004:	2800      	cmp	r0, #0
 8001006:	d000      	beq.n	800100a <__aeabi_dsub+0x392>
 8001008:	e101      	b.n	800120e <__aeabi_dsub+0x596>
 800100a:	4660      	mov	r0, ip
 800100c:	4318      	orrs	r0, r3
 800100e:	d100      	bne.n	8001012 <__aeabi_dsub+0x39a>
 8001010:	e15e      	b.n	80012d0 <__aeabi_dsub+0x658>
 8001012:	0008      	movs	r0, r1
 8001014:	4338      	orrs	r0, r7
 8001016:	d000      	beq.n	800101a <__aeabi_dsub+0x3a2>
 8001018:	e15f      	b.n	80012da <__aeabi_dsub+0x662>
 800101a:	4661      	mov	r1, ip
 800101c:	08db      	lsrs	r3, r3, #3
 800101e:	0749      	lsls	r1, r1, #29
 8001020:	430b      	orrs	r3, r1
 8001022:	4661      	mov	r1, ip
 8001024:	08cc      	lsrs	r4, r1, #3
 8001026:	e7a2      	b.n	8000f6e <__aeabi_dsub+0x2f6>
 8001028:	4dc8      	ldr	r5, [pc, #800]	; (800134c <__aeabi_dsub+0x6d4>)
 800102a:	42a8      	cmp	r0, r5
 800102c:	d100      	bne.n	8001030 <__aeabi_dsub+0x3b8>
 800102e:	e0cf      	b.n	80011d0 <__aeabi_dsub+0x558>
 8001030:	2580      	movs	r5, #128	; 0x80
 8001032:	4664      	mov	r4, ip
 8001034:	042d      	lsls	r5, r5, #16
 8001036:	432c      	orrs	r4, r5
 8001038:	46a4      	mov	ip, r4
 800103a:	2a38      	cmp	r2, #56	; 0x38
 800103c:	dc56      	bgt.n	80010ec <__aeabi_dsub+0x474>
 800103e:	2a1f      	cmp	r2, #31
 8001040:	dd00      	ble.n	8001044 <__aeabi_dsub+0x3cc>
 8001042:	e0d1      	b.n	80011e8 <__aeabi_dsub+0x570>
 8001044:	2520      	movs	r5, #32
 8001046:	001e      	movs	r6, r3
 8001048:	1aad      	subs	r5, r5, r2
 800104a:	4664      	mov	r4, ip
 800104c:	40ab      	lsls	r3, r5
 800104e:	40ac      	lsls	r4, r5
 8001050:	40d6      	lsrs	r6, r2
 8001052:	1e5d      	subs	r5, r3, #1
 8001054:	41ab      	sbcs	r3, r5
 8001056:	4334      	orrs	r4, r6
 8001058:	4323      	orrs	r3, r4
 800105a:	4664      	mov	r4, ip
 800105c:	40d4      	lsrs	r4, r2
 800105e:	1b09      	subs	r1, r1, r4
 8001060:	e049      	b.n	80010f6 <__aeabi_dsub+0x47e>
 8001062:	4660      	mov	r0, ip
 8001064:	1bdc      	subs	r4, r3, r7
 8001066:	1a46      	subs	r6, r0, r1
 8001068:	42a3      	cmp	r3, r4
 800106a:	4180      	sbcs	r0, r0
 800106c:	4240      	negs	r0, r0
 800106e:	4681      	mov	r9, r0
 8001070:	0030      	movs	r0, r6
 8001072:	464e      	mov	r6, r9
 8001074:	1b80      	subs	r0, r0, r6
 8001076:	4681      	mov	r9, r0
 8001078:	0200      	lsls	r0, r0, #8
 800107a:	d476      	bmi.n	800116a <__aeabi_dsub+0x4f2>
 800107c:	464b      	mov	r3, r9
 800107e:	4323      	orrs	r3, r4
 8001080:	d000      	beq.n	8001084 <__aeabi_dsub+0x40c>
 8001082:	e652      	b.n	8000d2a <__aeabi_dsub+0xb2>
 8001084:	2400      	movs	r4, #0
 8001086:	2500      	movs	r5, #0
 8001088:	e771      	b.n	8000f6e <__aeabi_dsub+0x2f6>
 800108a:	4339      	orrs	r1, r7
 800108c:	000c      	movs	r4, r1
 800108e:	1e62      	subs	r2, r4, #1
 8001090:	4194      	sbcs	r4, r2
 8001092:	18e4      	adds	r4, r4, r3
 8001094:	429c      	cmp	r4, r3
 8001096:	419b      	sbcs	r3, r3
 8001098:	425b      	negs	r3, r3
 800109a:	4463      	add	r3, ip
 800109c:	4699      	mov	r9, r3
 800109e:	464b      	mov	r3, r9
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	d400      	bmi.n	80010a6 <__aeabi_dsub+0x42e>
 80010a4:	e756      	b.n	8000f54 <__aeabi_dsub+0x2dc>
 80010a6:	2301      	movs	r3, #1
 80010a8:	469c      	mov	ip, r3
 80010aa:	4ba8      	ldr	r3, [pc, #672]	; (800134c <__aeabi_dsub+0x6d4>)
 80010ac:	44e0      	add	r8, ip
 80010ae:	4598      	cmp	r8, r3
 80010b0:	d038      	beq.n	8001124 <__aeabi_dsub+0x4ac>
 80010b2:	464b      	mov	r3, r9
 80010b4:	48a6      	ldr	r0, [pc, #664]	; (8001350 <__aeabi_dsub+0x6d8>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	4003      	ands	r3, r0
 80010ba:	0018      	movs	r0, r3
 80010bc:	0863      	lsrs	r3, r4, #1
 80010be:	4014      	ands	r4, r2
 80010c0:	431c      	orrs	r4, r3
 80010c2:	07c3      	lsls	r3, r0, #31
 80010c4:	431c      	orrs	r4, r3
 80010c6:	0843      	lsrs	r3, r0, #1
 80010c8:	4699      	mov	r9, r3
 80010ca:	e657      	b.n	8000d7c <__aeabi_dsub+0x104>
 80010cc:	0010      	movs	r0, r2
 80010ce:	000e      	movs	r6, r1
 80010d0:	3820      	subs	r0, #32
 80010d2:	40c6      	lsrs	r6, r0
 80010d4:	2a20      	cmp	r2, #32
 80010d6:	d004      	beq.n	80010e2 <__aeabi_dsub+0x46a>
 80010d8:	2040      	movs	r0, #64	; 0x40
 80010da:	1a82      	subs	r2, r0, r2
 80010dc:	4091      	lsls	r1, r2
 80010de:	430f      	orrs	r7, r1
 80010e0:	46b9      	mov	r9, r7
 80010e2:	464f      	mov	r7, r9
 80010e4:	1e7a      	subs	r2, r7, #1
 80010e6:	4197      	sbcs	r7, r2
 80010e8:	4337      	orrs	r7, r6
 80010ea:	e60f      	b.n	8000d0c <__aeabi_dsub+0x94>
 80010ec:	4662      	mov	r2, ip
 80010ee:	431a      	orrs	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	4193      	sbcs	r3, r2
 80010f6:	1afc      	subs	r4, r7, r3
 80010f8:	42a7      	cmp	r7, r4
 80010fa:	41bf      	sbcs	r7, r7
 80010fc:	427f      	negs	r7, r7
 80010fe:	1bcb      	subs	r3, r1, r7
 8001100:	4699      	mov	r9, r3
 8001102:	465d      	mov	r5, fp
 8001104:	4680      	mov	r8, r0
 8001106:	e608      	b.n	8000d1a <__aeabi_dsub+0xa2>
 8001108:	4666      	mov	r6, ip
 800110a:	431e      	orrs	r6, r3
 800110c:	d100      	bne.n	8001110 <__aeabi_dsub+0x498>
 800110e:	e0be      	b.n	800128e <__aeabi_dsub+0x616>
 8001110:	1e56      	subs	r6, r2, #1
 8001112:	2a01      	cmp	r2, #1
 8001114:	d100      	bne.n	8001118 <__aeabi_dsub+0x4a0>
 8001116:	e109      	b.n	800132c <__aeabi_dsub+0x6b4>
 8001118:	4c8c      	ldr	r4, [pc, #560]	; (800134c <__aeabi_dsub+0x6d4>)
 800111a:	42a2      	cmp	r2, r4
 800111c:	d100      	bne.n	8001120 <__aeabi_dsub+0x4a8>
 800111e:	e119      	b.n	8001354 <__aeabi_dsub+0x6dc>
 8001120:	0032      	movs	r2, r6
 8001122:	e6c1      	b.n	8000ea8 <__aeabi_dsub+0x230>
 8001124:	4642      	mov	r2, r8
 8001126:	2400      	movs	r4, #0
 8001128:	2300      	movs	r3, #0
 800112a:	e648      	b.n	8000dbe <__aeabi_dsub+0x146>
 800112c:	2020      	movs	r0, #32
 800112e:	000c      	movs	r4, r1
 8001130:	1a80      	subs	r0, r0, r2
 8001132:	003e      	movs	r6, r7
 8001134:	4087      	lsls	r7, r0
 8001136:	4084      	lsls	r4, r0
 8001138:	40d6      	lsrs	r6, r2
 800113a:	1e78      	subs	r0, r7, #1
 800113c:	4187      	sbcs	r7, r0
 800113e:	40d1      	lsrs	r1, r2
 8001140:	4334      	orrs	r4, r6
 8001142:	433c      	orrs	r4, r7
 8001144:	448c      	add	ip, r1
 8001146:	e7a4      	b.n	8001092 <__aeabi_dsub+0x41a>
 8001148:	4a80      	ldr	r2, [pc, #512]	; (800134c <__aeabi_dsub+0x6d4>)
 800114a:	4290      	cmp	r0, r2
 800114c:	d100      	bne.n	8001150 <__aeabi_dsub+0x4d8>
 800114e:	e0e9      	b.n	8001324 <__aeabi_dsub+0x6ac>
 8001150:	19df      	adds	r7, r3, r7
 8001152:	429f      	cmp	r7, r3
 8001154:	419b      	sbcs	r3, r3
 8001156:	4461      	add	r1, ip
 8001158:	425b      	negs	r3, r3
 800115a:	18c9      	adds	r1, r1, r3
 800115c:	07cc      	lsls	r4, r1, #31
 800115e:	087f      	lsrs	r7, r7, #1
 8001160:	084b      	lsrs	r3, r1, #1
 8001162:	4699      	mov	r9, r3
 8001164:	4680      	mov	r8, r0
 8001166:	433c      	orrs	r4, r7
 8001168:	e6f4      	b.n	8000f54 <__aeabi_dsub+0x2dc>
 800116a:	1afc      	subs	r4, r7, r3
 800116c:	42a7      	cmp	r7, r4
 800116e:	41bf      	sbcs	r7, r7
 8001170:	4663      	mov	r3, ip
 8001172:	427f      	negs	r7, r7
 8001174:	1ac9      	subs	r1, r1, r3
 8001176:	1bcb      	subs	r3, r1, r7
 8001178:	4699      	mov	r9, r3
 800117a:	465d      	mov	r5, fp
 800117c:	e5d5      	b.n	8000d2a <__aeabi_dsub+0xb2>
 800117e:	08ff      	lsrs	r7, r7, #3
 8001180:	074b      	lsls	r3, r1, #29
 8001182:	465d      	mov	r5, fp
 8001184:	433b      	orrs	r3, r7
 8001186:	08cc      	lsrs	r4, r1, #3
 8001188:	e6ee      	b.n	8000f68 <__aeabi_dsub+0x2f0>
 800118a:	4662      	mov	r2, ip
 800118c:	431a      	orrs	r2, r3
 800118e:	d000      	beq.n	8001192 <__aeabi_dsub+0x51a>
 8001190:	e082      	b.n	8001298 <__aeabi_dsub+0x620>
 8001192:	000b      	movs	r3, r1
 8001194:	433b      	orrs	r3, r7
 8001196:	d11b      	bne.n	80011d0 <__aeabi_dsub+0x558>
 8001198:	2480      	movs	r4, #128	; 0x80
 800119a:	2500      	movs	r5, #0
 800119c:	0324      	lsls	r4, r4, #12
 800119e:	e6f9      	b.n	8000f94 <__aeabi_dsub+0x31c>
 80011a0:	19dc      	adds	r4, r3, r7
 80011a2:	429c      	cmp	r4, r3
 80011a4:	419b      	sbcs	r3, r3
 80011a6:	4461      	add	r1, ip
 80011a8:	4689      	mov	r9, r1
 80011aa:	425b      	negs	r3, r3
 80011ac:	4499      	add	r9, r3
 80011ae:	464b      	mov	r3, r9
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	d444      	bmi.n	800123e <__aeabi_dsub+0x5c6>
 80011b4:	2301      	movs	r3, #1
 80011b6:	4698      	mov	r8, r3
 80011b8:	e6cc      	b.n	8000f54 <__aeabi_dsub+0x2dc>
 80011ba:	1bdc      	subs	r4, r3, r7
 80011bc:	4662      	mov	r2, ip
 80011be:	42a3      	cmp	r3, r4
 80011c0:	419b      	sbcs	r3, r3
 80011c2:	1a51      	subs	r1, r2, r1
 80011c4:	425b      	negs	r3, r3
 80011c6:	1acb      	subs	r3, r1, r3
 80011c8:	4699      	mov	r9, r3
 80011ca:	2301      	movs	r3, #1
 80011cc:	4698      	mov	r8, r3
 80011ce:	e5a4      	b.n	8000d1a <__aeabi_dsub+0xa2>
 80011d0:	08ff      	lsrs	r7, r7, #3
 80011d2:	074b      	lsls	r3, r1, #29
 80011d4:	465d      	mov	r5, fp
 80011d6:	433b      	orrs	r3, r7
 80011d8:	08cc      	lsrs	r4, r1, #3
 80011da:	e6d7      	b.n	8000f8c <__aeabi_dsub+0x314>
 80011dc:	4662      	mov	r2, ip
 80011de:	431a      	orrs	r2, r3
 80011e0:	0014      	movs	r4, r2
 80011e2:	1e63      	subs	r3, r4, #1
 80011e4:	419c      	sbcs	r4, r3
 80011e6:	e679      	b.n	8000edc <__aeabi_dsub+0x264>
 80011e8:	0015      	movs	r5, r2
 80011ea:	4664      	mov	r4, ip
 80011ec:	3d20      	subs	r5, #32
 80011ee:	40ec      	lsrs	r4, r5
 80011f0:	46a0      	mov	r8, r4
 80011f2:	2a20      	cmp	r2, #32
 80011f4:	d005      	beq.n	8001202 <__aeabi_dsub+0x58a>
 80011f6:	2540      	movs	r5, #64	; 0x40
 80011f8:	4664      	mov	r4, ip
 80011fa:	1aaa      	subs	r2, r5, r2
 80011fc:	4094      	lsls	r4, r2
 80011fe:	4323      	orrs	r3, r4
 8001200:	469a      	mov	sl, r3
 8001202:	4654      	mov	r4, sl
 8001204:	1e63      	subs	r3, r4, #1
 8001206:	419c      	sbcs	r4, r3
 8001208:	4643      	mov	r3, r8
 800120a:	4323      	orrs	r3, r4
 800120c:	e773      	b.n	80010f6 <__aeabi_dsub+0x47e>
 800120e:	4662      	mov	r2, ip
 8001210:	431a      	orrs	r2, r3
 8001212:	d023      	beq.n	800125c <__aeabi_dsub+0x5e4>
 8001214:	000a      	movs	r2, r1
 8001216:	433a      	orrs	r2, r7
 8001218:	d000      	beq.n	800121c <__aeabi_dsub+0x5a4>
 800121a:	e0a0      	b.n	800135e <__aeabi_dsub+0x6e6>
 800121c:	4662      	mov	r2, ip
 800121e:	08db      	lsrs	r3, r3, #3
 8001220:	0752      	lsls	r2, r2, #29
 8001222:	4313      	orrs	r3, r2
 8001224:	4662      	mov	r2, ip
 8001226:	08d4      	lsrs	r4, r2, #3
 8001228:	e6b0      	b.n	8000f8c <__aeabi_dsub+0x314>
 800122a:	000b      	movs	r3, r1
 800122c:	433b      	orrs	r3, r7
 800122e:	d100      	bne.n	8001232 <__aeabi_dsub+0x5ba>
 8001230:	e728      	b.n	8001084 <__aeabi_dsub+0x40c>
 8001232:	08ff      	lsrs	r7, r7, #3
 8001234:	074b      	lsls	r3, r1, #29
 8001236:	465d      	mov	r5, fp
 8001238:	433b      	orrs	r3, r7
 800123a:	08cc      	lsrs	r4, r1, #3
 800123c:	e697      	b.n	8000f6e <__aeabi_dsub+0x2f6>
 800123e:	2302      	movs	r3, #2
 8001240:	4698      	mov	r8, r3
 8001242:	e736      	b.n	80010b2 <__aeabi_dsub+0x43a>
 8001244:	1afc      	subs	r4, r7, r3
 8001246:	42a7      	cmp	r7, r4
 8001248:	41bf      	sbcs	r7, r7
 800124a:	4663      	mov	r3, ip
 800124c:	427f      	negs	r7, r7
 800124e:	1ac9      	subs	r1, r1, r3
 8001250:	1bcb      	subs	r3, r1, r7
 8001252:	4699      	mov	r9, r3
 8001254:	2301      	movs	r3, #1
 8001256:	465d      	mov	r5, fp
 8001258:	4698      	mov	r8, r3
 800125a:	e55e      	b.n	8000d1a <__aeabi_dsub+0xa2>
 800125c:	074b      	lsls	r3, r1, #29
 800125e:	08ff      	lsrs	r7, r7, #3
 8001260:	433b      	orrs	r3, r7
 8001262:	08cc      	lsrs	r4, r1, #3
 8001264:	e692      	b.n	8000f8c <__aeabi_dsub+0x314>
 8001266:	1bdc      	subs	r4, r3, r7
 8001268:	4660      	mov	r0, ip
 800126a:	42a3      	cmp	r3, r4
 800126c:	41b6      	sbcs	r6, r6
 800126e:	1a40      	subs	r0, r0, r1
 8001270:	4276      	negs	r6, r6
 8001272:	1b80      	subs	r0, r0, r6
 8001274:	4681      	mov	r9, r0
 8001276:	0200      	lsls	r0, r0, #8
 8001278:	d560      	bpl.n	800133c <__aeabi_dsub+0x6c4>
 800127a:	1afc      	subs	r4, r7, r3
 800127c:	42a7      	cmp	r7, r4
 800127e:	41bf      	sbcs	r7, r7
 8001280:	4663      	mov	r3, ip
 8001282:	427f      	negs	r7, r7
 8001284:	1ac9      	subs	r1, r1, r3
 8001286:	1bcb      	subs	r3, r1, r7
 8001288:	4699      	mov	r9, r3
 800128a:	465d      	mov	r5, fp
 800128c:	e576      	b.n	8000d7c <__aeabi_dsub+0x104>
 800128e:	08ff      	lsrs	r7, r7, #3
 8001290:	074b      	lsls	r3, r1, #29
 8001292:	433b      	orrs	r3, r7
 8001294:	08cc      	lsrs	r4, r1, #3
 8001296:	e667      	b.n	8000f68 <__aeabi_dsub+0x2f0>
 8001298:	000a      	movs	r2, r1
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	433a      	orrs	r2, r7
 800129e:	d100      	bne.n	80012a2 <__aeabi_dsub+0x62a>
 80012a0:	e66f      	b.n	8000f82 <__aeabi_dsub+0x30a>
 80012a2:	4662      	mov	r2, ip
 80012a4:	0752      	lsls	r2, r2, #29
 80012a6:	4313      	orrs	r3, r2
 80012a8:	4662      	mov	r2, ip
 80012aa:	08d4      	lsrs	r4, r2, #3
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	0312      	lsls	r2, r2, #12
 80012b0:	4214      	tst	r4, r2
 80012b2:	d007      	beq.n	80012c4 <__aeabi_dsub+0x64c>
 80012b4:	08c8      	lsrs	r0, r1, #3
 80012b6:	4210      	tst	r0, r2
 80012b8:	d104      	bne.n	80012c4 <__aeabi_dsub+0x64c>
 80012ba:	465d      	mov	r5, fp
 80012bc:	0004      	movs	r4, r0
 80012be:	08fb      	lsrs	r3, r7, #3
 80012c0:	0749      	lsls	r1, r1, #29
 80012c2:	430b      	orrs	r3, r1
 80012c4:	0f5a      	lsrs	r2, r3, #29
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	0752      	lsls	r2, r2, #29
 80012cc:	4313      	orrs	r3, r2
 80012ce:	e65d      	b.n	8000f8c <__aeabi_dsub+0x314>
 80012d0:	074b      	lsls	r3, r1, #29
 80012d2:	08ff      	lsrs	r7, r7, #3
 80012d4:	433b      	orrs	r3, r7
 80012d6:	08cc      	lsrs	r4, r1, #3
 80012d8:	e649      	b.n	8000f6e <__aeabi_dsub+0x2f6>
 80012da:	19dc      	adds	r4, r3, r7
 80012dc:	429c      	cmp	r4, r3
 80012de:	419b      	sbcs	r3, r3
 80012e0:	4461      	add	r1, ip
 80012e2:	4689      	mov	r9, r1
 80012e4:	425b      	negs	r3, r3
 80012e6:	4499      	add	r9, r3
 80012e8:	464b      	mov	r3, r9
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	d400      	bmi.n	80012f0 <__aeabi_dsub+0x678>
 80012ee:	e631      	b.n	8000f54 <__aeabi_dsub+0x2dc>
 80012f0:	464a      	mov	r2, r9
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <__aeabi_dsub+0x6d8>)
 80012f4:	401a      	ands	r2, r3
 80012f6:	2301      	movs	r3, #1
 80012f8:	4691      	mov	r9, r2
 80012fa:	4698      	mov	r8, r3
 80012fc:	e62a      	b.n	8000f54 <__aeabi_dsub+0x2dc>
 80012fe:	0016      	movs	r6, r2
 8001300:	4664      	mov	r4, ip
 8001302:	3e20      	subs	r6, #32
 8001304:	40f4      	lsrs	r4, r6
 8001306:	46a0      	mov	r8, r4
 8001308:	2a20      	cmp	r2, #32
 800130a:	d005      	beq.n	8001318 <__aeabi_dsub+0x6a0>
 800130c:	2640      	movs	r6, #64	; 0x40
 800130e:	4664      	mov	r4, ip
 8001310:	1ab2      	subs	r2, r6, r2
 8001312:	4094      	lsls	r4, r2
 8001314:	4323      	orrs	r3, r4
 8001316:	469a      	mov	sl, r3
 8001318:	4654      	mov	r4, sl
 800131a:	1e63      	subs	r3, r4, #1
 800131c:	419c      	sbcs	r4, r3
 800131e:	4643      	mov	r3, r8
 8001320:	431c      	orrs	r4, r3
 8001322:	e5db      	b.n	8000edc <__aeabi_dsub+0x264>
 8001324:	0002      	movs	r2, r0
 8001326:	2400      	movs	r4, #0
 8001328:	2300      	movs	r3, #0
 800132a:	e548      	b.n	8000dbe <__aeabi_dsub+0x146>
 800132c:	19dc      	adds	r4, r3, r7
 800132e:	42bc      	cmp	r4, r7
 8001330:	41bf      	sbcs	r7, r7
 8001332:	4461      	add	r1, ip
 8001334:	4689      	mov	r9, r1
 8001336:	427f      	negs	r7, r7
 8001338:	44b9      	add	r9, r7
 800133a:	e738      	b.n	80011ae <__aeabi_dsub+0x536>
 800133c:	464b      	mov	r3, r9
 800133e:	4323      	orrs	r3, r4
 8001340:	d100      	bne.n	8001344 <__aeabi_dsub+0x6cc>
 8001342:	e69f      	b.n	8001084 <__aeabi_dsub+0x40c>
 8001344:	e606      	b.n	8000f54 <__aeabi_dsub+0x2dc>
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	000007fe 	.word	0x000007fe
 800134c:	000007ff 	.word	0x000007ff
 8001350:	ff7fffff 	.word	0xff7fffff
 8001354:	08ff      	lsrs	r7, r7, #3
 8001356:	074b      	lsls	r3, r1, #29
 8001358:	433b      	orrs	r3, r7
 800135a:	08cc      	lsrs	r4, r1, #3
 800135c:	e616      	b.n	8000f8c <__aeabi_dsub+0x314>
 800135e:	4662      	mov	r2, ip
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	0752      	lsls	r2, r2, #29
 8001364:	4313      	orrs	r3, r2
 8001366:	4662      	mov	r2, ip
 8001368:	08d4      	lsrs	r4, r2, #3
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	0312      	lsls	r2, r2, #12
 800136e:	4214      	tst	r4, r2
 8001370:	d007      	beq.n	8001382 <__aeabi_dsub+0x70a>
 8001372:	08c8      	lsrs	r0, r1, #3
 8001374:	4210      	tst	r0, r2
 8001376:	d104      	bne.n	8001382 <__aeabi_dsub+0x70a>
 8001378:	465d      	mov	r5, fp
 800137a:	0004      	movs	r4, r0
 800137c:	08fb      	lsrs	r3, r7, #3
 800137e:	0749      	lsls	r1, r1, #29
 8001380:	430b      	orrs	r3, r1
 8001382:	0f5a      	lsrs	r2, r3, #29
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	0752      	lsls	r2, r2, #29
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	4313      	orrs	r3, r2
 800138c:	e5fe      	b.n	8000f8c <__aeabi_dsub+0x314>
 800138e:	2300      	movs	r3, #0
 8001390:	4a01      	ldr	r2, [pc, #4]	; (8001398 <__aeabi_dsub+0x720>)
 8001392:	001c      	movs	r4, r3
 8001394:	e513      	b.n	8000dbe <__aeabi_dsub+0x146>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	000007ff 	.word	0x000007ff

0800139c <__aeabi_f2d>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	0043      	lsls	r3, r0, #1
 80013a0:	0246      	lsls	r6, r0, #9
 80013a2:	0fc4      	lsrs	r4, r0, #31
 80013a4:	20fe      	movs	r0, #254	; 0xfe
 80013a6:	0e1b      	lsrs	r3, r3, #24
 80013a8:	1c59      	adds	r1, r3, #1
 80013aa:	0a75      	lsrs	r5, r6, #9
 80013ac:	4208      	tst	r0, r1
 80013ae:	d00c      	beq.n	80013ca <__aeabi_f2d+0x2e>
 80013b0:	22e0      	movs	r2, #224	; 0xe0
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	4694      	mov	ip, r2
 80013b6:	076d      	lsls	r5, r5, #29
 80013b8:	0b36      	lsrs	r6, r6, #12
 80013ba:	4463      	add	r3, ip
 80013bc:	051b      	lsls	r3, r3, #20
 80013be:	4333      	orrs	r3, r6
 80013c0:	07e4      	lsls	r4, r4, #31
 80013c2:	4323      	orrs	r3, r4
 80013c4:	0028      	movs	r0, r5
 80013c6:	0019      	movs	r1, r3
 80013c8:	bd70      	pop	{r4, r5, r6, pc}
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d114      	bne.n	80013f8 <__aeabi_f2d+0x5c>
 80013ce:	2d00      	cmp	r5, #0
 80013d0:	d01b      	beq.n	800140a <__aeabi_f2d+0x6e>
 80013d2:	0028      	movs	r0, r5
 80013d4:	f000 f8b2 	bl	800153c <__clzsi2>
 80013d8:	280a      	cmp	r0, #10
 80013da:	dc1c      	bgt.n	8001416 <__aeabi_f2d+0x7a>
 80013dc:	230b      	movs	r3, #11
 80013de:	002e      	movs	r6, r5
 80013e0:	1a1b      	subs	r3, r3, r0
 80013e2:	40de      	lsrs	r6, r3
 80013e4:	0003      	movs	r3, r0
 80013e6:	3315      	adds	r3, #21
 80013e8:	409d      	lsls	r5, r3
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <__aeabi_f2d+0x88>)
 80013ec:	0336      	lsls	r6, r6, #12
 80013ee:	1a12      	subs	r2, r2, r0
 80013f0:	0552      	lsls	r2, r2, #21
 80013f2:	0b36      	lsrs	r6, r6, #12
 80013f4:	0d53      	lsrs	r3, r2, #21
 80013f6:	e7e1      	b.n	80013bc <__aeabi_f2d+0x20>
 80013f8:	2d00      	cmp	r5, #0
 80013fa:	d009      	beq.n	8001410 <__aeabi_f2d+0x74>
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	0b36      	lsrs	r6, r6, #12
 8001400:	0312      	lsls	r2, r2, #12
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <__aeabi_f2d+0x8c>)
 8001404:	076d      	lsls	r5, r5, #29
 8001406:	4316      	orrs	r6, r2
 8001408:	e7d8      	b.n	80013bc <__aeabi_f2d+0x20>
 800140a:	2300      	movs	r3, #0
 800140c:	2600      	movs	r6, #0
 800140e:	e7d5      	b.n	80013bc <__aeabi_f2d+0x20>
 8001410:	2600      	movs	r6, #0
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <__aeabi_f2d+0x8c>)
 8001414:	e7d2      	b.n	80013bc <__aeabi_f2d+0x20>
 8001416:	0003      	movs	r3, r0
 8001418:	3b0b      	subs	r3, #11
 800141a:	409d      	lsls	r5, r3
 800141c:	002e      	movs	r6, r5
 800141e:	2500      	movs	r5, #0
 8001420:	e7e3      	b.n	80013ea <__aeabi_f2d+0x4e>
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	00000389 	.word	0x00000389
 8001428:	000007ff 	.word	0x000007ff

0800142c <__aeabi_d2f>:
 800142c:	0002      	movs	r2, r0
 800142e:	004b      	lsls	r3, r1, #1
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	0d5b      	lsrs	r3, r3, #21
 8001434:	030c      	lsls	r4, r1, #12
 8001436:	4e3d      	ldr	r6, [pc, #244]	; (800152c <__aeabi_d2f+0x100>)
 8001438:	0a64      	lsrs	r4, r4, #9
 800143a:	0f40      	lsrs	r0, r0, #29
 800143c:	1c5f      	adds	r7, r3, #1
 800143e:	0fc9      	lsrs	r1, r1, #31
 8001440:	4304      	orrs	r4, r0
 8001442:	00d5      	lsls	r5, r2, #3
 8001444:	4237      	tst	r7, r6
 8001446:	d00a      	beq.n	800145e <__aeabi_d2f+0x32>
 8001448:	4839      	ldr	r0, [pc, #228]	; (8001530 <__aeabi_d2f+0x104>)
 800144a:	181e      	adds	r6, r3, r0
 800144c:	2efe      	cmp	r6, #254	; 0xfe
 800144e:	dd16      	ble.n	800147e <__aeabi_d2f+0x52>
 8001450:	20ff      	movs	r0, #255	; 0xff
 8001452:	2400      	movs	r4, #0
 8001454:	05c0      	lsls	r0, r0, #23
 8001456:	4320      	orrs	r0, r4
 8001458:	07c9      	lsls	r1, r1, #31
 800145a:	4308      	orrs	r0, r1
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <__aeabi_d2f+0x44>
 8001462:	432c      	orrs	r4, r5
 8001464:	d026      	beq.n	80014b4 <__aeabi_d2f+0x88>
 8001466:	2205      	movs	r2, #5
 8001468:	0192      	lsls	r2, r2, #6
 800146a:	0a54      	lsrs	r4, r2, #9
 800146c:	b2d8      	uxtb	r0, r3
 800146e:	e7f1      	b.n	8001454 <__aeabi_d2f+0x28>
 8001470:	4325      	orrs	r5, r4
 8001472:	d0ed      	beq.n	8001450 <__aeabi_d2f+0x24>
 8001474:	2080      	movs	r0, #128	; 0x80
 8001476:	03c0      	lsls	r0, r0, #15
 8001478:	4304      	orrs	r4, r0
 800147a:	20ff      	movs	r0, #255	; 0xff
 800147c:	e7ea      	b.n	8001454 <__aeabi_d2f+0x28>
 800147e:	2e00      	cmp	r6, #0
 8001480:	dd1b      	ble.n	80014ba <__aeabi_d2f+0x8e>
 8001482:	0192      	lsls	r2, r2, #6
 8001484:	1e53      	subs	r3, r2, #1
 8001486:	419a      	sbcs	r2, r3
 8001488:	00e4      	lsls	r4, r4, #3
 800148a:	0f6d      	lsrs	r5, r5, #29
 800148c:	4322      	orrs	r2, r4
 800148e:	432a      	orrs	r2, r5
 8001490:	0753      	lsls	r3, r2, #29
 8001492:	d048      	beq.n	8001526 <__aeabi_d2f+0xfa>
 8001494:	230f      	movs	r3, #15
 8001496:	4013      	ands	r3, r2
 8001498:	2b04      	cmp	r3, #4
 800149a:	d000      	beq.n	800149e <__aeabi_d2f+0x72>
 800149c:	3204      	adds	r2, #4
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	04db      	lsls	r3, r3, #19
 80014a2:	4013      	ands	r3, r2
 80014a4:	d03f      	beq.n	8001526 <__aeabi_d2f+0xfa>
 80014a6:	1c70      	adds	r0, r6, #1
 80014a8:	2efe      	cmp	r6, #254	; 0xfe
 80014aa:	d0d1      	beq.n	8001450 <__aeabi_d2f+0x24>
 80014ac:	0192      	lsls	r2, r2, #6
 80014ae:	0a54      	lsrs	r4, r2, #9
 80014b0:	b2c0      	uxtb	r0, r0
 80014b2:	e7cf      	b.n	8001454 <__aeabi_d2f+0x28>
 80014b4:	2000      	movs	r0, #0
 80014b6:	2400      	movs	r4, #0
 80014b8:	e7cc      	b.n	8001454 <__aeabi_d2f+0x28>
 80014ba:	0032      	movs	r2, r6
 80014bc:	3217      	adds	r2, #23
 80014be:	db22      	blt.n	8001506 <__aeabi_d2f+0xda>
 80014c0:	2080      	movs	r0, #128	; 0x80
 80014c2:	0400      	lsls	r0, r0, #16
 80014c4:	4320      	orrs	r0, r4
 80014c6:	241e      	movs	r4, #30
 80014c8:	1ba4      	subs	r4, r4, r6
 80014ca:	2c1f      	cmp	r4, #31
 80014cc:	dd1d      	ble.n	800150a <__aeabi_d2f+0xde>
 80014ce:	2202      	movs	r2, #2
 80014d0:	4252      	negs	r2, r2
 80014d2:	1b96      	subs	r6, r2, r6
 80014d4:	0002      	movs	r2, r0
 80014d6:	40f2      	lsrs	r2, r6
 80014d8:	0016      	movs	r6, r2
 80014da:	2c20      	cmp	r4, #32
 80014dc:	d004      	beq.n	80014e8 <__aeabi_d2f+0xbc>
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <__aeabi_d2f+0x108>)
 80014e0:	4694      	mov	ip, r2
 80014e2:	4463      	add	r3, ip
 80014e4:	4098      	lsls	r0, r3
 80014e6:	4305      	orrs	r5, r0
 80014e8:	002a      	movs	r2, r5
 80014ea:	1e53      	subs	r3, r2, #1
 80014ec:	419a      	sbcs	r2, r3
 80014ee:	4332      	orrs	r2, r6
 80014f0:	2600      	movs	r6, #0
 80014f2:	0753      	lsls	r3, r2, #29
 80014f4:	d1ce      	bne.n	8001494 <__aeabi_d2f+0x68>
 80014f6:	2480      	movs	r4, #128	; 0x80
 80014f8:	0013      	movs	r3, r2
 80014fa:	04e4      	lsls	r4, r4, #19
 80014fc:	2001      	movs	r0, #1
 80014fe:	4023      	ands	r3, r4
 8001500:	4222      	tst	r2, r4
 8001502:	d1d3      	bne.n	80014ac <__aeabi_d2f+0x80>
 8001504:	e7b0      	b.n	8001468 <__aeabi_d2f+0x3c>
 8001506:	2300      	movs	r3, #0
 8001508:	e7ad      	b.n	8001466 <__aeabi_d2f+0x3a>
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <__aeabi_d2f+0x10c>)
 800150c:	4694      	mov	ip, r2
 800150e:	002a      	movs	r2, r5
 8001510:	40e2      	lsrs	r2, r4
 8001512:	0014      	movs	r4, r2
 8001514:	002a      	movs	r2, r5
 8001516:	4463      	add	r3, ip
 8001518:	409a      	lsls	r2, r3
 800151a:	4098      	lsls	r0, r3
 800151c:	1e55      	subs	r5, r2, #1
 800151e:	41aa      	sbcs	r2, r5
 8001520:	4302      	orrs	r2, r0
 8001522:	4322      	orrs	r2, r4
 8001524:	e7e4      	b.n	80014f0 <__aeabi_d2f+0xc4>
 8001526:	0033      	movs	r3, r6
 8001528:	e79e      	b.n	8001468 <__aeabi_d2f+0x3c>
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	000007fe 	.word	0x000007fe
 8001530:	fffffc80 	.word	0xfffffc80
 8001534:	fffffca2 	.word	0xfffffca2
 8001538:	fffffc82 	.word	0xfffffc82

0800153c <__clzsi2>:
 800153c:	211c      	movs	r1, #28
 800153e:	2301      	movs	r3, #1
 8001540:	041b      	lsls	r3, r3, #16
 8001542:	4298      	cmp	r0, r3
 8001544:	d301      	bcc.n	800154a <__clzsi2+0xe>
 8001546:	0c00      	lsrs	r0, r0, #16
 8001548:	3910      	subs	r1, #16
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	4298      	cmp	r0, r3
 800154e:	d301      	bcc.n	8001554 <__clzsi2+0x18>
 8001550:	0a00      	lsrs	r0, r0, #8
 8001552:	3908      	subs	r1, #8
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	4298      	cmp	r0, r3
 8001558:	d301      	bcc.n	800155e <__clzsi2+0x22>
 800155a:	0900      	lsrs	r0, r0, #4
 800155c:	3904      	subs	r1, #4
 800155e:	a202      	add	r2, pc, #8	; (adr r2, 8001568 <__clzsi2+0x2c>)
 8001560:	5c10      	ldrb	r0, [r2, r0]
 8001562:	1840      	adds	r0, r0, r1
 8001564:	4770      	bx	lr
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	02020304 	.word	0x02020304
 800156c:	01010101 	.word	0x01010101
	...

08001578 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
}
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bd80      	pop	{r7, pc}

08001588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158e:	f000 fe3d 	bl	800220c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001592:	f000 f9eb 	bl	800196c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001596:	f000 fbb9 	bl	8001d0c <MX_GPIO_Init>
  MX_DMA_Init();
 800159a:	f000 fb91 	bl	8001cc0 <MX_DMA_Init>
  MX_TIM16_Init();
 800159e:	f000 fa85 	bl	8001aac <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80015a2:	f000 fb0b 	bl	8001bbc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80015a6:	f000 fa29 	bl	80019fc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80015aa:	f000 fb55 	bl	8001c58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);//PWM時に記述
 80015ae:	4bd8      	ldr	r3, [pc, #864]	; (8001910 <main+0x388>)
 80015b0:	2100      	movs	r1, #0
 80015b2:	0018      	movs	r0, r3
 80015b4:	f002 fad4 	bl	8003b60 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 80015b8:	4bd5      	ldr	r3, [pc, #852]	; (8001910 <main+0x388>)
 80015ba:	2100      	movs	r1, #0
 80015bc:	0018      	movs	r0, r3
 80015be:	f003 fa7b 	bl	8004ab8 <HAL_TIMEx_PWMN_Start>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,  GPIO_PIN_SET);
 80015c2:	4bd4      	ldr	r3, [pc, #848]	; (8001914 <main+0x38c>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	2120      	movs	r1, #32
 80015c8:	0018      	movs	r0, r3
 80015ca:	f001 fb7a 	bl	8002cc2 <HAL_GPIO_WritePin>

  HAL_UART_Receive_DMA(&huart1,rxBuf,sizeof(rxBuf));
 80015ce:	49d2      	ldr	r1, [pc, #840]	; (8001918 <main+0x390>)
 80015d0:	4bd2      	ldr	r3, [pc, #840]	; (800191c <main+0x394>)
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	0018      	movs	r0, r3
 80015d6:	f003 fc97 	bl	8004f08 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2,rxBuf2,sizeof(rxBuf2));
 80015da:	49d1      	ldr	r1, [pc, #836]	; (8001920 <main+0x398>)
 80015dc:	4bd1      	ldr	r3, [pc, #836]	; (8001924 <main+0x39c>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	0018      	movs	r0, r3
 80015e2:	f003 fc91 	bl	8004f08 <HAL_UART_Receive_DMA>
  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 199);
 80015e6:	4bca      	ldr	r3, [pc, #808]	; (8001910 <main+0x388>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	22c7      	movs	r2, #199	; 0xc7
 80015ec:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim3);
 80015ee:	4bce      	ldr	r3, [pc, #824]	; (8001928 <main+0x3a0>)
 80015f0:	0018      	movs	r0, r3
 80015f2:	f002 fa07 	bl	8003a04 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


    if(HAL_GPIO_ReadPin(READ_GPIO_Port, READ_Pin)==1){
 80015f6:	23a0      	movs	r3, #160	; 0xa0
 80015f8:	05db      	lsls	r3, r3, #23
 80015fa:	2102      	movs	r1, #2
 80015fc:	0018      	movs	r0, r3
 80015fe:	f001 fb43 	bl	8002c88 <HAL_GPIO_ReadPin>
 8001602:	0003      	movs	r3, r0
 8001604:	2b01      	cmp	r3, #1
 8001606:	d135      	bne.n	8001674 <main+0xec>
      if(goal_speed>cur_speed){
 8001608:	4bc8      	ldr	r3, [pc, #800]	; (800192c <main+0x3a4>)
 800160a:	2200      	movs	r2, #0
 800160c:	5e9a      	ldrsh	r2, [r3, r2]
 800160e:	4bc8      	ldr	r3, [pc, #800]	; (8001930 <main+0x3a8>)
 8001610:	2100      	movs	r1, #0
 8001612:	5e5b      	ldrsh	r3, [r3, r1]
 8001614:	429a      	cmp	r2, r3
 8001616:	dd12      	ble.n	800163e <main+0xb6>
    	  value += 0.1;
 8001618:	4bc6      	ldr	r3, [pc, #792]	; (8001934 <main+0x3ac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	1c18      	adds	r0, r3, #0
 800161e:	f7ff febd 	bl	800139c <__aeabi_f2d>
 8001622:	4ac5      	ldr	r2, [pc, #788]	; (8001938 <main+0x3b0>)
 8001624:	4bc5      	ldr	r3, [pc, #788]	; (800193c <main+0x3b4>)
 8001626:	f7fe ffeb 	bl	8000600 <__aeabi_dadd>
 800162a:	0002      	movs	r2, r0
 800162c:	000b      	movs	r3, r1
 800162e:	0010      	movs	r0, r2
 8001630:	0019      	movs	r1, r3
 8001632:	f7ff fefb 	bl	800142c <__aeabi_d2f>
 8001636:	1c02      	adds	r2, r0, #0
 8001638:	4bbe      	ldr	r3, [pc, #760]	; (8001934 <main+0x3ac>)
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e01d      	b.n	800167a <main+0xf2>
      }else if(goal_speed<cur_speed){
 800163e:	4bbb      	ldr	r3, [pc, #748]	; (800192c <main+0x3a4>)
 8001640:	2200      	movs	r2, #0
 8001642:	5e9a      	ldrsh	r2, [r3, r2]
 8001644:	4bba      	ldr	r3, [pc, #744]	; (8001930 <main+0x3a8>)
 8001646:	2100      	movs	r1, #0
 8001648:	5e5b      	ldrsh	r3, [r3, r1]
 800164a:	429a      	cmp	r2, r3
 800164c:	da15      	bge.n	800167a <main+0xf2>
    	  value -= 0.1;
 800164e:	4bb9      	ldr	r3, [pc, #740]	; (8001934 <main+0x3ac>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	1c18      	adds	r0, r3, #0
 8001654:	f7ff fea2 	bl	800139c <__aeabi_f2d>
 8001658:	4ab7      	ldr	r2, [pc, #732]	; (8001938 <main+0x3b0>)
 800165a:	4bb8      	ldr	r3, [pc, #736]	; (800193c <main+0x3b4>)
 800165c:	f7ff fb0c 	bl	8000c78 <__aeabi_dsub>
 8001660:	0002      	movs	r2, r0
 8001662:	000b      	movs	r3, r1
 8001664:	0010      	movs	r0, r2
 8001666:	0019      	movs	r1, r3
 8001668:	f7ff fee0 	bl	800142c <__aeabi_d2f>
 800166c:	1c02      	adds	r2, r0, #0
 800166e:	4bb1      	ldr	r3, [pc, #708]	; (8001934 <main+0x3ac>)
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e002      	b.n	800167a <main+0xf2>
      }else{
      }
    }else{
      value = 199;
 8001674:	4baf      	ldr	r3, [pc, #700]	; (8001934 <main+0x3ac>)
 8001676:	4ab2      	ldr	r2, [pc, #712]	; (8001940 <main+0x3b8>)
 8001678:	601a      	str	r2, [r3, #0]
    }

    if(value>=399){value = 395;}
 800167a:	4bae      	ldr	r3, [pc, #696]	; (8001934 <main+0x3ac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	49b1      	ldr	r1, [pc, #708]	; (8001944 <main+0x3bc>)
 8001680:	1c18      	adds	r0, r3, #0
 8001682:	f7fe fee3 	bl	800044c <__aeabi_fcmpge>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d003      	beq.n	8001692 <main+0x10a>
 800168a:	4baa      	ldr	r3, [pc, #680]	; (8001934 <main+0x3ac>)
 800168c:	4aae      	ldr	r2, [pc, #696]	; (8001948 <main+0x3c0>)
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e00a      	b.n	80016a8 <main+0x120>
    else if(value<5){value = 0;}
 8001692:	4ba8      	ldr	r3, [pc, #672]	; (8001934 <main+0x3ac>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	49ad      	ldr	r1, [pc, #692]	; (800194c <main+0x3c4>)
 8001698:	1c18      	adds	r0, r3, #0
 800169a:	f7fe feb9 	bl	8000410 <__aeabi_fcmplt>
 800169e:	1e03      	subs	r3, r0, #0
 80016a0:	d002      	beq.n	80016a8 <main+0x120>
 80016a2:	4ba4      	ldr	r3, [pc, #656]	; (8001934 <main+0x3ac>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

    //------------------------------------------------------

    index2 = huart2.hdmarx->Instance->CNDTR;
 80016a8:	4b9e      	ldr	r3, [pc, #632]	; (8001924 <main+0x39c>)
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	589b      	ldr	r3, [r3, r2]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	001a      	movs	r2, r3
 80016b4:	4ba6      	ldr	r3, [pc, #664]	; (8001950 <main+0x3c8>)
 80016b6:	601a      	str	r2, [r3, #0]
    index2 = sizeof(rxBuf2) - index2;
 80016b8:	4ba5      	ldr	r3, [pc, #660]	; (8001950 <main+0x3c8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	001a      	movs	r2, r3
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	001a      	movs	r2, r3
 80016c4:	4ba2      	ldr	r3, [pc, #648]	; (8001950 <main+0x3c8>)
 80016c6:	601a      	str	r2, [r3, #0]
	int begin2 = index2 - 25;
 80016c8:	4ba1      	ldr	r3, [pc, #644]	; (8001950 <main+0x3c8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3b19      	subs	r3, #25
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
	if(begin2 < 0){
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	da02      	bge.n	80016dc <main+0x154>
	  begin2 = begin2 + sizeof(rxBuf2);
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	3380      	adds	r3, #128	; 0x80
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
	}

	while(1){
	  uint8_t rx2 = rxBuf2[begin2];
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	4990      	ldr	r1, [pc, #576]	; (8001920 <main+0x398>)
 80016e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e2:	188a      	adds	r2, r1, r2
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	701a      	strb	r2, [r3, #0]
	  if(rx2 == 250 + MOTOR_ID){
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2bfc      	cmp	r3, #252	; 0xfc
 80016ee:	d156      	bne.n	800179e <main+0x216>
		for(int i=0; i<2; i++){
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	e020      	b.n	8001738 <main+0x1b0>
		  begin2 = begin2 + 1;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	3301      	adds	r3, #1
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
		  if(begin2 > 127){
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001700:	dd02      	ble.n	8001708 <main+0x180>
			begin2 = begin2 - sizeof(rxBuf2);
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	3b80      	subs	r3, #128	; 0x80
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
		  }
		  spdBuf2[i]=rxBuf2[begin2];
 8001708:	4a85      	ldr	r2, [pc, #532]	; (8001920 <main+0x398>)
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	18d3      	adds	r3, r2, r3
 800170e:	7819      	ldrb	r1, [r3, #0]
 8001710:	4a90      	ldr	r2, [pc, #576]	; (8001954 <main+0x3cc>)
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	18d3      	adds	r3, r2, r3
 8001716:	1c0a      	adds	r2, r1, #0
 8001718:	701a      	strb	r2, [r3, #0]
		  if(spdBuf2[i]>100 || spdBuf2[i]<0){
 800171a:	4a8e      	ldr	r2, [pc, #568]	; (8001954 <main+0x3cc>)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	18d3      	adds	r3, r2, r3
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d905      	bls.n	8001732 <main+0x1aa>
			  j++;
 8001726:	4b8c      	ldr	r3, [pc, #560]	; (8001958 <main+0x3d0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	4b8a      	ldr	r3, [pc, #552]	; (8001958 <main+0x3d0>)
 800172e:	601a      	str	r2, [r3, #0]
			  break;
 8001730:	e005      	b.n	800173e <main+0x1b6>
		for(int i=0; i<2; i++){
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	3301      	adds	r3, #1
 8001736:	623b      	str	r3, [r7, #32]
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	2b01      	cmp	r3, #1
 800173c:	dddb      	ble.n	80016f6 <main+0x16e>
		  }
		}

		goal_speed = 0;
 800173e:	4b7b      	ldr	r3, [pc, #492]	; (800192c <main+0x3a4>)
 8001740:	2200      	movs	r2, #0
 8001742:	801a      	strh	r2, [r3, #0]
		int hyaku2 = 1;
 8001744:	2301      	movs	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
		for(int i = 0; i <2 ; i++){
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	e018      	b.n	8001780 <main+0x1f8>
		  goal_speed = goal_speed + (spdBuf2[i]*hyaku2);
 800174e:	4a81      	ldr	r2, [pc, #516]	; (8001954 <main+0x3cc>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	18d3      	adds	r3, r2, r3
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	b292      	uxth	r2, r2
 800175c:	4353      	muls	r3, r2
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b72      	ldr	r3, [pc, #456]	; (800192c <main+0x3a4>)
 8001762:	2100      	movs	r1, #0
 8001764:	5e5b      	ldrsh	r3, [r3, r1]
 8001766:	b29b      	uxth	r3, r3
 8001768:	18d3      	adds	r3, r2, r3
 800176a:	b29b      	uxth	r3, r3
 800176c:	b21a      	sxth	r2, r3
 800176e:	4b6f      	ldr	r3, [pc, #444]	; (800192c <main+0x3a4>)
 8001770:	801a      	strh	r2, [r3, #0]
		  hyaku2 = hyaku2*100;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	2264      	movs	r2, #100	; 0x64
 8001776:	4353      	muls	r3, r2
 8001778:	61fb      	str	r3, [r7, #28]
		for(int i = 0; i <2 ; i++){
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	3301      	adds	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2b01      	cmp	r3, #1
 8001784:	dde3      	ble.n	800174e <main+0x1c6>
		}
		goal_speed -= 1000;
 8001786:	4b69      	ldr	r3, [pc, #420]	; (800192c <main+0x3a4>)
 8001788:	2200      	movs	r2, #0
 800178a:	5e9b      	ldrsh	r3, [r3, r2]
 800178c:	b29b      	uxth	r3, r3
 800178e:	4a73      	ldr	r2, [pc, #460]	; (800195c <main+0x3d4>)
 8001790:	4694      	mov	ip, r2
 8001792:	4463      	add	r3, ip
 8001794:	b29b      	uxth	r3, r3
 8001796:	b21a      	sxth	r2, r3
 8001798:	4b64      	ldr	r3, [pc, #400]	; (800192c <main+0x3a4>)
 800179a:	801a      	strh	r2, [r3, #0]

		break;
 800179c:	e00f      	b.n	80017be <main+0x236>
	  }

	  begin2++;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	3301      	adds	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24

	  if(begin2 > 127){
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	2b7f      	cmp	r3, #127	; 0x7f
 80017a8:	dd02      	ble.n	80017b0 <main+0x228>
		  begin2 = begin2 - sizeof(rxBuf2);
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	3b80      	subs	r3, #128	; 0x80
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
	  }
	  if(begin2 == index2){break;}
 80017b0:	4b67      	ldr	r3, [pc, #412]	; (8001950 <main+0x3c8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d000      	beq.n	80017bc <main+0x234>
	while(1){
 80017ba:	e78f      	b.n	80016dc <main+0x154>
	  if(begin2 == index2){break;}
 80017bc:	46c0      	nop			; (mov r8, r8)

	}

	HAL_Delay(1);
 80017be:	2001      	movs	r0, #1
 80017c0:	f000 fdaa 	bl	8002318 <HAL_Delay>

    //--------------------------------------------------
    index = huart1.hdmarx->Instance->CNDTR;
 80017c4:	4b55      	ldr	r3, [pc, #340]	; (800191c <main+0x394>)
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	589b      	ldr	r3, [r3, r2]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	001a      	movs	r2, r3
 80017d0:	4b63      	ldr	r3, [pc, #396]	; (8001960 <main+0x3d8>)
 80017d2:	601a      	str	r2, [r3, #0]
    index = sizeof(rxBuf) - index;
 80017d4:	4b62      	ldr	r3, [pc, #392]	; (8001960 <main+0x3d8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	001a      	movs	r2, r3
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	001a      	movs	r2, r3
 80017e0:	4b5f      	ldr	r3, [pc, #380]	; (8001960 <main+0x3d8>)
 80017e2:	601a      	str	r2, [r3, #0]
    int begin = index - 7;
 80017e4:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <main+0x3d8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3b07      	subs	r3, #7
 80017ea:	617b      	str	r3, [r7, #20]
    if(begin < 0){
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	da02      	bge.n	80017f8 <main+0x270>
      begin = begin + sizeof(rxBuf);
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3380      	adds	r3, #128	; 0x80
 80017f6:	617b      	str	r3, [r7, #20]
    }
    spdBuf[0] = rxBuf[index];
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <main+0x3d8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a46      	ldr	r2, [pc, #280]	; (8001918 <main+0x390>)
 80017fe:	5cd2      	ldrb	r2, [r2, r3]
 8001800:	4b58      	ldr	r3, [pc, #352]	; (8001964 <main+0x3dc>)
 8001802:	701a      	strb	r2, [r3, #0]

    while(1){
      uint8_t rx = rxBuf[begin];
 8001804:	1dbb      	adds	r3, r7, #6
 8001806:	4944      	ldr	r1, [pc, #272]	; (8001918 <main+0x390>)
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	188a      	adds	r2, r1, r2
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	701a      	strb	r2, [r3, #0]
      if(rx == 250){
 8001810:	1dbb      	adds	r3, r7, #6
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2bfa      	cmp	r3, #250	; 0xfa
 8001816:	d156      	bne.n	80018c6 <main+0x33e>
//    	  b = begin + 1;
//    	  if(b>127){b = b - sizeof(rxBuf);}
//    	  c = begin + 2;
//    	  if(c>127){c = c - sizeof(rxBuf);}

        for(int i=0; i<2; i++){
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	e020      	b.n	8001860 <main+0x2d8>
          begin = begin + 1;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
          if(begin > 127){
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b7f      	cmp	r3, #127	; 0x7f
 8001828:	dd02      	ble.n	8001830 <main+0x2a8>
            begin = begin - sizeof(rxBuf);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3b80      	subs	r3, #128	; 0x80
 800182e:	617b      	str	r3, [r7, #20]
          }
          spdBuf[i]=rxBuf[begin];
 8001830:	4a39      	ldr	r2, [pc, #228]	; (8001918 <main+0x390>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	18d3      	adds	r3, r2, r3
 8001836:	7819      	ldrb	r1, [r3, #0]
 8001838:	4a4a      	ldr	r2, [pc, #296]	; (8001964 <main+0x3dc>)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	18d3      	adds	r3, r2, r3
 800183e:	1c0a      	adds	r2, r1, #0
 8001840:	701a      	strb	r2, [r3, #0]
          if(spdBuf[i]>100){
 8001842:	4a48      	ldr	r2, [pc, #288]	; (8001964 <main+0x3dc>)
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	18d3      	adds	r3, r2, r3
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d905      	bls.n	800185a <main+0x2d2>
        	  cur_speed = cur_speed;
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <main+0x3a8>)
 8001850:	2200      	movs	r2, #0
 8001852:	5e9a      	ldrsh	r2, [r3, r2]
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <main+0x3a8>)
 8001856:	801a      	strh	r2, [r3, #0]
        	  break;
 8001858:	e005      	b.n	8001866 <main+0x2de>
        for(int i=0; i<2; i++){
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	3301      	adds	r3, #1
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b01      	cmp	r3, #1
 8001864:	dddb      	ble.n	800181e <main+0x296>
          }
        }

        cur_speed = 0;
 8001866:	4b32      	ldr	r3, [pc, #200]	; (8001930 <main+0x3a8>)
 8001868:	2200      	movs	r2, #0
 800186a:	801a      	strh	r2, [r3, #0]
        int hyaku = 1;
 800186c:	2301      	movs	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
        for(int i = 0; i <2 ; i++){
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	e018      	b.n	80018a8 <main+0x320>
          cur_speed = cur_speed + (spdBuf[i]*hyaku);
 8001876:	4a3b      	ldr	r2, [pc, #236]	; (8001964 <main+0x3dc>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	18d3      	adds	r3, r2, r3
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	b292      	uxth	r2, r2
 8001884:	4353      	muls	r3, r2
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <main+0x3a8>)
 800188a:	2100      	movs	r1, #0
 800188c:	5e5b      	ldrsh	r3, [r3, r1]
 800188e:	b29b      	uxth	r3, r3
 8001890:	18d3      	adds	r3, r2, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	b21a      	sxth	r2, r3
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <main+0x3a8>)
 8001898:	801a      	strh	r2, [r3, #0]
          hyaku = hyaku*100;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2264      	movs	r2, #100	; 0x64
 800189e:	4353      	muls	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
        for(int i = 0; i <2 ; i++){
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	3301      	adds	r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	dde3      	ble.n	8001876 <main+0x2ee>
        }
        cur_speed -= 1000;
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <main+0x3a8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	5e9b      	ldrsh	r3, [r3, r2]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4a29      	ldr	r2, [pc, #164]	; (800195c <main+0x3d4>)
 80018b8:	4694      	mov	ip, r2
 80018ba:	4463      	add	r3, ip
 80018bc:	b29b      	uxth	r3, r3
 80018be:	b21a      	sxth	r2, r3
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <main+0x3a8>)
 80018c2:	801a      	strh	r2, [r3, #0]
//        cur_speed *= -1;

        break;
 80018c4:	e00f      	b.n	80018e6 <main+0x35e>
      }

      begin++;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]

	  if(begin > 127){
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b7f      	cmp	r3, #127	; 0x7f
 80018d0:	dd02      	ble.n	80018d8 <main+0x350>
		  begin = begin - sizeof(rxBuf);
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3b80      	subs	r3, #128	; 0x80
 80018d6:	617b      	str	r3, [r7, #20]
	  }
	  if(begin == index){break;}
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <main+0x3d8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d000      	beq.n	80018e4 <main+0x35c>
    while(1){
 80018e2:	e78f      	b.n	8001804 <main+0x27c>
	  if(begin == index){break;}
 80018e4:	46c0      	nop			; (mov r8, r8)

    }

    output = (int)value;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <main+0x3ac>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	1c18      	adds	r0, r3, #0
 80018ec:	f7fe fe68 	bl	80005c0 <__aeabi_f2iz>
 80018f0:	0002      	movs	r2, r0
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <main+0x3e0>)
 80018f4:	601a      	str	r2, [r3, #0]
    output = 400 - output;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <main+0x3e0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	22c8      	movs	r2, #200	; 0xc8
 80018fc:	0052      	lsls	r2, r2, #1
 80018fe:	1ad2      	subs	r2, r2, r3
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <main+0x3e0>)
 8001902:	601a      	str	r2, [r3, #0]



	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, output);
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <main+0x3e0>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b01      	ldr	r3, [pc, #4]	; (8001910 <main+0x388>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	635a      	str	r2, [r3, #52]	; 0x34
  {
 800190e:	e672      	b.n	80015f6 <main+0x6e>
 8001910:	20000084 	.word	0x20000084
 8001914:	50000400 	.word	0x50000400
 8001918:	200002b0 	.word	0x200002b0
 800191c:	200000d0 	.word	0x200000d0
 8001920:	20000330 	.word	0x20000330
 8001924:	20000164 	.word	0x20000164
 8001928:	20000038 	.word	0x20000038
 800192c:	200003b0 	.word	0x200003b0
 8001930:	2000000e 	.word	0x2000000e
 8001934:	20000000 	.word	0x20000000
 8001938:	9999999a 	.word	0x9999999a
 800193c:	3fb99999 	.word	0x3fb99999
 8001940:	43470000 	.word	0x43470000
 8001944:	43c78000 	.word	0x43c78000
 8001948:	43c58000 	.word	0x43c58000
 800194c:	40a00000 	.word	0x40a00000
 8001950:	200003b8 	.word	0x200003b8
 8001954:	2000000c 	.word	0x2000000c
 8001958:	200003bc 	.word	0x200003bc
 800195c:	fffffc18 	.word	0xfffffc18
 8001960:	200003b4 	.word	0x200003b4
 8001964:	20000008 	.word	0x20000008
 8001968:	20000004 	.word	0x20000004

0800196c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b093      	sub	sp, #76	; 0x4c
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	2414      	movs	r4, #20
 8001974:	193b      	adds	r3, r7, r4
 8001976:	0018      	movs	r0, r3
 8001978:	2334      	movs	r3, #52	; 0x34
 800197a:	001a      	movs	r2, r3
 800197c:	2100      	movs	r1, #0
 800197e:	f004 f9fb 	bl	8005d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	0018      	movs	r0, r3
 8001986:	2310      	movs	r3, #16
 8001988:	001a      	movs	r2, r3
 800198a:	2100      	movs	r1, #0
 800198c:	f004 f9f4 	bl	8005d78 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	0018      	movs	r0, r3
 8001996:	f001 f9b1 	bl	8002cfc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800199a:	193b      	adds	r3, r7, r4
 800199c:	2202      	movs	r2, #2
 800199e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a0:	193b      	adds	r3, r7, r4
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	0052      	lsls	r2, r2, #1
 80019a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80019a8:	193b      	adds	r3, r7, r4
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	2240      	movs	r2, #64	; 0x40
 80019b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	0018      	movs	r0, r3
 80019be:	f001 f9e9 	bl	8002d94 <HAL_RCC_OscConfig>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80019c6:	f000 f9f5 	bl	8001db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2100      	movs	r1, #0
 80019e6:	0018      	movs	r0, r3
 80019e8:	f001 fce4 	bl	80033b4 <HAL_RCC_ClockConfig>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80019f0:	f000 f9e0 	bl	8001db4 <Error_Handler>
  }
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b013      	add	sp, #76	; 0x4c
 80019fa:	bd90      	pop	{r4, r7, pc}

080019fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	2310      	movs	r3, #16
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	0018      	movs	r0, r3
 8001a08:	2310      	movs	r3, #16
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	f004 f9b3 	bl	8005d78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	0018      	movs	r0, r3
 8001a16:	230c      	movs	r3, #12
 8001a18:	001a      	movs	r2, r3
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	f004 f9ac 	bl	8005d78 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <MX_TIM3_Init+0xa0>)
 8001a22:	4a1f      	ldr	r2, [pc, #124]	; (8001aa0 <MX_TIM3_Init+0xa4>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_TIM3_Init+0xa0>)
 8001a28:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <MX_TIM3_Init+0xa8>)
 8001a2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <MX_TIM3_Init+0xa0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_TIM3_Init+0xa0>)
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <MX_TIM3_Init+0xac>)
 8001a36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <MX_TIM3_Init+0xa0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MX_TIM3_Init+0xa0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_TIM3_Init+0xa0>)
 8001a46:	0018      	movs	r0, r3
 8001a48:	f001 ff84 	bl	8003954 <HAL_TIM_Base_Init>
 8001a4c:	1e03      	subs	r3, r0, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a50:	f000 f9b0 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a54:	2110      	movs	r1, #16
 8001a56:	187b      	adds	r3, r7, r1
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	0152      	lsls	r2, r2, #5
 8001a5c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5e:	187a      	adds	r2, r7, r1
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_TIM3_Init+0xa0>)
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f002 fb5b 	bl	8004120 <HAL_TIM_ConfigClockSource>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a6e:	f000 f9a1 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7e:	1d3a      	adds	r2, r7, #4
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_TIM3_Init+0xa0>)
 8001a82:	0011      	movs	r1, r2
 8001a84:	0018      	movs	r0, r3
 8001a86:	f003 f8af 	bl	8004be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001a8e:	f000 f991 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b008      	add	sp, #32
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	20000038 	.word	0x20000038
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	00003e7f 	.word	0x00003e7f
 8001aa8:	00001387 	.word	0x00001387

08001aac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b094      	sub	sp, #80	; 0x50
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab2:	2334      	movs	r3, #52	; 0x34
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	231c      	movs	r3, #28
 8001aba:	001a      	movs	r2, r3
 8001abc:	2100      	movs	r1, #0
 8001abe:	f004 f95b 	bl	8005d78 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac2:	003b      	movs	r3, r7
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	2334      	movs	r3, #52	; 0x34
 8001ac8:	001a      	movs	r2, r3
 8001aca:	2100      	movs	r1, #0
 8001acc:	f004 f954 	bl	8005d78 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ad0:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001ad2:	4a39      	ldr	r2, [pc, #228]	; (8001bb8 <MX_TIM16_Init+0x10c>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001ad6:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 400-1;
 8001ae2:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001ae4:	2290      	movs	r2, #144	; 0x90
 8001ae6:	32ff      	adds	r2, #255	; 0xff
 8001ae8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001af0:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f001 ff28 	bl	8003954 <HAL_TIM_Base_Init>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001b08:	f000 f954 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f001 ffc6 	bl	8003aa0 <HAL_TIM_PWM_Init>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001b18:	f000 f94c 	bl	8001db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1c:	2134      	movs	r1, #52	; 0x34
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	2260      	movs	r2, #96	; 0x60
 8001b22:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	2200      	movs	r2, #0
 8001b28:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b48:	1879      	adds	r1, r7, r1
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f002 f9e6 	bl	8003f20 <HAL_TIM_PWM_ConfigChannel>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001b58:	f000 f92c 	bl	8001db4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b5c:	003b      	movs	r3, r7
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b62:	003b      	movs	r3, r7
 8001b64:	2200      	movs	r2, #0
 8001b66:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b68:	003b      	movs	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b6e:	003b      	movs	r3, r7
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b74:	003b      	movs	r3, r7
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b7a:	003b      	movs	r3, r7
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	0192      	lsls	r2, r2, #6
 8001b80:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b82:	003b      	movs	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b88:	003b      	movs	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001b8e:	003a      	movs	r2, r7
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001b92:	0011      	movs	r1, r2
 8001b94:	0018      	movs	r0, r3
 8001b96:	f003 f889 	bl	8004cac <HAL_TIMEx_ConfigBreakDeadTime>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM16_Init+0xf6>
  {
    Error_Handler();
 8001b9e:	f000 f909 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001ba2:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <MX_TIM16_Init+0x108>)
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 f96b 	bl	8001e80 <HAL_TIM_MspPostInit>

}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b014      	add	sp, #80	; 0x50
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	20000084 	.word	0x20000084
 8001bb8:	40014400 	.word	0x40014400

08001bbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001bc2:	4a24      	ldr	r2, [pc, #144]	; (8001c54 <MX_USART1_UART_Init+0x98>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001bc8:	22e1      	movs	r2, #225	; 0xe1
 8001bca:	0252      	lsls	r2, r2, #9
 8001bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001c06:	0018      	movs	r0, r3
 8001c08:	f003 f928 	bl	8004e5c <HAL_UART_Init>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c10:	f000 f8d0 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001c16:	2100      	movs	r1, #0
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f003 ffa9 	bl	8005b70 <HAL_UARTEx_SetTxFifoThreshold>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c22:	f000 f8c7 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f003 ffe0 	bl	8005bf0 <HAL_UARTEx_SetRxFifoThreshold>
 8001c30:	1e03      	subs	r3, r0, #0
 8001c32:	d001      	beq.n	8001c38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c34:	f000 f8be 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <MX_USART1_UART_Init+0x94>)
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f003 ff5e 	bl	8005afc <HAL_UARTEx_DisableFifoMode>
 8001c40:	1e03      	subs	r3, r0, #0
 8001c42:	d001      	beq.n	8001c48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c44:	f000 f8b6 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	200000d0 	.word	0x200000d0
 8001c54:	40013800 	.word	0x40013800

08001c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001c5e:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <MX_USART2_UART_Init+0x64>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001c64:	22e1      	movs	r2, #225	; 0xe1
 8001c66:	0252      	lsls	r2, r2, #9
 8001c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <MX_USART2_UART_Init+0x60>)
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f003 f8da 	bl	8004e5c <HAL_UART_Init>
 8001ca8:	1e03      	subs	r3, r0, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001cac:	f000 f882 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	20000164 	.word	0x20000164
 8001cbc:	40004400 	.word	0x40004400

08001cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <MX_DMA_Init+0x48>)
 8001cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <MX_DMA_Init+0x48>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	639a      	str	r2, [r3, #56]	; 0x38
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <MX_DMA_Init+0x48>)
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2009      	movs	r0, #9
 8001ce4:	f000 fbe8 	bl	80024b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ce8:	2009      	movs	r0, #9
 8001cea:	f000 fbfa 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	200a      	movs	r0, #10
 8001cf4:	f000 fbe0 	bl	80024b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001cf8:	200a      	movs	r0, #10
 8001cfa:	f000 fbf2 	bl	80024e2 <HAL_NVIC_EnableIRQ>

}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	40021000 	.word	0x40021000

08001d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	240c      	movs	r4, #12
 8001d14:	193b      	adds	r3, r7, r4
 8001d16:	0018      	movs	r0, r3
 8001d18:	2314      	movs	r3, #20
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	f004 f82b 	bl	8005d78 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <MX_GPIO_Init+0xa0>)
 8001d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <MX_GPIO_Init+0xa0>)
 8001d28:	2101      	movs	r1, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <MX_GPIO_Init+0xa0>)
 8001d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d32:	2201      	movs	r2, #1
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <MX_GPIO_Init+0xa0>)
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_GPIO_Init+0xa0>)
 8001d40:	2102      	movs	r1, #2
 8001d42:	430a      	orrs	r2, r1
 8001d44:	635a      	str	r2, [r3, #52]	; 0x34
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <MX_GPIO_Init+0xa0>)
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <MX_GPIO_Init+0xa4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	2120      	movs	r1, #32
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 ffb2 	bl	8002cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : READ_Pin */
  GPIO_InitStruct.Pin = READ_Pin;
 8001d5e:	193b      	adds	r3, r7, r4
 8001d60:	2202      	movs	r2, #2
 8001d62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d64:	193b      	adds	r3, r7, r4
 8001d66:	2200      	movs	r2, #0
 8001d68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(READ_GPIO_Port, &GPIO_InitStruct);
 8001d70:	193a      	adds	r2, r7, r4
 8001d72:	23a0      	movs	r3, #160	; 0xa0
 8001d74:	05db      	lsls	r3, r3, #23
 8001d76:	0011      	movs	r1, r2
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f000 fe21 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001d7e:	0021      	movs	r1, r4
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2220      	movs	r2, #32
 8001d84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	2201      	movs	r2, #1
 8001d8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <MX_GPIO_Init+0xa4>)
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	0010      	movs	r0, r2
 8001da0:	f000 fe0e 	bl	80029c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b009      	add	sp, #36	; 0x24
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	50000400 	.word	0x50000400

08001db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <Error_Handler+0x8>
	...

08001dc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_MspInit+0x44>)
 8001dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_MspInit+0x44>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_MspInit+0x44>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4013      	ands	r3, r2
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_MspInit+0x44>)
 8001de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_MspInit+0x44>)
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	0549      	lsls	r1, r1, #21
 8001de8:	430a      	orrs	r2, r1
 8001dea:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_MspInit+0x44>)
 8001dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	055b      	lsls	r3, r3, #21
 8001df4:	4013      	ands	r3, r2
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b002      	add	sp, #8
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_TIM_Base_MspInit+0x6c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d114      	bne.n	8001e44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_TIM_Base_MspInit+0x70>)
 8001e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_TIM_Base_MspInit+0x70>)
 8001e20:	2102      	movs	r1, #2
 8001e22:	430a      	orrs	r2, r1
 8001e24:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <HAL_TIM_Base_MspInit+0x70>)
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2010      	movs	r0, #16
 8001e38:	f000 fb3e 	bl	80024b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e3c:	2010      	movs	r0, #16
 8001e3e:	f000 fb50 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e42:	e012      	b.n	8001e6a <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM16)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <HAL_TIM_Base_MspInit+0x74>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10d      	bne.n	8001e6a <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_TIM_Base_MspInit+0x70>)
 8001e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_TIM_Base_MspInit+0x70>)
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	0289      	lsls	r1, r1, #10
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_TIM_Base_MspInit+0x70>)
 8001e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	029b      	lsls	r3, r3, #10
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40014400 	.word	0x40014400

08001e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b08b      	sub	sp, #44	; 0x2c
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	2414      	movs	r4, #20
 8001e8a:	193b      	adds	r3, r7, r4
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	2314      	movs	r3, #20
 8001e90:	001a      	movs	r2, r3
 8001e92:	2100      	movs	r1, #0
 8001e94:	f003 ff70 	bl	8005d78 <memset>
  if(htim->Instance==TIM16)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <HAL_TIM_MspPostInit+0xb4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d143      	bne.n	8001f2a <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_TIM_MspPostInit+0xb8>)
 8001ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_TIM_MspPostInit+0xb8>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_TIM_MspPostInit+0xb8>)
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_TIM_MspPostInit+0xb8>)
 8001ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <HAL_TIM_MspPostInit+0xb8>)
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_TIM_MspPostInit+0xb8>)
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ed2:	193b      	adds	r3, r7, r4
 8001ed4:	2240      	movs	r2, #64	; 0x40
 8001ed6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	2202      	movs	r2, #2
 8001edc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	193b      	adds	r3, r7, r4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	193b      	adds	r3, r7, r4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8001eea:	193b      	adds	r3, r7, r4
 8001eec:	2205      	movs	r2, #5
 8001eee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	193a      	adds	r2, r7, r4
 8001ef2:	23a0      	movs	r3, #160	; 0xa0
 8001ef4:	05db      	lsls	r3, r3, #23
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fd61 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001efe:	0021      	movs	r1, r4
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2240      	movs	r2, #64	; 0x40
 8001f04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2202      	movs	r2, #2
 8001f0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1e:	187b      	adds	r3, r7, r1
 8001f20:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <HAL_TIM_MspPostInit+0xbc>)
 8001f22:	0019      	movs	r1, r3
 8001f24:	0010      	movs	r0, r2
 8001f26:	f000 fd4b 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b00b      	add	sp, #44	; 0x2c
 8001f30:	bd90      	pop	{r4, r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	40014400 	.word	0x40014400
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	50000400 	.word	0x50000400

08001f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b093      	sub	sp, #76	; 0x4c
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	2334      	movs	r3, #52	; 0x34
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	2314      	movs	r3, #20
 8001f50:	001a      	movs	r2, r3
 8001f52:	2100      	movs	r1, #0
 8001f54:	f003 ff10 	bl	8005d78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f58:	241c      	movs	r4, #28
 8001f5a:	193b      	adds	r3, r7, r4
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	2318      	movs	r3, #24
 8001f60:	001a      	movs	r2, r3
 8001f62:	2100      	movs	r1, #0
 8001f64:	f003 ff08 	bl	8005d78 <memset>
  if(huart->Instance==USART1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a69      	ldr	r2, [pc, #420]	; (8002114 <HAL_UART_MspInit+0x1d4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d16b      	bne.n	800204a <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f72:	193b      	adds	r3, r7, r4
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001f78:	193b      	adds	r3, r7, r4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f7e:	193b      	adds	r3, r7, r4
 8001f80:	0018      	movs	r0, r3
 8001f82:	f001 fbc1 	bl	8003708 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	1e03      	subs	r3, r0, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f8a:	f7ff ff13 	bl	8001db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f8e:	4b62      	ldr	r3, [pc, #392]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 8001f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f92:	4b61      	ldr	r3, [pc, #388]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	01c9      	lsls	r1, r1, #7
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f9c:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 8001f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	01db      	lsls	r3, r3, #7
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b5b      	ldr	r3, [pc, #364]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 8001fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fae:	4b5a      	ldr	r3, [pc, #360]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fb6:	4b58      	ldr	r3, [pc, #352]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fc2:	2134      	movs	r1, #52	; 0x34
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	22c0      	movs	r2, #192	; 0xc0
 8001fc8:	00d2      	lsls	r2, r2, #3
 8001fca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	2202      	movs	r2, #2
 8001fd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	187b      	adds	r3, r7, r1
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001fde:	187b      	adds	r3, r7, r1
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	187a      	adds	r2, r7, r1
 8001fe6:	23a0      	movs	r3, #160	; 0xa0
 8001fe8:	05db      	lsls	r3, r3, #23
 8001fea:	0011      	movs	r1, r2
 8001fec:	0018      	movs	r0, r3
 8001fee:	f000 fce7 	bl	80029c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001ff2:	4b4a      	ldr	r3, [pc, #296]	; (800211c <HAL_UART_MspInit+0x1dc>)
 8001ff4:	4a4a      	ldr	r2, [pc, #296]	; (8002120 <HAL_UART_MspInit+0x1e0>)
 8001ff6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001ff8:	4b48      	ldr	r3, [pc, #288]	; (800211c <HAL_UART_MspInit+0x1dc>)
 8001ffa:	2232      	movs	r2, #50	; 0x32
 8001ffc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_UART_MspInit+0x1dc>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002004:	4b45      	ldr	r3, [pc, #276]	; (800211c <HAL_UART_MspInit+0x1dc>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800200a:	4b44      	ldr	r3, [pc, #272]	; (800211c <HAL_UART_MspInit+0x1dc>)
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002010:	4b42      	ldr	r3, [pc, #264]	; (800211c <HAL_UART_MspInit+0x1dc>)
 8002012:	2200      	movs	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_UART_MspInit+0x1dc>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800201c:	4b3f      	ldr	r3, [pc, #252]	; (800211c <HAL_UART_MspInit+0x1dc>)
 800201e:	2220      	movs	r2, #32
 8002020:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002022:	4b3e      	ldr	r3, [pc, #248]	; (800211c <HAL_UART_MspInit+0x1dc>)
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	0192      	lsls	r2, r2, #6
 8002028:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800202a:	4b3c      	ldr	r3, [pc, #240]	; (800211c <HAL_UART_MspInit+0x1dc>)
 800202c:	0018      	movs	r0, r3
 800202e:	f000 fa75 	bl	800251c <HAL_DMA_Init>
 8002032:	1e03      	subs	r3, r0, #0
 8002034:	d001      	beq.n	800203a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002036:	f7ff febd 	bl	8001db4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	4a37      	ldr	r2, [pc, #220]	; (800211c <HAL_UART_MspInit+0x1dc>)
 8002040:	505a      	str	r2, [r3, r1]
 8002042:	4b36      	ldr	r3, [pc, #216]	; (800211c <HAL_UART_MspInit+0x1dc>)
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002048:	e060      	b.n	800210c <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a35      	ldr	r2, [pc, #212]	; (8002124 <HAL_UART_MspInit+0x1e4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d15b      	bne.n	800210c <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002054:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 8002056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	0289      	lsls	r1, r1, #10
 800205e:	430a      	orrs	r2, r1
 8002060:	63da      	str	r2, [r3, #60]	; 0x3c
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 8002064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 8002072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 8002076:	2101      	movs	r1, #1
 8002078:	430a      	orrs	r2, r1
 800207a:	635a      	str	r2, [r3, #52]	; 0x34
 800207c:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_UART_MspInit+0x1d8>)
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	2201      	movs	r2, #1
 8002082:	4013      	ands	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002088:	2134      	movs	r1, #52	; 0x34
 800208a:	187b      	adds	r3, r7, r1
 800208c:	4a26      	ldr	r2, [pc, #152]	; (8002128 <HAL_UART_MspInit+0x1e8>)
 800208e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	187b      	adds	r3, r7, r1
 8002092:	2202      	movs	r2, #2
 8002094:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	187b      	adds	r3, r7, r1
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	187b      	adds	r3, r7, r1
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80020a2:	187b      	adds	r3, r7, r1
 80020a4:	2201      	movs	r2, #1
 80020a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	187a      	adds	r2, r7, r1
 80020aa:	23a0      	movs	r3, #160	; 0xa0
 80020ac:	05db      	lsls	r3, r3, #23
 80020ae:	0011      	movs	r1, r2
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 fc85 	bl	80029c0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_UART_MspInit+0x1ec>)
 80020b8:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <HAL_UART_MspInit+0x1f0>)
 80020ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_UART_MspInit+0x1ec>)
 80020be:	2234      	movs	r2, #52	; 0x34
 80020c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_UART_MspInit+0x1ec>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_UART_MspInit+0x1ec>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_UART_MspInit+0x1ec>)
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_UART_MspInit+0x1ec>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_UART_MspInit+0x1ec>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_UART_MspInit+0x1ec>)
 80020e2:	2220      	movs	r2, #32
 80020e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_UART_MspInit+0x1ec>)
 80020e8:	22c0      	movs	r2, #192	; 0xc0
 80020ea:	0192      	lsls	r2, r2, #6
 80020ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_UART_MspInit+0x1ec>)
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 fa13 	bl	800251c <HAL_DMA_Init>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <HAL_UART_MspInit+0x1be>
      Error_Handler();
 80020fa:	f7ff fe5b 	bl	8001db4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_UART_MspInit+0x1ec>)
 8002104:	505a      	str	r2, [r3, r1]
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_UART_MspInit+0x1ec>)
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b013      	add	sp, #76	; 0x4c
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	40013800 	.word	0x40013800
 8002118:	40021000 	.word	0x40021000
 800211c:	200001f8 	.word	0x200001f8
 8002120:	40020008 	.word	0x40020008
 8002124:	40004400 	.word	0x40004400
 8002128:	00008004 	.word	0x00008004
 800212c:	20000254 	.word	0x20000254
 8002130:	4002001c 	.word	0x4002001c

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <NMI_Handler+0x4>

0800213a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <HardFault_Handler+0x4>

08002140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002158:	f000 f8c2 	bl	80022e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <DMA1_Channel1_IRQHandler+0x14>)
 800216a:	0018      	movs	r0, r3
 800216c:	f000 fae6 	bl	800273c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	200001f8 	.word	0x200001f8

0800217c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002182:	0018      	movs	r0, r3
 8002184:	f000 fada 	bl	800273c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	20000254 	.word	0x20000254

08002194 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <TIM3_IRQHandler+0x14>)
 800219a:	0018      	movs	r0, r3
 800219c:	f001 fdb8 	bl	8003d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	20000038 	.word	0x20000038

080021ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021b8:	480d      	ldr	r0, [pc, #52]	; (80021f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021bc:	f7ff fff6 	bl	80021ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021c2:	490d      	ldr	r1, [pc, #52]	; (80021f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021c4:	4a0d      	ldr	r2, [pc, #52]	; (80021fc <LoopForever+0xe>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c8:	e002      	b.n	80021d0 <LoopCopyDataInit>

080021ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ce:	3304      	adds	r3, #4

080021d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d4:	d3f9      	bcc.n	80021ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021d8:	4c0a      	ldr	r4, [pc, #40]	; (8002204 <LoopForever+0x16>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021dc:	e001      	b.n	80021e2 <LoopFillZerobss>

080021de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e0:	3204      	adds	r2, #4

080021e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e4:	d3fb      	bcc.n	80021de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021e6:	f003 fda3 	bl	8005d30 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80021ea:	f7ff f9cd 	bl	8001588 <main>

080021ee <LoopForever>:

LoopForever:
  b LoopForever
 80021ee:	e7fe      	b.n	80021ee <LoopForever>
  ldr   r0, =_estack
 80021f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80021f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80021fc:	08005e84 	.word	0x08005e84
  ldr r2, =_sbss
 8002200:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002204:	200003c4 	.word	0x200003c4

08002208 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002208:	e7fe      	b.n	8002208 <ADC1_IRQHandler>
	...

0800220c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_Init+0x3c>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_Init+0x3c>)
 800221e:	2180      	movs	r1, #128	; 0x80
 8002220:	0049      	lsls	r1, r1, #1
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002226:	2003      	movs	r0, #3
 8002228:	f000 f810 	bl	800224c <HAL_InitTick>
 800222c:	1e03      	subs	r3, r0, #0
 800222e:	d003      	beq.n	8002238 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	e001      	b.n	800223c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002238:	f7ff fdc2 	bl	8001dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800223c:	1dfb      	adds	r3, r7, #7
 800223e:	781b      	ldrb	r3, [r3, #0]
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40022000 	.word	0x40022000

0800224c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002254:	230f      	movs	r3, #15
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_InitTick+0x88>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02b      	beq.n	80022bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002264:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_InitTick+0x8c>)
 8002266:	681c      	ldr	r4, [r3, #0]
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_InitTick+0x88>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	0019      	movs	r1, r3
 800226e:	23fa      	movs	r3, #250	; 0xfa
 8002270:	0098      	lsls	r0, r3, #2
 8002272:	f7fd ff45 	bl	8000100 <__udivsi3>
 8002276:	0003      	movs	r3, r0
 8002278:	0019      	movs	r1, r3
 800227a:	0020      	movs	r0, r4
 800227c:	f7fd ff40 	bl	8000100 <__udivsi3>
 8002280:	0003      	movs	r3, r0
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f93d 	bl	8002502 <HAL_SYSTICK_Config>
 8002288:	1e03      	subs	r3, r0, #0
 800228a:	d112      	bne.n	80022b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d80a      	bhi.n	80022a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	2301      	movs	r3, #1
 8002296:	425b      	negs	r3, r3
 8002298:	2200      	movs	r2, #0
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f90c 	bl	80024b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_InitTick+0x90>)
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e00d      	b.n	80022c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80022a8:	230f      	movs	r3, #15
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
 80022b0:	e008      	b.n	80022c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022b2:	230f      	movs	r3, #15
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e003      	b.n	80022c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022bc:	230f      	movs	r3, #15
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80022c4:	230f      	movs	r3, #15
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b005      	add	sp, #20
 80022d0:	bd90      	pop	{r4, r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	20000018 	.word	0x20000018
 80022d8:	20000010 	.word	0x20000010
 80022dc:	20000014 	.word	0x20000014

080022e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_IncTick+0x1c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	001a      	movs	r2, r3
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_IncTick+0x20>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	18d2      	adds	r2, r2, r3
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_IncTick+0x20>)
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	20000018 	.word	0x20000018
 8002300:	200003c0 	.word	0x200003c0

08002304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  return uwTick;
 8002308:	4b02      	ldr	r3, [pc, #8]	; (8002314 <HAL_GetTick+0x10>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	200003c0 	.word	0x200003c0

08002318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff fff0 	bl	8002304 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3301      	adds	r3, #1
 8002330:	d005      	beq.n	800233e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_Delay+0x44>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	001a      	movs	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	189b      	adds	r3, r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	f7ff ffe0 	bl	8002304 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	429a      	cmp	r2, r3
 800234e:	d8f7      	bhi.n	8002340 <HAL_Delay+0x28>
  {
  }
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b004      	add	sp, #16
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	20000018 	.word	0x20000018

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	0002      	movs	r2, r0
 8002368:	1dfb      	adds	r3, r7, #7
 800236a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800236c:	1dfb      	adds	r3, r7, #7
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b7f      	cmp	r3, #127	; 0x7f
 8002372:	d809      	bhi.n	8002388 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002374:	1dfb      	adds	r3, r7, #7
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	001a      	movs	r2, r3
 800237a:	231f      	movs	r3, #31
 800237c:	401a      	ands	r2, r3
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <__NVIC_EnableIRQ+0x30>)
 8002380:	2101      	movs	r1, #1
 8002382:	4091      	lsls	r1, r2
 8002384:	000a      	movs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	0002      	movs	r2, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b7f      	cmp	r3, #127	; 0x7f
 80023a8:	d828      	bhi.n	80023fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023aa:	4a2f      	ldr	r2, [pc, #188]	; (8002468 <__NVIC_SetPriority+0xd4>)
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	33c0      	adds	r3, #192	; 0xc0
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	589b      	ldr	r3, [r3, r2]
 80023ba:	1dfa      	adds	r2, r7, #7
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	0011      	movs	r1, r2
 80023c0:	2203      	movs	r2, #3
 80023c2:	400a      	ands	r2, r1
 80023c4:	00d2      	lsls	r2, r2, #3
 80023c6:	21ff      	movs	r1, #255	; 0xff
 80023c8:	4091      	lsls	r1, r2
 80023ca:	000a      	movs	r2, r1
 80023cc:	43d2      	mvns	r2, r2
 80023ce:	401a      	ands	r2, r3
 80023d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	019b      	lsls	r3, r3, #6
 80023d6:	22ff      	movs	r2, #255	; 0xff
 80023d8:	401a      	ands	r2, r3
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	0018      	movs	r0, r3
 80023e0:	2303      	movs	r3, #3
 80023e2:	4003      	ands	r3, r0
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e8:	481f      	ldr	r0, [pc, #124]	; (8002468 <__NVIC_SetPriority+0xd4>)
 80023ea:	1dfb      	adds	r3, r7, #7
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b25b      	sxtb	r3, r3
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	430a      	orrs	r2, r1
 80023f4:	33c0      	adds	r3, #192	; 0xc0
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023fa:	e031      	b.n	8002460 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023fc:	4a1b      	ldr	r2, [pc, #108]	; (800246c <__NVIC_SetPriority+0xd8>)
 80023fe:	1dfb      	adds	r3, r7, #7
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	0019      	movs	r1, r3
 8002404:	230f      	movs	r3, #15
 8002406:	400b      	ands	r3, r1
 8002408:	3b08      	subs	r3, #8
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	3306      	adds	r3, #6
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	18d3      	adds	r3, r2, r3
 8002412:	3304      	adds	r3, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1dfa      	adds	r2, r7, #7
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	0011      	movs	r1, r2
 800241c:	2203      	movs	r2, #3
 800241e:	400a      	ands	r2, r1
 8002420:	00d2      	lsls	r2, r2, #3
 8002422:	21ff      	movs	r1, #255	; 0xff
 8002424:	4091      	lsls	r1, r2
 8002426:	000a      	movs	r2, r1
 8002428:	43d2      	mvns	r2, r2
 800242a:	401a      	ands	r2, r3
 800242c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	019b      	lsls	r3, r3, #6
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	401a      	ands	r2, r3
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	0018      	movs	r0, r3
 800243c:	2303      	movs	r3, #3
 800243e:	4003      	ands	r3, r0
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002444:	4809      	ldr	r0, [pc, #36]	; (800246c <__NVIC_SetPriority+0xd8>)
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	001c      	movs	r4, r3
 800244c:	230f      	movs	r3, #15
 800244e:	4023      	ands	r3, r4
 8002450:	3b08      	subs	r3, #8
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	430a      	orrs	r2, r1
 8002456:	3306      	adds	r3, #6
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	18c3      	adds	r3, r0, r3
 800245c:	3304      	adds	r3, #4
 800245e:	601a      	str	r2, [r3, #0]
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b003      	add	sp, #12
 8002466:	bd90      	pop	{r4, r7, pc}
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	1e5a      	subs	r2, r3, #1
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	045b      	lsls	r3, r3, #17
 8002480:	429a      	cmp	r2, r3
 8002482:	d301      	bcc.n	8002488 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002484:	2301      	movs	r3, #1
 8002486:	e010      	b.n	80024aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <SysTick_Config+0x44>)
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	3a01      	subs	r2, #1
 800248e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002490:	2301      	movs	r3, #1
 8002492:	425b      	negs	r3, r3
 8002494:	2103      	movs	r1, #3
 8002496:	0018      	movs	r0, r3
 8002498:	f7ff ff7c 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Config+0x44>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SysTick_Config+0x44>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	210f      	movs	r1, #15
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	1c02      	adds	r2, r0, #0
 80024c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b25b      	sxtb	r3, r3
 80024d2:	0011      	movs	r1, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b004      	add	sp, #16
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	0002      	movs	r2, r0
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ee:	1dfb      	adds	r3, r7, #7
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff ff33 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b002      	add	sp, #8
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0018      	movs	r0, r3
 800250e:	f7ff ffaf 	bl	8002470 <SysTick_Config>
 8002512:	0003      	movs	r3, r0
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e077      	b.n	800261e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a3d      	ldr	r2, [pc, #244]	; (8002628 <HAL_DMA_Init+0x10c>)
 8002534:	4694      	mov	ip, r2
 8002536:	4463      	add	r3, ip
 8002538:	2114      	movs	r1, #20
 800253a:	0018      	movs	r0, r3
 800253c:	f7fd fde0 	bl	8000100 <__udivsi3>
 8002540:	0003      	movs	r3, r0
 8002542:	009a      	lsls	r2, r3, #2
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2225      	movs	r2, #37	; 0x25
 800254c:	2102      	movs	r1, #2
 800254e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4934      	ldr	r1, [pc, #208]	; (800262c <HAL_DMA_Init+0x110>)
 800255c:	400a      	ands	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	0018      	movs	r0, r3
 800259a:	f000 f9c1 	bl	8002920 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	01db      	lsls	r3, r3, #7
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d102      	bne.n	80025b0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	213f      	movs	r1, #63	; 0x3f
 80025ba:	400a      	ands	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025c6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d011      	beq.n	80025f4 <HAL_DMA_Init+0xd8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d80d      	bhi.n	80025f4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 f9cc 	bl	8002978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	e008      	b.n	8002606 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2225      	movs	r2, #37	; 0x25
 8002610:	2101      	movs	r1, #1
 8002612:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2224      	movs	r2, #36	; 0x24
 8002618:	2100      	movs	r1, #0
 800261a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	0018      	movs	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	b002      	add	sp, #8
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	bffdfff8 	.word	0xbffdfff8
 800262c:	ffff800f 	.word	0xffff800f

08002630 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800263e:	2317      	movs	r3, #23
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2224      	movs	r2, #36	; 0x24
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_DMA_Start_IT+0x24>
 8002650:	2302      	movs	r3, #2
 8002652:	e06f      	b.n	8002734 <HAL_DMA_Start_IT+0x104>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2224      	movs	r2, #36	; 0x24
 8002658:	2101      	movs	r1, #1
 800265a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2225      	movs	r2, #37	; 0x25
 8002660:	5c9b      	ldrb	r3, [r3, r2]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d157      	bne.n	8002718 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2225      	movs	r2, #37	; 0x25
 800266c:	2102      	movs	r1, #2
 800266e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	438a      	bics	r2, r1
 8002684:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f907 	bl	80028a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	210e      	movs	r1, #14
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e00f      	b.n	80026cc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2104      	movs	r1, #4
 80026b8:	438a      	bics	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	210a      	movs	r1, #10
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	025b      	lsls	r3, r3, #9
 80026d6:	4013      	ands	r3, r2
 80026d8:	d008      	beq.n	80026ec <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	0049      	lsls	r1, r1, #1
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	0049      	lsls	r1, r1, #1
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e00a      	b.n	800272e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2224      	movs	r2, #36	; 0x24
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002726:	2317      	movs	r3, #23
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800272e:	2317      	movs	r3, #23
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b006      	add	sp, #24
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002744:	4b55      	ldr	r3, [pc, #340]	; (800289c <HAL_DMA_IRQHandler+0x160>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	221c      	movs	r2, #28
 8002758:	4013      	ands	r3, r2
 800275a:	2204      	movs	r2, #4
 800275c:	409a      	lsls	r2, r3
 800275e:	0013      	movs	r3, r2
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4013      	ands	r3, r2
 8002764:	d027      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x7a>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2204      	movs	r2, #4
 800276a:	4013      	ands	r3, r2
 800276c:	d023      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2220      	movs	r2, #32
 8002776:	4013      	ands	r3, r2
 8002778:	d107      	bne.n	800278a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2104      	movs	r1, #4
 8002786:	438a      	bics	r2, r1
 8002788:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800278a:	4b44      	ldr	r3, [pc, #272]	; (800289c <HAL_DMA_IRQHandler+0x160>)
 800278c:	6859      	ldr	r1, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	221c      	movs	r2, #28
 8002794:	4013      	ands	r3, r2
 8002796:	2204      	movs	r2, #4
 8002798:	409a      	lsls	r2, r3
 800279a:	4b40      	ldr	r3, [pc, #256]	; (800289c <HAL_DMA_IRQHandler+0x160>)
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d100      	bne.n	80027aa <HAL_DMA_IRQHandler+0x6e>
 80027a8:	e073      	b.n	8002892 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	0010      	movs	r0, r2
 80027b2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80027b4:	e06d      	b.n	8002892 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	221c      	movs	r2, #28
 80027bc:	4013      	ands	r3, r2
 80027be:	2202      	movs	r2, #2
 80027c0:	409a      	lsls	r2, r3
 80027c2:	0013      	movs	r3, r2
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4013      	ands	r3, r2
 80027c8:	d02e      	beq.n	8002828 <HAL_DMA_IRQHandler+0xec>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2202      	movs	r2, #2
 80027ce:	4013      	ands	r3, r2
 80027d0:	d02a      	beq.n	8002828 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2220      	movs	r2, #32
 80027da:	4013      	ands	r3, r2
 80027dc:	d10b      	bne.n	80027f6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	210a      	movs	r1, #10
 80027ea:	438a      	bics	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2225      	movs	r2, #37	; 0x25
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <HAL_DMA_IRQHandler+0x160>)
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	221c      	movs	r2, #28
 8002800:	4013      	ands	r3, r2
 8002802:	2202      	movs	r2, #2
 8002804:	409a      	lsls	r2, r3
 8002806:	4b25      	ldr	r3, [pc, #148]	; (800289c <HAL_DMA_IRQHandler+0x160>)
 8002808:	430a      	orrs	r2, r1
 800280a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d03a      	beq.n	8002892 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	0010      	movs	r0, r2
 8002824:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002826:	e034      	b.n	8002892 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	221c      	movs	r2, #28
 800282e:	4013      	ands	r3, r2
 8002830:	2208      	movs	r2, #8
 8002832:	409a      	lsls	r2, r3
 8002834:	0013      	movs	r3, r2
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	d02b      	beq.n	8002894 <HAL_DMA_IRQHandler+0x158>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2208      	movs	r2, #8
 8002840:	4013      	ands	r3, r2
 8002842:	d027      	beq.n	8002894 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	210e      	movs	r1, #14
 8002850:	438a      	bics	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_DMA_IRQHandler+0x160>)
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	221c      	movs	r2, #28
 800285e:	4013      	ands	r3, r2
 8002860:	2201      	movs	r2, #1
 8002862:	409a      	lsls	r2, r3
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_DMA_IRQHandler+0x160>)
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2225      	movs	r2, #37	; 0x25
 8002874:	2101      	movs	r1, #1
 8002876:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	; 0x24
 800287c:	2100      	movs	r1, #0
 800287e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	0010      	movs	r0, r2
 8002890:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	46c0      	nop			; (mov r8, r8)
}
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40020000 	.word	0x40020000

080028a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d004      	beq.n	80028ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80028c8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <DMA_SetConfig+0x7c>)
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	221c      	movs	r2, #28
 80028d4:	4013      	ands	r3, r2
 80028d6:	2201      	movs	r2, #1
 80028d8:	409a      	lsls	r2, r3
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <DMA_SetConfig+0x7c>)
 80028dc:	430a      	orrs	r2, r1
 80028de:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d108      	bne.n	8002902 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002900:	e007      	b.n	8002912 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	60da      	str	r2, [r3, #12]
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b004      	add	sp, #16
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	40020000 	.word	0x40020000

08002920 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	4a10      	ldr	r2, [pc, #64]	; (8002970 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002930:	4694      	mov	ip, r2
 8002932:	4463      	add	r3, ip
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	001a      	movs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	001a      	movs	r2, r3
 8002942:	23ff      	movs	r3, #255	; 0xff
 8002944:	4013      	ands	r3, r2
 8002946:	3b08      	subs	r3, #8
 8002948:	2114      	movs	r1, #20
 800294a:	0018      	movs	r0, r3
 800294c:	f7fd fbd8 	bl	8000100 <__udivsi3>
 8002950:	0003      	movs	r3, r0
 8002952:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a07      	ldr	r2, [pc, #28]	; (8002974 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002958:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	221f      	movs	r2, #31
 800295e:	4013      	ands	r3, r2
 8002960:	2201      	movs	r2, #1
 8002962:	409a      	lsls	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b004      	add	sp, #16
 800296e:	bd80      	pop	{r7, pc}
 8002970:	10008200 	.word	0x10008200
 8002974:	40020880 	.word	0x40020880

08002978 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	223f      	movs	r2, #63	; 0x3f
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800298e:	4694      	mov	ip, r2
 8002990:	4463      	add	r3, ip
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	001a      	movs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a07      	ldr	r2, [pc, #28]	; (80029bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800299e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	4013      	ands	r3, r2
 80029a8:	2201      	movs	r2, #1
 80029aa:	409a      	lsls	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80029b0:	46c0      	nop			; (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b004      	add	sp, #16
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	1000823f 	.word	0x1000823f
 80029bc:	40020940 	.word	0x40020940

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ce:	e147      	b.n	8002c60 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4091      	lsls	r1, r2
 80029da:	000a      	movs	r2, r1
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d100      	bne.n	80029e8 <HAL_GPIO_Init+0x28>
 80029e6:	e138      	b.n	8002c5a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2203      	movs	r2, #3
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d005      	beq.n	8002a00 <HAL_GPIO_Init+0x40>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2203      	movs	r2, #3
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d130      	bne.n	8002a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	43da      	mvns	r2, r3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	409a      	lsls	r2, r3
 8002a22:	0013      	movs	r3, r2
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a36:	2201      	movs	r2, #1
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	401a      	ands	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
 8002a54:	0013      	movs	r3, r2
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2203      	movs	r2, #3
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d017      	beq.n	8002a9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	0013      	movs	r3, r2
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	0013      	movs	r3, r2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d123      	bne.n	8002af2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	08da      	lsrs	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3208      	adds	r2, #8
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	58d3      	ldr	r3, [r2, r3]
 8002ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2207      	movs	r2, #7
 8002abc:	4013      	ands	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	0013      	movs	r3, r2
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2107      	movs	r1, #7
 8002ad6:	400b      	ands	r3, r1
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	409a      	lsls	r2, r3
 8002adc:	0013      	movs	r3, r2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	6939      	ldr	r1, [r7, #16]
 8002af0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	2203      	movs	r2, #3
 8002afe:	409a      	lsls	r2, r3
 8002b00:	0013      	movs	r3, r2
 8002b02:	43da      	mvns	r2, r3
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	401a      	ands	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	0013      	movs	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	23c0      	movs	r3, #192	; 0xc0
 8002b2c:	029b      	lsls	r3, r3, #10
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d100      	bne.n	8002b34 <HAL_GPIO_Init+0x174>
 8002b32:	e092      	b.n	8002c5a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002b34:	4a50      	ldr	r2, [pc, #320]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3318      	adds	r3, #24
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	589b      	ldr	r3, [r3, r2]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2203      	movs	r2, #3
 8002b46:	4013      	ands	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	0013      	movs	r3, r2
 8002b50:	43da      	mvns	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	23a0      	movs	r3, #160	; 0xa0
 8002b5c:	05db      	lsls	r3, r3, #23
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0x1ca>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a45      	ldr	r2, [pc, #276]	; (8002c7c <HAL_GPIO_Init+0x2bc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00d      	beq.n	8002b86 <HAL_GPIO_Init+0x1c6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a44      	ldr	r2, [pc, #272]	; (8002c80 <HAL_GPIO_Init+0x2c0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <HAL_GPIO_Init+0x1c2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a43      	ldr	r2, [pc, #268]	; (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_GPIO_Init+0x1be>
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e006      	b.n	8002b8c <HAL_GPIO_Init+0x1cc>
 8002b7e:	2305      	movs	r3, #5
 8002b80:	e004      	b.n	8002b8c <HAL_GPIO_Init+0x1cc>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e002      	b.n	8002b8c <HAL_GPIO_Init+0x1cc>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_GPIO_Init+0x1cc>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	2103      	movs	r1, #3
 8002b90:	400a      	ands	r2, r1
 8002b92:	00d2      	lsls	r2, r2, #3
 8002b94:	4093      	lsls	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002b9c:	4936      	ldr	r1, [pc, #216]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	3318      	adds	r3, #24
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002baa:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	035b      	lsls	r3, r3, #13
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bce:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002bd4:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	039b      	lsls	r3, r3, #14
 8002bec:	4013      	ands	r3, r2
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002c00:	2384      	movs	r3, #132	; 0x84
 8002c02:	58d3      	ldr	r3, [r2, r3]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	029b      	lsls	r3, r3, #10
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c24:	4914      	ldr	r1, [pc, #80]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002c26:	2284      	movs	r2, #132	; 0x84
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002c2c:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	58d3      	ldr	r3, [r2, r3]
 8002c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	43da      	mvns	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	025b      	lsls	r3, r3, #9
 8002c46:	4013      	ands	r3, r2
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c52:	4909      	ldr	r1, [pc, #36]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	40da      	lsrs	r2, r3
 8002c68:	1e13      	subs	r3, r2, #0
 8002c6a:	d000      	beq.n	8002c6e <HAL_GPIO_Init+0x2ae>
 8002c6c:	e6b0      	b.n	80029d0 <HAL_GPIO_Init+0x10>
  }
}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b006      	add	sp, #24
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021800 	.word	0x40021800
 8002c7c:	50000400 	.word	0x50000400
 8002c80:	50000800 	.word	0x50000800
 8002c84:	50000c00 	.word	0x50000c00

08002c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	000a      	movs	r2, r1
 8002c92:	1cbb      	adds	r3, r7, #2
 8002c94:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	1cba      	adds	r2, r7, #2
 8002c9c:	8812      	ldrh	r2, [r2, #0]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002ca2:	230f      	movs	r3, #15
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e003      	b.n	8002cb4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cac:	230f      	movs	r3, #15
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002cb4:	230f      	movs	r3, #15
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	781b      	ldrb	r3, [r3, #0]
}
 8002cba:	0018      	movs	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	0008      	movs	r0, r1
 8002ccc:	0011      	movs	r1, r2
 8002cce:	1cbb      	adds	r3, r7, #2
 8002cd0:	1c02      	adds	r2, r0, #0
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	1c7b      	adds	r3, r7, #1
 8002cd6:	1c0a      	adds	r2, r1, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cda:	1c7b      	adds	r3, r7, #1
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ce2:	1cbb      	adds	r3, r7, #2
 8002ce4:	881a      	ldrh	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cea:	e003      	b.n	8002cf4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cec:	1cbb      	adds	r3, r7, #2
 8002cee:	881a      	ldrh	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d11f      	bne.n	8002d60 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	0013      	movs	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	189b      	adds	r3, r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4912      	ldr	r1, [pc, #72]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7fd f9e6 	bl	8000100 <__udivsi3>
 8002d34:	0003      	movs	r3, r0
 8002d36:	3301      	adds	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d3a:	e008      	b.n	8002d4e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	e001      	b.n	8002d4e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e009      	b.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	401a      	ands	r2, r3
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d0ed      	beq.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	40007000 	.word	0x40007000
 8002d70:	fffff9ff 	.word	0xfffff9ff
 8002d74:	20000010 	.word	0x20000010
 8002d78:	000f4240 	.word	0x000f4240

08002d7c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	23e0      	movs	r3, #224	; 0xe0
 8002d86:	01db      	lsls	r3, r3, #7
 8002d88:	4013      	ands	r3, r2
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000

08002d94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e2f3      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2201      	movs	r2, #1
 8002dac:	4013      	ands	r3, r2
 8002dae:	d100      	bne.n	8002db2 <HAL_RCC_OscConfig+0x1e>
 8002db0:	e07c      	b.n	8002eac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	4bc3      	ldr	r3, [pc, #780]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2238      	movs	r2, #56	; 0x38
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dbc:	4bc0      	ldr	r3, [pc, #768]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d102      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x3e>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d10b      	bne.n	8002df0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	4bb9      	ldr	r3, [pc, #740]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	029b      	lsls	r3, r3, #10
 8002de0:	4013      	ands	r3, r2
 8002de2:	d062      	beq.n	8002eaa <HAL_RCC_OscConfig+0x116>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d15e      	bne.n	8002eaa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e2ce      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	025b      	lsls	r3, r3, #9
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_OscConfig+0x78>
 8002dfc:	4bb0      	ldr	r3, [pc, #704]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4baf      	ldr	r3, [pc, #700]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002e02:	2180      	movs	r1, #128	; 0x80
 8002e04:	0249      	lsls	r1, r1, #9
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e020      	b.n	8002e4e <HAL_RCC_OscConfig+0xba>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	23a0      	movs	r3, #160	; 0xa0
 8002e12:	02db      	lsls	r3, r3, #11
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d10e      	bne.n	8002e36 <HAL_RCC_OscConfig+0xa2>
 8002e18:	4ba9      	ldr	r3, [pc, #676]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4ba8      	ldr	r3, [pc, #672]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	02c9      	lsls	r1, r1, #11
 8002e22:	430a      	orrs	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	4ba6      	ldr	r3, [pc, #664]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4ba5      	ldr	r3, [pc, #660]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	0249      	lsls	r1, r1, #9
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e00b      	b.n	8002e4e <HAL_RCC_OscConfig+0xba>
 8002e36:	4ba2      	ldr	r3, [pc, #648]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4ba1      	ldr	r3, [pc, #644]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002e3c:	49a1      	ldr	r1, [pc, #644]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002e3e:	400a      	ands	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	4b9f      	ldr	r3, [pc, #636]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b9e      	ldr	r3, [pc, #632]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002e48:	499f      	ldr	r1, [pc, #636]	; (80030c8 <HAL_RCC_OscConfig+0x334>)
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d014      	beq.n	8002e80 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7ff fa55 	bl	8002304 <HAL_GetTick>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7ff fa50 	bl	8002304 <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e28d      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e72:	4b93      	ldr	r3, [pc, #588]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	029b      	lsls	r3, r3, #10
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0xcc>
 8002e7e:	e015      	b.n	8002eac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7ff fa40 	bl	8002304 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8a:	f7ff fa3b 	bl	8002304 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	; 0x64
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e278      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e9c:	4b88      	ldr	r3, [pc, #544]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	029b      	lsls	r3, r3, #10
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d1f0      	bne.n	8002e8a <HAL_RCC_OscConfig+0xf6>
 8002ea8:	e000      	b.n	8002eac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eaa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d100      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x124>
 8002eb6:	e099      	b.n	8002fec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb8:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2238      	movs	r2, #56	; 0x38
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ec2:	4b7f      	ldr	r3, [pc, #508]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	4013      	ands	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d102      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x144>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d002      	beq.n	8002ede <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d135      	bne.n	8002f4a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ede:	4b78      	ldr	r3, [pc, #480]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d005      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x162>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e24b      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b72      	ldr	r3, [pc, #456]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a74      	ldr	r2, [pc, #464]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	0019      	movs	r1, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	021a      	lsls	r2, r3, #8
 8002f06:	4b6e      	ldr	r3, [pc, #440]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d112      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f12:	4b6b      	ldr	r3, [pc, #428]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a6e      	ldr	r2, [pc, #440]	; (80030d0 <HAL_RCC_OscConfig+0x33c>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	4b67      	ldr	r3, [pc, #412]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002f26:	4b66      	ldr	r3, [pc, #408]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0adb      	lsrs	r3, r3, #11
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	4013      	ands	r3, r2
 8002f30:	4a68      	ldr	r2, [pc, #416]	; (80030d4 <HAL_RCC_OscConfig+0x340>)
 8002f32:	40da      	lsrs	r2, r3
 8002f34:	4b68      	ldr	r3, [pc, #416]	; (80030d8 <HAL_RCC_OscConfig+0x344>)
 8002f36:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_OscConfig+0x348>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7ff f985 	bl	800224c <HAL_InitTick>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d051      	beq.n	8002fea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e221      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d030      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f52:	4b5b      	ldr	r3, [pc, #364]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a5e      	ldr	r2, [pc, #376]	; (80030d0 <HAL_RCC_OscConfig+0x33c>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	4b57      	ldr	r3, [pc, #348]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002f62:	430a      	orrs	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002f66:	4b56      	ldr	r3, [pc, #344]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4b55      	ldr	r3, [pc, #340]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002f6c:	2180      	movs	r1, #128	; 0x80
 8002f6e:	0049      	lsls	r1, r1, #1
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7ff f9c6 	bl	8002304 <HAL_GetTick>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7e:	f7ff f9c1 	bl	8002304 <HAL_GetTick>
 8002f82:	0002      	movs	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e1fe      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f90:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9c:	4b48      	ldr	r3, [pc, #288]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a4a      	ldr	r2, [pc, #296]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	021a      	lsls	r2, r3, #8
 8002fac:	4b44      	ldr	r3, [pc, #272]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	e01b      	b.n	8002fec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002fb4:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002fba:	4949      	ldr	r1, [pc, #292]	; (80030e0 <HAL_RCC_OscConfig+0x34c>)
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7ff f9a0 	bl	8002304 <HAL_GetTick>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fca:	f7ff f99b 	bl	8002304 <HAL_GetTick>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e1d8      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fdc:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d1f0      	bne.n	8002fca <HAL_RCC_OscConfig+0x236>
 8002fe8:	e000      	b.n	8002fec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d047      	beq.n	8003086 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ff6:	4b32      	ldr	r3, [pc, #200]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2238      	movs	r2, #56	; 0x38
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b18      	cmp	r3, #24
 8003000:	d10a      	bne.n	8003018 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003002:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8003004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003006:	2202      	movs	r2, #2
 8003008:	4013      	ands	r3, r2
 800300a:	d03c      	beq.n	8003086 <HAL_RCC_OscConfig+0x2f2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d138      	bne.n	8003086 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e1ba      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d019      	beq.n	8003054 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003020:	4b27      	ldr	r3, [pc, #156]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8003022:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003024:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8003026:	2101      	movs	r1, #1
 8003028:	430a      	orrs	r2, r1
 800302a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7ff f96a 	bl	8002304 <HAL_GetTick>
 8003030:	0003      	movs	r3, r0
 8003032:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003036:	f7ff f965 	bl	8002304 <HAL_GetTick>
 800303a:	0002      	movs	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1a2      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 800304a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304c:	2202      	movs	r2, #2
 800304e:	4013      	ands	r3, r2
 8003050:	d0f1      	beq.n	8003036 <HAL_RCC_OscConfig+0x2a2>
 8003052:	e018      	b.n	8003086 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 8003056:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 800305a:	2101      	movs	r1, #1
 800305c:	438a      	bics	r2, r1
 800305e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7ff f950 	bl	8002304 <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306a:	f7ff f94b 	bl	8002304 <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e188      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800307c:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 800307e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003080:	2202      	movs	r2, #2
 8003082:	4013      	ands	r3, r2
 8003084:	d1f1      	bne.n	800306a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2204      	movs	r2, #4
 800308c:	4013      	ands	r3, r2
 800308e:	d100      	bne.n	8003092 <HAL_RCC_OscConfig+0x2fe>
 8003090:	e0c6      	b.n	8003220 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003092:	231f      	movs	r3, #31
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2238      	movs	r2, #56	; 0x38
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d11e      	bne.n	80030e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_RCC_OscConfig+0x32c>)
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	2202      	movs	r2, #2
 80030ac:	4013      	ands	r3, r2
 80030ae:	d100      	bne.n	80030b2 <HAL_RCC_OscConfig+0x31e>
 80030b0:	e0b6      	b.n	8003220 <HAL_RCC_OscConfig+0x48c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d000      	beq.n	80030bc <HAL_RCC_OscConfig+0x328>
 80030ba:	e0b1      	b.n	8003220 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e166      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
 80030c0:	40021000 	.word	0x40021000
 80030c4:	fffeffff 	.word	0xfffeffff
 80030c8:	fffbffff 	.word	0xfffbffff
 80030cc:	ffff80ff 	.word	0xffff80ff
 80030d0:	ffffc7ff 	.word	0xffffc7ff
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	20000010 	.word	0x20000010
 80030dc:	20000014 	.word	0x20000014
 80030e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030e4:	4bac      	ldr	r3, [pc, #688]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80030e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	055b      	lsls	r3, r3, #21
 80030ec:	4013      	ands	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_OscConfig+0x360>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x362>
 80030f4:	2300      	movs	r3, #0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d011      	beq.n	800311e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	4ba7      	ldr	r3, [pc, #668]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80030fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030fe:	4ba6      	ldr	r3, [pc, #664]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	0549      	lsls	r1, r1, #21
 8003104:	430a      	orrs	r2, r1
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c
 8003108:	4ba3      	ldr	r3, [pc, #652]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 800310a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	055b      	lsls	r3, r3, #21
 8003110:	4013      	ands	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003116:	231f      	movs	r3, #31
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311e:	4b9f      	ldr	r3, [pc, #636]	; (800339c <HAL_RCC_OscConfig+0x608>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4013      	ands	r3, r2
 8003128:	d11a      	bne.n	8003160 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800312a:	4b9c      	ldr	r3, [pc, #624]	; (800339c <HAL_RCC_OscConfig+0x608>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b9b      	ldr	r3, [pc, #620]	; (800339c <HAL_RCC_OscConfig+0x608>)
 8003130:	2180      	movs	r1, #128	; 0x80
 8003132:	0049      	lsls	r1, r1, #1
 8003134:	430a      	orrs	r2, r1
 8003136:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003138:	f7ff f8e4 	bl	8002304 <HAL_GetTick>
 800313c:	0003      	movs	r3, r0
 800313e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003142:	f7ff f8df 	bl	8002304 <HAL_GetTick>
 8003146:	0002      	movs	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e11c      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003154:	4b91      	ldr	r3, [pc, #580]	; (800339c <HAL_RCC_OscConfig+0x608>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4013      	ands	r3, r2
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d106      	bne.n	8003176 <HAL_RCC_OscConfig+0x3e2>
 8003168:	4b8b      	ldr	r3, [pc, #556]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 800316a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800316c:	4b8a      	ldr	r3, [pc, #552]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 800316e:	2101      	movs	r1, #1
 8003170:	430a      	orrs	r2, r1
 8003172:	65da      	str	r2, [r3, #92]	; 0x5c
 8003174:	e01c      	b.n	80031b0 <HAL_RCC_OscConfig+0x41c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b05      	cmp	r3, #5
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0x404>
 800317e:	4b86      	ldr	r3, [pc, #536]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003180:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003182:	4b85      	ldr	r3, [pc, #532]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003184:	2104      	movs	r1, #4
 8003186:	430a      	orrs	r2, r1
 8003188:	65da      	str	r2, [r3, #92]	; 0x5c
 800318a:	4b83      	ldr	r3, [pc, #524]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 800318c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800318e:	4b82      	ldr	r3, [pc, #520]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003190:	2101      	movs	r1, #1
 8003192:	430a      	orrs	r2, r1
 8003194:	65da      	str	r2, [r3, #92]	; 0x5c
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0x41c>
 8003198:	4b7f      	ldr	r3, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 800319a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800319c:	4b7e      	ldr	r3, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 800319e:	2101      	movs	r1, #1
 80031a0:	438a      	bics	r2, r1
 80031a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80031a4:	4b7c      	ldr	r3, [pc, #496]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80031a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031a8:	4b7b      	ldr	r3, [pc, #492]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80031aa:	2104      	movs	r1, #4
 80031ac:	438a      	bics	r2, r1
 80031ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d014      	beq.n	80031e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7ff f8a4 	bl	8002304 <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c0:	e009      	b.n	80031d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7ff f89f 	bl	8002304 <HAL_GetTick>
 80031c6:	0002      	movs	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	4a74      	ldr	r2, [pc, #464]	; (80033a0 <HAL_RCC_OscConfig+0x60c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0db      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d6:	4b70      	ldr	r3, [pc, #448]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	2202      	movs	r2, #2
 80031dc:	4013      	ands	r3, r2
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x42e>
 80031e0:	e013      	b.n	800320a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7ff f88f 	bl	8002304 <HAL_GetTick>
 80031e6:	0003      	movs	r3, r0
 80031e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ea:	e009      	b.n	8003200 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ec:	f7ff f88a 	bl	8002304 <HAL_GetTick>
 80031f0:	0002      	movs	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	4a6a      	ldr	r2, [pc, #424]	; (80033a0 <HAL_RCC_OscConfig+0x60c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0c6      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003200:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	2202      	movs	r2, #2
 8003206:	4013      	ands	r3, r2
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800320a:	231f      	movs	r3, #31
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d105      	bne.n	8003220 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003214:	4b60      	ldr	r3, [pc, #384]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003218:	4b5f      	ldr	r3, [pc, #380]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 800321a:	4962      	ldr	r1, [pc, #392]	; (80033a4 <HAL_RCC_OscConfig+0x610>)
 800321c:	400a      	ands	r2, r1
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d100      	bne.n	800322a <HAL_RCC_OscConfig+0x496>
 8003228:	e0b0      	b.n	800338c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800322a:	4b5b      	ldr	r3, [pc, #364]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2238      	movs	r2, #56	; 0x38
 8003230:	4013      	ands	r3, r2
 8003232:	2b10      	cmp	r3, #16
 8003234:	d100      	bne.n	8003238 <HAL_RCC_OscConfig+0x4a4>
 8003236:	e078      	b.n	800332a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d153      	bne.n	80032e8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003240:	4b55      	ldr	r3, [pc, #340]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b54      	ldr	r3, [pc, #336]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003246:	4958      	ldr	r1, [pc, #352]	; (80033a8 <HAL_RCC_OscConfig+0x614>)
 8003248:	400a      	ands	r2, r1
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7ff f85a 	bl	8002304 <HAL_GetTick>
 8003250:	0003      	movs	r3, r0
 8003252:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003256:	f7ff f855 	bl	8002304 <HAL_GetTick>
 800325a:	0002      	movs	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e092      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003268:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	049b      	lsls	r3, r3, #18
 8003270:	4013      	ands	r3, r2
 8003272:	d1f0      	bne.n	8003256 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003274:	4b48      	ldr	r3, [pc, #288]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a4c      	ldr	r2, [pc, #304]	; (80033ac <HAL_RCC_OscConfig+0x618>)
 800327a:	4013      	ands	r3, r2
 800327c:	0019      	movs	r1, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1a      	ldr	r2, [r3, #32]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	431a      	orrs	r2, r3
 800329c:	4b3e      	ldr	r3, [pc, #248]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 800329e:	430a      	orrs	r2, r1
 80032a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b3c      	ldr	r3, [pc, #240]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80032a8:	2180      	movs	r1, #128	; 0x80
 80032aa:	0449      	lsls	r1, r1, #17
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80032b0:	4b39      	ldr	r3, [pc, #228]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	4b38      	ldr	r3, [pc, #224]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	0549      	lsls	r1, r1, #21
 80032ba:	430a      	orrs	r2, r1
 80032bc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7ff f821 	bl	8002304 <HAL_GetTick>
 80032c2:	0003      	movs	r3, r0
 80032c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c8:	f7ff f81c 	bl	8002304 <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e059      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032da:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	049b      	lsls	r3, r3, #18
 80032e2:	4013      	ands	r3, r2
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x534>
 80032e6:	e051      	b.n	800338c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 80032ee:	492e      	ldr	r1, [pc, #184]	; (80033a8 <HAL_RCC_OscConfig+0x614>)
 80032f0:	400a      	ands	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7ff f806 	bl	8002304 <HAL_GetTick>
 80032f8:	0003      	movs	r3, r0
 80032fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fe:	f7ff f801 	bl	8002304 <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e03e      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003310:	4b21      	ldr	r3, [pc, #132]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	049b      	lsls	r3, r3, #18
 8003318:	4013      	ands	r3, r2
 800331a:	d1f0      	bne.n	80032fe <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800331c:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003322:	4923      	ldr	r1, [pc, #140]	; (80033b0 <HAL_RCC_OscConfig+0x61c>)
 8003324:	400a      	ands	r2, r1
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	e030      	b.n	800338c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e02b      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <HAL_RCC_OscConfig+0x604>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2203      	movs	r2, #3
 8003340:	401a      	ands	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	429a      	cmp	r2, r3
 8003348:	d11e      	bne.n	8003388 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2270      	movs	r2, #112	; 0x70
 800334e:	401a      	ands	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d117      	bne.n	8003388 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	23fe      	movs	r3, #254	; 0xfe
 800335c:	01db      	lsls	r3, r3, #7
 800335e:	401a      	ands	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d10e      	bne.n	8003388 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	23f8      	movs	r3, #248	; 0xf8
 800336e:	039b      	lsls	r3, r3, #14
 8003370:	401a      	ands	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d106      	bne.n	8003388 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	0f5b      	lsrs	r3, r3, #29
 800337e:	075a      	lsls	r2, r3, #29
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b008      	add	sp, #32
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	40021000 	.word	0x40021000
 800339c:	40007000 	.word	0x40007000
 80033a0:	00001388 	.word	0x00001388
 80033a4:	efffffff 	.word	0xefffffff
 80033a8:	feffffff 	.word	0xfeffffff
 80033ac:	1fc1808c 	.word	0x1fc1808c
 80033b0:	effefffc 	.word	0xeffefffc

080033b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0e9      	b.n	800359c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b76      	ldr	r3, [pc, #472]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2207      	movs	r2, #7
 80033ce:	4013      	ands	r3, r2
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d91e      	bls.n	8003414 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2207      	movs	r2, #7
 80033dc:	4393      	bics	r3, r2
 80033de:	0019      	movs	r1, r3
 80033e0:	4b70      	ldr	r3, [pc, #448]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033e8:	f7fe ff8c 	bl	8002304 <HAL_GetTick>
 80033ec:	0003      	movs	r3, r0
 80033ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033f0:	e009      	b.n	8003406 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f2:	f7fe ff87 	bl	8002304 <HAL_GetTick>
 80033f6:	0002      	movs	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	4a6a      	ldr	r2, [pc, #424]	; (80035a8 <HAL_RCC_ClockConfig+0x1f4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0ca      	b.n	800359c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003406:	4b67      	ldr	r3, [pc, #412]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2207      	movs	r2, #7
 800340c:	4013      	ands	r3, r2
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d1ee      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2202      	movs	r2, #2
 800341a:	4013      	ands	r3, r2
 800341c:	d015      	beq.n	800344a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2204      	movs	r2, #4
 8003424:	4013      	ands	r3, r2
 8003426:	d006      	beq.n	8003436 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003428:	4b60      	ldr	r3, [pc, #384]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 800342e:	21e0      	movs	r1, #224	; 0xe0
 8003430:	01c9      	lsls	r1, r1, #7
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003436:	4b5d      	ldr	r3, [pc, #372]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	4a5d      	ldr	r2, [pc, #372]	; (80035b0 <HAL_RCC_ClockConfig+0x1fc>)
 800343c:	4013      	ands	r3, r2
 800343e:	0019      	movs	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 8003446:	430a      	orrs	r2, r1
 8003448:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2201      	movs	r2, #1
 8003450:	4013      	ands	r3, r2
 8003452:	d057      	beq.n	8003504 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	029b      	lsls	r3, r3, #10
 8003464:	4013      	ands	r3, r2
 8003466:	d12b      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e097      	b.n	800359c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d107      	bne.n	8003484 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003474:	4b4d      	ldr	r3, [pc, #308]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	049b      	lsls	r3, r3, #18
 800347c:	4013      	ands	r3, r2
 800347e:	d11f      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e08b      	b.n	800359c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d107      	bne.n	800349c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800348c:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4013      	ands	r3, r2
 8003496:	d113      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e07f      	b.n	800359c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a4:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 80034a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a8:	2202      	movs	r2, #2
 80034aa:	4013      	ands	r3, r2
 80034ac:	d108      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e074      	b.n	800359c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b2:	4b3e      	ldr	r3, [pc, #248]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	2202      	movs	r2, #2
 80034b8:	4013      	ands	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e06d      	b.n	800359c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034c0:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2207      	movs	r2, #7
 80034c6:	4393      	bics	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 80034d0:	430a      	orrs	r2, r1
 80034d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d4:	f7fe ff16 	bl	8002304 <HAL_GetTick>
 80034d8:	0003      	movs	r3, r0
 80034da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034dc:	e009      	b.n	80034f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034de:	f7fe ff11 	bl	8002304 <HAL_GetTick>
 80034e2:	0002      	movs	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	4a2f      	ldr	r2, [pc, #188]	; (80035a8 <HAL_RCC_ClockConfig+0x1f4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e054      	b.n	800359c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2238      	movs	r2, #56	; 0x38
 80034f8:	401a      	ands	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	429a      	cmp	r2, r3
 8003502:	d1ec      	bne.n	80034de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2207      	movs	r2, #7
 800350a:	4013      	ands	r3, r2
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d21e      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2207      	movs	r2, #7
 8003518:	4393      	bics	r3, r2
 800351a:	0019      	movs	r1, r3
 800351c:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003524:	f7fe feee 	bl	8002304 <HAL_GetTick>
 8003528:	0003      	movs	r3, r0
 800352a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800352c:	e009      	b.n	8003542 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352e:	f7fe fee9 	bl	8002304 <HAL_GetTick>
 8003532:	0002      	movs	r2, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <HAL_RCC_ClockConfig+0x1f4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e02c      	b.n	800359c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003542:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2207      	movs	r2, #7
 8003548:	4013      	ands	r3, r2
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d1ee      	bne.n	800352e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2204      	movs	r2, #4
 8003556:	4013      	ands	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800355a:	4b14      	ldr	r3, [pc, #80]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <HAL_RCC_ClockConfig+0x200>)
 8003560:	4013      	ands	r3, r2
 8003562:	0019      	movs	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	4b10      	ldr	r3, [pc, #64]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800356e:	f000 f829 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8003572:	0001      	movs	r1, r0
 8003574:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <HAL_RCC_ClockConfig+0x1f8>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	220f      	movs	r2, #15
 800357c:	401a      	ands	r2, r3
 800357e:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <HAL_RCC_ClockConfig+0x204>)
 8003580:	0092      	lsls	r2, r2, #2
 8003582:	58d3      	ldr	r3, [r2, r3]
 8003584:	221f      	movs	r2, #31
 8003586:	4013      	ands	r3, r2
 8003588:	000a      	movs	r2, r1
 800358a:	40da      	lsrs	r2, r3
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_RCC_ClockConfig+0x208>)
 800358e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_ClockConfig+0x20c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0018      	movs	r0, r3
 8003596:	f7fe fe59 	bl	800224c <HAL_InitTick>
 800359a:	0003      	movs	r3, r0
}
 800359c:	0018      	movs	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	b004      	add	sp, #16
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40022000 	.word	0x40022000
 80035a8:	00001388 	.word	0x00001388
 80035ac:	40021000 	.word	0x40021000
 80035b0:	fffff0ff 	.word	0xfffff0ff
 80035b4:	ffff8fff 	.word	0xffff8fff
 80035b8:	08005da0 	.word	0x08005da0
 80035bc:	20000010 	.word	0x20000010
 80035c0:	20000014 	.word	0x20000014

080035c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ca:	4b3c      	ldr	r3, [pc, #240]	; (80036bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2238      	movs	r2, #56	; 0x38
 80035d0:	4013      	ands	r3, r2
 80035d2:	d10f      	bne.n	80035f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80035d4:	4b39      	ldr	r3, [pc, #228]	; (80036bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0adb      	lsrs	r3, r3, #11
 80035da:	2207      	movs	r2, #7
 80035dc:	4013      	ands	r3, r2
 80035de:	2201      	movs	r2, #1
 80035e0:	409a      	lsls	r2, r3
 80035e2:	0013      	movs	r3, r2
 80035e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80035e6:	6839      	ldr	r1, [r7, #0]
 80035e8:	4835      	ldr	r0, [pc, #212]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80035ea:	f7fc fd89 	bl	8000100 <__udivsi3>
 80035ee:	0003      	movs	r3, r0
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	e05d      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035f4:	4b31      	ldr	r3, [pc, #196]	; (80036bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2238      	movs	r2, #56	; 0x38
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d102      	bne.n	8003606 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003600:	4b30      	ldr	r3, [pc, #192]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	e054      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003606:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2238      	movs	r2, #56	; 0x38
 800360c:	4013      	ands	r3, r2
 800360e:	2b10      	cmp	r3, #16
 8003610:	d138      	bne.n	8003684 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003612:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2203      	movs	r2, #3
 8003618:	4013      	ands	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800361c:	4b27      	ldr	r3, [pc, #156]	; (80036bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	2207      	movs	r2, #7
 8003624:	4013      	ands	r3, r2
 8003626:	3301      	adds	r3, #1
 8003628:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d10d      	bne.n	800364c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	4824      	ldr	r0, [pc, #144]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003634:	f7fc fd64 	bl	8000100 <__udivsi3>
 8003638:	0003      	movs	r3, r0
 800363a:	0019      	movs	r1, r3
 800363c:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	227f      	movs	r2, #127	; 0x7f
 8003644:	4013      	ands	r3, r2
 8003646:	434b      	muls	r3, r1
 8003648:	617b      	str	r3, [r7, #20]
        break;
 800364a:	e00d      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	481c      	ldr	r0, [pc, #112]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003650:	f7fc fd56 	bl	8000100 <__udivsi3>
 8003654:	0003      	movs	r3, r0
 8003656:	0019      	movs	r1, r3
 8003658:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	227f      	movs	r2, #127	; 0x7f
 8003660:	4013      	ands	r3, r2
 8003662:	434b      	muls	r3, r1
 8003664:	617b      	str	r3, [r7, #20]
        break;
 8003666:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003668:	4b14      	ldr	r3, [pc, #80]	; (80036bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	0f5b      	lsrs	r3, r3, #29
 800366e:	2207      	movs	r2, #7
 8003670:	4013      	ands	r3, r2
 8003672:	3301      	adds	r3, #1
 8003674:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	6978      	ldr	r0, [r7, #20]
 800367a:	f7fc fd41 	bl	8000100 <__udivsi3>
 800367e:	0003      	movs	r3, r0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	e015      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003684:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2238      	movs	r2, #56	; 0x38
 800368a:	4013      	ands	r3, r2
 800368c:	2b20      	cmp	r3, #32
 800368e:	d103      	bne.n	8003698 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2238      	movs	r2, #56	; 0x38
 800369e:	4013      	ands	r3, r2
 80036a0:	2b18      	cmp	r3, #24
 80036a2:	d103      	bne.n	80036ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80036a4:	23fa      	movs	r3, #250	; 0xfa
 80036a6:	01db      	lsls	r3, r3, #7
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	e001      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036b0:	693b      	ldr	r3, [r7, #16]
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b006      	add	sp, #24
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	40021000 	.word	0x40021000
 80036c0:	00f42400 	.word	0x00f42400
 80036c4:	007a1200 	.word	0x007a1200

080036c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036cc:	4b02      	ldr	r3, [pc, #8]	; (80036d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	20000010 	.word	0x20000010

080036dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036dc:	b5b0      	push	{r4, r5, r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80036e0:	f7ff fff2 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 80036e4:	0004      	movs	r4, r0
 80036e6:	f7ff fb49 	bl	8002d7c <LL_RCC_GetAPB1Prescaler>
 80036ea:	0003      	movs	r3, r0
 80036ec:	0b1a      	lsrs	r2, r3, #12
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036f0:	0092      	lsls	r2, r2, #2
 80036f2:	58d3      	ldr	r3, [r2, r3]
 80036f4:	221f      	movs	r2, #31
 80036f6:	4013      	ands	r3, r2
 80036f8:	40dc      	lsrs	r4, r3
 80036fa:	0023      	movs	r3, r4
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	bdb0      	pop	{r4, r5, r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	08005de0 	.word	0x08005de0

08003708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003710:	2313      	movs	r3, #19
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003718:	2312      	movs	r3, #18
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	029b      	lsls	r3, r3, #10
 8003728:	4013      	ands	r3, r2
 800372a:	d100      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800372c:	e0a3      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372e:	2011      	movs	r0, #17
 8003730:	183b      	adds	r3, r7, r0
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003736:	4b7f      	ldr	r3, [pc, #508]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	055b      	lsls	r3, r3, #21
 800373e:	4013      	ands	r3, r2
 8003740:	d110      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	4b7c      	ldr	r3, [pc, #496]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003746:	4b7b      	ldr	r3, [pc, #492]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	0549      	lsls	r1, r1, #21
 800374c:	430a      	orrs	r2, r1
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003750:	4b78      	ldr	r3, [pc, #480]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	055b      	lsls	r3, r3, #21
 8003758:	4013      	ands	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375e:	183b      	adds	r3, r7, r0
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003764:	4b74      	ldr	r3, [pc, #464]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b73      	ldr	r3, [pc, #460]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800376a:	2180      	movs	r1, #128	; 0x80
 800376c:	0049      	lsls	r1, r1, #1
 800376e:	430a      	orrs	r2, r1
 8003770:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003772:	f7fe fdc7 	bl	8002304 <HAL_GetTick>
 8003776:	0003      	movs	r3, r0
 8003778:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800377a:	e00b      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fe fdc2 	bl	8002304 <HAL_GetTick>
 8003780:	0002      	movs	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d904      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800378a:	2313      	movs	r3, #19
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	2203      	movs	r2, #3
 8003790:	701a      	strb	r2, [r3, #0]
        break;
 8003792:	e005      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003794:	4b68      	ldr	r3, [pc, #416]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4013      	ands	r3, r2
 800379e:	d0ed      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80037a0:	2313      	movs	r3, #19
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d154      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037aa:	4b62      	ldr	r3, [pc, #392]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037ae:	23c0      	movs	r3, #192	; 0xc0
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4013      	ands	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d019      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d014      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037c6:	4b5b      	ldr	r3, [pc, #364]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	4a5c      	ldr	r2, [pc, #368]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037d0:	4b58      	ldr	r3, [pc, #352]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037d4:	4b57      	ldr	r3, [pc, #348]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037d6:	2180      	movs	r1, #128	; 0x80
 80037d8:	0249      	lsls	r1, r1, #9
 80037da:	430a      	orrs	r2, r1
 80037dc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037de:	4b55      	ldr	r3, [pc, #340]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037e2:	4b54      	ldr	r3, [pc, #336]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037e4:	4956      	ldr	r1, [pc, #344]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80037e6:	400a      	ands	r2, r1
 80037e8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037ea:	4b52      	ldr	r3, [pc, #328]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2201      	movs	r2, #1
 80037f4:	4013      	ands	r3, r2
 80037f6:	d016      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fe fd84 	bl	8002304 <HAL_GetTick>
 80037fc:	0003      	movs	r3, r0
 80037fe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003800:	e00c      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fe fd7f 	bl	8002304 <HAL_GetTick>
 8003806:	0002      	movs	r2, r0
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	4a4d      	ldr	r2, [pc, #308]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d904      	bls.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003812:	2313      	movs	r3, #19
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2203      	movs	r2, #3
 8003818:	701a      	strb	r2, [r3, #0]
            break;
 800381a:	e004      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381c:	4b45      	ldr	r3, [pc, #276]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	2202      	movs	r2, #2
 8003822:	4013      	ands	r3, r2
 8003824:	d0ed      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003826:	2313      	movs	r3, #19
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003830:	4b40      	ldr	r3, [pc, #256]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	4a41      	ldr	r2, [pc, #260]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003836:	4013      	ands	r3, r2
 8003838:	0019      	movs	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003840:	430a      	orrs	r2, r1
 8003842:	65da      	str	r2, [r3, #92]	; 0x5c
 8003844:	e00c      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003846:	2312      	movs	r3, #18
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2213      	movs	r2, #19
 800384c:	18ba      	adds	r2, r7, r2
 800384e:	7812      	ldrb	r2, [r2, #0]
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e005      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	2312      	movs	r3, #18
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2213      	movs	r2, #19
 800385a:	18ba      	adds	r2, r7, r2
 800385c:	7812      	ldrb	r2, [r2, #0]
 800385e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003860:	2311      	movs	r3, #17
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d105      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386a:	4b32      	ldr	r3, [pc, #200]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800386c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800386e:	4b31      	ldr	r3, [pc, #196]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003870:	4935      	ldr	r1, [pc, #212]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003872:	400a      	ands	r2, r1
 8003874:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2201      	movs	r2, #1
 800387c:	4013      	ands	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003880:	4b2c      	ldr	r3, [pc, #176]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003884:	2203      	movs	r2, #3
 8003886:	4393      	bics	r3, r2
 8003888:	0019      	movs	r1, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	4b29      	ldr	r3, [pc, #164]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003890:	430a      	orrs	r2, r1
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2220      	movs	r2, #32
 800389a:	4013      	ands	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800389e:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	4a2a      	ldr	r2, [pc, #168]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	4b21      	ldr	r3, [pc, #132]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038ae:	430a      	orrs	r2, r1
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	01db      	lsls	r3, r3, #7
 80038ba:	4013      	ands	r3, r2
 80038bc:	d015      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	0899      	lsrs	r1, r3, #2
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038cc:	430a      	orrs	r2, r1
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	05db      	lsls	r3, r3, #23
 80038d8:	429a      	cmp	r2, r3
 80038da:	d106      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80038dc:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	0249      	lsls	r1, r1, #9
 80038e6:	430a      	orrs	r2, r1
 80038e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	4013      	ands	r3, r2
 80038f4:	d016      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	4a15      	ldr	r2, [pc, #84]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	0019      	movs	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003906:	430a      	orrs	r2, r1
 8003908:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	01db      	lsls	r3, r3, #7
 8003912:	429a      	cmp	r2, r3
 8003914:	d106      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	0249      	lsls	r1, r1, #9
 8003920:	430a      	orrs	r2, r1
 8003922:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003924:	2312      	movs	r3, #18
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	781b      	ldrb	r3, [r3, #0]
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b006      	add	sp, #24
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	40021000 	.word	0x40021000
 8003938:	40007000 	.word	0x40007000
 800393c:	fffffcff 	.word	0xfffffcff
 8003940:	fffeffff 	.word	0xfffeffff
 8003944:	00001388 	.word	0x00001388
 8003948:	efffffff 	.word	0xefffffff
 800394c:	ffffcfff 	.word	0xffffcfff
 8003950:	ffff3fff 	.word	0xffff3fff

08003954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e04a      	b.n	80039fc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	223d      	movs	r2, #61	; 0x3d
 800396a:	5c9b      	ldrb	r3, [r3, r2]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d107      	bne.n	8003982 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	223c      	movs	r2, #60	; 0x3c
 8003976:	2100      	movs	r1, #0
 8003978:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0018      	movs	r0, r3
 800397e:	f7fe fa43 	bl	8001e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	223d      	movs	r2, #61	; 0x3d
 8003986:	2102      	movs	r1, #2
 8003988:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	0019      	movs	r1, r3
 8003994:	0010      	movs	r0, r2
 8003996:	f000 fcb9 	bl	800430c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2248      	movs	r2, #72	; 0x48
 800399e:	2101      	movs	r1, #1
 80039a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	223e      	movs	r2, #62	; 0x3e
 80039a6:	2101      	movs	r1, #1
 80039a8:	5499      	strb	r1, [r3, r2]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	223f      	movs	r2, #63	; 0x3f
 80039ae:	2101      	movs	r1, #1
 80039b0:	5499      	strb	r1, [r3, r2]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2240      	movs	r2, #64	; 0x40
 80039b6:	2101      	movs	r1, #1
 80039b8:	5499      	strb	r1, [r3, r2]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2241      	movs	r2, #65	; 0x41
 80039be:	2101      	movs	r1, #1
 80039c0:	5499      	strb	r1, [r3, r2]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2242      	movs	r2, #66	; 0x42
 80039c6:	2101      	movs	r1, #1
 80039c8:	5499      	strb	r1, [r3, r2]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2243      	movs	r2, #67	; 0x43
 80039ce:	2101      	movs	r1, #1
 80039d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2244      	movs	r2, #68	; 0x44
 80039d6:	2101      	movs	r1, #1
 80039d8:	5499      	strb	r1, [r3, r2]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2245      	movs	r2, #69	; 0x45
 80039de:	2101      	movs	r1, #1
 80039e0:	5499      	strb	r1, [r3, r2]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2246      	movs	r2, #70	; 0x46
 80039e6:	2101      	movs	r1, #1
 80039e8:	5499      	strb	r1, [r3, r2]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2247      	movs	r2, #71	; 0x47
 80039ee:	2101      	movs	r1, #1
 80039f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	223d      	movs	r2, #61	; 0x3d
 80039f6:	2101      	movs	r1, #1
 80039f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b002      	add	sp, #8
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	223d      	movs	r2, #61	; 0x3d
 8003a10:	5c9b      	ldrb	r3, [r3, r2]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d001      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e037      	b.n	8003a8c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	223d      	movs	r2, #61	; 0x3d
 8003a20:	2102      	movs	r1, #2
 8003a22:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2101      	movs	r1, #1
 8003a30:	430a      	orrs	r2, r1
 8003a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_TIM_Base_Start_IT+0x90>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x44>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <HAL_TIM_Base_Start_IT+0x94>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d116      	bne.n	8003a76 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <HAL_TIM_Base_Start_IT+0x98>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d016      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x84>
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	025b      	lsls	r3, r3, #9
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d011      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2101      	movs	r1, #1
 8003a70:	430a      	orrs	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	e008      	b.n	8003a88 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2101      	movs	r1, #1
 8003a82:	430a      	orrs	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e000      	b.n	8003a8a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a88:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b004      	add	sp, #16
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	00010007 	.word	0x00010007

08003aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e04a      	b.n	8003b48 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	223d      	movs	r2, #61	; 0x3d
 8003ab6:	5c9b      	ldrb	r3, [r3, r2]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	223c      	movs	r2, #60	; 0x3c
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 f841 	bl	8003b50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	223d      	movs	r2, #61	; 0x3d
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3304      	adds	r3, #4
 8003ade:	0019      	movs	r1, r3
 8003ae0:	0010      	movs	r0, r2
 8003ae2:	f000 fc13 	bl	800430c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2248      	movs	r2, #72	; 0x48
 8003aea:	2101      	movs	r1, #1
 8003aec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	223e      	movs	r2, #62	; 0x3e
 8003af2:	2101      	movs	r1, #1
 8003af4:	5499      	strb	r1, [r3, r2]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	223f      	movs	r2, #63	; 0x3f
 8003afa:	2101      	movs	r1, #1
 8003afc:	5499      	strb	r1, [r3, r2]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2240      	movs	r2, #64	; 0x40
 8003b02:	2101      	movs	r1, #1
 8003b04:	5499      	strb	r1, [r3, r2]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2241      	movs	r2, #65	; 0x41
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	5499      	strb	r1, [r3, r2]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2242      	movs	r2, #66	; 0x42
 8003b12:	2101      	movs	r1, #1
 8003b14:	5499      	strb	r1, [r3, r2]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2243      	movs	r2, #67	; 0x43
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2244      	movs	r2, #68	; 0x44
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2245      	movs	r2, #69	; 0x45
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	5499      	strb	r1, [r3, r2]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2246      	movs	r2, #70	; 0x46
 8003b32:	2101      	movs	r1, #1
 8003b34:	5499      	strb	r1, [r3, r2]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2247      	movs	r2, #71	; 0x47
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	223d      	movs	r2, #61	; 0x3d
 8003b42:	2101      	movs	r1, #1
 8003b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b002      	add	sp, #8
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d108      	bne.n	8003b82 <HAL_TIM_PWM_Start+0x22>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	223e      	movs	r2, #62	; 0x3e
 8003b74:	5c9b      	ldrb	r3, [r3, r2]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	1e5a      	subs	r2, r3, #1
 8003b7c:	4193      	sbcs	r3, r2
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	e037      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x92>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d108      	bne.n	8003b9a <HAL_TIM_PWM_Start+0x3a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	223f      	movs	r2, #63	; 0x3f
 8003b8c:	5c9b      	ldrb	r3, [r3, r2]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	1e5a      	subs	r2, r3, #1
 8003b94:	4193      	sbcs	r3, r2
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	e02b      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x92>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d108      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0x52>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2240      	movs	r2, #64	; 0x40
 8003ba4:	5c9b      	ldrb	r3, [r3, r2]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	1e5a      	subs	r2, r3, #1
 8003bac:	4193      	sbcs	r3, r2
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	e01f      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x92>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	d108      	bne.n	8003bca <HAL_TIM_PWM_Start+0x6a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2241      	movs	r2, #65	; 0x41
 8003bbc:	5c9b      	ldrb	r3, [r3, r2]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	1e5a      	subs	r2, r3, #1
 8003bc4:	4193      	sbcs	r3, r2
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	e013      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x92>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d108      	bne.n	8003be2 <HAL_TIM_PWM_Start+0x82>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2242      	movs	r2, #66	; 0x42
 8003bd4:	5c9b      	ldrb	r3, [r3, r2]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	1e5a      	subs	r2, r3, #1
 8003bdc:	4193      	sbcs	r3, r2
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	e007      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x92>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2243      	movs	r2, #67	; 0x43
 8003be6:	5c9b      	ldrb	r3, [r3, r2]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	1e5a      	subs	r2, r3, #1
 8003bee:	4193      	sbcs	r3, r2
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e07b      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_PWM_Start+0xaa>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	223e      	movs	r2, #62	; 0x3e
 8003c04:	2102      	movs	r1, #2
 8003c06:	5499      	strb	r1, [r3, r2]
 8003c08:	e023      	b.n	8003c52 <HAL_TIM_PWM_Start+0xf2>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start+0xba>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	223f      	movs	r2, #63	; 0x3f
 8003c14:	2102      	movs	r1, #2
 8003c16:	5499      	strb	r1, [r3, r2]
 8003c18:	e01b      	b.n	8003c52 <HAL_TIM_PWM_Start+0xf2>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0xca>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2240      	movs	r2, #64	; 0x40
 8003c24:	2102      	movs	r1, #2
 8003c26:	5499      	strb	r1, [r3, r2]
 8003c28:	e013      	b.n	8003c52 <HAL_TIM_PWM_Start+0xf2>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0xda>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2241      	movs	r2, #65	; 0x41
 8003c34:	2102      	movs	r1, #2
 8003c36:	5499      	strb	r1, [r3, r2]
 8003c38:	e00b      	b.n	8003c52 <HAL_TIM_PWM_Start+0xf2>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0xea>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2242      	movs	r2, #66	; 0x42
 8003c44:	2102      	movs	r1, #2
 8003c46:	5499      	strb	r1, [r3, r2]
 8003c48:	e003      	b.n	8003c52 <HAL_TIM_PWM_Start+0xf2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2243      	movs	r2, #67	; 0x43
 8003c4e:	2102      	movs	r1, #2
 8003c50:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6839      	ldr	r1, [r7, #0]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 ff08 	bl	8004a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a25      	ldr	r2, [pc, #148]	; (8003cfc <HAL_TIM_PWM_Start+0x19c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x11e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <HAL_TIM_PWM_Start+0x1a0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x11e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a22      	ldr	r2, [pc, #136]	; (8003d04 <HAL_TIM_PWM_Start+0x1a4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d101      	bne.n	8003c82 <HAL_TIM_PWM_Start+0x122>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_TIM_PWM_Start+0x124>
 8003c82:	2300      	movs	r3, #0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2180      	movs	r1, #128	; 0x80
 8003c94:	0209      	lsls	r1, r1, #8
 8003c96:	430a      	orrs	r2, r1
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a17      	ldr	r2, [pc, #92]	; (8003cfc <HAL_TIM_PWM_Start+0x19c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_TIM_PWM_Start+0x14e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <HAL_TIM_PWM_Start+0x1a8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d116      	bne.n	8003cdc <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <HAL_TIM_PWM_Start+0x1ac>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d016      	beq.n	8003cee <HAL_TIM_PWM_Start+0x18e>
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	025b      	lsls	r3, r3, #9
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d011      	beq.n	8003cee <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cda:	e008      	b.n	8003cee <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	e000      	b.n	8003cf0 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cee:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40014400 	.word	0x40014400
 8003d04:	40014800 	.word	0x40014800
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	00010007 	.word	0x00010007

08003d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d021      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2202      	movs	r2, #2
 8003d34:	4013      	ands	r3, r2
 8003d36:	d01d      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	4252      	negs	r2, r2
 8003d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	4013      	ands	r3, r2
 8003d52:	d004      	beq.n	8003d5e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 fac0 	bl	80042dc <HAL_TIM_IC_CaptureCallback>
 8003d5c:	e007      	b.n	8003d6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 fab3 	bl	80042cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f000 fabf 	bl	80042ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2204      	movs	r2, #4
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2204      	movs	r2, #4
 8003d80:	4013      	ands	r3, r2
 8003d82:	d01e      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2205      	movs	r2, #5
 8003d8a:	4252      	negs	r2, r2
 8003d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	23c0      	movs	r3, #192	; 0xc0
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d004      	beq.n	8003dac <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 fa99 	bl	80042dc <HAL_TIM_IC_CaptureCallback>
 8003daa:	e007      	b.n	8003dbc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 fa8c 	bl	80042cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f000 fa98 	bl	80042ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d021      	beq.n	8003e0e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d01d      	beq.n	8003e0e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2209      	movs	r2, #9
 8003dd8:	4252      	negs	r2, r2
 8003dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2204      	movs	r2, #4
 8003de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	2203      	movs	r2, #3
 8003dea:	4013      	ands	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f000 fa73 	bl	80042dc <HAL_TIM_IC_CaptureCallback>
 8003df6:	e007      	b.n	8003e08 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f000 fa66 	bl	80042cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	0018      	movs	r0, r3
 8003e04:	f000 fa72 	bl	80042ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2210      	movs	r2, #16
 8003e12:	4013      	ands	r3, r2
 8003e14:	d022      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d01e      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2211      	movs	r2, #17
 8003e24:	4252      	negs	r2, r2
 8003e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	23c0      	movs	r3, #192	; 0xc0
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f000 fa4c 	bl	80042dc <HAL_TIM_IC_CaptureCallback>
 8003e44:	e007      	b.n	8003e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f000 fa3f 	bl	80042cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f000 fa4b 	bl	80042ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4013      	ands	r3, r2
 8003e62:	d00c      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d008      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2202      	movs	r2, #2
 8003e72:	4252      	negs	r2, r2
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7fd fb7d 	bl	8001578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2280      	movs	r2, #128	; 0x80
 8003e82:	4013      	ands	r3, r2
 8003e84:	d104      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	019b      	lsls	r3, r3, #6
 8003e8c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e8e:	d00b      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2280      	movs	r2, #128	; 0x80
 8003e94:	4013      	ands	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <HAL_TIM_IRQHandler+0x208>)
 8003e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 ffa6 	bl	8004df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d007      	beq.n	8003eca <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a17      	ldr	r2, [pc, #92]	; (8003f1c <HAL_TIM_IRQHandler+0x20c>)
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 ff9d 	bl	8004e04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2240      	movs	r2, #64	; 0x40
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d00c      	beq.n	8003eec <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2240      	movs	r2, #64	; 0x40
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d008      	beq.n	8003eec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2241      	movs	r2, #65	; 0x41
 8003ee0:	4252      	negs	r2, r2
 8003ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 fa08 	bl	80042fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d00c      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d008      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2221      	movs	r2, #33	; 0x21
 8003f02:	4252      	negs	r2, r2
 8003f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 ff6b 	bl	8004de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b004      	add	sp, #16
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	ffffdf7f 	.word	0xffffdf7f
 8003f1c:	fffffeff 	.word	0xfffffeff

08003f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2c:	2317      	movs	r3, #23
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	223c      	movs	r2, #60	; 0x3c
 8003f38:	5c9b      	ldrb	r3, [r3, r2]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e0e5      	b.n	800410e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	223c      	movs	r2, #60	; 0x3c
 8003f46:	2101      	movs	r1, #1
 8003f48:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b14      	cmp	r3, #20
 8003f4e:	d900      	bls.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003f50:	e0d1      	b.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	009a      	lsls	r2, r3, #2
 8003f56:	4b70      	ldr	r3, [pc, #448]	; (8004118 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003f58:	18d3      	adds	r3, r2, r3
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	0011      	movs	r1, r2
 8003f66:	0018      	movs	r0, r3
 8003f68:	f000 fa4a 	bl	8004400 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2108      	movs	r1, #8
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2104      	movs	r1, #4
 8003f88:	438a      	bics	r2, r1
 8003f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6999      	ldr	r1, [r3, #24]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	619a      	str	r2, [r3, #24]
      break;
 8003f9e:	e0af      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	0011      	movs	r1, r2
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f000 faa9 	bl	8004500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699a      	ldr	r2, [r3, #24]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2180      	movs	r1, #128	; 0x80
 8003fba:	0109      	lsls	r1, r1, #4
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4954      	ldr	r1, [pc, #336]	; (800411c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6999      	ldr	r1, [r3, #24]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	021a      	lsls	r2, r3, #8
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	619a      	str	r2, [r3, #24]
      break;
 8003fe4:	e08c      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	0011      	movs	r1, r2
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f000 fb04 	bl	80045fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2108      	movs	r1, #8
 8004000:	430a      	orrs	r2, r1
 8004002:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2104      	movs	r1, #4
 8004010:	438a      	bics	r2, r1
 8004012:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69d9      	ldr	r1, [r3, #28]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	61da      	str	r2, [r3, #28]
      break;
 8004026:	e06b      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	0011      	movs	r1, r2
 8004030:	0018      	movs	r0, r3
 8004032:	f000 fb65 	bl	8004700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2180      	movs	r1, #128	; 0x80
 8004042:	0109      	lsls	r1, r1, #4
 8004044:	430a      	orrs	r2, r1
 8004046:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4932      	ldr	r1, [pc, #200]	; (800411c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004054:	400a      	ands	r2, r1
 8004056:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69d9      	ldr	r1, [r3, #28]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	021a      	lsls	r2, r3, #8
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	61da      	str	r2, [r3, #28]
      break;
 800406c:	e048      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	0011      	movs	r1, r2
 8004076:	0018      	movs	r0, r3
 8004078:	f000 fba6 	bl	80047c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2108      	movs	r1, #8
 8004088:	430a      	orrs	r2, r1
 800408a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2104      	movs	r1, #4
 8004098:	438a      	bics	r2, r1
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040ae:	e027      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	0011      	movs	r1, r2
 80040b8:	0018      	movs	r0, r3
 80040ba:	f000 fbdf 	bl	800487c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	0109      	lsls	r1, r1, #4
 80040cc:	430a      	orrs	r2, r1
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4910      	ldr	r1, [pc, #64]	; (800411c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80040dc:	400a      	ands	r2, r1
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	021a      	lsls	r2, r3, #8
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040f4:	e004      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80040f6:	2317      	movs	r3, #23
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
      break;
 80040fe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	223c      	movs	r2, #60	; 0x3c
 8004104:	2100      	movs	r1, #0
 8004106:	5499      	strb	r1, [r3, r2]

  return status;
 8004108:	2317      	movs	r3, #23
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	781b      	ldrb	r3, [r3, #0]
}
 800410e:	0018      	movs	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	b006      	add	sp, #24
 8004114:	bd80      	pop	{r7, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	08005e00 	.word	0x08005e00
 800411c:	fffffbff 	.word	0xfffffbff

08004120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412a:	230f      	movs	r3, #15
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	223c      	movs	r2, #60	; 0x3c
 8004136:	5c9b      	ldrb	r3, [r3, r2]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_TIM_ConfigClockSource+0x20>
 800413c:	2302      	movs	r3, #2
 800413e:	e0bc      	b.n	80042ba <HAL_TIM_ConfigClockSource+0x19a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	223c      	movs	r2, #60	; 0x3c
 8004144:	2101      	movs	r1, #1
 8004146:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	223d      	movs	r2, #61	; 0x3d
 800414c:	2102      	movs	r1, #2
 800414e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4a5a      	ldr	r2, [pc, #360]	; (80042c4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800415c:	4013      	ands	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4a59      	ldr	r2, [pc, #356]	; (80042c8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004164:	4013      	ands	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2280      	movs	r2, #128	; 0x80
 8004176:	0192      	lsls	r2, r2, #6
 8004178:	4293      	cmp	r3, r2
 800417a:	d040      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0xde>
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	0192      	lsls	r2, r2, #6
 8004180:	4293      	cmp	r3, r2
 8004182:	d900      	bls.n	8004186 <HAL_TIM_ConfigClockSource+0x66>
 8004184:	e088      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 8004186:	2280      	movs	r2, #128	; 0x80
 8004188:	0152      	lsls	r2, r2, #5
 800418a:	4293      	cmp	r3, r2
 800418c:	d100      	bne.n	8004190 <HAL_TIM_ConfigClockSource+0x70>
 800418e:	e088      	b.n	80042a2 <HAL_TIM_ConfigClockSource+0x182>
 8004190:	2280      	movs	r2, #128	; 0x80
 8004192:	0152      	lsls	r2, r2, #5
 8004194:	4293      	cmp	r3, r2
 8004196:	d900      	bls.n	800419a <HAL_TIM_ConfigClockSource+0x7a>
 8004198:	e07e      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 800419a:	2b70      	cmp	r3, #112	; 0x70
 800419c:	d018      	beq.n	80041d0 <HAL_TIM_ConfigClockSource+0xb0>
 800419e:	d900      	bls.n	80041a2 <HAL_TIM_ConfigClockSource+0x82>
 80041a0:	e07a      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041a2:	2b60      	cmp	r3, #96	; 0x60
 80041a4:	d04f      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x126>
 80041a6:	d900      	bls.n	80041aa <HAL_TIM_ConfigClockSource+0x8a>
 80041a8:	e076      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041aa:	2b50      	cmp	r3, #80	; 0x50
 80041ac:	d03b      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x106>
 80041ae:	d900      	bls.n	80041b2 <HAL_TIM_ConfigClockSource+0x92>
 80041b0:	e072      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d057      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x146>
 80041b6:	d900      	bls.n	80041ba <HAL_TIM_ConfigClockSource+0x9a>
 80041b8:	e06e      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041ba:	2b30      	cmp	r3, #48	; 0x30
 80041bc:	d063      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x166>
 80041be:	d86b      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d060      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x166>
 80041c4:	d868      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d05d      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x166>
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d05b      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x166>
 80041ce:	e063      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6899      	ldr	r1, [r3, #8]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f000 fc26 	bl	8004a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2277      	movs	r2, #119	; 0x77
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	609a      	str	r2, [r3, #8]
      break;
 80041fc:	e052      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6899      	ldr	r1, [r3, #8]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f000 fc0f 	bl	8004a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	01c9      	lsls	r1, r1, #7
 8004220:	430a      	orrs	r2, r1
 8004222:	609a      	str	r2, [r3, #8]
      break;
 8004224:	e03e      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6859      	ldr	r1, [r3, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	001a      	movs	r2, r3
 8004234:	f000 fb80 	bl	8004938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2150      	movs	r1, #80	; 0x50
 800423e:	0018      	movs	r0, r3
 8004240:	f000 fbda 	bl	80049f8 <TIM_ITRx_SetConfig>
      break;
 8004244:	e02e      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6859      	ldr	r1, [r3, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	001a      	movs	r2, r3
 8004254:	f000 fb9e 	bl	8004994 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2160      	movs	r1, #96	; 0x60
 800425e:	0018      	movs	r0, r3
 8004260:	f000 fbca 	bl	80049f8 <TIM_ITRx_SetConfig>
      break;
 8004264:	e01e      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6859      	ldr	r1, [r3, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	001a      	movs	r2, r3
 8004274:	f000 fb60 	bl	8004938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2140      	movs	r1, #64	; 0x40
 800427e:	0018      	movs	r0, r3
 8004280:	f000 fbba 	bl	80049f8 <TIM_ITRx_SetConfig>
      break;
 8004284:	e00e      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0019      	movs	r1, r3
 8004290:	0010      	movs	r0, r2
 8004292:	f000 fbb1 	bl	80049f8 <TIM_ITRx_SetConfig>
      break;
 8004296:	e005      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004298:	230f      	movs	r3, #15
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2201      	movs	r2, #1
 800429e:	701a      	strb	r2, [r3, #0]
      break;
 80042a0:	e000      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80042a2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	223d      	movs	r2, #61	; 0x3d
 80042a8:	2101      	movs	r1, #1
 80042aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	223c      	movs	r2, #60	; 0x3c
 80042b0:	2100      	movs	r1, #0
 80042b2:	5499      	strb	r1, [r3, r2]

  return status;
 80042b4:	230f      	movs	r3, #15
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	781b      	ldrb	r3, [r3, #0]
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	ffceff88 	.word	0xffceff88
 80042c8:	ffff00ff 	.word	0xffff00ff

080042cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042d4:	46c0      	nop			; (mov r8, r8)
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b002      	add	sp, #8
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b002      	add	sp, #8
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b002      	add	sp, #8
 800430a:	bd80      	pop	{r7, pc}

0800430c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a32      	ldr	r2, [pc, #200]	; (80043e8 <TIM_Base_SetConfig+0xdc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0x20>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a31      	ldr	r2, [pc, #196]	; (80043ec <TIM_Base_SetConfig+0xe0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d108      	bne.n	800433e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2270      	movs	r2, #112	; 0x70
 8004330:	4393      	bics	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a29      	ldr	r2, [pc, #164]	; (80043e8 <TIM_Base_SetConfig+0xdc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00f      	beq.n	8004366 <TIM_Base_SetConfig+0x5a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a28      	ldr	r2, [pc, #160]	; (80043ec <TIM_Base_SetConfig+0xe0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00b      	beq.n	8004366 <TIM_Base_SetConfig+0x5a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <TIM_Base_SetConfig+0xe4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d007      	beq.n	8004366 <TIM_Base_SetConfig+0x5a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <TIM_Base_SetConfig+0xe8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d003      	beq.n	8004366 <TIM_Base_SetConfig+0x5a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <TIM_Base_SetConfig+0xec>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d108      	bne.n	8004378 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <TIM_Base_SetConfig+0xf0>)
 800436a:	4013      	ands	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2280      	movs	r2, #128	; 0x80
 800437c:	4393      	bics	r3, r2
 800437e:	001a      	movs	r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <TIM_Base_SetConfig+0xdc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <TIM_Base_SetConfig+0xaa>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <TIM_Base_SetConfig+0xe8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_Base_SetConfig+0xaa>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a11      	ldr	r2, [pc, #68]	; (80043f8 <TIM_Base_SetConfig+0xec>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d103      	bne.n	80043be <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2201      	movs	r2, #1
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d106      	bne.n	80043de <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2201      	movs	r2, #1
 80043d6:	4393      	bics	r3, r2
 80043d8:	001a      	movs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	611a      	str	r2, [r3, #16]
  }
}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b004      	add	sp, #16
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40002000 	.word	0x40002000
 80043f4:	40014400 	.word	0x40014400
 80043f8:	40014800 	.word	0x40014800
 80043fc:	fffffcff 	.word	0xfffffcff

08004400 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	2201      	movs	r2, #1
 8004416:	4393      	bics	r3, r2
 8004418:	001a      	movs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a2e      	ldr	r2, [pc, #184]	; (80044e8 <TIM_OC1_SetConfig+0xe8>)
 800442e:	4013      	ands	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2203      	movs	r2, #3
 8004436:	4393      	bics	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2202      	movs	r2, #2
 8004448:	4393      	bics	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a24      	ldr	r2, [pc, #144]	; (80044ec <TIM_OC1_SetConfig+0xec>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d007      	beq.n	800446e <TIM_OC1_SetConfig+0x6e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a23      	ldr	r2, [pc, #140]	; (80044f0 <TIM_OC1_SetConfig+0xf0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_OC1_SetConfig+0x6e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a22      	ldr	r2, [pc, #136]	; (80044f4 <TIM_OC1_SetConfig+0xf4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10c      	bne.n	8004488 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2208      	movs	r2, #8
 8004472:	4393      	bics	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2204      	movs	r2, #4
 8004484:	4393      	bics	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a18      	ldr	r2, [pc, #96]	; (80044ec <TIM_OC1_SetConfig+0xec>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d007      	beq.n	80044a0 <TIM_OC1_SetConfig+0xa0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a17      	ldr	r2, [pc, #92]	; (80044f0 <TIM_OC1_SetConfig+0xf0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_OC1_SetConfig+0xa0>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <TIM_OC1_SetConfig+0xf4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d111      	bne.n	80044c4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <TIM_OC1_SetConfig+0xf8>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4a14      	ldr	r2, [pc, #80]	; (80044fc <TIM_OC1_SetConfig+0xfc>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b006      	add	sp, #24
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	fffeff8f 	.word	0xfffeff8f
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800
 80044f8:	fffffeff 	.word	0xfffffeff
 80044fc:	fffffdff 	.word	0xfffffdff

08004500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	2210      	movs	r2, #16
 8004516:	4393      	bics	r3, r2
 8004518:	001a      	movs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <TIM_OC2_SetConfig+0xe0>)
 800452e:	4013      	ands	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <TIM_OC2_SetConfig+0xe4>)
 8004536:	4013      	ands	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2220      	movs	r2, #32
 800454a:	4393      	bics	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a22      	ldr	r2, [pc, #136]	; (80045e8 <TIM_OC2_SetConfig+0xe8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d10d      	bne.n	800457e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2280      	movs	r2, #128	; 0x80
 8004566:	4393      	bics	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2240      	movs	r2, #64	; 0x40
 800457a:	4393      	bics	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <TIM_OC2_SetConfig+0xe8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <TIM_OC2_SetConfig+0x96>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a18      	ldr	r2, [pc, #96]	; (80045ec <TIM_OC2_SetConfig+0xec>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_OC2_SetConfig+0x96>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <TIM_OC2_SetConfig+0xf0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d113      	bne.n	80045be <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4a16      	ldr	r2, [pc, #88]	; (80045f4 <TIM_OC2_SetConfig+0xf4>)
 800459a:	4013      	ands	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <TIM_OC2_SetConfig+0xf8>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	621a      	str	r2, [r3, #32]
}
 80045d8:	46c0      	nop			; (mov r8, r8)
 80045da:	46bd      	mov	sp, r7
 80045dc:	b006      	add	sp, #24
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	feff8fff 	.word	0xfeff8fff
 80045e4:	fffffcff 	.word	0xfffffcff
 80045e8:	40012c00 	.word	0x40012c00
 80045ec:	40014400 	.word	0x40014400
 80045f0:	40014800 	.word	0x40014800
 80045f4:	fffffbff 	.word	0xfffffbff
 80045f8:	fffff7ff 	.word	0xfffff7ff

080045fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	4a31      	ldr	r2, [pc, #196]	; (80046d8 <TIM_OC3_SetConfig+0xdc>)
 8004612:	401a      	ands	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a2d      	ldr	r2, [pc, #180]	; (80046dc <TIM_OC3_SetConfig+0xe0>)
 8004628:	4013      	ands	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2203      	movs	r2, #3
 8004630:	4393      	bics	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	4a27      	ldr	r2, [pc, #156]	; (80046e0 <TIM_OC3_SetConfig+0xe4>)
 8004642:	4013      	ands	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a23      	ldr	r2, [pc, #140]	; (80046e4 <TIM_OC3_SetConfig+0xe8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d10d      	bne.n	8004676 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	4a22      	ldr	r2, [pc, #136]	; (80046e8 <TIM_OC3_SetConfig+0xec>)
 800465e:	4013      	ands	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <TIM_OC3_SetConfig+0xf0>)
 8004672:	4013      	ands	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1a      	ldr	r2, [pc, #104]	; (80046e4 <TIM_OC3_SetConfig+0xe8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d007      	beq.n	800468e <TIM_OC3_SetConfig+0x92>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <TIM_OC3_SetConfig+0xf4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d003      	beq.n	800468e <TIM_OC3_SetConfig+0x92>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1a      	ldr	r2, [pc, #104]	; (80046f4 <TIM_OC3_SetConfig+0xf8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d113      	bne.n	80046b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <TIM_OC3_SetConfig+0xfc>)
 8004692:	4013      	ands	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4a18      	ldr	r2, [pc, #96]	; (80046fc <TIM_OC3_SetConfig+0x100>)
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	621a      	str	r2, [r3, #32]
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b006      	add	sp, #24
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	fffffeff 	.word	0xfffffeff
 80046dc:	fffeff8f 	.word	0xfffeff8f
 80046e0:	fffffdff 	.word	0xfffffdff
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	fffff7ff 	.word	0xfffff7ff
 80046ec:	fffffbff 	.word	0xfffffbff
 80046f0:	40014400 	.word	0x40014400
 80046f4:	40014800 	.word	0x40014800
 80046f8:	ffffefff 	.word	0xffffefff
 80046fc:	ffffdfff 	.word	0xffffdfff

08004700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	4a24      	ldr	r2, [pc, #144]	; (80047a8 <TIM_OC4_SetConfig+0xa8>)
 8004716:	401a      	ands	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a20      	ldr	r2, [pc, #128]	; (80047ac <TIM_OC4_SetConfig+0xac>)
 800472c:	4013      	ands	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <TIM_OC4_SetConfig+0xb0>)
 8004734:	4013      	ands	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4a1b      	ldr	r2, [pc, #108]	; (80047b4 <TIM_OC4_SetConfig+0xb4>)
 8004748:	4013      	ands	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	031b      	lsls	r3, r3, #12
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <TIM_OC4_SetConfig+0xb8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d007      	beq.n	8004770 <TIM_OC4_SetConfig+0x70>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a16      	ldr	r2, [pc, #88]	; (80047bc <TIM_OC4_SetConfig+0xbc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_OC4_SetConfig+0x70>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <TIM_OC4_SetConfig+0xc0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d109      	bne.n	8004784 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <TIM_OC4_SetConfig+0xc4>)
 8004774:	4013      	ands	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	019b      	lsls	r3, r3, #6
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b006      	add	sp, #24
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	ffffefff 	.word	0xffffefff
 80047ac:	feff8fff 	.word	0xfeff8fff
 80047b0:	fffffcff 	.word	0xfffffcff
 80047b4:	ffffdfff 	.word	0xffffdfff
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40014400 	.word	0x40014400
 80047c0:	40014800 	.word	0x40014800
 80047c4:	ffffbfff 	.word	0xffffbfff

080047c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	4a21      	ldr	r2, [pc, #132]	; (8004864 <TIM_OC5_SetConfig+0x9c>)
 80047de:	401a      	ands	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4a1d      	ldr	r2, [pc, #116]	; (8004868 <TIM_OC5_SetConfig+0xa0>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4a19      	ldr	r2, [pc, #100]	; (800486c <TIM_OC5_SetConfig+0xa4>)
 8004806:	4013      	ands	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a15      	ldr	r2, [pc, #84]	; (8004870 <TIM_OC5_SetConfig+0xa8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_OC5_SetConfig+0x66>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a14      	ldr	r2, [pc, #80]	; (8004874 <TIM_OC5_SetConfig+0xac>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_OC5_SetConfig+0x66>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <TIM_OC5_SetConfig+0xb0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d109      	bne.n	8004842 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <TIM_OC5_SetConfig+0x9c>)
 8004832:	4013      	ands	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	621a      	str	r2, [r3, #32]
}
 800485c:	46c0      	nop			; (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	b006      	add	sp, #24
 8004862:	bd80      	pop	{r7, pc}
 8004864:	fffeffff 	.word	0xfffeffff
 8004868:	fffeff8f 	.word	0xfffeff8f
 800486c:	fffdffff 	.word	0xfffdffff
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40014400 	.word	0x40014400
 8004878:	40014800 	.word	0x40014800

0800487c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4a22      	ldr	r2, [pc, #136]	; (800491c <TIM_OC6_SetConfig+0xa0>)
 8004892:	401a      	ands	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <TIM_OC6_SetConfig+0xa4>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <TIM_OC6_SetConfig+0xa8>)
 80048bc:	4013      	ands	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	051b      	lsls	r3, r3, #20
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a16      	ldr	r2, [pc, #88]	; (8004928 <TIM_OC6_SetConfig+0xac>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d007      	beq.n	80048e4 <TIM_OC6_SetConfig+0x68>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a15      	ldr	r2, [pc, #84]	; (800492c <TIM_OC6_SetConfig+0xb0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <TIM_OC6_SetConfig+0x68>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a14      	ldr	r2, [pc, #80]	; (8004930 <TIM_OC6_SetConfig+0xb4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d109      	bne.n	80048f8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4a13      	ldr	r2, [pc, #76]	; (8004934 <TIM_OC6_SetConfig+0xb8>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	029b      	lsls	r3, r3, #10
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	621a      	str	r2, [r3, #32]
}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	b006      	add	sp, #24
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	ffefffff 	.word	0xffefffff
 8004920:	feff8fff 	.word	0xfeff8fff
 8004924:	ffdfffff 	.word	0xffdfffff
 8004928:	40012c00 	.word	0x40012c00
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800
 8004934:	fffbffff 	.word	0xfffbffff

08004938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	2201      	movs	r2, #1
 8004950:	4393      	bics	r3, r2
 8004952:	001a      	movs	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	22f0      	movs	r2, #240	; 0xf0
 8004962:	4393      	bics	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	220a      	movs	r2, #10
 8004974:	4393      	bics	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	621a      	str	r2, [r3, #32]
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b006      	add	sp, #24
 8004992:	bd80      	pop	{r7, pc}

08004994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	2210      	movs	r2, #16
 80049ac:	4393      	bics	r3, r2
 80049ae:	001a      	movs	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <TIM_TI2_ConfigInputStage+0x60>)
 80049be:	4013      	ands	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	031b      	lsls	r3, r3, #12
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	22a0      	movs	r2, #160	; 0xa0
 80049d0:	4393      	bics	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b006      	add	sp, #24
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	ffff0fff 	.word	0xffff0fff

080049f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <TIM_ITRx_SetConfig+0x34>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	2207      	movs	r2, #7
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	609a      	str	r2, [r3, #8]
}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b004      	add	sp, #16
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	ffcfff8f 	.word	0xffcfff8f

08004a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <TIM_ETR_SetConfig+0x3c>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	021a      	lsls	r2, r3, #8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	609a      	str	r2, [r3, #8]
}
 8004a64:	46c0      	nop			; (mov r8, r8)
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b006      	add	sp, #24
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	ffff00ff 	.word	0xffff00ff

08004a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	221f      	movs	r2, #31
 8004a80:	4013      	ands	r3, r2
 8004a82:	2201      	movs	r2, #1
 8004a84:	409a      	lsls	r2, r3
 8004a86:	0013      	movs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	43d2      	mvns	r2, r2
 8004a92:	401a      	ands	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a1a      	ldr	r2, [r3, #32]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	211f      	movs	r1, #31
 8004aa0:	400b      	ands	r3, r1
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4099      	lsls	r1, r3
 8004aa6:	000b      	movs	r3, r1
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b006      	add	sp, #24
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d108      	bne.n	8004ada <HAL_TIMEx_PWMN_Start+0x22>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2244      	movs	r2, #68	; 0x44
 8004acc:	5c9b      	ldrb	r3, [r3, r2]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	1e5a      	subs	r2, r3, #1
 8004ad4:	4193      	sbcs	r3, r2
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	e01f      	b.n	8004b1a <HAL_TIMEx_PWMN_Start+0x62>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d108      	bne.n	8004af2 <HAL_TIMEx_PWMN_Start+0x3a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2245      	movs	r2, #69	; 0x45
 8004ae4:	5c9b      	ldrb	r3, [r3, r2]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	1e5a      	subs	r2, r3, #1
 8004aec:	4193      	sbcs	r3, r2
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	e013      	b.n	8004b1a <HAL_TIMEx_PWMN_Start+0x62>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d108      	bne.n	8004b0a <HAL_TIMEx_PWMN_Start+0x52>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2246      	movs	r2, #70	; 0x46
 8004afc:	5c9b      	ldrb	r3, [r3, r2]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	1e5a      	subs	r2, r3, #1
 8004b04:	4193      	sbcs	r3, r2
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	e007      	b.n	8004b1a <HAL_TIMEx_PWMN_Start+0x62>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2247      	movs	r2, #71	; 0x47
 8004b0e:	5c9b      	ldrb	r3, [r3, r2]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	1e5a      	subs	r2, r3, #1
 8004b16:	4193      	sbcs	r3, r2
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e057      	b.n	8004bd2 <HAL_TIMEx_PWMN_Start+0x11a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <HAL_TIMEx_PWMN_Start+0x7a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2244      	movs	r2, #68	; 0x44
 8004b2c:	2102      	movs	r1, #2
 8004b2e:	5499      	strb	r1, [r3, r2]
 8004b30:	e013      	b.n	8004b5a <HAL_TIMEx_PWMN_Start+0xa2>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d104      	bne.n	8004b42 <HAL_TIMEx_PWMN_Start+0x8a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2245      	movs	r2, #69	; 0x45
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	5499      	strb	r1, [r3, r2]
 8004b40:	e00b      	b.n	8004b5a <HAL_TIMEx_PWMN_Start+0xa2>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d104      	bne.n	8004b52 <HAL_TIMEx_PWMN_Start+0x9a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2246      	movs	r2, #70	; 0x46
 8004b4c:	2102      	movs	r1, #2
 8004b4e:	5499      	strb	r1, [r3, r2]
 8004b50:	e003      	b.n	8004b5a <HAL_TIMEx_PWMN_Start+0xa2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2247      	movs	r2, #71	; 0x47
 8004b56:	2102      	movs	r1, #2
 8004b58:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6839      	ldr	r1, [r7, #0]
 8004b60:	2204      	movs	r2, #4
 8004b62:	0018      	movs	r0, r3
 8004b64:	f000 f956 	bl	8004e14 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	0209      	lsls	r1, r1, #8
 8004b76:	430a      	orrs	r2, r1
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <HAL_TIMEx_PWMN_Start+0x124>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_TIMEx_PWMN_Start+0xd6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a15      	ldr	r2, [pc, #84]	; (8004be0 <HAL_TIMEx_PWMN_Start+0x128>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d116      	bne.n	8004bbc <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <HAL_TIMEx_PWMN_Start+0x12c>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b06      	cmp	r3, #6
 8004b9e:	d016      	beq.n	8004bce <HAL_TIMEx_PWMN_Start+0x116>
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	025b      	lsls	r3, r3, #9
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d011      	beq.n	8004bce <HAL_TIMEx_PWMN_Start+0x116>
    {
      __HAL_TIM_ENABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	e008      	b.n	8004bce <HAL_TIMEx_PWMN_Start+0x116>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e000      	b.n	8004bd0 <HAL_TIMEx_PWMN_Start+0x118>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b004      	add	sp, #16
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40000400 	.word	0x40000400
 8004be4:	00010007 	.word	0x00010007

08004be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	223c      	movs	r2, #60	; 0x3c
 8004bf6:	5c9b      	ldrb	r3, [r3, r2]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e04a      	b.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	223c      	movs	r2, #60	; 0x3c
 8004c04:	2101      	movs	r1, #1
 8004c06:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	223d      	movs	r2, #61	; 0x3d
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1e      	ldr	r2, [pc, #120]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d108      	bne.n	8004c3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2270      	movs	r2, #112	; 0x70
 8004c40:	4393      	bics	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a11      	ldr	r2, [pc, #68]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d004      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a10      	ldr	r2, [pc, #64]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10c      	bne.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2280      	movs	r2, #128	; 0x80
 8004c6e:	4393      	bics	r3, r2
 8004c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	223d      	movs	r2, #61	; 0x3d
 8004c88:	2101      	movs	r1, #1
 8004c8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	223c      	movs	r2, #60	; 0x3c
 8004c90:	2100      	movs	r1, #0
 8004c92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	0018      	movs	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b004      	add	sp, #16
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	ff0fffff 	.word	0xff0fffff
 8004ca8:	40000400 	.word	0x40000400

08004cac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	223c      	movs	r2, #60	; 0x3c
 8004cbe:	5c9b      	ldrb	r3, [r3, r2]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e06f      	b.n	8004da8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	223c      	movs	r2, #60	; 0x3c
 8004ccc:	2101      	movs	r1, #1
 8004cce:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	22ff      	movs	r2, #255	; 0xff
 8004cd4:	4393      	bics	r3, r2
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a33      	ldr	r2, [pc, #204]	; (8004db0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004ce4:	401a      	ands	r2, r3
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a30      	ldr	r2, [pc, #192]	; (8004db4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004cf2:	401a      	ands	r2, r3
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4a2e      	ldr	r2, [pc, #184]	; (8004db8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004d00:	401a      	ands	r2, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a2b      	ldr	r2, [pc, #172]	; (8004dbc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004d0e:	401a      	ands	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a29      	ldr	r2, [pc, #164]	; (8004dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004d1c:	401a      	ands	r2, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a26      	ldr	r2, [pc, #152]	; (8004dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004d38:	401a      	ands	r2, r3
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4a21      	ldr	r2, [pc, #132]	; (8004dcc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004d48:	401a      	ands	r2, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d11c      	bne.n	8004d96 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004d60:	401a      	ands	r2, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	051b      	lsls	r3, r3, #20
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004d70:	401a      	ands	r2, r3
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004d7e:	401a      	ands	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	223c      	movs	r2, #60	; 0x3c
 8004da2:	2100      	movs	r1, #0
 8004da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b004      	add	sp, #16
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	fffffcff 	.word	0xfffffcff
 8004db4:	fffffbff 	.word	0xfffffbff
 8004db8:	fffff7ff 	.word	0xfffff7ff
 8004dbc:	ffffefff 	.word	0xffffefff
 8004dc0:	ffffdfff 	.word	0xffffdfff
 8004dc4:	ffffbfff 	.word	0xffffbfff
 8004dc8:	fff0ffff 	.word	0xfff0ffff
 8004dcc:	efffffff 	.word	0xefffffff
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	ff0fffff 	.word	0xff0fffff
 8004dd8:	feffffff 	.word	0xfeffffff
 8004ddc:	fdffffff 	.word	0xfdffffff
 8004de0:	dfffffff 	.word	0xdfffffff

08004de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dec:	46c0      	nop			; (mov r8, r8)
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b002      	add	sp, #8
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b002      	add	sp, #8
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b002      	add	sp, #8
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	220f      	movs	r2, #15
 8004e24:	4013      	ands	r3, r2
 8004e26:	2204      	movs	r2, #4
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	0013      	movs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	43d2      	mvns	r2, r2
 8004e36:	401a      	ands	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1a      	ldr	r2, [r3, #32]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	210f      	movs	r1, #15
 8004e44:	400b      	ands	r3, r1
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4099      	lsls	r1, r3
 8004e4a:	000b      	movs	r3, r1
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b006      	add	sp, #24
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e046      	b.n	8004efc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2288      	movs	r2, #136	; 0x88
 8004e72:	589b      	ldr	r3, [r3, r2]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d107      	bne.n	8004e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2284      	movs	r2, #132	; 0x84
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	0018      	movs	r0, r3
 8004e84:	f7fd f85c 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2288      	movs	r2, #136	; 0x88
 8004e8c:	2124      	movs	r1, #36	; 0x24
 8004e8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	438a      	bics	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 fa10 	bl	80052d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f000 f8a2 	bl	8004ffc <UART_SetConfig>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e01c      	b.n	8004efc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	490d      	ldr	r1, [pc, #52]	; (8004f04 <HAL_UART_Init+0xa8>)
 8004ece:	400a      	ands	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	212a      	movs	r1, #42	; 0x2a
 8004ede:	438a      	bics	r2, r1
 8004ee0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2101      	movs	r1, #1
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 fa9f 	bl	8005438 <UART_CheckIdleState>
 8004efa:	0003      	movs	r3, r0
}
 8004efc:	0018      	movs	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b002      	add	sp, #8
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	ffffb7ff 	.word	0xffffb7ff

08004f08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	1dbb      	adds	r3, r7, #6
 8004f14:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	228c      	movs	r2, #140	; 0x8c
 8004f1a:	589b      	ldr	r3, [r3, r2]
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d145      	bne.n	8004fac <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_UART_Receive_DMA+0x26>
 8004f26:	1dbb      	adds	r3, r7, #6
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e03d      	b.n	8004fae <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	2380      	movs	r3, #128	; 0x80
 8004f38:	015b      	lsls	r3, r3, #5
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d109      	bne.n	8004f52 <HAL_UART_Receive_DMA+0x4a>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d105      	bne.n	8004f52 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d001      	beq.n	8004f52 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e02d      	b.n	8004fae <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	041b      	lsls	r3, r3, #16
 8004f62:	4013      	ands	r3, r2
 8004f64:	d019      	beq.n	8004f9a <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f66:	f3ef 8310 	mrs	r3, PRIMASK
 8004f6a:	613b      	str	r3, [r7, #16]
  return(result);
 8004f6c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	2301      	movs	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f383 8810 	msr	PRIMASK, r3
}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2180      	movs	r1, #128	; 0x80
 8004f88:	04c9      	lsls	r1, r1, #19
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	f383 8810 	msr	PRIMASK, r3
}
 8004f98:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004f9a:	1dbb      	adds	r3, r7, #6
 8004f9c:	881a      	ldrh	r2, [r3, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f000 fb62 	bl	800566c <UART_Start_Receive_DMA>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	e000      	b.n	8004fae <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
  }
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b008      	add	sp, #32
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b002      	add	sp, #8
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	b002      	add	sp, #8
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	000a      	movs	r2, r1
 8004ff0:	1cbb      	adds	r3, r7, #2
 8004ff2:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005004:	231a      	movs	r3, #26
 8005006:	18fb      	adds	r3, r7, r3
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	4313      	orrs	r3, r2
 8005022:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4aa1      	ldr	r2, [pc, #644]	; (80052b0 <UART_SetConfig+0x2b4>)
 800502c:	4013      	ands	r3, r2
 800502e:	0019      	movs	r1, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	4a9c      	ldr	r2, [pc, #624]	; (80052b4 <UART_SetConfig+0x2b8>)
 8005042:	4013      	ands	r3, r2
 8005044:	0019      	movs	r1, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	4313      	orrs	r3, r2
 8005060:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	4a93      	ldr	r2, [pc, #588]	; (80052b8 <UART_SetConfig+0x2bc>)
 800506a:	4013      	ands	r3, r2
 800506c:	0019      	movs	r1, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	430a      	orrs	r2, r1
 8005076:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	220f      	movs	r2, #15
 8005080:	4393      	bics	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a89      	ldr	r2, [pc, #548]	; (80052bc <UART_SetConfig+0x2c0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d127      	bne.n	80050ea <UART_SetConfig+0xee>
 800509a:	4b89      	ldr	r3, [pc, #548]	; (80052c0 <UART_SetConfig+0x2c4>)
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	2203      	movs	r2, #3
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d017      	beq.n	80050d6 <UART_SetConfig+0xda>
 80050a6:	d81b      	bhi.n	80050e0 <UART_SetConfig+0xe4>
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d00a      	beq.n	80050c2 <UART_SetConfig+0xc6>
 80050ac:	d818      	bhi.n	80050e0 <UART_SetConfig+0xe4>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <UART_SetConfig+0xbc>
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d00a      	beq.n	80050cc <UART_SetConfig+0xd0>
 80050b6:	e013      	b.n	80050e0 <UART_SetConfig+0xe4>
 80050b8:	231b      	movs	r3, #27
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e021      	b.n	8005106 <UART_SetConfig+0x10a>
 80050c2:	231b      	movs	r3, #27
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	2202      	movs	r2, #2
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	e01c      	b.n	8005106 <UART_SetConfig+0x10a>
 80050cc:	231b      	movs	r3, #27
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	2204      	movs	r2, #4
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e017      	b.n	8005106 <UART_SetConfig+0x10a>
 80050d6:	231b      	movs	r3, #27
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	2208      	movs	r2, #8
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e012      	b.n	8005106 <UART_SetConfig+0x10a>
 80050e0:	231b      	movs	r3, #27
 80050e2:	18fb      	adds	r3, r7, r3
 80050e4:	2210      	movs	r2, #16
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e00d      	b.n	8005106 <UART_SetConfig+0x10a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a75      	ldr	r2, [pc, #468]	; (80052c4 <UART_SetConfig+0x2c8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d104      	bne.n	80050fe <UART_SetConfig+0x102>
 80050f4:	231b      	movs	r3, #27
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	e003      	b.n	8005106 <UART_SetConfig+0x10a>
 80050fe:	231b      	movs	r3, #27
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	2210      	movs	r2, #16
 8005104:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69da      	ldr	r2, [r3, #28]
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	429a      	cmp	r2, r3
 8005110:	d000      	beq.n	8005114 <UART_SetConfig+0x118>
 8005112:	e065      	b.n	80051e0 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8005114:	231b      	movs	r3, #27
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b08      	cmp	r3, #8
 800511c:	d015      	beq.n	800514a <UART_SetConfig+0x14e>
 800511e:	dc18      	bgt.n	8005152 <UART_SetConfig+0x156>
 8005120:	2b04      	cmp	r3, #4
 8005122:	d00d      	beq.n	8005140 <UART_SetConfig+0x144>
 8005124:	dc15      	bgt.n	8005152 <UART_SetConfig+0x156>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <UART_SetConfig+0x134>
 800512a:	2b02      	cmp	r3, #2
 800512c:	d005      	beq.n	800513a <UART_SetConfig+0x13e>
 800512e:	e010      	b.n	8005152 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005130:	f7fe fad4 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8005134:	0003      	movs	r3, r0
 8005136:	617b      	str	r3, [r7, #20]
        break;
 8005138:	e012      	b.n	8005160 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800513a:	4b63      	ldr	r3, [pc, #396]	; (80052c8 <UART_SetConfig+0x2cc>)
 800513c:	617b      	str	r3, [r7, #20]
        break;
 800513e:	e00f      	b.n	8005160 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005140:	f7fe fa40 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8005144:	0003      	movs	r3, r0
 8005146:	617b      	str	r3, [r7, #20]
        break;
 8005148:	e00a      	b.n	8005160 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	617b      	str	r3, [r7, #20]
        break;
 8005150:	e006      	b.n	8005160 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005156:	231a      	movs	r3, #26
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	2201      	movs	r2, #1
 800515c:	701a      	strb	r2, [r3, #0]
        break;
 800515e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d100      	bne.n	8005168 <UART_SetConfig+0x16c>
 8005166:	e08d      	b.n	8005284 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800516c:	4b57      	ldr	r3, [pc, #348]	; (80052cc <UART_SetConfig+0x2d0>)
 800516e:	0052      	lsls	r2, r2, #1
 8005170:	5ad3      	ldrh	r3, [r2, r3]
 8005172:	0019      	movs	r1, r3
 8005174:	6978      	ldr	r0, [r7, #20]
 8005176:	f7fa ffc3 	bl	8000100 <__udivsi3>
 800517a:	0003      	movs	r3, r0
 800517c:	005a      	lsls	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	18d2      	adds	r2, r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	0019      	movs	r1, r3
 800518c:	0010      	movs	r0, r2
 800518e:	f7fa ffb7 	bl	8000100 <__udivsi3>
 8005192:	0003      	movs	r3, r0
 8005194:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b0f      	cmp	r3, #15
 800519a:	d91c      	bls.n	80051d6 <UART_SetConfig+0x1da>
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	2380      	movs	r3, #128	; 0x80
 80051a0:	025b      	lsls	r3, r3, #9
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d217      	bcs.n	80051d6 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	200e      	movs	r0, #14
 80051ac:	183b      	adds	r3, r7, r0
 80051ae:	210f      	movs	r1, #15
 80051b0:	438a      	bics	r2, r1
 80051b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2207      	movs	r2, #7
 80051bc:	4013      	ands	r3, r2
 80051be:	b299      	uxth	r1, r3
 80051c0:	183b      	adds	r3, r7, r0
 80051c2:	183a      	adds	r2, r7, r0
 80051c4:	8812      	ldrh	r2, [r2, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	183a      	adds	r2, r7, r0
 80051d0:	8812      	ldrh	r2, [r2, #0]
 80051d2:	60da      	str	r2, [r3, #12]
 80051d4:	e056      	b.n	8005284 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80051d6:	231a      	movs	r3, #26
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	2201      	movs	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e051      	b.n	8005284 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051e0:	231b      	movs	r3, #27
 80051e2:	18fb      	adds	r3, r7, r3
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d015      	beq.n	8005216 <UART_SetConfig+0x21a>
 80051ea:	dc18      	bgt.n	800521e <UART_SetConfig+0x222>
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d00d      	beq.n	800520c <UART_SetConfig+0x210>
 80051f0:	dc15      	bgt.n	800521e <UART_SetConfig+0x222>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <UART_SetConfig+0x200>
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d005      	beq.n	8005206 <UART_SetConfig+0x20a>
 80051fa:	e010      	b.n	800521e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fe fa6e 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8005200:	0003      	movs	r3, r0
 8005202:	617b      	str	r3, [r7, #20]
        break;
 8005204:	e012      	b.n	800522c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005206:	4b30      	ldr	r3, [pc, #192]	; (80052c8 <UART_SetConfig+0x2cc>)
 8005208:	617b      	str	r3, [r7, #20]
        break;
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520c:	f7fe f9da 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8005210:	0003      	movs	r3, r0
 8005212:	617b      	str	r3, [r7, #20]
        break;
 8005214:	e00a      	b.n	800522c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	617b      	str	r3, [r7, #20]
        break;
 800521c:	e006      	b.n	800522c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005222:	231a      	movs	r3, #26
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	2201      	movs	r2, #1
 8005228:	701a      	strb	r2, [r3, #0]
        break;
 800522a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d028      	beq.n	8005284 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005236:	4b25      	ldr	r3, [pc, #148]	; (80052cc <UART_SetConfig+0x2d0>)
 8005238:	0052      	lsls	r2, r2, #1
 800523a:	5ad3      	ldrh	r3, [r2, r3]
 800523c:	0019      	movs	r1, r3
 800523e:	6978      	ldr	r0, [r7, #20]
 8005240:	f7fa ff5e 	bl	8000100 <__udivsi3>
 8005244:	0003      	movs	r3, r0
 8005246:	001a      	movs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	18d2      	adds	r2, r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	0019      	movs	r1, r3
 8005256:	0010      	movs	r0, r2
 8005258:	f7fa ff52 	bl	8000100 <__udivsi3>
 800525c:	0003      	movs	r3, r0
 800525e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	d90a      	bls.n	800527c <UART_SetConfig+0x280>
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	025b      	lsls	r3, r3, #9
 800526c:	429a      	cmp	r2, r3
 800526e:	d205      	bcs.n	800527c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	e003      	b.n	8005284 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800527c:	231a      	movs	r3, #26
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	226a      	movs	r2, #106	; 0x6a
 8005288:	2101      	movs	r1, #1
 800528a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2268      	movs	r2, #104	; 0x68
 8005290:	2101      	movs	r1, #1
 8005292:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80052a0:	231a      	movs	r3, #26
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	781b      	ldrb	r3, [r3, #0]
}
 80052a6:	0018      	movs	r0, r3
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b008      	add	sp, #32
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	cfff69f3 	.word	0xcfff69f3
 80052b4:	ffffcfff 	.word	0xffffcfff
 80052b8:	11fff4ff 	.word	0x11fff4ff
 80052bc:	40013800 	.word	0x40013800
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40004400 	.word	0x40004400
 80052c8:	00f42400 	.word	0x00f42400
 80052cc:	08005e54 	.word	0x08005e54

080052d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	2208      	movs	r2, #8
 80052de:	4013      	ands	r3, r2
 80052e0:	d00b      	beq.n	80052fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a4a      	ldr	r2, [pc, #296]	; (8005414 <UART_AdvFeatureConfig+0x144>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	0019      	movs	r1, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	2201      	movs	r2, #1
 8005300:	4013      	ands	r3, r2
 8005302:	d00b      	beq.n	800531c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	4a43      	ldr	r2, [pc, #268]	; (8005418 <UART_AdvFeatureConfig+0x148>)
 800530c:	4013      	ands	r3, r2
 800530e:	0019      	movs	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	2202      	movs	r2, #2
 8005322:	4013      	ands	r3, r2
 8005324:	d00b      	beq.n	800533e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a3b      	ldr	r2, [pc, #236]	; (800541c <UART_AdvFeatureConfig+0x14c>)
 800532e:	4013      	ands	r3, r2
 8005330:	0019      	movs	r1, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	2204      	movs	r2, #4
 8005344:	4013      	ands	r3, r2
 8005346:	d00b      	beq.n	8005360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	4a34      	ldr	r2, [pc, #208]	; (8005420 <UART_AdvFeatureConfig+0x150>)
 8005350:	4013      	ands	r3, r2
 8005352:	0019      	movs	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	2210      	movs	r2, #16
 8005366:	4013      	ands	r3, r2
 8005368:	d00b      	beq.n	8005382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4a2c      	ldr	r2, [pc, #176]	; (8005424 <UART_AdvFeatureConfig+0x154>)
 8005372:	4013      	ands	r3, r2
 8005374:	0019      	movs	r1, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	2220      	movs	r2, #32
 8005388:	4013      	ands	r3, r2
 800538a:	d00b      	beq.n	80053a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	4a25      	ldr	r2, [pc, #148]	; (8005428 <UART_AdvFeatureConfig+0x158>)
 8005394:	4013      	ands	r3, r2
 8005396:	0019      	movs	r1, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	2240      	movs	r2, #64	; 0x40
 80053aa:	4013      	ands	r3, r2
 80053ac:	d01d      	beq.n	80053ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4a1d      	ldr	r2, [pc, #116]	; (800542c <UART_AdvFeatureConfig+0x15c>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	0019      	movs	r1, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	035b      	lsls	r3, r3, #13
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d10b      	bne.n	80053ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4a15      	ldr	r2, [pc, #84]	; (8005430 <UART_AdvFeatureConfig+0x160>)
 80053da:	4013      	ands	r3, r2
 80053dc:	0019      	movs	r1, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	2280      	movs	r2, #128	; 0x80
 80053f0:	4013      	ands	r3, r2
 80053f2:	d00b      	beq.n	800540c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <UART_AdvFeatureConfig+0x164>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	0019      	movs	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
  }
}
 800540c:	46c0      	nop			; (mov r8, r8)
 800540e:	46bd      	mov	sp, r7
 8005410:	b002      	add	sp, #8
 8005412:	bd80      	pop	{r7, pc}
 8005414:	ffff7fff 	.word	0xffff7fff
 8005418:	fffdffff 	.word	0xfffdffff
 800541c:	fffeffff 	.word	0xfffeffff
 8005420:	fffbffff 	.word	0xfffbffff
 8005424:	ffffefff 	.word	0xffffefff
 8005428:	ffffdfff 	.word	0xffffdfff
 800542c:	ffefffff 	.word	0xffefffff
 8005430:	ff9fffff 	.word	0xff9fffff
 8005434:	fff7ffff 	.word	0xfff7ffff

08005438 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b092      	sub	sp, #72	; 0x48
 800543c:	af02      	add	r7, sp, #8
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2290      	movs	r2, #144	; 0x90
 8005444:	2100      	movs	r1, #0
 8005446:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005448:	f7fc ff5c 	bl	8002304 <HAL_GetTick>
 800544c:	0003      	movs	r3, r0
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2208      	movs	r2, #8
 8005458:	4013      	ands	r3, r2
 800545a:	2b08      	cmp	r3, #8
 800545c:	d12d      	bne.n	80054ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800545e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005460:	2280      	movs	r2, #128	; 0x80
 8005462:	0391      	lsls	r1, r2, #14
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	4a47      	ldr	r2, [pc, #284]	; (8005584 <UART_CheckIdleState+0x14c>)
 8005468:	9200      	str	r2, [sp, #0]
 800546a:	2200      	movs	r2, #0
 800546c:	f000 f88e 	bl	800558c <UART_WaitOnFlagUntilTimeout>
 8005470:	1e03      	subs	r3, r0, #0
 8005472:	d022      	beq.n	80054ba <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005474:	f3ef 8310 	mrs	r3, PRIMASK
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800547c:	63bb      	str	r3, [r7, #56]	; 0x38
 800547e:	2301      	movs	r3, #1
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	f383 8810 	msr	PRIMASK, r3
}
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2180      	movs	r1, #128	; 0x80
 8005496:	438a      	bics	r2, r1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	f383 8810 	msr	PRIMASK, r3
}
 80054a4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2288      	movs	r2, #136	; 0x88
 80054aa:	2120      	movs	r1, #32
 80054ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2284      	movs	r2, #132	; 0x84
 80054b2:	2100      	movs	r1, #0
 80054b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e060      	b.n	800557c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2204      	movs	r2, #4
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d146      	bne.n	8005556 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ca:	2280      	movs	r2, #128	; 0x80
 80054cc:	03d1      	lsls	r1, r2, #15
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <UART_CheckIdleState+0x14c>)
 80054d2:	9200      	str	r2, [sp, #0]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f000 f859 	bl	800558c <UART_WaitOnFlagUntilTimeout>
 80054da:	1e03      	subs	r3, r0, #0
 80054dc:	d03b      	beq.n	8005556 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054de:	f3ef 8310 	mrs	r3, PRIMASK
 80054e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80054e4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
 80054e8:	2301      	movs	r3, #1
 80054ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f383 8810 	msr	PRIMASK, r3
}
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4922      	ldr	r1, [pc, #136]	; (8005588 <UART_CheckIdleState+0x150>)
 8005500:	400a      	ands	r2, r1
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005506:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f383 8810 	msr	PRIMASK, r3
}
 800550e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005510:	f3ef 8310 	mrs	r3, PRIMASK
 8005514:	61bb      	str	r3, [r7, #24]
  return(result);
 8005516:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005518:	633b      	str	r3, [r7, #48]	; 0x30
 800551a:	2301      	movs	r3, #1
 800551c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f383 8810 	msr	PRIMASK, r3
}
 8005524:	46c0      	nop			; (mov r8, r8)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2101      	movs	r1, #1
 8005532:	438a      	bics	r2, r1
 8005534:	609a      	str	r2, [r3, #8]
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f383 8810 	msr	PRIMASK, r3
}
 8005540:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	228c      	movs	r2, #140	; 0x8c
 8005546:	2120      	movs	r1, #32
 8005548:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2284      	movs	r2, #132	; 0x84
 800554e:	2100      	movs	r1, #0
 8005550:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e012      	b.n	800557c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2288      	movs	r2, #136	; 0x88
 800555a:	2120      	movs	r1, #32
 800555c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	228c      	movs	r2, #140	; 0x8c
 8005562:	2120      	movs	r1, #32
 8005564:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2284      	movs	r2, #132	; 0x84
 8005576:	2100      	movs	r1, #0
 8005578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	b010      	add	sp, #64	; 0x40
 8005582:	bd80      	pop	{r7, pc}
 8005584:	01ffffff 	.word	0x01ffffff
 8005588:	fffffedf 	.word	0xfffffedf

0800558c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	603b      	str	r3, [r7, #0]
 8005598:	1dfb      	adds	r3, r7, #7
 800559a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800559c:	e051      	b.n	8005642 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	3301      	adds	r3, #1
 80055a2:	d04e      	beq.n	8005642 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a4:	f7fc feae 	bl	8002304 <HAL_GetTick>
 80055a8:	0002      	movs	r2, r0
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e051      	b.n	8005662 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2204      	movs	r2, #4
 80055c6:	4013      	ands	r3, r2
 80055c8:	d03b      	beq.n	8005642 <UART_WaitOnFlagUntilTimeout+0xb6>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b80      	cmp	r3, #128	; 0x80
 80055ce:	d038      	beq.n	8005642 <UART_WaitOnFlagUntilTimeout+0xb6>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d035      	beq.n	8005642 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	2208      	movs	r2, #8
 80055de:	4013      	ands	r3, r2
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d111      	bne.n	8005608 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2208      	movs	r2, #8
 80055ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	0018      	movs	r0, r3
 80055f0:	f000 f922 	bl	8005838 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2290      	movs	r2, #144	; 0x90
 80055f8:	2108      	movs	r1, #8
 80055fa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2284      	movs	r2, #132	; 0x84
 8005600:	2100      	movs	r1, #0
 8005602:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e02c      	b.n	8005662 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69da      	ldr	r2, [r3, #28]
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	401a      	ands	r2, r3
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	429a      	cmp	r2, r3
 800561a:	d112      	bne.n	8005642 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2280      	movs	r2, #128	; 0x80
 8005622:	0112      	lsls	r2, r2, #4
 8005624:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	0018      	movs	r0, r3
 800562a:	f000 f905 	bl	8005838 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2290      	movs	r2, #144	; 0x90
 8005632:	2120      	movs	r1, #32
 8005634:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2284      	movs	r2, #132	; 0x84
 800563a:	2100      	movs	r1, #0
 800563c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e00f      	b.n	8005662 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	4013      	ands	r3, r2
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	425a      	negs	r2, r3
 8005652:	4153      	adcs	r3, r2
 8005654:	b2db      	uxtb	r3, r3
 8005656:	001a      	movs	r2, r3
 8005658:	1dfb      	adds	r3, r7, #7
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d09e      	beq.n	800559e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	0018      	movs	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	b004      	add	sp, #16
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b090      	sub	sp, #64	; 0x40
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	1dbb      	adds	r3, r7, #6
 8005678:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	1dba      	adds	r2, r7, #6
 8005684:	215c      	movs	r1, #92	; 0x5c
 8005686:	8812      	ldrh	r2, [r2, #0]
 8005688:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2290      	movs	r2, #144	; 0x90
 800568e:	2100      	movs	r1, #0
 8005690:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	228c      	movs	r2, #140	; 0x8c
 8005696:	2122      	movs	r1, #34	; 0x22
 8005698:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2280      	movs	r2, #128	; 0x80
 800569e:	589b      	ldr	r3, [r3, r2]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d02d      	beq.n	8005700 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2280      	movs	r2, #128	; 0x80
 80056a8:	589b      	ldr	r3, [r3, r2]
 80056aa:	4a40      	ldr	r2, [pc, #256]	; (80057ac <UART_Start_Receive_DMA+0x140>)
 80056ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2280      	movs	r2, #128	; 0x80
 80056b2:	589b      	ldr	r3, [r3, r2]
 80056b4:	4a3e      	ldr	r2, [pc, #248]	; (80057b0 <UART_Start_Receive_DMA+0x144>)
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	589b      	ldr	r3, [r3, r2]
 80056be:	4a3d      	ldr	r2, [pc, #244]	; (80057b4 <UART_Start_Receive_DMA+0x148>)
 80056c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	589b      	ldr	r3, [r3, r2]
 80056c8:	2200      	movs	r2, #0
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2280      	movs	r2, #128	; 0x80
 80056d0:	5898      	ldr	r0, [r3, r2]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3324      	adds	r3, #36	; 0x24
 80056d8:	0019      	movs	r1, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056de:	001a      	movs	r2, r3
 80056e0:	1dbb      	adds	r3, r7, #6
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	f7fc ffa4 	bl	8002630 <HAL_DMA_Start_IT>
 80056e8:	1e03      	subs	r3, r0, #0
 80056ea:	d009      	beq.n	8005700 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2290      	movs	r2, #144	; 0x90
 80056f0:	2110      	movs	r1, #16
 80056f2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	228c      	movs	r2, #140	; 0x8c
 80056f8:	2120      	movs	r1, #32
 80056fa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e050      	b.n	80057a2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d019      	beq.n	800573c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005708:	f3ef 8310 	mrs	r3, PRIMASK
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005712:	2301      	movs	r3, #1
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	f383 8810 	msr	PRIMASK, r3
}
 800571c:	46c0      	nop			; (mov r8, r8)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	0049      	lsls	r1, r1, #1
 800572c:	430a      	orrs	r2, r1
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005732:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	f383 8810 	msr	PRIMASK, r3
}
 800573a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573c:	f3ef 8310 	mrs	r3, PRIMASK
 8005740:	613b      	str	r3, [r7, #16]
  return(result);
 8005742:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005744:	63bb      	str	r3, [r7, #56]	; 0x38
 8005746:	2301      	movs	r3, #1
 8005748:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f383 8810 	msr	PRIMASK, r3
}
 8005750:	46c0      	nop			; (mov r8, r8)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2101      	movs	r1, #1
 800575e:	430a      	orrs	r2, r1
 8005760:	609a      	str	r2, [r3, #8]
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	f383 8810 	msr	PRIMASK, r3
}
 800576c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800576e:	f3ef 8310 	mrs	r3, PRIMASK
 8005772:	61fb      	str	r3, [r7, #28]
  return(result);
 8005774:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
 8005778:	2301      	movs	r3, #1
 800577a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	f383 8810 	msr	PRIMASK, r3
}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2140      	movs	r1, #64	; 0x40
 8005790:	430a      	orrs	r2, r1
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	f383 8810 	msr	PRIMASK, r3
}
 800579e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b010      	add	sp, #64	; 0x40
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	08005905 	.word	0x08005905
 80057b0:	08005a35 	.word	0x08005a35
 80057b4:	08005a77 	.word	0x08005a77

080057b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	; 0x28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c0:	f3ef 8310 	mrs	r3, PRIMASK
 80057c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80057c6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ca:	2301      	movs	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f383 8810 	msr	PRIMASK, r3
}
 80057d4:	46c0      	nop			; (mov r8, r8)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	21c0      	movs	r1, #192	; 0xc0
 80057e2:	438a      	bics	r2, r1
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f383 8810 	msr	PRIMASK, r3
}
 80057f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f2:	f3ef 8310 	mrs	r3, PRIMASK
 80057f6:	617b      	str	r3, [r7, #20]
  return(result);
 80057f8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80057fa:	623b      	str	r3, [r7, #32]
 80057fc:	2301      	movs	r3, #1
 80057fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f383 8810 	msr	PRIMASK, r3
}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4908      	ldr	r1, [pc, #32]	; (8005834 <UART_EndTxTransfer+0x7c>)
 8005814:	400a      	ands	r2, r1
 8005816:	609a      	str	r2, [r3, #8]
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f383 8810 	msr	PRIMASK, r3
}
 8005822:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2288      	movs	r2, #136	; 0x88
 8005828:	2120      	movs	r1, #32
 800582a:	5099      	str	r1, [r3, r2]
}
 800582c:	46c0      	nop			; (mov r8, r8)
 800582e:	46bd      	mov	sp, r7
 8005830:	b00a      	add	sp, #40	; 0x28
 8005832:	bd80      	pop	{r7, pc}
 8005834:	ff7fffff 	.word	0xff7fffff

08005838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	; 0x38
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005840:	f3ef 8310 	mrs	r3, PRIMASK
 8005844:	617b      	str	r3, [r7, #20]
  return(result);
 8005846:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
 800584a:	2301      	movs	r3, #1
 800584c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f383 8810 	msr	PRIMASK, r3
}
 8005854:	46c0      	nop			; (mov r8, r8)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4926      	ldr	r1, [pc, #152]	; (80058fc <UART_EndRxTransfer+0xc4>)
 8005862:	400a      	ands	r2, r1
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	f383 8810 	msr	PRIMASK, r3
}
 8005870:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005872:	f3ef 8310 	mrs	r3, PRIMASK
 8005876:	623b      	str	r3, [r7, #32]
  return(result);
 8005878:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800587a:	633b      	str	r3, [r7, #48]	; 0x30
 800587c:	2301      	movs	r3, #1
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	f383 8810 	msr	PRIMASK, r3
}
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	491b      	ldr	r1, [pc, #108]	; (8005900 <UART_EndRxTransfer+0xc8>)
 8005894:	400a      	ands	r2, r1
 8005896:	609a      	str	r2, [r3, #8]
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	f383 8810 	msr	PRIMASK, r3
}
 80058a2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d118      	bne.n	80058de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ac:	f3ef 8310 	mrs	r3, PRIMASK
 80058b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80058b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b6:	2301      	movs	r3, #1
 80058b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f383 8810 	msr	PRIMASK, r3
}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2110      	movs	r1, #16
 80058ce:	438a      	bics	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f383 8810 	msr	PRIMASK, r3
}
 80058dc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	228c      	movs	r2, #140	; 0x8c
 80058e2:	2120      	movs	r1, #32
 80058e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b00e      	add	sp, #56	; 0x38
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	fffffedf 	.word	0xfffffedf
 8005900:	effffffe 	.word	0xeffffffe

08005904 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b094      	sub	sp, #80	; 0x50
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2220      	movs	r2, #32
 800591a:	4013      	ands	r3, r2
 800591c:	d16f      	bne.n	80059fe <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800591e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005920:	225e      	movs	r2, #94	; 0x5e
 8005922:	2100      	movs	r1, #0
 8005924:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005926:	f3ef 8310 	mrs	r3, PRIMASK
 800592a:	61bb      	str	r3, [r7, #24]
  return(result);
 800592c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800592e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005930:	2301      	movs	r3, #1
 8005932:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f383 8810 	msr	PRIMASK, r3
}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	493a      	ldr	r1, [pc, #232]	; (8005a30 <UART_DMAReceiveCplt+0x12c>)
 8005948:	400a      	ands	r2, r1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800594e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	f383 8810 	msr	PRIMASK, r3
}
 8005956:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005958:	f3ef 8310 	mrs	r3, PRIMASK
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	647b      	str	r3, [r7, #68]	; 0x44
 8005962:	2301      	movs	r3, #1
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	f383 8810 	msr	PRIMASK, r3
}
 800596c:	46c0      	nop			; (mov r8, r8)
 800596e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2101      	movs	r1, #1
 800597a:	438a      	bics	r2, r1
 800597c:	609a      	str	r2, [r3, #8]
 800597e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	f383 8810 	msr	PRIMASK, r3
}
 8005988:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598a:	f3ef 8310 	mrs	r3, PRIMASK
 800598e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005992:	643b      	str	r3, [r7, #64]	; 0x40
 8005994:	2301      	movs	r3, #1
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599a:	f383 8810 	msr	PRIMASK, r3
}
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2140      	movs	r1, #64	; 0x40
 80059ac:	438a      	bics	r2, r1
 80059ae:	609a      	str	r2, [r3, #8]
 80059b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	f383 8810 	msr	PRIMASK, r3
}
 80059ba:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059be:	228c      	movs	r2, #140	; 0x8c
 80059c0:	2120      	movs	r1, #32
 80059c2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d118      	bne.n	80059fe <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059cc:	f3ef 8310 	mrs	r3, PRIMASK
 80059d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80059d2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d6:	2301      	movs	r3, #1
 80059d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f383 8810 	msr	PRIMASK, r3
}
 80059e0:	46c0      	nop			; (mov r8, r8)
 80059e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2110      	movs	r1, #16
 80059ee:	438a      	bics	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a00:	2200      	movs	r2, #0
 8005a02:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d108      	bne.n	8005a1e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0e:	225c      	movs	r2, #92	; 0x5c
 8005a10:	5a9a      	ldrh	r2, [r3, r2]
 8005a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a14:	0011      	movs	r1, r2
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7ff fae5 	bl	8004fe6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a1c:	e003      	b.n	8005a26 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a20:	0018      	movs	r0, r3
 8005a22:	f7ff fac8 	bl	8004fb6 <HAL_UART_RxCpltCallback>
}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	b014      	add	sp, #80	; 0x50
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	fffffeff 	.word	0xfffffeff

08005a34 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10a      	bne.n	8005a66 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	225c      	movs	r2, #92	; 0x5c
 8005a54:	5a9b      	ldrh	r3, [r3, r2]
 8005a56:	085b      	lsrs	r3, r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	0011      	movs	r1, r2
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f7ff fac1 	bl	8004fe6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a64:	e003      	b.n	8005a6e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	0018      	movs	r0, r3
 8005a6a:	f7ff faac 	bl	8004fc6 <HAL_UART_RxHalfCpltCallback>
}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b004      	add	sp, #16
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b086      	sub	sp, #24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2288      	movs	r2, #136	; 0x88
 8005a88:	589b      	ldr	r3, [r3, r2]
 8005a8a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	228c      	movs	r2, #140	; 0x8c
 8005a90:	589b      	ldr	r3, [r3, r2]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	2b80      	cmp	r3, #128	; 0x80
 8005aa0:	d10a      	bne.n	8005ab8 <UART_DMAError+0x42>
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b21      	cmp	r3, #33	; 0x21
 8005aa6:	d107      	bne.n	8005ab8 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2256      	movs	r2, #86	; 0x56
 8005aac:	2100      	movs	r1, #0
 8005aae:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f7ff fe80 	bl	80057b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2240      	movs	r2, #64	; 0x40
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b40      	cmp	r3, #64	; 0x40
 8005ac4:	d10a      	bne.n	8005adc <UART_DMAError+0x66>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b22      	cmp	r3, #34	; 0x22
 8005aca:	d107      	bne.n	8005adc <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	225e      	movs	r2, #94	; 0x5e
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f7ff feae 	bl	8005838 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2290      	movs	r2, #144	; 0x90
 8005ae0:	589b      	ldr	r3, [r3, r2]
 8005ae2:	2210      	movs	r2, #16
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2190      	movs	r1, #144	; 0x90
 8005aea:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	0018      	movs	r0, r3
 8005af0:	f7ff fa71 	bl	8004fd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005af4:	46c0      	nop			; (mov r8, r8)
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b006      	add	sp, #24
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2284      	movs	r2, #132	; 0x84
 8005b08:	5c9b      	ldrb	r3, [r3, r2]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e027      	b.n	8005b62 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2284      	movs	r2, #132	; 0x84
 8005b16:	2101      	movs	r1, #1
 8005b18:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2288      	movs	r2, #136	; 0x88
 8005b1e:	2124      	movs	r1, #36	; 0x24
 8005b20:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2101      	movs	r1, #1
 8005b36:	438a      	bics	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4a0b      	ldr	r2, [pc, #44]	; (8005b6c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2288      	movs	r2, #136	; 0x88
 8005b54:	2120      	movs	r1, #32
 8005b56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2284      	movs	r2, #132	; 0x84
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	0018      	movs	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b004      	add	sp, #16
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	dfffffff 	.word	0xdfffffff

08005b70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2284      	movs	r2, #132	; 0x84
 8005b7e:	5c9b      	ldrb	r3, [r3, r2]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e02e      	b.n	8005be6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2284      	movs	r2, #132	; 0x84
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2288      	movs	r2, #136	; 0x88
 8005b94:	2124      	movs	r1, #36	; 0x24
 8005b96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2101      	movs	r1, #1
 8005bac:	438a      	bics	r2, r1
 8005bae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	08d9      	lsrs	r1, r3, #3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f000 f854 	bl	8005c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2288      	movs	r2, #136	; 0x88
 8005bd8:	2120      	movs	r1, #32
 8005bda:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2284      	movs	r2, #132	; 0x84
 8005be0:	2100      	movs	r1, #0
 8005be2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	0018      	movs	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b004      	add	sp, #16
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2284      	movs	r2, #132	; 0x84
 8005bfe:	5c9b      	ldrb	r3, [r3, r2]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e02f      	b.n	8005c68 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2284      	movs	r2, #132	; 0x84
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2288      	movs	r2, #136	; 0x88
 8005c14:	2124      	movs	r1, #36	; 0x24
 8005c16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	438a      	bics	r2, r1
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	4a0e      	ldr	r2, [pc, #56]	; (8005c70 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	0019      	movs	r1, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f000 f813 	bl	8005c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2288      	movs	r2, #136	; 0x88
 8005c5a:	2120      	movs	r1, #32
 8005c5c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2284      	movs	r2, #132	; 0x84
 8005c62:	2100      	movs	r1, #0
 8005c64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	0018      	movs	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	b004      	add	sp, #16
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	f1ffffff 	.word	0xf1ffffff

08005c74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d108      	bne.n	8005c96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	226a      	movs	r2, #106	; 0x6a
 8005c88:	2101      	movs	r1, #1
 8005c8a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2268      	movs	r2, #104	; 0x68
 8005c90:	2101      	movs	r1, #1
 8005c92:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c94:	e043      	b.n	8005d1e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c96:	260f      	movs	r6, #15
 8005c98:	19bb      	adds	r3, r7, r6
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c9e:	200e      	movs	r0, #14
 8005ca0:	183b      	adds	r3, r7, r0
 8005ca2:	2208      	movs	r2, #8
 8005ca4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	0e5b      	lsrs	r3, r3, #25
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	240d      	movs	r4, #13
 8005cb2:	193b      	adds	r3, r7, r4
 8005cb4:	2107      	movs	r1, #7
 8005cb6:	400a      	ands	r2, r1
 8005cb8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	0f5b      	lsrs	r3, r3, #29
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	250c      	movs	r5, #12
 8005cc6:	197b      	adds	r3, r7, r5
 8005cc8:	2107      	movs	r1, #7
 8005cca:	400a      	ands	r2, r1
 8005ccc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cce:	183b      	adds	r3, r7, r0
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	197a      	adds	r2, r7, r5
 8005cd4:	7812      	ldrb	r2, [r2, #0]
 8005cd6:	4914      	ldr	r1, [pc, #80]	; (8005d28 <UARTEx_SetNbDataToProcess+0xb4>)
 8005cd8:	5c8a      	ldrb	r2, [r1, r2]
 8005cda:	435a      	muls	r2, r3
 8005cdc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cde:	197b      	adds	r3, r7, r5
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	4a12      	ldr	r2, [pc, #72]	; (8005d2c <UARTEx_SetNbDataToProcess+0xb8>)
 8005ce4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	f7fa fa94 	bl	8000214 <__divsi3>
 8005cec:	0003      	movs	r3, r0
 8005cee:	b299      	uxth	r1, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	226a      	movs	r2, #106	; 0x6a
 8005cf4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cf6:	19bb      	adds	r3, r7, r6
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	193a      	adds	r2, r7, r4
 8005cfc:	7812      	ldrb	r2, [r2, #0]
 8005cfe:	490a      	ldr	r1, [pc, #40]	; (8005d28 <UARTEx_SetNbDataToProcess+0xb4>)
 8005d00:	5c8a      	ldrb	r2, [r1, r2]
 8005d02:	435a      	muls	r2, r3
 8005d04:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d06:	193b      	adds	r3, r7, r4
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <UARTEx_SetNbDataToProcess+0xb8>)
 8005d0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d0e:	0019      	movs	r1, r3
 8005d10:	f7fa fa80 	bl	8000214 <__divsi3>
 8005d14:	0003      	movs	r3, r0
 8005d16:	b299      	uxth	r1, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2268      	movs	r2, #104	; 0x68
 8005d1c:	5299      	strh	r1, [r3, r2]
}
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b005      	add	sp, #20
 8005d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	08005e6c 	.word	0x08005e6c
 8005d2c:	08005e74 	.word	0x08005e74

08005d30 <__libc_init_array>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	2600      	movs	r6, #0
 8005d34:	4d0c      	ldr	r5, [pc, #48]	; (8005d68 <__libc_init_array+0x38>)
 8005d36:	4c0d      	ldr	r4, [pc, #52]	; (8005d6c <__libc_init_array+0x3c>)
 8005d38:	1b64      	subs	r4, r4, r5
 8005d3a:	10a4      	asrs	r4, r4, #2
 8005d3c:	42a6      	cmp	r6, r4
 8005d3e:	d109      	bne.n	8005d54 <__libc_init_array+0x24>
 8005d40:	2600      	movs	r6, #0
 8005d42:	f000 f821 	bl	8005d88 <_init>
 8005d46:	4d0a      	ldr	r5, [pc, #40]	; (8005d70 <__libc_init_array+0x40>)
 8005d48:	4c0a      	ldr	r4, [pc, #40]	; (8005d74 <__libc_init_array+0x44>)
 8005d4a:	1b64      	subs	r4, r4, r5
 8005d4c:	10a4      	asrs	r4, r4, #2
 8005d4e:	42a6      	cmp	r6, r4
 8005d50:	d105      	bne.n	8005d5e <__libc_init_array+0x2e>
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	00b3      	lsls	r3, r6, #2
 8005d56:	58eb      	ldr	r3, [r5, r3]
 8005d58:	4798      	blx	r3
 8005d5a:	3601      	adds	r6, #1
 8005d5c:	e7ee      	b.n	8005d3c <__libc_init_array+0xc>
 8005d5e:	00b3      	lsls	r3, r6, #2
 8005d60:	58eb      	ldr	r3, [r5, r3]
 8005d62:	4798      	blx	r3
 8005d64:	3601      	adds	r6, #1
 8005d66:	e7f2      	b.n	8005d4e <__libc_init_array+0x1e>
 8005d68:	08005e7c 	.word	0x08005e7c
 8005d6c:	08005e7c 	.word	0x08005e7c
 8005d70:	08005e7c 	.word	0x08005e7c
 8005d74:	08005e80 	.word	0x08005e80

08005d78 <memset>:
 8005d78:	0003      	movs	r3, r0
 8005d7a:	1882      	adds	r2, r0, r2
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d100      	bne.n	8005d82 <memset+0xa>
 8005d80:	4770      	bx	lr
 8005d82:	7019      	strb	r1, [r3, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	e7f9      	b.n	8005d7c <memset+0x4>

08005d88 <_init>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8e:	bc08      	pop	{r3}
 8005d90:	469e      	mov	lr, r3
 8005d92:	4770      	bx	lr

08005d94 <_fini>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr
