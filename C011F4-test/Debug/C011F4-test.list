
C011F4-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002cb8  08002cb8  00012cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d4c  08002d4c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002d4c  08002d4c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d4c  08002d4c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000020  08002d74  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002d74  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009329  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175e  00000000  00000000  00029371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000122b6  00000000  00000000  0002be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae3f  00000000  00000000  0003e0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000745d1  00000000  00000000  00048f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd4fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000240c  00000000  00000000  000bd550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ca0 	.word	0x08002ca0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08002ca0 	.word	0x08002ca0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fae1 	bl	80007ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f834 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f922 	bl	8000474 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f8fa 	bl	8000428 <MX_DMA_Init>
  MX_TIM3_Init();
 8000234:	f000 f86c 	bl	8000310 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_3, (uint32_t*)pwmlist1, sizeof (pwmlist1) / sizeof (uint16_t));
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <main+0x68>)
 800023a:	4814      	ldr	r0, [pc, #80]	; (800028c <main+0x6c>)
 800023c:	2305      	movs	r3, #5
 800023e:	2108      	movs	r1, #8
 8000240:	f001 fc28 	bl	8001a94 <HAL_TIM_PWM_Start_DMA>
  htim3.State = HAL_TIM_STATE_READY;
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <main+0x6c>)
 8000246:	223d      	movs	r2, #61	; 0x3d
 8000248:	2101      	movs	r1, #1
 800024a:	5499      	strb	r1, [r3, r2]
  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_4, (uint32_t*)pwmlist2, sizeof (pwmlist2) / sizeof (uint16_t));
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <main+0x70>)
 800024e:	480f      	ldr	r0, [pc, #60]	; (800028c <main+0x6c>)
 8000250:	2303      	movs	r3, #3
 8000252:	210c      	movs	r1, #12
 8000254:	f001 fc1e 	bl	8001a94 <HAL_TIM_PWM_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 8000258:	23a0      	movs	r3, #160	; 0xa0
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	2201      	movs	r2, #1
 800025e:	2108      	movs	r1, #8
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fffb 	bl	800125c <HAL_GPIO_WritePin>
   	HAL_Delay(200);
 8000266:	20c8      	movs	r0, #200	; 0xc8
 8000268:	f000 fb3a 	bl	80008e0 <HAL_Delay>
   	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 800026c:	23a0      	movs	r3, #160	; 0xa0
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	2200      	movs	r2, #0
 8000272:	2108      	movs	r1, #8
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fff1 	bl	800125c <HAL_GPIO_WritePin>
   	HAL_Delay(300);
 800027a:	2396      	movs	r3, #150	; 0x96
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fb2e 	bl	80008e0 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 8000284:	e7e8      	b.n	8000258 <main+0x38>
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000000 	.word	0x20000000
 800028c:	2000003c 	.word	0x2000003c
 8000290:	2000000c 	.word	0x2000000c

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b08d      	sub	sp, #52	; 0x34
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	2414      	movs	r4, #20
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	231c      	movs	r3, #28
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f002 fcf3 	bl	8002c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	003b      	movs	r3, r7
 80002ac:	0018      	movs	r0, r3
 80002ae:	2314      	movs	r3, #20
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f002 fcec 	bl	8002c90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2201      	movs	r2, #1
 80002bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	0252      	lsls	r2, r2, #9
 80002c4:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 ffe5 	bl	8001298 <HAL_RCC_OscConfig>
 80002ce:	1e03      	subs	r3, r0, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80002d2:	f000 f91f 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	003b      	movs	r3, r7
 80002d8:	2207      	movs	r2, #7
 80002da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002dc:	003b      	movs	r3, r7
 80002de:	2201      	movs	r2, #1
 80002e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	003b      	movs	r3, r7
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002e8:	003b      	movs	r3, r7
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002ee:	003b      	movs	r3, r7
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f4:	003b      	movs	r3, r7
 80002f6:	2101      	movs	r1, #1
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 f9c7 	bl	800168c <HAL_RCC_ClockConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000302:	f000 f907 	bl	8000514 <Error_Handler>
  }
}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b00d      	add	sp, #52	; 0x34
 800030c:	bd90      	pop	{r4, r7, pc}
	...

08000310 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08e      	sub	sp, #56	; 0x38
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000316:	2328      	movs	r3, #40	; 0x28
 8000318:	18fb      	adds	r3, r7, r3
 800031a:	0018      	movs	r0, r3
 800031c:	2310      	movs	r3, #16
 800031e:	001a      	movs	r2, r3
 8000320:	2100      	movs	r1, #0
 8000322:	f002 fcb5 	bl	8002c90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000326:	231c      	movs	r3, #28
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	0018      	movs	r0, r3
 800032c:	230c      	movs	r3, #12
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f002 fcad 	bl	8002c90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000336:	003b      	movs	r3, r7
 8000338:	0018      	movs	r0, r3
 800033a:	231c      	movs	r3, #28
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f002 fca6 	bl	8002c90 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000344:	4b34      	ldr	r3, [pc, #208]	; (8000418 <MX_TIM3_Init+0x108>)
 8000346:	4a35      	ldr	r2, [pc, #212]	; (800041c <MX_TIM3_Init+0x10c>)
 8000348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12000-1;
 800034a:	4b33      	ldr	r3, [pc, #204]	; (8000418 <MX_TIM3_Init+0x108>)
 800034c:	4a34      	ldr	r2, [pc, #208]	; (8000420 <MX_TIM3_Init+0x110>)
 800034e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000350:	4b31      	ldr	r3, [pc, #196]	; (8000418 <MX_TIM3_Init+0x108>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000356:	4b30      	ldr	r3, [pc, #192]	; (8000418 <MX_TIM3_Init+0x108>)
 8000358:	4a32      	ldr	r2, [pc, #200]	; (8000424 <MX_TIM3_Init+0x114>)
 800035a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035c:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <MX_TIM3_Init+0x108>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000362:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <MX_TIM3_Init+0x108>)
 8000364:	2280      	movs	r2, #128	; 0x80
 8000366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000368:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <MX_TIM3_Init+0x108>)
 800036a:	0018      	movs	r0, r3
 800036c:	f001 fada 	bl	8001924 <HAL_TIM_Base_Init>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000374:	f000 f8ce 	bl	8000514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000378:	2128      	movs	r1, #40	; 0x28
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	0152      	lsls	r2, r2, #5
 8000380:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000382:	187a      	adds	r2, r7, r1
 8000384:	4b24      	ldr	r3, [pc, #144]	; (8000418 <MX_TIM3_Init+0x108>)
 8000386:	0011      	movs	r1, r2
 8000388:	0018      	movs	r0, r3
 800038a:	f001 fe71 	bl	8002070 <HAL_TIM_ConfigClockSource>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000392:	f000 f8bf 	bl	8000514 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000396:	4b20      	ldr	r3, [pc, #128]	; (8000418 <MX_TIM3_Init+0x108>)
 8000398:	0018      	movs	r0, r3
 800039a:	f001 fb1b 	bl	80019d4 <HAL_TIM_PWM_Init>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80003a2:	f000 f8b7 	bl	8000514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a6:	211c      	movs	r1, #28
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003b4:	187a      	adds	r2, r7, r1
 80003b6:	4b18      	ldr	r3, [pc, #96]	; (8000418 <MX_TIM3_Init+0x108>)
 80003b8:	0011      	movs	r1, r2
 80003ba:	0018      	movs	r0, r3
 80003bc:	f002 fbe2 	bl	8002b84 <HAL_TIMEx_MasterConfigSynchronization>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80003c4:	f000 f8a6 	bl	8000514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c8:	003b      	movs	r3, r7
 80003ca:	2260      	movs	r2, #96	; 0x60
 80003cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003ce:	003b      	movs	r3, r7
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003d4:	003b      	movs	r3, r7
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003da:	003b      	movs	r3, r7
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003e0:	0039      	movs	r1, r7
 80003e2:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <MX_TIM3_Init+0x108>)
 80003e4:	2208      	movs	r2, #8
 80003e6:	0018      	movs	r0, r3
 80003e8:	f001 fd42 	bl	8001e70 <HAL_TIM_PWM_ConfigChannel>
 80003ec:	1e03      	subs	r3, r0, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80003f0:	f000 f890 	bl	8000514 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003f4:	0039      	movs	r1, r7
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_TIM3_Init+0x108>)
 80003f8:	220c      	movs	r2, #12
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 fd38 	bl	8001e70 <HAL_TIM_PWM_ConfigChannel>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000404:	f000 f886 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <MX_TIM3_Init+0x108>)
 800040a:	0018      	movs	r0, r3
 800040c:	f000 f928 	bl	8000660 <HAL_TIM_MspPostInit>

}
 8000410:	46c0      	nop			; (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	b00e      	add	sp, #56	; 0x38
 8000416:	bd80      	pop	{r7, pc}
 8000418:	2000003c 	.word	0x2000003c
 800041c:	40000400 	.word	0x40000400
 8000420:	00002edf 	.word	0x00002edf
 8000424:	000003e7 	.word	0x000003e7

08000428 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <MX_DMA_Init+0x48>)
 8000430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_DMA_Init+0x48>)
 8000434:	2101      	movs	r1, #1
 8000436:	430a      	orrs	r2, r1
 8000438:	639a      	str	r2, [r3, #56]	; 0x38
 800043a:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <MX_DMA_Init+0x48>)
 800043c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800043e:	2201      	movs	r2, #1
 8000440:	4013      	ands	r3, r2
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2100      	movs	r1, #0
 800044a:	2009      	movs	r0, #9
 800044c:	f000 fb16 	bl	8000a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000450:	2009      	movs	r0, #9
 8000452:	f000 fb28 	bl	8000aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	2100      	movs	r1, #0
 800045a:	200a      	movs	r0, #10
 800045c:	f000 fb0e 	bl	8000a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000460:	200a      	movs	r0, #10
 8000462:	f000 fb20 	bl	8000aa6 <HAL_NVIC_EnableIRQ>

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40021000 	.word	0x40021000

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b089      	sub	sp, #36	; 0x24
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	240c      	movs	r4, #12
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2314      	movs	r3, #20
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f002 fc03 	bl	8002c90 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b21      	ldr	r3, [pc, #132]	; (8000510 <MX_GPIO_Init+0x9c>)
 800048c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <MX_GPIO_Init+0x9c>)
 8000490:	2102      	movs	r1, #2
 8000492:	430a      	orrs	r2, r1
 8000494:	635a      	str	r2, [r3, #52]	; 0x34
 8000496:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <MX_GPIO_Init+0x9c>)
 8000498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049a:	2202      	movs	r2, #2
 800049c:	4013      	ands	r3, r2
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a2:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_GPIO_Init+0x9c>)
 80004a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_GPIO_Init+0x9c>)
 80004a8:	2104      	movs	r1, #4
 80004aa:	430a      	orrs	r2, r1
 80004ac:	635a      	str	r2, [r3, #52]	; 0x34
 80004ae:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_GPIO_Init+0x9c>)
 80004b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b2:	2204      	movs	r2, #4
 80004b4:	4013      	ands	r3, r2
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <MX_GPIO_Init+0x9c>)
 80004bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_GPIO_Init+0x9c>)
 80004c0:	2101      	movs	r1, #1
 80004c2:	430a      	orrs	r2, r1
 80004c4:	635a      	str	r2, [r3, #52]	; 0x34
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <MX_GPIO_Init+0x9c>)
 80004c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ca:	2201      	movs	r2, #1
 80004cc:	4013      	ands	r3, r2
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004d2:	23a0      	movs	r3, #160	; 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2200      	movs	r2, #0
 80004d8:	2108      	movs	r1, #8
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 febe 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004e0:	0021      	movs	r1, r4
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2208      	movs	r2, #8
 80004e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2201      	movs	r2, #1
 80004ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004fa:	187a      	adds	r2, r7, r1
 80004fc:	23a0      	movs	r3, #160	; 0xa0
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f000 fd40 	bl	8000f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b009      	add	sp, #36	; 0x24
 800050e:	bd90      	pop	{r4, r7, pc}
 8000510:	40021000 	.word	0x40021000

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x44>)
 8000528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_MspInit+0x44>)
 800052c:	2101      	movs	r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	641a      	str	r2, [r3, #64]	; 0x40
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x44>)
 8000534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000536:	2201      	movs	r2, #1
 8000538:	4013      	ands	r3, r2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_MspInit+0x44>)
 8000540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_MspInit+0x44>)
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	0549      	lsls	r1, r1, #21
 8000548:	430a      	orrs	r2, r1
 800054a:	63da      	str	r2, [r3, #60]	; 0x3c
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_MspInit+0x44>)
 800054e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	055b      	lsls	r3, r3, #21
 8000554:	4013      	ands	r3, r2
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a34      	ldr	r2, [pc, #208]	; (8000648 <HAL_TIM_Base_MspInit+0xe0>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d161      	bne.n	800063e <HAL_TIM_Base_MspInit+0xd6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800057a:	4b34      	ldr	r3, [pc, #208]	; (800064c <HAL_TIM_Base_MspInit+0xe4>)
 800057c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800057e:	4b33      	ldr	r3, [pc, #204]	; (800064c <HAL_TIM_Base_MspInit+0xe4>)
 8000580:	2102      	movs	r1, #2
 8000582:	430a      	orrs	r2, r1
 8000584:	63da      	str	r2, [r3, #60]	; 0x3c
 8000586:	4b31      	ldr	r3, [pc, #196]	; (800064c <HAL_TIM_Base_MspInit+0xe4>)
 8000588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800058a:	2202      	movs	r2, #2
 800058c:	4013      	ands	r3, r2
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Channel1;
 8000592:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 8000594:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <HAL_TIM_Base_MspInit+0xec>)
 8000596:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 800059a:	2222      	movs	r2, #34	; 0x22
 800059c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 80005a0:	2210      	movs	r2, #16
 80005a2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	0052      	lsls	r2, r2, #1
 80005b6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	00d2      	lsls	r2, r2, #3
 80005be:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 80005c2:	2220      	movs	r2, #32
 80005c4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fa86 	bl	8000ae0 <HAL_DMA_Init>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80005d8:	f7ff ff9c 	bl	8000514 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 80005e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <HAL_TIM_Base_MspInit+0xe8>)
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM3_CH4 Init */
    hdma_tim3_ch4.Instance = DMA1_Channel2;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <HAL_TIM_Base_MspInit+0xf4>)
 80005ec:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 80005f0:	2223      	movs	r2, #35	; 0x23
 80005f2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 80005f6:	2210      	movs	r2, #16
 80005f8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	0052      	lsls	r2, r2, #1
 800060c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	00d2      	lsls	r2, r2, #3
 8000614:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 8000618:	2220      	movs	r2, #32
 800061a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fa5b 	bl	8000ae0 <HAL_DMA_Init>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <HAL_TIM_Base_MspInit+0xca>
    {
      Error_Handler();
 800062e:	f7ff ff71 	bl	8000514 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a08      	ldr	r2, [pc, #32]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 8000636:	631a      	str	r2, [r3, #48]	; 0x30
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <HAL_TIM_Base_MspInit+0xf0>)
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b004      	add	sp, #16
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	40000400 	.word	0x40000400
 800064c:	40021000 	.word	0x40021000
 8000650:	20000088 	.word	0x20000088
 8000654:	40020008 	.word	0x40020008
 8000658:	200000e4 	.word	0x200000e4
 800065c:	4002001c 	.word	0x4002001c

08000660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b08b      	sub	sp, #44	; 0x2c
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	2414      	movs	r4, #20
 800066a:	193b      	adds	r3, r7, r4
 800066c:	0018      	movs	r0, r3
 800066e:	2314      	movs	r3, #20
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f002 fb0c 	bl	8002c90 <memset>
  if(htim->Instance==TIM3)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a25      	ldr	r2, [pc, #148]	; (8000714 <HAL_TIM_MspPostInit+0xb4>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d144      	bne.n	800070c <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b25      	ldr	r3, [pc, #148]	; (8000718 <HAL_TIM_MspPostInit+0xb8>)
 8000684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000686:	4b24      	ldr	r3, [pc, #144]	; (8000718 <HAL_TIM_MspPostInit+0xb8>)
 8000688:	2102      	movs	r1, #2
 800068a:	430a      	orrs	r2, r1
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
 800068e:	4b22      	ldr	r3, [pc, #136]	; (8000718 <HAL_TIM_MspPostInit+0xb8>)
 8000690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000692:	2202      	movs	r2, #2
 8000694:	4013      	ands	r3, r2
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <HAL_TIM_MspPostInit+0xb8>)
 800069c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <HAL_TIM_MspPostInit+0xb8>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	430a      	orrs	r2, r1
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <HAL_TIM_MspPostInit+0xb8>)
 80006a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006aa:	2201      	movs	r2, #1
 80006ac:	4013      	ands	r3, r2
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB7     ------> TIM3_CH4
    PA8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2202      	movs	r2, #2
 80006bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM3;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2203      	movs	r2, #3
 80006ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <HAL_TIM_MspPostInit+0xbc>)
 80006d4:	0019      	movs	r1, r3
 80006d6:	0010      	movs	r0, r2
 80006d8:	f000 fc56 	bl	8000f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006dc:	0021      	movs	r1, r4
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2202      	movs	r2, #2
 80006ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM3;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	220b      	movs	r2, #11
 80006fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	187a      	adds	r2, r7, r1
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fc3e 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b00b      	add	sp, #44	; 0x2c
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	40000400 	.word	0x40000400
 8000718:	40021000 	.word	0x40021000
 800071c:	50000400 	.word	0x50000400

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f8b2 	bl	80008ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <DMA1_Channel1_IRQHandler+0x14>)
 8000756:	0018      	movs	r0, r3
 8000758:	f000 fad4 	bl	8000d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	20000088 	.word	0x20000088

08000768 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <DMA1_Channel2_3_IRQHandler+0x14>)
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fac8 	bl	8000d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	200000e4 	.word	0x200000e4

08000780 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <SystemInit+0x14>)
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	0512      	lsls	r2, r2, #20
 800078a:	609a      	str	r2, [r3, #8]
#endif
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800079c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800079e:	e003      	b.n	80007a8 <LoopCopyDataInit>

080007a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80007a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007a6:	3104      	adds	r1, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <LoopForever+0xa>)
  ldr r3, =_edata
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <LoopForever+0xe>)
  adds r2, r0, r1
 80007ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007b0:	d3f6      	bcc.n	80007a0 <CopyDataInit>
  ldr r2, =_sbss
 80007b2:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <LoopForever+0x12>)
  b LoopFillZerobss
 80007b4:	e002      	b.n	80007bc <LoopFillZerobss>

080007b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80007b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ba:	3204      	adds	r2, #4

080007bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <LoopForever+0x16>)
  cmp r2, r3
 80007be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007c0:	d3f9      	bcc.n	80007b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007c2:	f7ff ffdd 	bl	8000780 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007c6:	f002 fa3f 	bl	8002c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fd29 	bl	8000220 <main>

080007ce <LoopForever>:

LoopForever:
    b LoopForever
 80007ce:	e7fe      	b.n	80007ce <LoopForever>
  ldr   r0, =_estack
 80007d0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80007d4:	08002d54 	.word	0x08002d54
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007dc:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 80007e0:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 80007e4:	20000144 	.word	0x20000144

080007e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_IRQHandler>

080007ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007f6:	2003      	movs	r0, #3
 80007f8:	f000 f80e 	bl	8000818 <HAL_InitTick>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d003      	beq.n	8000808 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e001      	b.n	800080c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000808:	f7ff fe8a 	bl	8000520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
}
 8000810:	0018      	movs	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	b002      	add	sp, #8
 8000816:	bd80      	pop	{r7, pc}

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000820:	230f      	movs	r3, #15
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <HAL_InitTick+0x88>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d02b      	beq.n	8000888 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_InitTick+0x8c>)
 8000832:	681c      	ldr	r4, [r3, #0]
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <HAL_InitTick+0x88>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	0019      	movs	r1, r3
 800083a:	23fa      	movs	r3, #250	; 0xfa
 800083c:	0098      	lsls	r0, r3, #2
 800083e:	f7ff fc63 	bl	8000108 <__udivsi3>
 8000842:	0003      	movs	r3, r0
 8000844:	0019      	movs	r1, r3
 8000846:	0020      	movs	r0, r4
 8000848:	f7ff fc5e 	bl	8000108 <__udivsi3>
 800084c:	0003      	movs	r3, r0
 800084e:	0018      	movs	r0, r3
 8000850:	f000 f939 	bl	8000ac6 <HAL_SYSTICK_Config>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d112      	bne.n	800087e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b03      	cmp	r3, #3
 800085c:	d80a      	bhi.n	8000874 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	2301      	movs	r3, #1
 8000862:	425b      	negs	r3, r3
 8000864:	2200      	movs	r2, #0
 8000866:	0018      	movs	r0, r3
 8000868:	f000 f908 	bl	8000a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_InitTick+0x90>)
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	e00d      	b.n	8000890 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000874:	230f      	movs	r3, #15
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
 800087c:	e008      	b.n	8000890 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800087e:	230f      	movs	r3, #15
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	e003      	b.n	8000890 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000888:	230f      	movs	r3, #15
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000890:	230f      	movs	r3, #15
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	781b      	ldrb	r3, [r3, #0]
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	b005      	add	sp, #20
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	2000001c 	.word	0x2000001c
 80008a4:	20000014 	.word	0x20000014
 80008a8:	20000018 	.word	0x20000018

080008ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <HAL_IncTick+0x18>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <HAL_IncTick+0x1c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	18d2      	adds	r2, r2, r3
 80008ba:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <HAL_IncTick+0x18>)
 80008bc:	601a      	str	r2, [r3, #0]
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000140 	.word	0x20000140
 80008c8:	2000001c 	.word	0x2000001c

080008cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <HAL_GetTick+0x10>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000140 	.word	0x20000140

080008e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e8:	f7ff fff0 	bl	80008cc <HAL_GetTick>
 80008ec:	0003      	movs	r3, r0
 80008ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	3301      	adds	r3, #1
 80008f8:	d004      	beq.n	8000904 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_Delay+0x40>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	18d3      	adds	r3, r2, r3
 8000902:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	f7ff ffe1 	bl	80008cc <HAL_GetTick>
 800090a:	0002      	movs	r2, r0
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	429a      	cmp	r2, r3
 8000914:	d8f7      	bhi.n	8000906 <HAL_Delay+0x26>
  {
  }
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b004      	add	sp, #16
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000001c 	.word	0x2000001c

08000924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	0002      	movs	r2, r0
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b7f      	cmp	r3, #127	; 0x7f
 8000936:	d809      	bhi.n	800094c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	001a      	movs	r2, r3
 800093e:	231f      	movs	r3, #31
 8000940:	401a      	ands	r2, r3
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_EnableIRQ+0x30>)
 8000944:	2101      	movs	r1, #1
 8000946:	4091      	lsls	r1, r2
 8000948:	000a      	movs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}
 8000954:	e000e100 	.word	0xe000e100

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	0002      	movs	r2, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b7f      	cmp	r3, #127	; 0x7f
 800096c:	d828      	bhi.n	80009c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096e:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <__NVIC_SetPriority+0xd4>)
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b25b      	sxtb	r3, r3
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	33c0      	adds	r3, #192	; 0xc0
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	589b      	ldr	r3, [r3, r2]
 800097e:	1dfa      	adds	r2, r7, #7
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	0011      	movs	r1, r2
 8000984:	2203      	movs	r2, #3
 8000986:	400a      	ands	r2, r1
 8000988:	00d2      	lsls	r2, r2, #3
 800098a:	21ff      	movs	r1, #255	; 0xff
 800098c:	4091      	lsls	r1, r2
 800098e:	000a      	movs	r2, r1
 8000990:	43d2      	mvns	r2, r2
 8000992:	401a      	ands	r2, r3
 8000994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	22ff      	movs	r2, #255	; 0xff
 800099c:	401a      	ands	r2, r3
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	0018      	movs	r0, r3
 80009a4:	2303      	movs	r3, #3
 80009a6:	4003      	ands	r3, r0
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ac:	481f      	ldr	r0, [pc, #124]	; (8000a2c <__NVIC_SetPriority+0xd4>)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	430a      	orrs	r2, r1
 80009b8:	33c0      	adds	r3, #192	; 0xc0
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009be:	e031      	b.n	8000a24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <__NVIC_SetPriority+0xd8>)
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	0019      	movs	r1, r3
 80009c8:	230f      	movs	r3, #15
 80009ca:	400b      	ands	r3, r1
 80009cc:	3b08      	subs	r3, #8
 80009ce:	089b      	lsrs	r3, r3, #2
 80009d0:	3306      	adds	r3, #6
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	3304      	adds	r3, #4
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	1dfa      	adds	r2, r7, #7
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	0011      	movs	r1, r2
 80009e0:	2203      	movs	r2, #3
 80009e2:	400a      	ands	r2, r1
 80009e4:	00d2      	lsls	r2, r2, #3
 80009e6:	21ff      	movs	r1, #255	; 0xff
 80009e8:	4091      	lsls	r1, r2
 80009ea:	000a      	movs	r2, r1
 80009ec:	43d2      	mvns	r2, r2
 80009ee:	401a      	ands	r2, r3
 80009f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	019b      	lsls	r3, r3, #6
 80009f6:	22ff      	movs	r2, #255	; 0xff
 80009f8:	401a      	ands	r2, r3
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	0018      	movs	r0, r3
 8000a00:	2303      	movs	r3, #3
 8000a02:	4003      	ands	r3, r0
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <__NVIC_SetPriority+0xd8>)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	001c      	movs	r4, r3
 8000a10:	230f      	movs	r3, #15
 8000a12:	4023      	ands	r3, r4
 8000a14:	3b08      	subs	r3, #8
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	3306      	adds	r3, #6
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	18c3      	adds	r3, r0, r3
 8000a20:	3304      	adds	r3, #4
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b003      	add	sp, #12
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	1e5a      	subs	r2, r3, #1
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	045b      	lsls	r3, r3, #17
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d301      	bcc.n	8000a4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e010      	b.n	8000a6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <SysTick_Config+0x44>)
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	3a01      	subs	r2, #1
 8000a52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a54:	2301      	movs	r3, #1
 8000a56:	425b      	negs	r3, r3
 8000a58:	2103      	movs	r1, #3
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff ff7c 	bl	8000958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SysTick_Config+0x44>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SysTick_Config+0x44>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	0018      	movs	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	210f      	movs	r1, #15
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	1c02      	adds	r2, r0, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff ff5d 	bl	8000958 <__NVIC_SetPriority>
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	0002      	movs	r2, r0
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ff33 	bl	8000924 <__NVIC_EnableIRQ>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff ffaf 	bl	8000a34 <SysTick_Config>
 8000ad6:	0003      	movs	r3, r0
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e077      	b.n	8000be2 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a3d      	ldr	r2, [pc, #244]	; (8000bec <HAL_DMA_Init+0x10c>)
 8000af8:	4694      	mov	ip, r2
 8000afa:	4463      	add	r3, ip
 8000afc:	2114      	movs	r1, #20
 8000afe:	0018      	movs	r0, r3
 8000b00:	f7ff fb02 	bl	8000108 <__udivsi3>
 8000b04:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000b06:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2225      	movs	r2, #37	; 0x25
 8000b10:	2102      	movs	r1, #2
 8000b12:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4934      	ldr	r1, [pc, #208]	; (8000bf0 <HAL_DMA_Init+0x110>)
 8000b20:	400a      	ands	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6819      	ldr	r1, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a1b      	ldr	r3, [r3, #32]
 8000b50:	431a      	orrs	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 f9c3 	bl	8000ee8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	01db      	lsls	r3, r3, #7
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d102      	bne.n	8000b74 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7c:	21ff      	movs	r1, #255	; 0xff
 8000b7e:	400a      	ands	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000b8a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d011      	beq.n	8000bb8 <HAL_DMA_Init+0xd8>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d80d      	bhi.n	8000bb8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 f9ce 	bl	8000f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	e008      	b.n	8000bca <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2225      	movs	r2, #37	; 0x25
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2224      	movs	r2, #36	; 0x24
 8000bdc:	2100      	movs	r1, #0
 8000bde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	bffdfff8 	.word	0xbffdfff8
 8000bf0:	ffff800f 	.word	0xffff800f

08000bf4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c02:	2317      	movs	r3, #23
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2224      	movs	r2, #36	; 0x24
 8000c0e:	5c9b      	ldrb	r3, [r3, r2]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d101      	bne.n	8000c18 <HAL_DMA_Start_IT+0x24>
 8000c14:	2302      	movs	r3, #2
 8000c16:	e070      	b.n	8000cfa <HAL_DMA_Start_IT+0x106>
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2224      	movs	r2, #36	; 0x24
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2225      	movs	r2, #37	; 0x25
 8000c24:	5c9b      	ldrb	r3, [r3, r2]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d157      	bne.n	8000cdc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2225      	movs	r2, #37	; 0x25
 8000c30:	2102      	movs	r1, #2
 8000c32:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2200      	movs	r2, #0
 8000c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	438a      	bics	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	68b9      	ldr	r1, [r7, #8]
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f000 f909 	bl	8000e68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d008      	beq.n	8000c70 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	210e      	movs	r1, #14
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	e00f      	b.n	8000c90 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	438a      	bics	r2, r1
 8000c7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	210a      	movs	r1, #10
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	025b      	lsls	r3, r3, #9
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d008      	beq.n	8000cb0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	430a      	orrs	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d008      	beq.n	8000cca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	0049      	lsls	r1, r1, #1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	e007      	b.n	8000cec <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2224      	movs	r2, #36	; 0x24
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ce4:	2317      	movs	r3, #23
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2202      	movs	r2, #2
 8000cea:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2224      	movs	r2, #36	; 0x24
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	5499      	strb	r1, [r3, r2]

  return status;
 8000cf4:	2317      	movs	r3, #23
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	781b      	ldrb	r3, [r3, #0]
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b006      	add	sp, #24
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8000d0c:	4b55      	ldr	r3, [pc, #340]	; (8000e64 <HAL_DMA_IRQHandler+0x160>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	221c      	movs	r2, #28
 8000d20:	4013      	ands	r3, r2
 8000d22:	2204      	movs	r2, #4
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d027      	beq.n	8000d7e <HAL_DMA_IRQHandler+0x7a>
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	2204      	movs	r2, #4
 8000d32:	4013      	ands	r3, r2
 8000d34:	d023      	beq.n	8000d7e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2220      	movs	r2, #32
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d107      	bne.n	8000d52 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	438a      	bics	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000d52:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <HAL_DMA_IRQHandler+0x160>)
 8000d54:	6859      	ldr	r1, [r3, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	221c      	movs	r2, #28
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2204      	movs	r2, #4
 8000d60:	409a      	lsls	r2, r3
 8000d62:	4b40      	ldr	r3, [pc, #256]	; (8000e64 <HAL_DMA_IRQHandler+0x160>)
 8000d64:	430a      	orrs	r2, r1
 8000d66:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d100      	bne.n	8000d72 <HAL_DMA_IRQHandler+0x6e>
 8000d70:	e073      	b.n	8000e5a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	0010      	movs	r0, r2
 8000d7a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d7c:	e06d      	b.n	8000e5a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	221c      	movs	r2, #28
 8000d84:	4013      	ands	r3, r2
 8000d86:	2202      	movs	r2, #2
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d02e      	beq.n	8000df0 <HAL_DMA_IRQHandler+0xec>
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	2202      	movs	r2, #2
 8000d96:	4013      	ands	r3, r2
 8000d98:	d02a      	beq.n	8000df0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2220      	movs	r2, #32
 8000da2:	4013      	ands	r3, r2
 8000da4:	d10b      	bne.n	8000dbe <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	210a      	movs	r1, #10
 8000db2:	438a      	bics	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2225      	movs	r2, #37	; 0x25
 8000dba:	2101      	movs	r1, #1
 8000dbc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000dbe:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <HAL_DMA_IRQHandler+0x160>)
 8000dc0:	6859      	ldr	r1, [r3, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	221c      	movs	r2, #28
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2202      	movs	r2, #2
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_DMA_IRQHandler+0x160>)
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2224      	movs	r2, #36	; 0x24
 8000dd8:	2100      	movs	r1, #0
 8000dda:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d03a      	beq.n	8000e5a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	0010      	movs	r0, r2
 8000dec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000dee:	e034      	b.n	8000e5a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	221c      	movs	r2, #28
 8000df6:	4013      	ands	r3, r2
 8000df8:	2208      	movs	r2, #8
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	4013      	ands	r3, r2
 8000e02:	d02b      	beq.n	8000e5c <HAL_DMA_IRQHandler+0x158>
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	2208      	movs	r2, #8
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d027      	beq.n	8000e5c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	210e      	movs	r1, #14
 8000e18:	438a      	bics	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_DMA_IRQHandler+0x160>)
 8000e1e:	6859      	ldr	r1, [r3, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	221c      	movs	r2, #28
 8000e26:	4013      	ands	r3, r2
 8000e28:	2201      	movs	r2, #1
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_DMA_IRQHandler+0x160>)
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2225      	movs	r2, #37	; 0x25
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2224      	movs	r2, #36	; 0x24
 8000e44:	2100      	movs	r1, #0
 8000e46:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d005      	beq.n	8000e5c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	0010      	movs	r0, r2
 8000e58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46c0      	nop			; (mov r8, r8)
}
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b004      	add	sp, #16
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40020000 	.word	0x40020000

08000e68 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000e7e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d004      	beq.n	8000e92 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e90:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <DMA_SetConfig+0x7c>)
 8000e94:	6859      	ldr	r1, [r3, #4]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	221c      	movs	r2, #28
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <DMA_SetConfig+0x7c>)
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	2b10      	cmp	r3, #16
 8000eb6:	d108      	bne.n	8000eca <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ec8:	e007      	b.n	8000eda <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	60da      	str	r2, [r3, #12]
}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	23ff      	movs	r3, #255	; 0xff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	3b08      	subs	r3, #8
 8000efc:	2114      	movs	r1, #20
 8000efe:	0018      	movs	r0, r3
 8000f00:	f7ff f902 	bl	8000108 <__udivsi3>
 8000f04:	0003      	movs	r3, r0
 8000f06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000f10:	4694      	mov	ip, r2
 8000f12:	4463      	add	r3, ip
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	001a      	movs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000f20:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	221c      	movs	r2, #28
 8000f26:	4013      	ands	r3, r2
 8000f28:	2201      	movs	r2, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b004      	add	sp, #16
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	10008200 	.word	0x10008200
 8000f3c:	40020880 	.word	0x40020880

08000f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	22ff      	movs	r2, #255	; 0xff
 8000f4e:	4013      	ands	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000f56:	4694      	mov	ip, r2
 8000f58:	4463      	add	r3, ip
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000f66:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2201      	movs	r2, #1
 8000f72:	409a      	lsls	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b004      	add	sp, #16
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	1000823f 	.word	0x1000823f
 8000f84:	40020940 	.word	0x40020940

08000f88 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f96:	e14d      	b.n	8001234 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4091      	lsls	r1, r2
 8000fa2:	000a      	movs	r2, r1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d100      	bne.n	8000fb0 <HAL_GPIO_Init+0x28>
 8000fae:	e13e      	b.n	800122e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x38>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b12      	cmp	r3, #18
 8000fbe:	d125      	bne.n	800100c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	58d3      	ldr	r3, [r2, r3]
 8000fcc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	0013      	movs	r3, r2
 8000fdc:	43da      	mvns	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	220f      	movs	r2, #15
 8000fea:	401a      	ands	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2107      	movs	r1, #7
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	0013      	movs	r3, r2
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	6979      	ldr	r1, [r7, #20]
 800100a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	409a      	lsls	r2, r3
 800101a:	0013      	movs	r3, r2
 800101c:	43da      	mvns	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2203      	movs	r2, #3
 800102a:	401a      	ands	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	409a      	lsls	r2, r3
 8001032:	0013      	movs	r3, r2
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	4313      	orrs	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d00b      	beq.n	8001060 <HAL_GPIO_Init+0xd8>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d007      	beq.n	8001060 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001054:	2b11      	cmp	r3, #17
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b12      	cmp	r3, #18
 800105e:	d130      	bne.n	80010c2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	43da      	mvns	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	409a      	lsls	r2, r3
 8001082:	0013      	movs	r3, r2
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	4313      	orrs	r3, r2
 8001088:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001096:	2201      	movs	r2, #1
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	43da      	mvns	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4013      	ands	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	2201      	movs	r2, #1
 80010ae:	401a      	ands	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	409a      	lsls	r2, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d017      	beq.n	80010fa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	43da      	mvns	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	4013      	ands	r3, r2
 80010e0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	055b      	lsls	r3, r3, #21
 8001102:	4013      	ands	r3, r2
 8001104:	d100      	bne.n	8001108 <HAL_GPIO_Init+0x180>
 8001106:	e092      	b.n	800122e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001108:	4a50      	ldr	r2, [pc, #320]	; (800124c <HAL_GPIO_Init+0x2c4>)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3318      	adds	r3, #24
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	589b      	ldr	r3, [r3, r2]
 8001114:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	2203      	movs	r2, #3
 800111a:	4013      	ands	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	220f      	movs	r2, #15
 8001120:	409a      	lsls	r2, r3
 8001122:	0013      	movs	r3, r2
 8001124:	43da      	mvns	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	4013      	ands	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	23a0      	movs	r3, #160	; 0xa0
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	429a      	cmp	r2, r3
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x1d6>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a45      	ldr	r2, [pc, #276]	; (8001250 <HAL_GPIO_Init+0x2c8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x1d2>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a44      	ldr	r2, [pc, #272]	; (8001254 <HAL_GPIO_Init+0x2cc>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x1ce>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a43      	ldr	r2, [pc, #268]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x1ca>
 800114e:	2303      	movs	r3, #3
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x1d8>
 8001152:	2305      	movs	r3, #5
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x1d8>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x1d8>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x1d8>
 800115e:	2300      	movs	r3, #0
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	2103      	movs	r1, #3
 8001164:	400a      	ands	r2, r1
 8001166:	00d2      	lsls	r2, r2, #3
 8001168:	4093      	lsls	r3, r2
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4313      	orrs	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001170:	4936      	ldr	r1, [pc, #216]	; (800124c <HAL_GPIO_Init+0x2c4>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3318      	adds	r3, #24
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800117e:	4a33      	ldr	r2, [pc, #204]	; (800124c <HAL_GPIO_Init+0x2c4>)
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	58d3      	ldr	r3, [r2, r3]
 8001184:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43da      	mvns	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	4013      	ands	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	025b      	lsls	r3, r3, #9
 8001198:	4013      	ands	r3, r2
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80011a4:	4929      	ldr	r1, [pc, #164]	; (800124c <HAL_GPIO_Init+0x2c4>)
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80011ac:	4a27      	ldr	r2, [pc, #156]	; (800124c <HAL_GPIO_Init+0x2c4>)
 80011ae:	2384      	movs	r3, #132	; 0x84
 80011b0:	58d3      	ldr	r3, [r2, r3]
 80011b2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43da      	mvns	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	4013      	ands	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	029b      	lsls	r3, r3, #10
 80011c6:	4013      	ands	r3, r2
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80011d2:	491e      	ldr	r1, [pc, #120]	; (800124c <HAL_GPIO_Init+0x2c4>)
 80011d4:	2284      	movs	r2, #132	; 0x84
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_GPIO_Init+0x2c4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43da      	mvns	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	4013      	ands	r3, r2
 80011e8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	035b      	lsls	r3, r3, #13
 80011f2:	4013      	ands	r3, r2
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_GPIO_Init+0x2c4>)
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_GPIO_Init+0x2c4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43da      	mvns	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	039b      	lsls	r3, r3, #14
 800121c:	4013      	ands	r3, r2
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_GPIO_Init+0x2c4>)
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	3301      	adds	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	40da      	lsrs	r2, r3
 800123c:	1e13      	subs	r3, r2, #0
 800123e:	d000      	beq.n	8001242 <HAL_GPIO_Init+0x2ba>
 8001240:	e6aa      	b.n	8000f98 <HAL_GPIO_Init+0x10>
  }
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b006      	add	sp, #24
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021800 	.word	0x40021800
 8001250:	50000400 	.word	0x50000400
 8001254:	50000800 	.word	0x50000800
 8001258:	50001400 	.word	0x50001400

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	0008      	movs	r0, r1
 8001266:	0011      	movs	r1, r2
 8001268:	1cbb      	adds	r3, r7, #2
 800126a:	1c02      	adds	r2, r0, #0
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	1c7b      	adds	r3, r7, #1
 8001270:	1c0a      	adds	r2, r1, #0
 8001272:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001274:	1c7b      	adds	r3, r7, #1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127c:	1cbb      	adds	r3, r7, #2
 800127e:	881a      	ldrh	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001286:	1cbb      	adds	r3, r7, #2
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e1e5      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2201      	movs	r2, #1
 80012b0:	4013      	ands	r3, r2
 80012b2:	d100      	bne.n	80012b6 <HAL_RCC_OscConfig+0x1e>
 80012b4:	e06f      	b.n	8001396 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b6:	4bc4      	ldr	r3, [pc, #784]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2238      	movs	r2, #56	; 0x38
 80012bc:	4013      	ands	r3, r2
 80012be:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d10b      	bne.n	80012de <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c6:	4bc0      	ldr	r3, [pc, #768]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	029b      	lsls	r3, r3, #10
 80012ce:	4013      	ands	r3, r2
 80012d0:	d061      	beq.n	8001396 <HAL_RCC_OscConfig+0xfe>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d15d      	bne.n	8001396 <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e1cb      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	025b      	lsls	r3, r3, #9
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d107      	bne.n	80012fa <HAL_RCC_OscConfig+0x62>
 80012ea:	4bb7      	ldr	r3, [pc, #732]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4bb6      	ldr	r3, [pc, #728]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80012f0:	2180      	movs	r1, #128	; 0x80
 80012f2:	0249      	lsls	r1, r1, #9
 80012f4:	430a      	orrs	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e020      	b.n	800133c <HAL_RCC_OscConfig+0xa4>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	23a0      	movs	r3, #160	; 0xa0
 8001300:	02db      	lsls	r3, r3, #11
 8001302:	429a      	cmp	r2, r3
 8001304:	d10e      	bne.n	8001324 <HAL_RCC_OscConfig+0x8c>
 8001306:	4bb0      	ldr	r3, [pc, #704]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4baf      	ldr	r3, [pc, #700]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	02c9      	lsls	r1, r1, #11
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	4bac      	ldr	r3, [pc, #688]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4bab      	ldr	r3, [pc, #684]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	0249      	lsls	r1, r1, #9
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xa4>
 8001324:	4ba8      	ldr	r3, [pc, #672]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4ba7      	ldr	r3, [pc, #668]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800132a:	49a8      	ldr	r1, [pc, #672]	; (80015cc <HAL_RCC_OscConfig+0x334>)
 800132c:	400a      	ands	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	4ba5      	ldr	r3, [pc, #660]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4ba4      	ldr	r3, [pc, #656]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001336:	49a6      	ldr	r1, [pc, #664]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001338:	400a      	ands	r2, r1
 800133a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d014      	beq.n	800136e <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fac2 	bl	80008cc <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134e:	f7ff fabd 	bl	80008cc <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b64      	cmp	r3, #100	; 0x64
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e18a      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001360:	4b99      	ldr	r3, [pc, #612]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	4013      	ands	r3, r2
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0xb6>
 800136c:	e013      	b.n	8001396 <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136e:	f7ff faad 	bl	80008cc <HAL_GetTick>
 8001372:	0003      	movs	r3, r0
 8001374:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff faa8 	bl	80008cc <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e175      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800138a:	4b8f      	ldr	r3, [pc, #572]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	029b      	lsls	r3, r3, #10
 8001392:	4013      	ands	r3, r2
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2202      	movs	r2, #2
 800139c:	4013      	ands	r3, r2
 800139e:	d100      	bne.n	80013a2 <HAL_RCC_OscConfig+0x10a>
 80013a0:	e08c      	b.n	80014bc <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a2:	4b89      	ldr	r3, [pc, #548]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2238      	movs	r2, #56	; 0x38
 80013a8:	4013      	ands	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d135      	bne.n	800141e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b2:	4b85      	ldr	r3, [pc, #532]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4013      	ands	r3, r2
 80013bc:	d005      	beq.n	80013ca <HAL_RCC_OscConfig+0x132>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e155      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ca:	4b7f      	ldr	r3, [pc, #508]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a81      	ldr	r2, [pc, #516]	; (80015d4 <HAL_RCC_OscConfig+0x33c>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	0019      	movs	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	021a      	lsls	r2, r3, #8
 80013da:	4b7b      	ldr	r3, [pc, #492]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013dc:	430a      	orrs	r2, r1
 80013de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d112      	bne.n	800140c <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013e6:	4b78      	ldr	r3, [pc, #480]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7b      	ldr	r2, [pc, #492]	; (80015d8 <HAL_RCC_OscConfig+0x340>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	4b74      	ldr	r3, [pc, #464]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013fa:	4b73      	ldr	r3, [pc, #460]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0adb      	lsrs	r3, r3, #11
 8001400:	2207      	movs	r2, #7
 8001402:	4013      	ands	r3, r2
 8001404:	4a75      	ldr	r2, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x344>)
 8001406:	40da      	lsrs	r2, r3
 8001408:	4b75      	ldr	r3, [pc, #468]	; (80015e0 <HAL_RCC_OscConfig+0x348>)
 800140a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800140c:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x34c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff fa01 	bl	8000818 <HAL_InitTick>
 8001416:	1e03      	subs	r3, r0, #0
 8001418:	d050      	beq.n	80014bc <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e12b      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d030      	beq.n	8001488 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001426:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6b      	ldr	r2, [pc, #428]	; (80015d8 <HAL_RCC_OscConfig+0x340>)
 800142c:	4013      	ands	r3, r2
 800142e:	0019      	movs	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	4b64      	ldr	r3, [pc, #400]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001436:	430a      	orrs	r2, r1
 8001438:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800143a:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b62      	ldr	r3, [pc, #392]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	0049      	lsls	r1, r1, #1
 8001444:	430a      	orrs	r2, r1
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fa40 	bl	80008cc <HAL_GetTick>
 800144c:	0003      	movs	r3, r0
 800144e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fa3b 	bl	80008cc <HAL_GetTick>
 8001456:	0002      	movs	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e108      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4013      	ands	r3, r2
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4b55      	ldr	r3, [pc, #340]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a57      	ldr	r2, [pc, #348]	; (80015d4 <HAL_RCC_OscConfig+0x33c>)
 8001476:	4013      	ands	r3, r2
 8001478:	0019      	movs	r1, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	021a      	lsls	r2, r3, #8
 8001480:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001482:	430a      	orrs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	e019      	b.n	80014bc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001488:	4b4f      	ldr	r3, [pc, #316]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b4e      	ldr	r3, [pc, #312]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800148e:	4956      	ldr	r1, [pc, #344]	; (80015e8 <HAL_RCC_OscConfig+0x350>)
 8001490:	400a      	ands	r2, r1
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fa1a 	bl	80008cc <HAL_GetTick>
 8001498:	0003      	movs	r3, r0
 800149a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149e:	f7ff fa15 	bl	80008cc <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0e2      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b0:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4013      	ands	r3, r2
 80014ba:	d1f0      	bne.n	800149e <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2208      	movs	r2, #8
 80014c2:	4013      	ands	r3, r2
 80014c4:	d047      	beq.n	8001556 <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80014c6:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2238      	movs	r2, #56	; 0x38
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b18      	cmp	r3, #24
 80014d0:	d10a      	bne.n	80014e8 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014d2:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d03c      	beq.n	8001556 <HAL_RCC_OscConfig+0x2be>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d138      	bne.n	8001556 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0c6      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d019      	beq.n	8001524 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014f0:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80014f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014f4:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	430a      	orrs	r2, r1
 80014fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff f9e6 	bl	80008cc <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff f9e1 	bl	80008cc <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0ae      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800151a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d0f1      	beq.n	8001506 <HAL_RCC_OscConfig+0x26e>
 8001522:	e018      	b.n	8001556 <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001526:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800152a:	2101      	movs	r1, #1
 800152c:	438a      	bics	r2, r1
 800152e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff f9cc 	bl	80008cc <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153a:	f7ff f9c7 	bl	80008cc <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e094      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800154e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001550:	2202      	movs	r2, #2
 8001552:	4013      	ands	r3, r2
 8001554:	d1f1      	bne.n	800153a <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2204      	movs	r2, #4
 800155c:	4013      	ands	r3, r2
 800155e:	d100      	bne.n	8001562 <HAL_RCC_OscConfig+0x2ca>
 8001560:	e088      	b.n	8001674 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	230f      	movs	r3, #15
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2238      	movs	r2, #56	; 0x38
 8001570:	4013      	ands	r3, r2
 8001572:	2b20      	cmp	r3, #32
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157a:	2202      	movs	r2, #2
 800157c:	4013      	ands	r3, r2
 800157e:	d100      	bne.n	8001582 <HAL_RCC_OscConfig+0x2ea>
 8001580:	e078      	b.n	8001674 <HAL_RCC_OscConfig+0x3dc>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d000      	beq.n	800158c <HAL_RCC_OscConfig+0x2f4>
 800158a:	e073      	b.n	8001674 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e072      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x30e>
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800159a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 800159e:	2101      	movs	r1, #1
 80015a0:	430a      	orrs	r2, r1
 80015a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80015a4:	e02e      	b.n	8001604 <HAL_RCC_OscConfig+0x36c>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d11e      	bne.n	80015ec <HAL_RCC_OscConfig+0x354>
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80015b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80015b4:	2104      	movs	r1, #4
 80015b6:	430a      	orrs	r2, r1
 80015b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80015ba:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80015bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015be:	4b02      	ldr	r3, [pc, #8]	; (80015c8 <HAL_RCC_OscConfig+0x330>)
 80015c0:	2101      	movs	r1, #1
 80015c2:	430a      	orrs	r2, r1
 80015c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0x36c>
 80015c8:	40021000 	.word	0x40021000
 80015cc:	fffeffff 	.word	0xfffeffff
 80015d0:	fffbffff 	.word	0xfffbffff
 80015d4:	ffff80ff 	.word	0xffff80ff
 80015d8:	ffffc7ff 	.word	0xffffc7ff
 80015dc:	02dc6c00 	.word	0x02dc6c00
 80015e0:	20000014 	.word	0x20000014
 80015e4:	20000018 	.word	0x20000018
 80015e8:	fffffeff 	.word	0xfffffeff
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_RCC_OscConfig+0x3e8>)
 80015ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <HAL_RCC_OscConfig+0x3e8>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	438a      	bics	r2, r1
 80015f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_RCC_OscConfig+0x3e8>)
 80015fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_RCC_OscConfig+0x3e8>)
 80015fe:	2104      	movs	r1, #4
 8001600:	438a      	bics	r2, r1
 8001602:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d014      	beq.n	8001636 <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff f95e 	bl	80008cc <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001614:	e009      	b.n	800162a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff f959 	bl	80008cc <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	4a18      	ldr	r2, [pc, #96]	; (8001684 <HAL_RCC_OscConfig+0x3ec>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e025      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_RCC_OscConfig+0x3e8>)
 800162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x37e>
 8001634:	e013      	b.n	800165e <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff f949 	bl	80008cc <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800163e:	e009      	b.n	8001654 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001640:	f7ff f944 	bl	80008cc <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_RCC_OscConfig+0x3ec>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e010      	b.n	8001676 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_RCC_OscConfig+0x3e8>)
 8001656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001658:	2202      	movs	r2, #2
 800165a:	4013      	ands	r3, r2
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800165e:	230f      	movs	r3, #15
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_RCC_OscConfig+0x3e8>)
 800166a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <HAL_RCC_OscConfig+0x3e8>)
 800166e:	4906      	ldr	r1, [pc, #24]	; (8001688 <HAL_RCC_OscConfig+0x3f0>)
 8001670:	400a      	ands	r2, r1
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b006      	add	sp, #24
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	40021000 	.word	0x40021000
 8001684:	00001388 	.word	0x00001388
 8001688:	efffffff 	.word	0xefffffff

0800168c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0e9      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a0:	4b76      	ldr	r3, [pc, #472]	; (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2207      	movs	r2, #7
 80016a6:	4013      	ands	r3, r2
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d91e      	bls.n	80016ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b73      	ldr	r3, [pc, #460]	; (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2207      	movs	r2, #7
 80016b4:	4393      	bics	r3, r2
 80016b6:	0019      	movs	r1, r3
 80016b8:	4b70      	ldr	r3, [pc, #448]	; (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016c0:	f7ff f904 	bl	80008cc <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016c8:	e009      	b.n	80016de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ca:	f7ff f8ff 	bl	80008cc <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	4a6a      	ldr	r2, [pc, #424]	; (8001880 <HAL_RCC_ClockConfig+0x1f4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e0ca      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016de:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2207      	movs	r2, #7
 80016e4:	4013      	ands	r3, r2
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d1ee      	bne.n	80016ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d017      	beq.n	8001726 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2204      	movs	r2, #4
 80016fc:	4013      	ands	r3, r2
 80016fe:	d008      	beq.n	8001712 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001700:	4b60      	ldr	r3, [pc, #384]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a60      	ldr	r2, [pc, #384]	; (8001888 <HAL_RCC_ClockConfig+0x1fc>)
 8001706:	401a      	ands	r2, r3
 8001708:	4b5e      	ldr	r3, [pc, #376]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800170a:	21b0      	movs	r1, #176	; 0xb0
 800170c:	0109      	lsls	r1, r1, #4
 800170e:	430a      	orrs	r2, r1
 8001710:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001712:	4b5c      	ldr	r3, [pc, #368]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	4a5d      	ldr	r2, [pc, #372]	; (800188c <HAL_RCC_ClockConfig+0x200>)
 8001718:	4013      	ands	r3, r2
 800171a:	0019      	movs	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	4b58      	ldr	r3, [pc, #352]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001722:	430a      	orrs	r2, r1
 8001724:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	d055      	beq.n	80017dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001730:	4b54      	ldr	r3, [pc, #336]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	221c      	movs	r2, #28
 8001736:	4393      	bics	r3, r2
 8001738:	0019      	movs	r1, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	4b51      	ldr	r3, [pc, #324]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d107      	bne.n	800175c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174c:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	029b      	lsls	r3, r3, #10
 8001754:	4013      	ands	r3, r2
 8001756:	d11f      	bne.n	8001798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e08b      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001764:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4013      	ands	r3, r2
 800176e:	d113      	bne.n	8001798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e07f      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d106      	bne.n	800178a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800177c:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800177e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d108      	bne.n	8001798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e074      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800178a:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2202      	movs	r2, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e06d      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001798:	4b3a      	ldr	r3, [pc, #232]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2207      	movs	r2, #7
 800179e:	4393      	bics	r3, r2
 80017a0:	0019      	movs	r1, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017ac:	f7ff f88e 	bl	80008cc <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b4:	e009      	b.n	80017ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b6:	f7ff f889 	bl	80008cc <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	4a2f      	ldr	r2, [pc, #188]	; (8001880 <HAL_RCC_ClockConfig+0x1f4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e054      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2238      	movs	r2, #56	; 0x38
 80017d0:	401a      	ands	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1ec      	bne.n	80017b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2207      	movs	r2, #7
 80017e2:	4013      	ands	r3, r2
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d21e      	bcs.n	8001828 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2207      	movs	r2, #7
 80017f0:	4393      	bics	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017fc:	f7ff f866 	bl	80008cc <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001804:	e009      	b.n	800181a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001806:	f7ff f861 	bl	80008cc <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <HAL_RCC_ClockConfig+0x1f4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e02c      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_RCC_ClockConfig+0x1f0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2207      	movs	r2, #7
 8001820:	4013      	ands	r3, r2
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d1ee      	bne.n	8001806 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2204      	movs	r2, #4
 800182e:	4013      	ands	r3, r2
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <HAL_RCC_ClockConfig+0x204>)
 8001838:	4013      	ands	r3, r2
 800183a:	0019      	movs	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001846:	f000 f82b 	bl	80018a0 <HAL_RCC_GetSysClockFreq>
 800184a:	0001      	movs	r1, r0
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	220f      	movs	r2, #15
 8001854:	401a      	ands	r2, r3
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_RCC_ClockConfig+0x208>)
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	58d3      	ldr	r3, [r2, r3]
 800185c:	221f      	movs	r2, #31
 800185e:	4013      	ands	r3, r2
 8001860:	000a      	movs	r2, r1
 8001862:	40da      	lsrs	r2, r3
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_RCC_ClockConfig+0x20c>)
 8001866:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_RCC_ClockConfig+0x210>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0018      	movs	r0, r3
 800186e:	f7fe ffd3 	bl	8000818 <HAL_InitTick>
 8001872:	0003      	movs	r3, r0
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b004      	add	sp, #16
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40022000 	.word	0x40022000
 8001880:	00001388 	.word	0x00001388
 8001884:	40021000 	.word	0x40021000
 8001888:	ffff84ff 	.word	0xffff84ff
 800188c:	fffff0ff 	.word	0xfffff0ff
 8001890:	ffff8fff 	.word	0xffff8fff
 8001894:	08002cb8 	.word	0x08002cb8
 8001898:	20000014 	.word	0x20000014
 800189c:	20000018 	.word	0x20000018

080018a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_RCC_GetSysClockFreq+0x78>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2238      	movs	r2, #56	; 0x38
 80018ac:	4013      	ands	r3, r2
 80018ae:	d10f      	bne.n	80018d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_GetSysClockFreq+0x78>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0adb      	lsrs	r3, r3, #11
 80018b6:	2207      	movs	r2, #7
 80018b8:	4013      	ands	r3, r2
 80018ba:	2201      	movs	r2, #1
 80018bc:	409a      	lsls	r2, r3
 80018be:	0013      	movs	r3, r2
 80018c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018c2:	6839      	ldr	r1, [r7, #0]
 80018c4:	4815      	ldr	r0, [pc, #84]	; (800191c <HAL_RCC_GetSysClockFreq+0x7c>)
 80018c6:	f7fe fc1f 	bl	8000108 <__udivsi3>
 80018ca:	0003      	movs	r3, r0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	e01e      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_RCC_GetSysClockFreq+0x78>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2238      	movs	r2, #56	; 0x38
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d102      	bne.n	80018e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_RCC_GetSysClockFreq+0x80>)
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	e015      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_RCC_GetSysClockFreq+0x78>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2238      	movs	r2, #56	; 0x38
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d103      	bne.n	80018f6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	e00b      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_RCC_GetSysClockFreq+0x78>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2238      	movs	r2, #56	; 0x38
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b18      	cmp	r3, #24
 8001900:	d103      	bne.n	800190a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001902:	23fa      	movs	r3, #250	; 0xfa
 8001904:	01db      	lsls	r3, r3, #7
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	e001      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800190e:	687b      	ldr	r3, [r7, #4]
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	02dc6c00 	.word	0x02dc6c00
 8001920:	01e84800 	.word	0x01e84800

08001924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e04a      	b.n	80019cc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	223d      	movs	r2, #61	; 0x3d
 800193a:	5c9b      	ldrb	r3, [r3, r2]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d107      	bne.n	8001952 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	223c      	movs	r2, #60	; 0x3c
 8001946:	2100      	movs	r1, #0
 8001948:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	0018      	movs	r0, r3
 800194e:	f7fe fe0b 	bl	8000568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	223d      	movs	r2, #61	; 0x3d
 8001956:	2102      	movs	r1, #2
 8001958:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3304      	adds	r3, #4
 8001962:	0019      	movs	r1, r3
 8001964:	0010      	movs	r0, r2
 8001966:	f000 fd45 	bl	80023f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2248      	movs	r2, #72	; 0x48
 800196e:	2101      	movs	r1, #1
 8001970:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	223e      	movs	r2, #62	; 0x3e
 8001976:	2101      	movs	r1, #1
 8001978:	5499      	strb	r1, [r3, r2]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	223f      	movs	r2, #63	; 0x3f
 800197e:	2101      	movs	r1, #1
 8001980:	5499      	strb	r1, [r3, r2]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	2101      	movs	r1, #1
 8001988:	5499      	strb	r1, [r3, r2]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2241      	movs	r2, #65	; 0x41
 800198e:	2101      	movs	r1, #1
 8001990:	5499      	strb	r1, [r3, r2]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2242      	movs	r2, #66	; 0x42
 8001996:	2101      	movs	r1, #1
 8001998:	5499      	strb	r1, [r3, r2]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2243      	movs	r2, #67	; 0x43
 800199e:	2101      	movs	r1, #1
 80019a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2244      	movs	r2, #68	; 0x44
 80019a6:	2101      	movs	r1, #1
 80019a8:	5499      	strb	r1, [r3, r2]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2245      	movs	r2, #69	; 0x45
 80019ae:	2101      	movs	r1, #1
 80019b0:	5499      	strb	r1, [r3, r2]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2246      	movs	r2, #70	; 0x46
 80019b6:	2101      	movs	r1, #1
 80019b8:	5499      	strb	r1, [r3, r2]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2247      	movs	r2, #71	; 0x47
 80019be:	2101      	movs	r1, #1
 80019c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	223d      	movs	r2, #61	; 0x3d
 80019c6:	2101      	movs	r1, #1
 80019c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b002      	add	sp, #8
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e04a      	b.n	8001a7c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	223d      	movs	r2, #61	; 0x3d
 80019ea:	5c9b      	ldrb	r3, [r3, r2]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d107      	bne.n	8001a02 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	223c      	movs	r2, #60	; 0x3c
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 f841 	bl	8001a84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	223d      	movs	r2, #61	; 0x3d
 8001a06:	2102      	movs	r1, #2
 8001a08:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3304      	adds	r3, #4
 8001a12:	0019      	movs	r1, r3
 8001a14:	0010      	movs	r0, r2
 8001a16:	f000 fced 	bl	80023f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2248      	movs	r2, #72	; 0x48
 8001a1e:	2101      	movs	r1, #1
 8001a20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	223e      	movs	r2, #62	; 0x3e
 8001a26:	2101      	movs	r1, #1
 8001a28:	5499      	strb	r1, [r3, r2]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	223f      	movs	r2, #63	; 0x3f
 8001a2e:	2101      	movs	r1, #1
 8001a30:	5499      	strb	r1, [r3, r2]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2240      	movs	r2, #64	; 0x40
 8001a36:	2101      	movs	r1, #1
 8001a38:	5499      	strb	r1, [r3, r2]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2241      	movs	r2, #65	; 0x41
 8001a3e:	2101      	movs	r1, #1
 8001a40:	5499      	strb	r1, [r3, r2]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2242      	movs	r2, #66	; 0x42
 8001a46:	2101      	movs	r1, #1
 8001a48:	5499      	strb	r1, [r3, r2]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2243      	movs	r2, #67	; 0x43
 8001a4e:	2101      	movs	r1, #1
 8001a50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2244      	movs	r2, #68	; 0x44
 8001a56:	2101      	movs	r1, #1
 8001a58:	5499      	strb	r1, [r3, r2]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2245      	movs	r2, #69	; 0x45
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2246      	movs	r2, #70	; 0x46
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2247      	movs	r2, #71	; 0x47
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	223d      	movs	r2, #61	; 0x3d
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b002      	add	sp, #8
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	1cbb      	adds	r3, r7, #2
 8001aa4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2317      	movs	r3, #23
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d108      	bne.n	8001ac6 <HAL_TIM_PWM_Start_DMA+0x32>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	223e      	movs	r2, #62	; 0x3e
 8001ab8:	5c9b      	ldrb	r3, [r3, r2]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3b02      	subs	r3, #2
 8001abe:	425a      	negs	r2, r3
 8001ac0:	4153      	adcs	r3, r2
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	e037      	b.n	8001b36 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d108      	bne.n	8001ade <HAL_TIM_PWM_Start_DMA+0x4a>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	223f      	movs	r2, #63	; 0x3f
 8001ad0:	5c9b      	ldrb	r3, [r3, r2]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	3b02      	subs	r3, #2
 8001ad6:	425a      	negs	r2, r3
 8001ad8:	4153      	adcs	r3, r2
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	e02b      	b.n	8001b36 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d108      	bne.n	8001af6 <HAL_TIM_PWM_Start_DMA+0x62>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	5c9b      	ldrb	r3, [r3, r2]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	3b02      	subs	r3, #2
 8001aee:	425a      	negs	r2, r3
 8001af0:	4153      	adcs	r3, r2
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	e01f      	b.n	8001b36 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d108      	bne.n	8001b0e <HAL_TIM_PWM_Start_DMA+0x7a>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2241      	movs	r2, #65	; 0x41
 8001b00:	5c9b      	ldrb	r3, [r3, r2]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	3b02      	subs	r3, #2
 8001b06:	425a      	negs	r2, r3
 8001b08:	4153      	adcs	r3, r2
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	e013      	b.n	8001b36 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	d108      	bne.n	8001b26 <HAL_TIM_PWM_Start_DMA+0x92>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2242      	movs	r2, #66	; 0x42
 8001b18:	5c9b      	ldrb	r3, [r3, r2]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	3b02      	subs	r3, #2
 8001b1e:	425a      	negs	r2, r3
 8001b20:	4153      	adcs	r3, r2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	e007      	b.n	8001b36 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2243      	movs	r2, #67	; 0x43
 8001b2a:	5c9b      	ldrb	r3, [r3, r2]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	3b02      	subs	r3, #2
 8001b30:	425a      	negs	r2, r3
 8001b32:	4153      	adcs	r3, r2
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e183      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d108      	bne.n	8001b56 <HAL_TIM_PWM_Start_DMA+0xc2>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	223e      	movs	r2, #62	; 0x3e
 8001b48:	5c9b      	ldrb	r3, [r3, r2]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	425a      	negs	r2, r3
 8001b50:	4153      	adcs	r3, r2
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	e037      	b.n	8001bc6 <HAL_TIM_PWM_Start_DMA+0x132>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d108      	bne.n	8001b6e <HAL_TIM_PWM_Start_DMA+0xda>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	223f      	movs	r2, #63	; 0x3f
 8001b60:	5c9b      	ldrb	r3, [r3, r2]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	425a      	negs	r2, r3
 8001b68:	4153      	adcs	r3, r2
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	e02b      	b.n	8001bc6 <HAL_TIM_PWM_Start_DMA+0x132>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d108      	bne.n	8001b86 <HAL_TIM_PWM_Start_DMA+0xf2>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2240      	movs	r2, #64	; 0x40
 8001b78:	5c9b      	ldrb	r3, [r3, r2]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	425a      	negs	r2, r3
 8001b80:	4153      	adcs	r3, r2
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	e01f      	b.n	8001bc6 <HAL_TIM_PWM_Start_DMA+0x132>
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b0c      	cmp	r3, #12
 8001b8a:	d108      	bne.n	8001b9e <HAL_TIM_PWM_Start_DMA+0x10a>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2241      	movs	r2, #65	; 0x41
 8001b90:	5c9b      	ldrb	r3, [r3, r2]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	425a      	negs	r2, r3
 8001b98:	4153      	adcs	r3, r2
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	e013      	b.n	8001bc6 <HAL_TIM_PWM_Start_DMA+0x132>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d108      	bne.n	8001bb6 <HAL_TIM_PWM_Start_DMA+0x122>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2242      	movs	r2, #66	; 0x42
 8001ba8:	5c9b      	ldrb	r3, [r3, r2]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	425a      	negs	r2, r3
 8001bb0:	4153      	adcs	r3, r2
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	e007      	b.n	8001bc6 <HAL_TIM_PWM_Start_DMA+0x132>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2243      	movs	r2, #67	; 0x43
 8001bba:	5c9b      	ldrb	r3, [r3, r2]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	425a      	negs	r2, r3
 8001bc2:	4153      	adcs	r3, r2
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d035      	beq.n	8001c36 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) && (Length > 0U))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <HAL_TIM_PWM_Start_DMA+0x148>
 8001bd0:	1cbb      	adds	r3, r7, #2
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e134      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d104      	bne.n	8001bec <HAL_TIM_PWM_Start_DMA+0x158>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	223e      	movs	r2, #62	; 0x3e
 8001be6:	2102      	movs	r1, #2
 8001be8:	5499      	strb	r1, [r3, r2]
 8001bea:	e026      	b.n	8001c3a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d104      	bne.n	8001bfc <HAL_TIM_PWM_Start_DMA+0x168>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	223f      	movs	r2, #63	; 0x3f
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	5499      	strb	r1, [r3, r2]
 8001bfa:	e01e      	b.n	8001c3a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d104      	bne.n	8001c0c <HAL_TIM_PWM_Start_DMA+0x178>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2240      	movs	r2, #64	; 0x40
 8001c06:	2102      	movs	r1, #2
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	e016      	b.n	8001c3a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d104      	bne.n	8001c1c <HAL_TIM_PWM_Start_DMA+0x188>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2241      	movs	r2, #65	; 0x41
 8001c16:	2102      	movs	r1, #2
 8001c18:	5499      	strb	r1, [r3, r2]
 8001c1a:	e00e      	b.n	8001c3a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d104      	bne.n	8001c2c <HAL_TIM_PWM_Start_DMA+0x198>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2242      	movs	r2, #66	; 0x42
 8001c26:	2102      	movs	r1, #2
 8001c28:	5499      	strb	r1, [r3, r2]
 8001c2a:	e006      	b.n	8001c3a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2243      	movs	r2, #67	; 0x43
 8001c30:	2102      	movs	r1, #2
 8001c32:	5499      	strb	r1, [r3, r2]
 8001c34:	e001      	b.n	8001c3a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e105      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	d100      	bne.n	8001c42 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8001c40:	e080      	b.n	8001d44 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d900      	bls.n	8001c4a <HAL_TIM_PWM_Start_DMA+0x1b6>
 8001c48:	e0a1      	b.n	8001d8e <HAL_TIM_PWM_Start_DMA+0x2fa>
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d054      	beq.n	8001cfa <HAL_TIM_PWM_Start_DMA+0x266>
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d900      	bls.n	8001c58 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8001c56:	e09a      	b.n	8001d8e <HAL_TIM_PWM_Start_DMA+0x2fa>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_TIM_PWM_Start_DMA+0x1d2>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d025      	beq.n	8001cb0 <HAL_TIM_PWM_Start_DMA+0x21c>
 8001c64:	e093      	b.n	8001d8e <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	4a79      	ldr	r2, [pc, #484]	; (8001e50 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	4a78      	ldr	r2, [pc, #480]	; (8001e54 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	4a77      	ldr	r2, [pc, #476]	; (8001e58 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3334      	adds	r3, #52	; 0x34
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	1cbb      	adds	r3, r7, #2
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	f7fe ffb0 	bl	8000bf4 <HAL_DMA_Start_IT>
 8001c94:	1e03      	subs	r3, r0, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0d4      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	0089      	lsls	r1, r1, #2
 8001caa:	430a      	orrs	r2, r1
 8001cac:	60da      	str	r2, [r3, #12]
      break;
 8001cae:	e073      	b.n	8001d98 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	4a66      	ldr	r2, [pc, #408]	; (8001e50 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	4a65      	ldr	r2, [pc, #404]	; (8001e54 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	4a64      	ldr	r2, [pc, #400]	; (8001e58 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3338      	adds	r3, #56	; 0x38
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	1cbb      	adds	r3, r7, #2
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	f7fe ff8b 	bl	8000bf4 <HAL_DMA_Start_IT>
 8001cde:	1e03      	subs	r3, r0, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0af      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2180      	movs	r1, #128	; 0x80
 8001cf2:	00c9      	lsls	r1, r1, #3
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	60da      	str	r2, [r3, #12]
      break;
 8001cf8:	e04e      	b.n	8001d98 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	4a54      	ldr	r2, [pc, #336]	; (8001e50 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	4a53      	ldr	r2, [pc, #332]	; (8001e54 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001d10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	333c      	adds	r3, #60	; 0x3c
 8001d1e:	001a      	movs	r2, r3
 8001d20:	1cbb      	adds	r3, r7, #2
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	f7fe ff66 	bl	8000bf4 <HAL_DMA_Start_IT>
 8001d28:	1e03      	subs	r3, r0, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e08a      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	0109      	lsls	r1, r1, #4
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	60da      	str	r2, [r3, #12]
      break;
 8001d42:	e029      	b.n	8001d98 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a41      	ldr	r2, [pc, #260]	; (8001e50 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a40      	ldr	r2, [pc, #256]	; (8001e54 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4a3f      	ldr	r2, [pc, #252]	; (8001e58 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3340      	adds	r3, #64	; 0x40
 8001d68:	001a      	movs	r2, r3
 8001d6a:	1cbb      	adds	r3, r7, #2
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	f7fe ff41 	bl	8000bf4 <HAL_DMA_Start_IT>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e065      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	0149      	lsls	r1, r1, #5
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	60da      	str	r2, [r3, #12]
      break;
 8001d8c:	e004      	b.n	8001d98 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8001d8e:	2317      	movs	r3, #23
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
      break;
 8001d96:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001d98:	2317      	movs	r3, #23
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d14e      	bne.n	8001e40 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	2201      	movs	r2, #1
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 fec6 	bl	8002b3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a29      	ldr	r2, [pc, #164]	; (8001e5c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d009      	beq.n	8001dce <HAL_TIM_PWM_Start_DMA+0x33a>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d004      	beq.n	8001dce <HAL_TIM_PWM_Start_DMA+0x33a>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_TIM_PWM_Start_DMA+0x33e>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_TIM_PWM_Start_DMA+0x340>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	0209      	lsls	r1, r1, #8
 8001de6:	430a      	orrs	r2, r1
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d004      	beq.n	8001dfe <HAL_TIM_PWM_Start_DMA+0x36a>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d116      	bne.n	8001e2c <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b06      	cmp	r3, #6
 8001e0e:	d016      	beq.n	8001e3e <HAL_TIM_PWM_Start_DMA+0x3aa>
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	025b      	lsls	r3, r3, #9
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d011      	beq.n	8001e3e <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2a:	e008      	b.n	8001e3e <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2101      	movs	r1, #1
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e000      	b.n	8001e40 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8001e40:	2317      	movs	r3, #23
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	781b      	ldrb	r3, [r3, #0]
}
 8001e46:	0018      	movs	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b006      	add	sp, #24
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	080022e1 	.word	0x080022e1
 8001e54:	0800238b 	.word	0x0800238b
 8001e58:	0800224d 	.word	0x0800224d
 8001e5c:	40012c00 	.word	0x40012c00
 8001e60:	40014400 	.word	0x40014400
 8001e64:	40014800 	.word	0x40014800
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	00010007 	.word	0x00010007

08001e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7c:	2317      	movs	r3, #23
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	223c      	movs	r2, #60	; 0x3c
 8001e88:	5c9b      	ldrb	r3, [r3, r2]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e0e5      	b.n	800205e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	223c      	movs	r2, #60	; 0x3c
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b14      	cmp	r3, #20
 8001e9e:	d900      	bls.n	8001ea2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ea0:	e0d1      	b.n	8002046 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	009a      	lsls	r2, r3, #2
 8001ea6:	4b70      	ldr	r3, [pc, #448]	; (8002068 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001ea8:	18d3      	adds	r3, r2, r3
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	0011      	movs	r1, r2
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 fb08 	bl	80024cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	438a      	bics	r2, r1
 8001eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6999      	ldr	r1, [r3, #24]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	619a      	str	r2, [r3, #24]
      break;
 8001eee:	e0af      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fb67 	bl	80025cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0109      	lsls	r1, r1, #4
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4954      	ldr	r1, [pc, #336]	; (800206c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6999      	ldr	r1, [r3, #24]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	021a      	lsls	r2, r3, #8
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	619a      	str	r2, [r3, #24]
      break;
 8001f34:	e08c      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	0011      	movs	r1, r2
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 fbc2 	bl	80026c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2108      	movs	r1, #8
 8001f50:	430a      	orrs	r2, r1
 8001f52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69da      	ldr	r2, [r3, #28]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2104      	movs	r1, #4
 8001f60:	438a      	bics	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69d9      	ldr	r1, [r3, #28]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	61da      	str	r2, [r3, #28]
      break;
 8001f76:	e06b      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	0011      	movs	r1, r2
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 fc23 	bl	80027cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	0109      	lsls	r1, r1, #4
 8001f94:	430a      	orrs	r2, r1
 8001f96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4932      	ldr	r1, [pc, #200]	; (800206c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69d9      	ldr	r1, [r3, #28]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	021a      	lsls	r2, r3, #8
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	61da      	str	r2, [r3, #28]
      break;
 8001fbc:	e048      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	0011      	movs	r1, r2
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 fc64 	bl	8002894 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2108      	movs	r1, #8
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	438a      	bics	r2, r1
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001ffe:	e027      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	0011      	movs	r1, r2
 8002008:	0018      	movs	r0, r3
 800200a:	f000 fc9d 	bl	8002948 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2180      	movs	r1, #128	; 0x80
 800201a:	0109      	lsls	r1, r1, #4
 800201c:	430a      	orrs	r2, r1
 800201e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4910      	ldr	r1, [pc, #64]	; (800206c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800202c:	400a      	ands	r2, r1
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	021a      	lsls	r2, r3, #8
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002044:	e004      	b.n	8002050 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002046:	2317      	movs	r3, #23
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
      break;
 800204e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	223c      	movs	r2, #60	; 0x3c
 8002054:	2100      	movs	r1, #0
 8002056:	5499      	strb	r1, [r3, r2]

  return status;
 8002058:	2317      	movs	r3, #23
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	781b      	ldrb	r3, [r3, #0]
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b006      	add	sp, #24
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	08002cf8 	.word	0x08002cf8
 800206c:	fffffbff 	.word	0xfffffbff

08002070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	230f      	movs	r3, #15
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	223c      	movs	r2, #60	; 0x3c
 8002086:	5c9b      	ldrb	r3, [r3, r2]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_TIM_ConfigClockSource+0x20>
 800208c:	2302      	movs	r3, #2
 800208e:	e0bc      	b.n	800220a <HAL_TIM_ConfigClockSource+0x19a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	223c      	movs	r2, #60	; 0x3c
 8002094:	2101      	movs	r1, #1
 8002096:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	223d      	movs	r2, #61	; 0x3d
 800209c:	2102      	movs	r1, #2
 800209e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4a5a      	ldr	r2, [pc, #360]	; (8002214 <HAL_TIM_ConfigClockSource+0x1a4>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4a59      	ldr	r2, [pc, #356]	; (8002218 <HAL_TIM_ConfigClockSource+0x1a8>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	0192      	lsls	r2, r2, #6
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d040      	beq.n	800214e <HAL_TIM_ConfigClockSource+0xde>
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	0192      	lsls	r2, r2, #6
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d900      	bls.n	80020d6 <HAL_TIM_ConfigClockSource+0x66>
 80020d4:	e088      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	0152      	lsls	r2, r2, #5
 80020da:	4293      	cmp	r3, r2
 80020dc:	d100      	bne.n	80020e0 <HAL_TIM_ConfigClockSource+0x70>
 80020de:	e088      	b.n	80021f2 <HAL_TIM_ConfigClockSource+0x182>
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	0152      	lsls	r2, r2, #5
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d900      	bls.n	80020ea <HAL_TIM_ConfigClockSource+0x7a>
 80020e8:	e07e      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 80020ea:	2b70      	cmp	r3, #112	; 0x70
 80020ec:	d018      	beq.n	8002120 <HAL_TIM_ConfigClockSource+0xb0>
 80020ee:	d900      	bls.n	80020f2 <HAL_TIM_ConfigClockSource+0x82>
 80020f0:	e07a      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 80020f2:	2b60      	cmp	r3, #96	; 0x60
 80020f4:	d04f      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x126>
 80020f6:	d900      	bls.n	80020fa <HAL_TIM_ConfigClockSource+0x8a>
 80020f8:	e076      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 80020fa:	2b50      	cmp	r3, #80	; 0x50
 80020fc:	d03b      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0x106>
 80020fe:	d900      	bls.n	8002102 <HAL_TIM_ConfigClockSource+0x92>
 8002100:	e072      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 8002102:	2b40      	cmp	r3, #64	; 0x40
 8002104:	d057      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x146>
 8002106:	d900      	bls.n	800210a <HAL_TIM_ConfigClockSource+0x9a>
 8002108:	e06e      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 800210a:	2b30      	cmp	r3, #48	; 0x30
 800210c:	d063      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x166>
 800210e:	d86b      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 8002110:	2b20      	cmp	r3, #32
 8002112:	d060      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x166>
 8002114:	d868      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
 8002116:	2b00      	cmp	r3, #0
 8002118:	d05d      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x166>
 800211a:	2b10      	cmp	r3, #16
 800211c:	d05b      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x166>
 800211e:	e063      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6899      	ldr	r1, [r3, #8]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f000 fce4 	bl	8002afc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2277      	movs	r2, #119	; 0x77
 8002140:	4313      	orrs	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	609a      	str	r2, [r3, #8]
      break;
 800214c:	e052      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6899      	ldr	r1, [r3, #8]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f000 fccd 	bl	8002afc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	01c9      	lsls	r1, r1, #7
 8002170:	430a      	orrs	r2, r1
 8002172:	609a      	str	r2, [r3, #8]
      break;
 8002174:	e03e      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	001a      	movs	r2, r3
 8002184:	f000 fc3e 	bl	8002a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2150      	movs	r1, #80	; 0x50
 800218e:	0018      	movs	r0, r3
 8002190:	f000 fc98 	bl	8002ac4 <TIM_ITRx_SetConfig>
      break;
 8002194:	e02e      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	001a      	movs	r2, r3
 80021a4:	f000 fc5c 	bl	8002a60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2160      	movs	r1, #96	; 0x60
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 fc88 	bl	8002ac4 <TIM_ITRx_SetConfig>
      break;
 80021b4:	e01e      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	001a      	movs	r2, r3
 80021c4:	f000 fc1e 	bl	8002a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2140      	movs	r1, #64	; 0x40
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 fc78 	bl	8002ac4 <TIM_ITRx_SetConfig>
      break;
 80021d4:	e00e      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0019      	movs	r1, r3
 80021e0:	0010      	movs	r0, r2
 80021e2:	f000 fc6f 	bl	8002ac4 <TIM_ITRx_SetConfig>
      break;
 80021e6:	e005      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80021e8:	230f      	movs	r3, #15
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
      break;
 80021f0:	e000      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80021f2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	223d      	movs	r2, #61	; 0x3d
 80021f8:	2101      	movs	r1, #1
 80021fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	223c      	movs	r2, #60	; 0x3c
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

  return status;
 8002204:	230f      	movs	r3, #15
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b004      	add	sp, #16
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	ffceff88 	.word	0xffceff88
 8002218:	ffff00ff 	.word	0xffff00ff

0800221c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}

0800224c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	d107      	bne.n	8002274 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	223e      	movs	r2, #62	; 0x3e
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
 8002272:	e02a      	b.n	80022ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	429a      	cmp	r2, r3
 800227c:	d107      	bne.n	800228e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2202      	movs	r2, #2
 8002282:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	223f      	movs	r2, #63	; 0x3f
 8002288:	2101      	movs	r1, #1
 800228a:	5499      	strb	r1, [r3, r2]
 800228c:	e01d      	b.n	80022ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	d107      	bne.n	80022a8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2204      	movs	r2, #4
 800229c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2240      	movs	r2, #64	; 0x40
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]
 80022a6:	e010      	b.n	80022ca <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d107      	bne.n	80022c2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2208      	movs	r2, #8
 80022b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2241      	movs	r2, #65	; 0x41
 80022bc:	2101      	movs	r1, #1
 80022be:	5499      	strb	r1, [r3, r2]
 80022c0:	e003      	b.n	80022ca <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	223d      	movs	r2, #61	; 0x3d
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff ffb5 	bl	800223c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	771a      	strb	r2, [r3, #28]
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b004      	add	sp, #16
 80022de:	bd80      	pop	{r7, pc}

080022e0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d10b      	bne.n	8002310 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d136      	bne.n	8002374 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	223e      	movs	r2, #62	; 0x3e
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]
 800230e:	e031      	b.n	8002374 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d10b      	bne.n	8002332 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2202      	movs	r2, #2
 800231e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d125      	bne.n	8002374 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	223f      	movs	r2, #63	; 0x3f
 800232c:	2101      	movs	r1, #1
 800232e:	5499      	strb	r1, [r3, r2]
 8002330:	e020      	b.n	8002374 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	d10b      	bne.n	8002354 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2204      	movs	r2, #4
 8002340:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d114      	bne.n	8002374 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2240      	movs	r2, #64	; 0x40
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
 8002352:	e00f      	b.n	8002374 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d10a      	bne.n	8002374 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2208      	movs	r2, #8
 8002362:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d103      	bne.n	8002374 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2241      	movs	r2, #65	; 0x41
 8002370:	2101      	movs	r1, #1
 8002372:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff ff50 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	771a      	strb	r2, [r3, #28]
}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46bd      	mov	sp, r7
 8002386:	b004      	add	sp, #16
 8002388:	bd80      	pop	{r7, pc}

0800238a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d103      	bne.n	80023aa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	771a      	strb	r2, [r3, #28]
 80023a8:	e019      	b.n	80023de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d103      	bne.n	80023bc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2202      	movs	r2, #2
 80023b8:	771a      	strb	r2, [r3, #28]
 80023ba:	e010      	b.n	80023de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d103      	bne.n	80023ce <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2204      	movs	r2, #4
 80023ca:	771a      	strb	r2, [r3, #28]
 80023cc:	e007      	b.n	80023de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d102      	bne.n	80023de <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2208      	movs	r2, #8
 80023dc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7ff ff23 	bl	800222c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	771a      	strb	r2, [r3, #28]
}
 80023ec:	46c0      	nop			; (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b004      	add	sp, #16
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a2b      	ldr	r2, [pc, #172]	; (80024b4 <TIM_Base_SetConfig+0xc0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d003      	beq.n	8002414 <TIM_Base_SetConfig+0x20>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a2a      	ldr	r2, [pc, #168]	; (80024b8 <TIM_Base_SetConfig+0xc4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d108      	bne.n	8002426 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2270      	movs	r2, #112	; 0x70
 8002418:	4393      	bics	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a22      	ldr	r2, [pc, #136]	; (80024b4 <TIM_Base_SetConfig+0xc0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00f      	beq.n	800244e <TIM_Base_SetConfig+0x5a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <TIM_Base_SetConfig+0xc4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00b      	beq.n	800244e <TIM_Base_SetConfig+0x5a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a20      	ldr	r2, [pc, #128]	; (80024bc <TIM_Base_SetConfig+0xc8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <TIM_Base_SetConfig+0x5a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <TIM_Base_SetConfig+0xcc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d003      	beq.n	800244e <TIM_Base_SetConfig+0x5a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <TIM_Base_SetConfig+0xd0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d108      	bne.n	8002460 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <TIM_Base_SetConfig+0xd4>)
 8002452:	4013      	ands	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	4393      	bics	r3, r2
 8002466:	001a      	movs	r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <TIM_Base_SetConfig+0xc0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <TIM_Base_SetConfig+0xaa>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <TIM_Base_SetConfig+0xcc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d003      	beq.n	800249e <TIM_Base_SetConfig+0xaa>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <TIM_Base_SetConfig+0xd0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d103      	bne.n	80024a6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	615a      	str	r2, [r3, #20]
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b004      	add	sp, #16
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40012c00 	.word	0x40012c00
 80024b8:	40000400 	.word	0x40000400
 80024bc:	40002000 	.word	0x40002000
 80024c0:	40014400 	.word	0x40014400
 80024c4:	40014800 	.word	0x40014800
 80024c8:	fffffcff 	.word	0xfffffcff

080024cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	2201      	movs	r2, #1
 80024dc:	4393      	bics	r3, r2
 80024de:	001a      	movs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a2e      	ldr	r2, [pc, #184]	; (80025b4 <TIM_OC1_SetConfig+0xe8>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2203      	movs	r2, #3
 8002502:	4393      	bics	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2202      	movs	r2, #2
 8002514:	4393      	bics	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a24      	ldr	r2, [pc, #144]	; (80025b8 <TIM_OC1_SetConfig+0xec>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <TIM_OC1_SetConfig+0x6e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a23      	ldr	r2, [pc, #140]	; (80025bc <TIM_OC1_SetConfig+0xf0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d003      	beq.n	800253a <TIM_OC1_SetConfig+0x6e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <TIM_OC1_SetConfig+0xf4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d10c      	bne.n	8002554 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2208      	movs	r2, #8
 800253e:	4393      	bics	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2204      	movs	r2, #4
 8002550:	4393      	bics	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <TIM_OC1_SetConfig+0xec>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d007      	beq.n	800256c <TIM_OC1_SetConfig+0xa0>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a17      	ldr	r2, [pc, #92]	; (80025bc <TIM_OC1_SetConfig+0xf0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d003      	beq.n	800256c <TIM_OC1_SetConfig+0xa0>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <TIM_OC1_SetConfig+0xf4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d111      	bne.n	8002590 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <TIM_OC1_SetConfig+0xf8>)
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <TIM_OC1_SetConfig+0xfc>)
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	621a      	str	r2, [r3, #32]
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b006      	add	sp, #24
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	fffeff8f 	.word	0xfffeff8f
 80025b8:	40012c00 	.word	0x40012c00
 80025bc:	40014400 	.word	0x40014400
 80025c0:	40014800 	.word	0x40014800
 80025c4:	fffffeff 	.word	0xfffffeff
 80025c8:	fffffdff 	.word	0xfffffdff

080025cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	2210      	movs	r2, #16
 80025dc:	4393      	bics	r3, r2
 80025de:	001a      	movs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a2c      	ldr	r2, [pc, #176]	; (80026ac <TIM_OC2_SetConfig+0xe0>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4a2b      	ldr	r2, [pc, #172]	; (80026b0 <TIM_OC2_SetConfig+0xe4>)
 8002602:	4013      	ands	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2220      	movs	r2, #32
 8002616:	4393      	bics	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a22      	ldr	r2, [pc, #136]	; (80026b4 <TIM_OC2_SetConfig+0xe8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10d      	bne.n	800264a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	4393      	bics	r3, r2
 8002634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2240      	movs	r2, #64	; 0x40
 8002646:	4393      	bics	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <TIM_OC2_SetConfig+0xe8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d007      	beq.n	8002662 <TIM_OC2_SetConfig+0x96>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <TIM_OC2_SetConfig+0xec>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d003      	beq.n	8002662 <TIM_OC2_SetConfig+0x96>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a17      	ldr	r2, [pc, #92]	; (80026bc <TIM_OC2_SetConfig+0xf0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d113      	bne.n	800268a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4a16      	ldr	r2, [pc, #88]	; (80026c0 <TIM_OC2_SetConfig+0xf4>)
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <TIM_OC2_SetConfig+0xf8>)
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	621a      	str	r2, [r3, #32]
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b006      	add	sp, #24
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	feff8fff 	.word	0xfeff8fff
 80026b0:	fffffcff 	.word	0xfffffcff
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40014400 	.word	0x40014400
 80026bc:	40014800 	.word	0x40014800
 80026c0:	fffffbff 	.word	0xfffffbff
 80026c4:	fffff7ff 	.word	0xfffff7ff

080026c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a33      	ldr	r2, [pc, #204]	; (80027a4 <TIM_OC3_SetConfig+0xdc>)
 80026d8:	401a      	ands	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a2d      	ldr	r2, [pc, #180]	; (80027a8 <TIM_OC3_SetConfig+0xe0>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2203      	movs	r2, #3
 80026fc:	4393      	bics	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	4a27      	ldr	r2, [pc, #156]	; (80027ac <TIM_OC3_SetConfig+0xe4>)
 800270e:	4013      	ands	r3, r2
 8002710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a23      	ldr	r2, [pc, #140]	; (80027b0 <TIM_OC3_SetConfig+0xe8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10d      	bne.n	8002742 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	4a22      	ldr	r2, [pc, #136]	; (80027b4 <TIM_OC3_SetConfig+0xec>)
 800272a:	4013      	ands	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <TIM_OC3_SetConfig+0xf0>)
 800273e:	4013      	ands	r3, r2
 8002740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <TIM_OC3_SetConfig+0xe8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <TIM_OC3_SetConfig+0x92>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <TIM_OC3_SetConfig+0xf4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d003      	beq.n	800275a <TIM_OC3_SetConfig+0x92>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <TIM_OC3_SetConfig+0xf8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d113      	bne.n	8002782 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <TIM_OC3_SetConfig+0xfc>)
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <TIM_OC3_SetConfig+0x100>)
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	621a      	str	r2, [r3, #32]
}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	b006      	add	sp, #24
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	fffffeff 	.word	0xfffffeff
 80027a8:	fffeff8f 	.word	0xfffeff8f
 80027ac:	fffffdff 	.word	0xfffffdff
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	fffff7ff 	.word	0xfffff7ff
 80027b8:	fffffbff 	.word	0xfffffbff
 80027bc:	40014400 	.word	0x40014400
 80027c0:	40014800 	.word	0x40014800
 80027c4:	ffffefff 	.word	0xffffefff
 80027c8:	ffffdfff 	.word	0xffffdfff

080027cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a26      	ldr	r2, [pc, #152]	; (8002874 <TIM_OC4_SetConfig+0xa8>)
 80027dc:	401a      	ands	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a20      	ldr	r2, [pc, #128]	; (8002878 <TIM_OC4_SetConfig+0xac>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a1f      	ldr	r2, [pc, #124]	; (800287c <TIM_OC4_SetConfig+0xb0>)
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <TIM_OC4_SetConfig+0xb4>)
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	031b      	lsls	r3, r3, #12
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a17      	ldr	r2, [pc, #92]	; (8002884 <TIM_OC4_SetConfig+0xb8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d007      	beq.n	800283c <TIM_OC4_SetConfig+0x70>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a16      	ldr	r2, [pc, #88]	; (8002888 <TIM_OC4_SetConfig+0xbc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <TIM_OC4_SetConfig+0x70>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <TIM_OC4_SetConfig+0xc0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d109      	bne.n	8002850 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	4a14      	ldr	r2, [pc, #80]	; (8002890 <TIM_OC4_SetConfig+0xc4>)
 8002840:	4013      	ands	r3, r2
 8002842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	019b      	lsls	r3, r3, #6
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	621a      	str	r2, [r3, #32]
}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b006      	add	sp, #24
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	ffffefff 	.word	0xffffefff
 8002878:	feff8fff 	.word	0xfeff8fff
 800287c:	fffffcff 	.word	0xfffffcff
 8002880:	ffffdfff 	.word	0xffffdfff
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40014400 	.word	0x40014400
 800288c:	40014800 	.word	0x40014800
 8002890:	ffffbfff 	.word	0xffffbfff

08002894 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a23      	ldr	r2, [pc, #140]	; (8002930 <TIM_OC5_SetConfig+0x9c>)
 80028a4:	401a      	ands	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <TIM_OC5_SetConfig+0xa0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <TIM_OC5_SetConfig+0xa4>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a15      	ldr	r2, [pc, #84]	; (800293c <TIM_OC5_SetConfig+0xa8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <TIM_OC5_SetConfig+0x66>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a14      	ldr	r2, [pc, #80]	; (8002940 <TIM_OC5_SetConfig+0xac>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d003      	beq.n	80028fa <TIM_OC5_SetConfig+0x66>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a13      	ldr	r2, [pc, #76]	; (8002944 <TIM_OC5_SetConfig+0xb0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d109      	bne.n	800290e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <TIM_OC5_SetConfig+0x9c>)
 80028fe:	4013      	ands	r3, r2
 8002900:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	621a      	str	r2, [r3, #32]
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	b006      	add	sp, #24
 800292e:	bd80      	pop	{r7, pc}
 8002930:	fffeffff 	.word	0xfffeffff
 8002934:	fffeff8f 	.word	0xfffeff8f
 8002938:	fffdffff 	.word	0xfffdffff
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40014400 	.word	0x40014400
 8002944:	40014800 	.word	0x40014800

08002948 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <TIM_OC6_SetConfig+0xa0>)
 8002958:	401a      	ands	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <TIM_OC6_SetConfig+0xa4>)
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <TIM_OC6_SetConfig+0xa8>)
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	051b      	lsls	r3, r3, #20
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <TIM_OC6_SetConfig+0xac>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <TIM_OC6_SetConfig+0x68>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a15      	ldr	r2, [pc, #84]	; (80029f8 <TIM_OC6_SetConfig+0xb0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d003      	beq.n	80029b0 <TIM_OC6_SetConfig+0x68>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a14      	ldr	r2, [pc, #80]	; (80029fc <TIM_OC6_SetConfig+0xb4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d109      	bne.n	80029c4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <TIM_OC6_SetConfig+0xb8>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	029b      	lsls	r3, r3, #10
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	621a      	str	r2, [r3, #32]
}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b006      	add	sp, #24
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	ffefffff 	.word	0xffefffff
 80029ec:	feff8fff 	.word	0xfeff8fff
 80029f0:	ffdfffff 	.word	0xffdfffff
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	40014400 	.word	0x40014400
 80029fc:	40014800 	.word	0x40014800
 8002a00:	fffbffff 	.word	0xfffbffff

08002a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4393      	bics	r3, r2
 8002a1e:	001a      	movs	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	22f0      	movs	r2, #240	; 0xf0
 8002a2e:	4393      	bics	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	220a      	movs	r2, #10
 8002a40:	4393      	bics	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	621a      	str	r2, [r3, #32]
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b006      	add	sp, #24
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	2210      	movs	r2, #16
 8002a72:	4393      	bics	r3, r2
 8002a74:	001a      	movs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <TIM_TI2_ConfigInputStage+0x60>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	031b      	lsls	r3, r3, #12
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	22a0      	movs	r2, #160	; 0xa0
 8002a9c:	4393      	bics	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	621a      	str	r2, [r3, #32]
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b006      	add	sp, #24
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	ffff0fff 	.word	0xffff0fff

08002ac4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a08      	ldr	r2, [pc, #32]	; (8002af8 <TIM_ITRx_SetConfig+0x34>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	609a      	str	r2, [r3, #8]
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	ffcfff8f 	.word	0xffcfff8f

08002afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <TIM_ETR_SetConfig+0x3c>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	021a      	lsls	r2, r3, #8
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	609a      	str	r2, [r3, #8]
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b006      	add	sp, #24
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	ffff00ff 	.word	0xffff00ff

08002b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	221f      	movs	r2, #31
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2201      	movs	r2, #1
 8002b50:	409a      	lsls	r2, r3
 8002b52:	0013      	movs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	43d2      	mvns	r2, r2
 8002b5e:	401a      	ands	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	211f      	movs	r1, #31
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4099      	lsls	r1, r3
 8002b72:	000b      	movs	r3, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	621a      	str	r2, [r3, #32]
}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b006      	add	sp, #24
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	223c      	movs	r2, #60	; 0x3c
 8002b92:	5c9b      	ldrb	r3, [r3, r2]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e04a      	b.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	223c      	movs	r2, #60	; 0x3c
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	223d      	movs	r2, #61	; 0x3d
 8002ba8:	2102      	movs	r1, #2
 8002baa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1e      	ldr	r2, [pc, #120]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2270      	movs	r2, #112	; 0x70
 8002bdc:	4393      	bics	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10c      	bne.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2280      	movs	r2, #128	; 0x80
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	223d      	movs	r2, #61	; 0x3d
 8002c24:	2101      	movs	r1, #1
 8002c26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	223c      	movs	r2, #60	; 0x3c
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b004      	add	sp, #16
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	40012c00 	.word	0x40012c00
 8002c40:	ff0fffff 	.word	0xff0fffff
 8002c44:	40000400 	.word	0x40000400

08002c48 <__libc_init_array>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	2600      	movs	r6, #0
 8002c4c:	4d0c      	ldr	r5, [pc, #48]	; (8002c80 <__libc_init_array+0x38>)
 8002c4e:	4c0d      	ldr	r4, [pc, #52]	; (8002c84 <__libc_init_array+0x3c>)
 8002c50:	1b64      	subs	r4, r4, r5
 8002c52:	10a4      	asrs	r4, r4, #2
 8002c54:	42a6      	cmp	r6, r4
 8002c56:	d109      	bne.n	8002c6c <__libc_init_array+0x24>
 8002c58:	2600      	movs	r6, #0
 8002c5a:	f000 f821 	bl	8002ca0 <_init>
 8002c5e:	4d0a      	ldr	r5, [pc, #40]	; (8002c88 <__libc_init_array+0x40>)
 8002c60:	4c0a      	ldr	r4, [pc, #40]	; (8002c8c <__libc_init_array+0x44>)
 8002c62:	1b64      	subs	r4, r4, r5
 8002c64:	10a4      	asrs	r4, r4, #2
 8002c66:	42a6      	cmp	r6, r4
 8002c68:	d105      	bne.n	8002c76 <__libc_init_array+0x2e>
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	00b3      	lsls	r3, r6, #2
 8002c6e:	58eb      	ldr	r3, [r5, r3]
 8002c70:	4798      	blx	r3
 8002c72:	3601      	adds	r6, #1
 8002c74:	e7ee      	b.n	8002c54 <__libc_init_array+0xc>
 8002c76:	00b3      	lsls	r3, r6, #2
 8002c78:	58eb      	ldr	r3, [r5, r3]
 8002c7a:	4798      	blx	r3
 8002c7c:	3601      	adds	r6, #1
 8002c7e:	e7f2      	b.n	8002c66 <__libc_init_array+0x1e>
 8002c80:	08002d4c 	.word	0x08002d4c
 8002c84:	08002d4c 	.word	0x08002d4c
 8002c88:	08002d4c 	.word	0x08002d4c
 8002c8c:	08002d50 	.word	0x08002d50

08002c90 <memset>:
 8002c90:	0003      	movs	r3, r0
 8002c92:	1882      	adds	r2, r0, r2
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d100      	bne.n	8002c9a <memset+0xa>
 8002c98:	4770      	bx	lr
 8002c9a:	7019      	strb	r1, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	e7f9      	b.n	8002c94 <memset+0x4>

08002ca0 <_init>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca6:	bc08      	pop	{r3}
 8002ca8:	469e      	mov	lr, r3
 8002caa:	4770      	bx	lr

08002cac <_fini>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr
