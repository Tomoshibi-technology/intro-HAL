
C011F4-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d9c  08002d9c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002d9c  08002d9c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d9c  08002d9c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000024  08002dc8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002dc8  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000931c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175e  00000000  00000000  00029368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002aac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000122b6  00000000  00000000  0002be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae89  00000000  00000000  0003e0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000745d1  00000000  00000000  00048f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd540  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000240c  00000000  00000000  000bd590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cf0 	.word	0x08002cf0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08002cf0 	.word	0x08002cf0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb09 	bl	800083a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f85c 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f94a 	bl	80004c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f922 	bl	8000478 <MX_DMA_Init>
  MX_TIM3_Init();
 8000234:	f000 f894 	bl	8000360 <MX_TIM3_Init>
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 500);

  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_3, (uint32_t*)pwmlist1, sizeof (pwmlist1) / sizeof (uint16_t));
 8000238:	4a27      	ldr	r2, [pc, #156]	; (80002d8 <main+0xb8>)
 800023a:	4828      	ldr	r0, [pc, #160]	; (80002dc <main+0xbc>)
 800023c:	2305      	movs	r3, #5
 800023e:	2108      	movs	r1, #8
 8000240:	f001 fc50 	bl	8001ae4 <HAL_TIM_PWM_Start_DMA>
  htim3.State = HAL_TIM_STATE_READY;
 8000244:	4b25      	ldr	r3, [pc, #148]	; (80002dc <main+0xbc>)
 8000246:	223d      	movs	r2, #61	; 0x3d
 8000248:	2101      	movs	r1, #1
 800024a:	5499      	strb	r1, [r3, r2]
  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_4, (uint32_t*)pwmlist2, sizeof (pwmlist2) / sizeof (uint16_t));
 800024c:	4a24      	ldr	r2, [pc, #144]	; (80002e0 <main+0xc0>)
 800024e:	4823      	ldr	r0, [pc, #140]	; (80002dc <main+0xbc>)
 8000250:	2305      	movs	r3, #5
 8000252:	210c      	movs	r1, #12
 8000254:	f001 fc46 	bl	8001ae4 <HAL_TIM_PWM_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 8000258:	23a0      	movs	r3, #160	; 0xa0
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	2201      	movs	r2, #1
 800025e:	2108      	movs	r1, #8
 8000260:	0018      	movs	r0, r3
 8000262:	f001 f823 	bl	80012ac <HAL_GPIO_WritePin>
	pwmlist1[0] = 100; pwmlist1[1] = 200; pwmlist1[2] = 300;
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <main+0xb8>)
 8000268:	2264      	movs	r2, #100	; 0x64
 800026a:	801a      	strh	r2, [r3, #0]
 800026c:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <main+0xb8>)
 800026e:	22c8      	movs	r2, #200	; 0xc8
 8000270:	805a      	strh	r2, [r3, #2]
 8000272:	4b19      	ldr	r3, [pc, #100]	; (80002d8 <main+0xb8>)
 8000274:	2296      	movs	r2, #150	; 0x96
 8000276:	0052      	lsls	r2, r2, #1
 8000278:	809a      	strh	r2, [r3, #4]
	pwmlist1[3] = 400; pwmlist1[4] = 500;
 800027a:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <main+0xb8>)
 800027c:	22c8      	movs	r2, #200	; 0xc8
 800027e:	0052      	lsls	r2, r2, #1
 8000280:	80da      	strh	r2, [r3, #6]
 8000282:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <main+0xb8>)
 8000284:	22fa      	movs	r2, #250	; 0xfa
 8000286:	0052      	lsls	r2, r2, #1
 8000288:	811a      	strh	r2, [r3, #8]
   	HAL_Delay(1000);
 800028a:	23fa      	movs	r3, #250	; 0xfa
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fb4e 	bl	8000930 <HAL_Delay>
   	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 8000294:	23a0      	movs	r3, #160	; 0xa0
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2200      	movs	r2, #0
 800029a:	2108      	movs	r1, #8
 800029c:	0018      	movs	r0, r3
 800029e:	f001 f805 	bl	80012ac <HAL_GPIO_WritePin>
	pwmlist1[0] = 900; pwmlist1[1] = 900; pwmlist1[2] = 900;
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <main+0xb8>)
 80002a4:	22e1      	movs	r2, #225	; 0xe1
 80002a6:	0092      	lsls	r2, r2, #2
 80002a8:	801a      	strh	r2, [r3, #0]
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <main+0xb8>)
 80002ac:	22e1      	movs	r2, #225	; 0xe1
 80002ae:	0092      	lsls	r2, r2, #2
 80002b0:	805a      	strh	r2, [r3, #2]
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <main+0xb8>)
 80002b4:	22e1      	movs	r2, #225	; 0xe1
 80002b6:	0092      	lsls	r2, r2, #2
 80002b8:	809a      	strh	r2, [r3, #4]
	pwmlist1[3] = 900; pwmlist1[4] = 900;
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <main+0xb8>)
 80002bc:	22e1      	movs	r2, #225	; 0xe1
 80002be:	0092      	lsls	r2, r2, #2
 80002c0:	80da      	strh	r2, [r3, #6]
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <main+0xb8>)
 80002c4:	22e1      	movs	r2, #225	; 0xe1
 80002c6:	0092      	lsls	r2, r2, #2
 80002c8:	811a      	strh	r2, [r3, #8]
   	HAL_Delay(1000);
 80002ca:	23fa      	movs	r3, #250	; 0xfa
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 fb2e 	bl	8000930 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 80002d4:	e7c0      	b.n	8000258 <main+0x38>
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	20000000 	.word	0x20000000
 80002dc:	20000040 	.word	0x20000040
 80002e0:	2000000c 	.word	0x2000000c

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b590      	push	{r4, r7, lr}
 80002e6:	b08d      	sub	sp, #52	; 0x34
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	2414      	movs	r4, #20
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	0018      	movs	r0, r3
 80002f0:	231c      	movs	r3, #28
 80002f2:	001a      	movs	r2, r3
 80002f4:	2100      	movs	r1, #0
 80002f6:	f002 fcf3 	bl	8002ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fa:	003b      	movs	r3, r7
 80002fc:	0018      	movs	r0, r3
 80002fe:	2314      	movs	r3, #20
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f002 fcec 	bl	8002ce0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	193b      	adds	r3, r7, r4
 8000310:	2280      	movs	r2, #128	; 0x80
 8000312:	0252      	lsls	r2, r2, #9
 8000314:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	193b      	adds	r3, r7, r4
 8000318:	0018      	movs	r0, r3
 800031a:	f000 ffe5 	bl	80012e8 <HAL_RCC_OscConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000322:	f000 f91f 	bl	8000564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	003b      	movs	r3, r7
 8000328:	2207      	movs	r2, #7
 800032a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800032c:	003b      	movs	r3, r7
 800032e:	2201      	movs	r2, #1
 8000330:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	003b      	movs	r3, r7
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000338:	003b      	movs	r3, r7
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800033e:	003b      	movs	r3, r7
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000344:	003b      	movs	r3, r7
 8000346:	2101      	movs	r1, #1
 8000348:	0018      	movs	r0, r3
 800034a:	f001 f9c7 	bl	80016dc <HAL_RCC_ClockConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000352:	f000 f907 	bl	8000564 <Error_Handler>
  }
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b00d      	add	sp, #52	; 0x34
 800035c:	bd90      	pop	{r4, r7, pc}
	...

08000360 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b08e      	sub	sp, #56	; 0x38
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000366:	2328      	movs	r3, #40	; 0x28
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	0018      	movs	r0, r3
 800036c:	2310      	movs	r3, #16
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f002 fcb5 	bl	8002ce0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000376:	231c      	movs	r3, #28
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	0018      	movs	r0, r3
 800037c:	230c      	movs	r3, #12
 800037e:	001a      	movs	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	f002 fcad 	bl	8002ce0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000386:	003b      	movs	r3, r7
 8000388:	0018      	movs	r0, r3
 800038a:	231c      	movs	r3, #28
 800038c:	001a      	movs	r2, r3
 800038e:	2100      	movs	r1, #0
 8000390:	f002 fca6 	bl	8002ce0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000394:	4b34      	ldr	r3, [pc, #208]	; (8000468 <MX_TIM3_Init+0x108>)
 8000396:	4a35      	ldr	r2, [pc, #212]	; (800046c <MX_TIM3_Init+0x10c>)
 8000398:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 800039a:	4b33      	ldr	r3, [pc, #204]	; (8000468 <MX_TIM3_Init+0x108>)
 800039c:	4a34      	ldr	r2, [pc, #208]	; (8000470 <MX_TIM3_Init+0x110>)
 800039e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a0:	4b31      	ldr	r3, [pc, #196]	; (8000468 <MX_TIM3_Init+0x108>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80003a6:	4b30      	ldr	r3, [pc, #192]	; (8000468 <MX_TIM3_Init+0x108>)
 80003a8:	4a32      	ldr	r2, [pc, #200]	; (8000474 <MX_TIM3_Init+0x114>)
 80003aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ac:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <MX_TIM3_Init+0x108>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003b2:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <MX_TIM3_Init+0x108>)
 80003b4:	2280      	movs	r2, #128	; 0x80
 80003b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003b8:	4b2b      	ldr	r3, [pc, #172]	; (8000468 <MX_TIM3_Init+0x108>)
 80003ba:	0018      	movs	r0, r3
 80003bc:	f001 fada 	bl	8001974 <HAL_TIM_Base_Init>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80003c4:	f000 f8ce 	bl	8000564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c8:	2128      	movs	r1, #40	; 0x28
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2280      	movs	r2, #128	; 0x80
 80003ce:	0152      	lsls	r2, r2, #5
 80003d0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003d2:	187a      	adds	r2, r7, r1
 80003d4:	4b24      	ldr	r3, [pc, #144]	; (8000468 <MX_TIM3_Init+0x108>)
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 fe71 	bl	80020c0 <HAL_TIM_ConfigClockSource>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80003e2:	f000 f8bf 	bl	8000564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <MX_TIM3_Init+0x108>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fb1b 	bl	8001a24 <HAL_TIM_PWM_Init>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80003f2:	f000 f8b7 	bl	8000564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f6:	211c      	movs	r1, #28
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000404:	187a      	adds	r2, r7, r1
 8000406:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_TIM3_Init+0x108>)
 8000408:	0011      	movs	r1, r2
 800040a:	0018      	movs	r0, r3
 800040c:	f002 fbe2 	bl	8002bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000414:	f000 f8a6 	bl	8000564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000418:	003b      	movs	r3, r7
 800041a:	2260      	movs	r2, #96	; 0x60
 800041c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800041e:	003b      	movs	r3, r7
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800042a:	003b      	movs	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000430:	0039      	movs	r1, r7
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <MX_TIM3_Init+0x108>)
 8000434:	2208      	movs	r2, #8
 8000436:	0018      	movs	r0, r3
 8000438:	f001 fd42 	bl	8001ec0 <HAL_TIM_PWM_ConfigChannel>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000440:	f000 f890 	bl	8000564 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000444:	0039      	movs	r1, r7
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <MX_TIM3_Init+0x108>)
 8000448:	220c      	movs	r2, #12
 800044a:	0018      	movs	r0, r3
 800044c:	f001 fd38 	bl	8001ec0 <HAL_TIM_PWM_ConfigChannel>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000454:	f000 f886 	bl	8000564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000458:	4b03      	ldr	r3, [pc, #12]	; (8000468 <MX_TIM3_Init+0x108>)
 800045a:	0018      	movs	r0, r3
 800045c:	f000 f928 	bl	80006b0 <HAL_TIM_MspPostInit>

}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	b00e      	add	sp, #56	; 0x38
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000040 	.word	0x20000040
 800046c:	40000400 	.word	0x40000400
 8000470:	0000063f 	.word	0x0000063f
 8000474:	000003e7 	.word	0x000003e7

08000478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_DMA_Init+0x48>)
 8000480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_DMA_Init+0x48>)
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	639a      	str	r2, [r3, #56]	; 0x38
 800048a:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <MX_DMA_Init+0x48>)
 800048c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800048e:	2201      	movs	r2, #1
 8000490:	4013      	ands	r3, r2
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2100      	movs	r1, #0
 800049a:	2009      	movs	r0, #9
 800049c:	f000 fb16 	bl	8000acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004a0:	2009      	movs	r0, #9
 80004a2:	f000 fb28 	bl	8000af6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	200a      	movs	r0, #10
 80004ac:	f000 fb0e 	bl	8000acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004b0:	200a      	movs	r0, #10
 80004b2:	f000 fb20 	bl	8000af6 <HAL_NVIC_EnableIRQ>

}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	40021000 	.word	0x40021000

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b089      	sub	sp, #36	; 0x24
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	240c      	movs	r4, #12
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	0018      	movs	r0, r3
 80004d0:	2314      	movs	r3, #20
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f002 fc03 	bl	8002ce0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <MX_GPIO_Init+0x9c>)
 80004dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004de:	4b20      	ldr	r3, [pc, #128]	; (8000560 <MX_GPIO_Init+0x9c>)
 80004e0:	2102      	movs	r1, #2
 80004e2:	430a      	orrs	r2, r1
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
 80004e6:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_GPIO_Init+0x9c>)
 80004e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ea:	2202      	movs	r2, #2
 80004ec:	4013      	ands	r3, r2
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_GPIO_Init+0x9c>)
 80004f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004f6:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <MX_GPIO_Init+0x9c>)
 80004f8:	2104      	movs	r1, #4
 80004fa:	430a      	orrs	r2, r1
 80004fc:	635a      	str	r2, [r3, #52]	; 0x34
 80004fe:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_GPIO_Init+0x9c>)
 8000500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000502:	2204      	movs	r2, #4
 8000504:	4013      	ands	r3, r2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_GPIO_Init+0x9c>)
 800050c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_GPIO_Init+0x9c>)
 8000510:	2101      	movs	r1, #1
 8000512:	430a      	orrs	r2, r1
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
 8000516:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MX_GPIO_Init+0x9c>)
 8000518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051a:	2201      	movs	r2, #1
 800051c:	4013      	ands	r3, r2
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000522:	23a0      	movs	r3, #160	; 0xa0
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2200      	movs	r2, #0
 8000528:	2108      	movs	r1, #8
 800052a:	0018      	movs	r0, r3
 800052c:	f000 febe 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000530:	0021      	movs	r1, r4
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2208      	movs	r2, #8
 8000536:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2201      	movs	r2, #1
 800053c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800054a:	187a      	adds	r2, r7, r1
 800054c:	23a0      	movs	r3, #160	; 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fd40 	bl	8000fd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b009      	add	sp, #36	; 0x24
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	40021000 	.word	0x40021000

08000564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000568:	b672      	cpsid	i
}
 800056a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800056c:	e7fe      	b.n	800056c <Error_Handler+0x8>
	...

08000570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <HAL_MspInit+0x44>)
 8000578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_MspInit+0x44>)
 800057c:	2101      	movs	r1, #1
 800057e:	430a      	orrs	r2, r1
 8000580:	641a      	str	r2, [r3, #64]	; 0x40
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_MspInit+0x44>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	2201      	movs	r2, #1
 8000588:	4013      	ands	r3, r2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_MspInit+0x44>)
 8000590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_MspInit+0x44>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	0549      	lsls	r1, r1, #21
 8000598:	430a      	orrs	r2, r1
 800059a:	63da      	str	r2, [r3, #60]	; 0x3c
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_MspInit+0x44>)
 800059e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	055b      	lsls	r3, r3, #21
 80005a4:	4013      	ands	r3, r2
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b002      	add	sp, #8
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40021000 	.word	0x40021000

080005b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a34      	ldr	r2, [pc, #208]	; (8000698 <HAL_TIM_Base_MspInit+0xe0>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d161      	bne.n	800068e <HAL_TIM_Base_MspInit+0xd6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005ca:	4b34      	ldr	r3, [pc, #208]	; (800069c <HAL_TIM_Base_MspInit+0xe4>)
 80005cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005ce:	4b33      	ldr	r3, [pc, #204]	; (800069c <HAL_TIM_Base_MspInit+0xe4>)
 80005d0:	2102      	movs	r1, #2
 80005d2:	430a      	orrs	r2, r1
 80005d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80005d6:	4b31      	ldr	r3, [pc, #196]	; (800069c <HAL_TIM_Base_MspInit+0xe4>)
 80005d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005da:	2202      	movs	r2, #2
 80005dc:	4013      	ands	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Channel1;
 80005e2:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 80005e4:	4a2f      	ldr	r2, [pc, #188]	; (80006a4 <HAL_TIM_Base_MspInit+0xec>)
 80005e6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 80005e8:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 80005ea:	2222      	movs	r2, #34	; 0x22
 80005ec:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005ee:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 80005f0:	2210      	movs	r2, #16
 80005f2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	0052      	lsls	r2, r2, #1
 8000606:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	00d2      	lsls	r2, r2, #3
 800060e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8000610:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 8000612:	2220      	movs	r2, #32
 8000614:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fa86 	bl	8000b30 <HAL_DMA_Init>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000628:	f7ff ff9c 	bl	8000564 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <HAL_TIM_Base_MspInit+0xe8>)
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM3_CH4 Init */
    hdma_tim3_ch4.Instance = DMA1_Channel2;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 800063a:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <HAL_TIM_Base_MspInit+0xf4>)
 800063c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 8000640:	2223      	movs	r2, #35	; 0x23
 8000642:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 8000646:	2210      	movs	r2, #16
 8000648:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 8000658:	2280      	movs	r2, #128	; 0x80
 800065a:	0052      	lsls	r2, r2, #1
 800065c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	00d2      	lsls	r2, r2, #3
 8000664:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 8000668:	2220      	movs	r2, #32
 800066a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fa5b 	bl	8000b30 <HAL_DMA_Init>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <HAL_TIM_Base_MspInit+0xca>
    {
      Error_Handler();
 800067e:	f7ff ff71 	bl	8000564 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <HAL_TIM_Base_MspInit+0xf0>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b004      	add	sp, #16
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40000400 	.word	0x40000400
 800069c:	40021000 	.word	0x40021000
 80006a0:	2000008c 	.word	0x2000008c
 80006a4:	40020008 	.word	0x40020008
 80006a8:	200000e8 	.word	0x200000e8
 80006ac:	4002001c 	.word	0x4002001c

080006b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b08b      	sub	sp, #44	; 0x2c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	2414      	movs	r4, #20
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	0018      	movs	r0, r3
 80006be:	2314      	movs	r3, #20
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f002 fb0c 	bl	8002ce0 <memset>
  if(htim->Instance==TIM3)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a25      	ldr	r2, [pc, #148]	; (8000764 <HAL_TIM_MspPostInit+0xb4>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d144      	bne.n	800075c <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <HAL_TIM_MspPostInit+0xb8>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d6:	4b24      	ldr	r3, [pc, #144]	; (8000768 <HAL_TIM_MspPostInit+0xb8>)
 80006d8:	2102      	movs	r1, #2
 80006da:	430a      	orrs	r2, r1
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <HAL_TIM_MspPostInit+0xb8>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e2:	2202      	movs	r2, #2
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <HAL_TIM_MspPostInit+0xb8>)
 80006ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <HAL_TIM_MspPostInit+0xb8>)
 80006f0:	2101      	movs	r1, #1
 80006f2:	430a      	orrs	r2, r1
 80006f4:	635a      	str	r2, [r3, #52]	; 0x34
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <HAL_TIM_MspPostInit+0xb8>)
 80006f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fa:	2201      	movs	r2, #1
 80006fc:	4013      	ands	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB7     ------> TIM3_CH4
    PA8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2202      	movs	r2, #2
 800070c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM3;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2203      	movs	r2, #3
 800071e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	193b      	adds	r3, r7, r4
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <HAL_TIM_MspPostInit+0xbc>)
 8000724:	0019      	movs	r1, r3
 8000726:	0010      	movs	r0, r2
 8000728:	f000 fc56 	bl	8000fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800072c:	0021      	movs	r1, r4
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2202      	movs	r2, #2
 800073a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM3;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	220b      	movs	r2, #11
 800074c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	187a      	adds	r2, r7, r1
 8000750:	23a0      	movs	r3, #160	; 0xa0
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	0011      	movs	r1, r2
 8000756:	0018      	movs	r0, r3
 8000758:	f000 fc3e 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b00b      	add	sp, #44	; 0x2c
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	40000400 	.word	0x40000400
 8000768:	40021000 	.word	0x40021000
 800076c:	50000400 	.word	0x50000400

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f8b2 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <DMA1_Channel1_IRQHandler+0x14>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fad4 	bl	8000d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	2000008c 	.word	0x2000008c

080007b8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <DMA1_Channel2_3_IRQHandler+0x14>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fac8 	bl	8000d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	200000e8 	.word	0x200000e8

080007d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <SystemInit+0x14>)
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	0512      	lsls	r2, r2, #20
 80007da:	609a      	str	r2, [r3, #8]
#endif
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ee:	e003      	b.n	80007f8 <LoopCopyDataInit>

080007f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80007f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007f6:	3104      	adds	r1, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <LoopForever+0xa>)
  ldr r3, =_edata
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <LoopForever+0xe>)
  adds r2, r0, r1
 80007fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000800:	d3f6      	bcc.n	80007f0 <CopyDataInit>
  ldr r2, =_sbss
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <LoopForever+0x12>)
  b LoopFillZerobss
 8000804:	e002      	b.n	800080c <LoopFillZerobss>

08000806 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  str  r3, [r2]
 8000808:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080a:	3204      	adds	r2, #4

0800080c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <LoopForever+0x16>)
  cmp r2, r3
 800080e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000810:	d3f9      	bcc.n	8000806 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000812:	f7ff ffdd 	bl	80007d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000816:	f002 fa3f 	bl	8002c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fd01 	bl	8000220 <main>

0800081e <LoopForever>:

LoopForever:
    b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   r0, =_estack
 8000820:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000824:	08002da4 	.word	0x08002da4
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800082c:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8000830:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8000834:	20000148 	.word	0x20000148

08000838 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_IRQHandler>

0800083a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000846:	2003      	movs	r0, #3
 8000848:	f000 f80e 	bl	8000868 <HAL_InitTick>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d003      	beq.n	8000858 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e001      	b.n	800085c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000858:	f7ff fe8a 	bl	8000570 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781b      	ldrb	r3, [r3, #0]
}
 8000860:	0018      	movs	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000870:	230f      	movs	r3, #15
 8000872:	18fb      	adds	r3, r7, r3
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <HAL_InitTick+0x88>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d02b      	beq.n	80008d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <HAL_InitTick+0x8c>)
 8000882:	681c      	ldr	r4, [r3, #0]
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <HAL_InitTick+0x88>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	0019      	movs	r1, r3
 800088a:	23fa      	movs	r3, #250	; 0xfa
 800088c:	0098      	lsls	r0, r3, #2
 800088e:	f7ff fc3b 	bl	8000108 <__udivsi3>
 8000892:	0003      	movs	r3, r0
 8000894:	0019      	movs	r1, r3
 8000896:	0020      	movs	r0, r4
 8000898:	f7ff fc36 	bl	8000108 <__udivsi3>
 800089c:	0003      	movs	r3, r0
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 f939 	bl	8000b16 <HAL_SYSTICK_Config>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d112      	bne.n	80008ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d80a      	bhi.n	80008c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	2301      	movs	r3, #1
 80008b2:	425b      	negs	r3, r3
 80008b4:	2200      	movs	r2, #0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 f908 	bl	8000acc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_InitTick+0x90>)
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e00d      	b.n	80008e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008c4:	230f      	movs	r3, #15
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e008      	b.n	80008e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ce:	230f      	movs	r3, #15
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	e003      	b.n	80008e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008d8:	230f      	movs	r3, #15
 80008da:	18fb      	adds	r3, r7, r3
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008e0:	230f      	movs	r3, #15
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	781b      	ldrb	r3, [r3, #0]
}
 80008e6:	0018      	movs	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b005      	add	sp, #20
 80008ec:	bd90      	pop	{r4, r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	20000020 	.word	0x20000020
 80008f4:	20000018 	.word	0x20000018
 80008f8:	2000001c 	.word	0x2000001c

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <HAL_IncTick+0x18>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <HAL_IncTick+0x1c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	18d2      	adds	r2, r2, r3
 800090a:	4b02      	ldr	r3, [pc, #8]	; (8000914 <HAL_IncTick+0x18>)
 800090c:	601a      	str	r2, [r3, #0]
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000144 	.word	0x20000144
 8000918:	20000020 	.word	0x20000020

0800091c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	20000144 	.word	0x20000144

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff fff0 	bl	800091c <HAL_GetTick>
 800093c:	0003      	movs	r3, r0
 800093e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	d004      	beq.n	8000954 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_Delay+0x40>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	f7ff ffe1 	bl	800091c <HAL_GetTick>
 800095a:	0002      	movs	r2, r0
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	429a      	cmp	r2, r3
 8000964:	d8f7      	bhi.n	8000956 <HAL_Delay+0x26>
  {
  }
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b004      	add	sp, #16
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000020 	.word	0x20000020

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	0002      	movs	r2, r0
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b7f      	cmp	r3, #127	; 0x7f
 8000986:	d809      	bhi.n	800099c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	001a      	movs	r2, r3
 800098e:	231f      	movs	r3, #31
 8000990:	401a      	ands	r2, r3
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_EnableIRQ+0x30>)
 8000994:	2101      	movs	r1, #1
 8000996:	4091      	lsls	r1, r2
 8000998:	000a      	movs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	0002      	movs	r2, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b7f      	cmp	r3, #127	; 0x7f
 80009bc:	d828      	bhi.n	8000a10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009be:	4a2f      	ldr	r2, [pc, #188]	; (8000a7c <__NVIC_SetPriority+0xd4>)
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	33c0      	adds	r3, #192	; 0xc0
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	589b      	ldr	r3, [r3, r2]
 80009ce:	1dfa      	adds	r2, r7, #7
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	0011      	movs	r1, r2
 80009d4:	2203      	movs	r2, #3
 80009d6:	400a      	ands	r2, r1
 80009d8:	00d2      	lsls	r2, r2, #3
 80009da:	21ff      	movs	r1, #255	; 0xff
 80009dc:	4091      	lsls	r1, r2
 80009de:	000a      	movs	r2, r1
 80009e0:	43d2      	mvns	r2, r2
 80009e2:	401a      	ands	r2, r3
 80009e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	019b      	lsls	r3, r3, #6
 80009ea:	22ff      	movs	r2, #255	; 0xff
 80009ec:	401a      	ands	r2, r3
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0018      	movs	r0, r3
 80009f4:	2303      	movs	r3, #3
 80009f6:	4003      	ands	r3, r0
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fc:	481f      	ldr	r0, [pc, #124]	; (8000a7c <__NVIC_SetPriority+0xd4>)
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	33c0      	adds	r3, #192	; 0xc0
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a0e:	e031      	b.n	8000a74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <__NVIC_SetPriority+0xd8>)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	0019      	movs	r1, r3
 8000a18:	230f      	movs	r3, #15
 8000a1a:	400b      	ands	r3, r1
 8000a1c:	3b08      	subs	r3, #8
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3306      	adds	r3, #6
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	18d3      	adds	r3, r2, r3
 8000a26:	3304      	adds	r3, #4
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	1dfa      	adds	r2, r7, #7
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	0011      	movs	r1, r2
 8000a30:	2203      	movs	r2, #3
 8000a32:	400a      	ands	r2, r1
 8000a34:	00d2      	lsls	r2, r2, #3
 8000a36:	21ff      	movs	r1, #255	; 0xff
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	000a      	movs	r2, r1
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	401a      	ands	r2, r3
 8000a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	019b      	lsls	r3, r3, #6
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	401a      	ands	r2, r3
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2303      	movs	r3, #3
 8000a52:	4003      	ands	r3, r0
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <__NVIC_SetPriority+0xd8>)
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	001c      	movs	r4, r3
 8000a60:	230f      	movs	r3, #15
 8000a62:	4023      	ands	r3, r4
 8000a64:	3b08      	subs	r3, #8
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	3306      	adds	r3, #6
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	18c3      	adds	r3, r0, r3
 8000a70:	3304      	adds	r3, #4
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b003      	add	sp, #12
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1e5a      	subs	r2, r3, #1
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	045b      	lsls	r3, r3, #17
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d301      	bcc.n	8000a9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e010      	b.n	8000abe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <SysTick_Config+0x44>)
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	3a01      	subs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff ff7c 	bl	80009a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SysTick_Config+0x44>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SysTick_Config+0x44>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	0018      	movs	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	1c02      	adds	r2, r0, #0
 8000adc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff ff5d 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b004      	add	sp, #16
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	0002      	movs	r2, r0
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff ff33 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff ffaf 	bl	8000a84 <SysTick_Config>
 8000b26:	0003      	movs	r3, r0
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e077      	b.n	8000c32 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a3d      	ldr	r2, [pc, #244]	; (8000c3c <HAL_DMA_Init+0x10c>)
 8000b48:	4694      	mov	ip, r2
 8000b4a:	4463      	add	r3, ip
 8000b4c:	2114      	movs	r1, #20
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fada 	bl	8000108 <__udivsi3>
 8000b54:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000b56:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2225      	movs	r2, #37	; 0x25
 8000b60:	2102      	movs	r1, #2
 8000b62:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4934      	ldr	r1, [pc, #208]	; (8000c40 <HAL_DMA_Init+0x110>)
 8000b70:	400a      	ands	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6819      	ldr	r1, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	431a      	orrs	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	431a      	orrs	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 f9c3 	bl	8000f38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	01db      	lsls	r3, r3, #7
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d102      	bne.n	8000bc4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bcc:	21ff      	movs	r1, #255	; 0xff
 8000bce:	400a      	ands	r2, r1
 8000bd0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000bda:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d011      	beq.n	8000c08 <HAL_DMA_Init+0xd8>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d80d      	bhi.n	8000c08 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 f9ce 	bl	8000f90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	e008      	b.n	8000c1a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2225      	movs	r2, #37	; 0x25
 8000c24:	2101      	movs	r1, #1
 8000c26:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2224      	movs	r2, #36	; 0x24
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	bffdfff8 	.word	0xbffdfff8
 8000c40:	ffff800f 	.word	0xffff800f

08000c44 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c52:	2317      	movs	r3, #23
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2224      	movs	r2, #36	; 0x24
 8000c5e:	5c9b      	ldrb	r3, [r3, r2]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d101      	bne.n	8000c68 <HAL_DMA_Start_IT+0x24>
 8000c64:	2302      	movs	r3, #2
 8000c66:	e070      	b.n	8000d4a <HAL_DMA_Start_IT+0x106>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2224      	movs	r2, #36	; 0x24
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2225      	movs	r2, #37	; 0x25
 8000c74:	5c9b      	ldrb	r3, [r3, r2]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d157      	bne.n	8000d2c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2225      	movs	r2, #37	; 0x25
 8000c80:	2102      	movs	r1, #2
 8000c82:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2200      	movs	r2, #0
 8000c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	438a      	bics	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	68b9      	ldr	r1, [r7, #8]
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f000 f909 	bl	8000eb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d008      	beq.n	8000cc0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	210e      	movs	r1, #14
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e00f      	b.n	8000ce0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2104      	movs	r1, #4
 8000ccc:	438a      	bics	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	210a      	movs	r1, #10
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	025b      	lsls	r3, r3, #9
 8000cea:	4013      	ands	r3, r2
 8000cec:	d008      	beq.n	8000d00 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d008      	beq.n	8000d1a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	0049      	lsls	r1, r1, #1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e007      	b.n	8000d3c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2224      	movs	r2, #36	; 0x24
 8000d30:	2100      	movs	r1, #0
 8000d32:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d34:	2317      	movs	r3, #23
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	2202      	movs	r2, #2
 8000d3a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2224      	movs	r2, #36	; 0x24
 8000d40:	2100      	movs	r1, #0
 8000d42:	5499      	strb	r1, [r3, r2]

  return status;
 8000d44:	2317      	movs	r3, #23
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	781b      	ldrb	r3, [r3, #0]
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b006      	add	sp, #24
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8000d5c:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <HAL_DMA_IRQHandler+0x160>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	221c      	movs	r2, #28
 8000d70:	4013      	ands	r3, r2
 8000d72:	2204      	movs	r2, #4
 8000d74:	409a      	lsls	r2, r3
 8000d76:	0013      	movs	r3, r2
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d027      	beq.n	8000dce <HAL_DMA_IRQHandler+0x7a>
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2204      	movs	r2, #4
 8000d82:	4013      	ands	r3, r2
 8000d84:	d023      	beq.n	8000dce <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d107      	bne.n	8000da2 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	438a      	bics	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000da2:	4b44      	ldr	r3, [pc, #272]	; (8000eb4 <HAL_DMA_IRQHandler+0x160>)
 8000da4:	6859      	ldr	r1, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	221c      	movs	r2, #28
 8000dac:	4013      	ands	r3, r2
 8000dae:	2204      	movs	r2, #4
 8000db0:	409a      	lsls	r2, r3
 8000db2:	4b40      	ldr	r3, [pc, #256]	; (8000eb4 <HAL_DMA_IRQHandler+0x160>)
 8000db4:	430a      	orrs	r2, r1
 8000db6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d100      	bne.n	8000dc2 <HAL_DMA_IRQHandler+0x6e>
 8000dc0:	e073      	b.n	8000eaa <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	0010      	movs	r0, r2
 8000dca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000dcc:	e06d      	b.n	8000eaa <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	221c      	movs	r2, #28
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4013      	ands	r3, r2
 8000de0:	d02e      	beq.n	8000e40 <HAL_DMA_IRQHandler+0xec>
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2202      	movs	r2, #2
 8000de6:	4013      	ands	r3, r2
 8000de8:	d02a      	beq.n	8000e40 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2220      	movs	r2, #32
 8000df2:	4013      	ands	r3, r2
 8000df4:	d10b      	bne.n	8000e0e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	210a      	movs	r1, #10
 8000e02:	438a      	bics	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2225      	movs	r2, #37	; 0x25
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000e0e:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <HAL_DMA_IRQHandler+0x160>)
 8000e10:	6859      	ldr	r1, [r3, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	221c      	movs	r2, #28
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <HAL_DMA_IRQHandler+0x160>)
 8000e20:	430a      	orrs	r2, r1
 8000e22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2224      	movs	r2, #36	; 0x24
 8000e28:	2100      	movs	r1, #0
 8000e2a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d03a      	beq.n	8000eaa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	0010      	movs	r0, r2
 8000e3c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000e3e:	e034      	b.n	8000eaa <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	221c      	movs	r2, #28
 8000e46:	4013      	ands	r3, r2
 8000e48:	2208      	movs	r2, #8
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4013      	ands	r3, r2
 8000e52:	d02b      	beq.n	8000eac <HAL_DMA_IRQHandler+0x158>
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	2208      	movs	r2, #8
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d027      	beq.n	8000eac <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	210e      	movs	r1, #14
 8000e68:	438a      	bics	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_DMA_IRQHandler+0x160>)
 8000e6e:	6859      	ldr	r1, [r3, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	221c      	movs	r2, #28
 8000e76:	4013      	ands	r3, r2
 8000e78:	2201      	movs	r2, #1
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_DMA_IRQHandler+0x160>)
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2225      	movs	r2, #37	; 0x25
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2224      	movs	r2, #36	; 0x24
 8000e94:	2100      	movs	r1, #0
 8000e96:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d005      	beq.n	8000eac <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	0010      	movs	r0, r2
 8000ea8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46c0      	nop			; (mov r8, r8)
}
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b004      	add	sp, #16
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000ece:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000ee0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <DMA_SetConfig+0x7c>)
 8000ee4:	6859      	ldr	r1, [r3, #4]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	221c      	movs	r2, #28
 8000eec:	4013      	ands	r3, r2
 8000eee:	2201      	movs	r2, #1
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <DMA_SetConfig+0x7c>)
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b10      	cmp	r3, #16
 8000f06:	d108      	bne.n	8000f1a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f18:	e007      	b.n	8000f2a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	60da      	str	r2, [r3, #12]
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b004      	add	sp, #16
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	40020000 	.word	0x40020000

08000f38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	001a      	movs	r2, r3
 8000f46:	23ff      	movs	r3, #255	; 0xff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	3b08      	subs	r3, #8
 8000f4c:	2114      	movs	r1, #20
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff f8da 	bl	8000108 <__udivsi3>
 8000f54:	0003      	movs	r3, r0
 8000f56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000f60:	4694      	mov	ip, r2
 8000f62:	4463      	add	r3, ip
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	001a      	movs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000f70:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	221c      	movs	r2, #28
 8000f76:	4013      	ands	r3, r2
 8000f78:	2201      	movs	r2, #1
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b004      	add	sp, #16
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	10008200 	.word	0x10008200
 8000f8c:	40020880 	.word	0x40020880

08000f90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	22ff      	movs	r2, #255	; 0xff
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000fa6:	4694      	mov	ip, r2
 8000fa8:	4463      	add	r3, ip
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	001a      	movs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000fb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b004      	add	sp, #16
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	1000823f 	.word	0x1000823f
 8000fd4:	40020940 	.word	0x40020940

08000fd8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000fe6:	e14d      	b.n	8001284 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2101      	movs	r1, #1
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4091      	lsls	r1, r2
 8000ff2:	000a      	movs	r2, r1
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d100      	bne.n	8001000 <HAL_GPIO_Init+0x28>
 8000ffe:	e13e      	b.n	800127e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x38>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b12      	cmp	r3, #18
 800100e:	d125      	bne.n	800105c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	58d3      	ldr	r3, [r2, r3]
 800101c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	2207      	movs	r2, #7
 8001022:	4013      	ands	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	409a      	lsls	r2, r3
 800102a:	0013      	movs	r3, r2
 800102c:	43da      	mvns	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	220f      	movs	r2, #15
 800103a:	401a      	ands	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	2107      	movs	r1, #7
 8001040:	400b      	ands	r3, r1
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	409a      	lsls	r2, r3
 8001046:	0013      	movs	r3, r2
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	4313      	orrs	r3, r2
 800104c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	6979      	ldr	r1, [r7, #20]
 800105a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	409a      	lsls	r2, r3
 800106a:	0013      	movs	r3, r2
 800106c:	43da      	mvns	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2203      	movs	r2, #3
 800107a:	401a      	ands	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	409a      	lsls	r2, r3
 8001082:	0013      	movs	r3, r2
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	4313      	orrs	r3, r2
 8001088:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d00b      	beq.n	80010b0 <HAL_GPIO_Init+0xd8>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d007      	beq.n	80010b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a4:	2b11      	cmp	r3, #17
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b12      	cmp	r3, #18
 80010ae:	d130      	bne.n	8001112 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	409a      	lsls	r2, r3
 80010be:	0013      	movs	r3, r2
 80010c0:	43da      	mvns	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	4013      	ands	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	409a      	lsls	r2, r3
 80010d2:	0013      	movs	r3, r2
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010e6:	2201      	movs	r2, #1
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	43da      	mvns	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4013      	ands	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	2201      	movs	r2, #1
 80010fe:	401a      	ands	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4313      	orrs	r3, r2
 800110a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d017      	beq.n	800114a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	43da      	mvns	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	4013      	ands	r3, r2
 8001130:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4313      	orrs	r3, r2
 8001142:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	055b      	lsls	r3, r3, #21
 8001152:	4013      	ands	r3, r2
 8001154:	d100      	bne.n	8001158 <HAL_GPIO_Init+0x180>
 8001156:	e092      	b.n	800127e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001158:	4a50      	ldr	r2, [pc, #320]	; (800129c <HAL_GPIO_Init+0x2c4>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3318      	adds	r3, #24
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	589b      	ldr	r3, [r3, r2]
 8001164:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	2203      	movs	r2, #3
 800116a:	4013      	ands	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	220f      	movs	r2, #15
 8001170:	409a      	lsls	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	43da      	mvns	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	4013      	ands	r3, r2
 800117a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	23a0      	movs	r3, #160	; 0xa0
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	429a      	cmp	r2, r3
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x1d6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a45      	ldr	r2, [pc, #276]	; (80012a0 <HAL_GPIO_Init+0x2c8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x1d2>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a44      	ldr	r2, [pc, #272]	; (80012a4 <HAL_GPIO_Init+0x2cc>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x1ce>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a43      	ldr	r2, [pc, #268]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x1ca>
 800119e:	2303      	movs	r3, #3
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x1d8>
 80011a2:	2305      	movs	r3, #5
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x1d8>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x1d8>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x1d8>
 80011ae:	2300      	movs	r3, #0
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	2103      	movs	r1, #3
 80011b4:	400a      	ands	r2, r1
 80011b6:	00d2      	lsls	r2, r2, #3
 80011b8:	4093      	lsls	r3, r2
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4313      	orrs	r3, r2
 80011be:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011c0:	4936      	ldr	r1, [pc, #216]	; (800129c <HAL_GPIO_Init+0x2c4>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3318      	adds	r3, #24
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80011ce:	4a33      	ldr	r2, [pc, #204]	; (800129c <HAL_GPIO_Init+0x2c4>)
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	58d3      	ldr	r3, [r2, r3]
 80011d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43da      	mvns	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	4013      	ands	r3, r2
 80011de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	025b      	lsls	r3, r3, #9
 80011e8:	4013      	ands	r3, r2
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80011f4:	4929      	ldr	r1, [pc, #164]	; (800129c <HAL_GPIO_Init+0x2c4>)
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80011fc:	4a27      	ldr	r2, [pc, #156]	; (800129c <HAL_GPIO_Init+0x2c4>)
 80011fe:	2384      	movs	r3, #132	; 0x84
 8001200:	58d3      	ldr	r3, [r2, r3]
 8001202:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43da      	mvns	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	4013      	ands	r3, r2
 800120c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	029b      	lsls	r3, r3, #10
 8001216:	4013      	ands	r3, r2
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001222:	491e      	ldr	r1, [pc, #120]	; (800129c <HAL_GPIO_Init+0x2c4>)
 8001224:	2284      	movs	r2, #132	; 0x84
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_GPIO_Init+0x2c4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43da      	mvns	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	4013      	ands	r3, r2
 8001238:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	035b      	lsls	r3, r3, #13
 8001242:	4013      	ands	r3, r2
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_GPIO_Init+0x2c4>)
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_GPIO_Init+0x2c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43da      	mvns	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4013      	ands	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	039b      	lsls	r3, r3, #14
 800126c:	4013      	ands	r3, r2
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_GPIO_Init+0x2c4>)
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	3301      	adds	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	40da      	lsrs	r2, r3
 800128c:	1e13      	subs	r3, r2, #0
 800128e:	d000      	beq.n	8001292 <HAL_GPIO_Init+0x2ba>
 8001290:	e6aa      	b.n	8000fe8 <HAL_GPIO_Init+0x10>
  }
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b006      	add	sp, #24
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021800 	.word	0x40021800
 80012a0:	50000400 	.word	0x50000400
 80012a4:	50000800 	.word	0x50000800
 80012a8:	50001400 	.word	0x50001400

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	0008      	movs	r0, r1
 80012b6:	0011      	movs	r1, r2
 80012b8:	1cbb      	adds	r3, r7, #2
 80012ba:	1c02      	adds	r2, r0, #0
 80012bc:	801a      	strh	r2, [r3, #0]
 80012be:	1c7b      	adds	r3, r7, #1
 80012c0:	1c0a      	adds	r2, r1, #0
 80012c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c4:	1c7b      	adds	r3, r7, #1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012cc:	1cbb      	adds	r3, r7, #2
 80012ce:	881a      	ldrh	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d4:	e003      	b.n	80012de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d6:	1cbb      	adds	r3, r7, #2
 80012d8:	881a      	ldrh	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e1e5      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	4013      	ands	r3, r2
 8001302:	d100      	bne.n	8001306 <HAL_RCC_OscConfig+0x1e>
 8001304:	e06f      	b.n	80013e6 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001306:	4bc4      	ldr	r3, [pc, #784]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2238      	movs	r2, #56	; 0x38
 800130c:	4013      	ands	r3, r2
 800130e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b08      	cmp	r3, #8
 8001314:	d10b      	bne.n	800132e <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	4bc0      	ldr	r3, [pc, #768]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	029b      	lsls	r3, r3, #10
 800131e:	4013      	ands	r3, r2
 8001320:	d061      	beq.n	80013e6 <HAL_RCC_OscConfig+0xfe>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d15d      	bne.n	80013e6 <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e1cb      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	025b      	lsls	r3, r3, #9
 8001336:	429a      	cmp	r2, r3
 8001338:	d107      	bne.n	800134a <HAL_RCC_OscConfig+0x62>
 800133a:	4bb7      	ldr	r3, [pc, #732]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4bb6      	ldr	r3, [pc, #728]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	0249      	lsls	r1, r1, #9
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e020      	b.n	800138c <HAL_RCC_OscConfig+0xa4>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	23a0      	movs	r3, #160	; 0xa0
 8001350:	02db      	lsls	r3, r3, #11
 8001352:	429a      	cmp	r2, r3
 8001354:	d10e      	bne.n	8001374 <HAL_RCC_OscConfig+0x8c>
 8001356:	4bb0      	ldr	r3, [pc, #704]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4baf      	ldr	r3, [pc, #700]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	02c9      	lsls	r1, r1, #11
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	4bac      	ldr	r3, [pc, #688]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4bab      	ldr	r3, [pc, #684]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800136a:	2180      	movs	r1, #128	; 0x80
 800136c:	0249      	lsls	r1, r1, #9
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0xa4>
 8001374:	4ba8      	ldr	r3, [pc, #672]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4ba7      	ldr	r3, [pc, #668]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800137a:	49a8      	ldr	r1, [pc, #672]	; (800161c <HAL_RCC_OscConfig+0x334>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	4ba5      	ldr	r3, [pc, #660]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4ba4      	ldr	r3, [pc, #656]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001386:	49a6      	ldr	r1, [pc, #664]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001388:	400a      	ands	r2, r1
 800138a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d014      	beq.n	80013be <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fac2 	bl	800091c <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800139e:	f7ff fabd 	bl	800091c <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b64      	cmp	r3, #100	; 0x64
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e18a      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b0:	4b99      	ldr	r3, [pc, #612]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	029b      	lsls	r3, r3, #10
 80013b8:	4013      	ands	r3, r2
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0xb6>
 80013bc:	e013      	b.n	80013e6 <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff faad 	bl	800091c <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff faa8 	bl	800091c <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e175      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013da:	4b8f      	ldr	r3, [pc, #572]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	029b      	lsls	r3, r3, #10
 80013e2:	4013      	ands	r3, r2
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2202      	movs	r2, #2
 80013ec:	4013      	ands	r3, r2
 80013ee:	d100      	bne.n	80013f2 <HAL_RCC_OscConfig+0x10a>
 80013f0:	e08c      	b.n	800150c <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f2:	4b89      	ldr	r3, [pc, #548]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2238      	movs	r2, #56	; 0x38
 80013f8:	4013      	ands	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d135      	bne.n	800146e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001402:	4b85      	ldr	r3, [pc, #532]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4013      	ands	r3, r2
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x132>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e155      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4b7f      	ldr	r3, [pc, #508]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a81      	ldr	r2, [pc, #516]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001420:	4013      	ands	r3, r2
 8001422:	0019      	movs	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	021a      	lsls	r2, r3, #8
 800142a:	4b7b      	ldr	r3, [pc, #492]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800142c:	430a      	orrs	r2, r1
 800142e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d112      	bne.n	800145c <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001436:	4b78      	ldr	r3, [pc, #480]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a7b      	ldr	r2, [pc, #492]	; (8001628 <HAL_RCC_OscConfig+0x340>)
 800143c:	4013      	ands	r3, r2
 800143e:	0019      	movs	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	4b74      	ldr	r3, [pc, #464]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800144a:	4b73      	ldr	r3, [pc, #460]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0adb      	lsrs	r3, r3, #11
 8001450:	2207      	movs	r2, #7
 8001452:	4013      	ands	r3, r2
 8001454:	4a75      	ldr	r2, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0x344>)
 8001456:	40da      	lsrs	r2, r3
 8001458:	4b75      	ldr	r3, [pc, #468]	; (8001630 <HAL_RCC_OscConfig+0x348>)
 800145a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800145c:	4b75      	ldr	r3, [pc, #468]	; (8001634 <HAL_RCC_OscConfig+0x34c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff fa01 	bl	8000868 <HAL_InitTick>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d050      	beq.n	800150c <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e12b      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d030      	beq.n	80014d8 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001476:	4b68      	ldr	r3, [pc, #416]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6b      	ldr	r2, [pc, #428]	; (8001628 <HAL_RCC_OscConfig+0x340>)
 800147c:	4013      	ands	r3, r2
 800147e:	0019      	movs	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	4b64      	ldr	r3, [pc, #400]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800148a:	4b63      	ldr	r3, [pc, #396]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b62      	ldr	r3, [pc, #392]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0049      	lsls	r1, r1, #1
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fa40 	bl	800091c <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a2:	f7ff fa3b 	bl	800091c <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e108      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b4:	4b58      	ldr	r3, [pc, #352]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4013      	ands	r3, r2
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c0:	4b55      	ldr	r3, [pc, #340]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a57      	ldr	r2, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	021a      	lsls	r2, r3, #8
 80014d0:	4b51      	ldr	r3, [pc, #324]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80014d2:	430a      	orrs	r2, r1
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	e019      	b.n	800150c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80014d8:	4b4f      	ldr	r3, [pc, #316]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b4e      	ldr	r3, [pc, #312]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80014de:	4956      	ldr	r1, [pc, #344]	; (8001638 <HAL_RCC_OscConfig+0x350>)
 80014e0:	400a      	ands	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fa1a 	bl	800091c <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff fa15 	bl	800091c <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e0e2      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001500:	4b45      	ldr	r3, [pc, #276]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4013      	ands	r3, r2
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2208      	movs	r2, #8
 8001512:	4013      	ands	r3, r2
 8001514:	d047      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001516:	4b40      	ldr	r3, [pc, #256]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2238      	movs	r2, #56	; 0x38
 800151c:	4013      	ands	r3, r2
 800151e:	2b18      	cmp	r3, #24
 8001520:	d10a      	bne.n	8001538 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	2202      	movs	r2, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d03c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2be>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d138      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0c6      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d019      	beq.n	8001574 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001540:	4b35      	ldr	r3, [pc, #212]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001542:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001544:	4b34      	ldr	r3, [pc, #208]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001546:	2101      	movs	r1, #1
 8001548:	430a      	orrs	r2, r1
 800154a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154c:	f7ff f9e6 	bl	800091c <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001556:	f7ff f9e1 	bl	800091c <HAL_GetTick>
 800155a:	0002      	movs	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e0ae      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800156a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156c:	2202      	movs	r2, #2
 800156e:	4013      	ands	r3, r2
 8001570:	d0f1      	beq.n	8001556 <HAL_RCC_OscConfig+0x26e>
 8001572:	e018      	b.n	80015a6 <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800157a:	2101      	movs	r1, #1
 800157c:	438a      	bics	r2, r1
 800157e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff f9cc 	bl	800091c <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff f9c7 	bl	800091c <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e094      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a0:	2202      	movs	r2, #2
 80015a2:	4013      	ands	r3, r2
 80015a4:	d1f1      	bne.n	800158a <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2204      	movs	r2, #4
 80015ac:	4013      	ands	r3, r2
 80015ae:	d100      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2ca>
 80015b0:	e088      	b.n	80016c4 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	230f      	movs	r3, #15
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2238      	movs	r2, #56	; 0x38
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80015c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ca:	2202      	movs	r2, #2
 80015cc:	4013      	ands	r3, r2
 80015ce:	d100      	bne.n	80015d2 <HAL_RCC_OscConfig+0x2ea>
 80015d0:	e078      	b.n	80016c4 <HAL_RCC_OscConfig+0x3dc>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d000      	beq.n	80015dc <HAL_RCC_OscConfig+0x2f4>
 80015da:	e073      	b.n	80016c4 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e072      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x30e>
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80015ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	430a      	orrs	r2, r1
 80015f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80015f4:	e02e      	b.n	8001654 <HAL_RCC_OscConfig+0x36c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d11e      	bne.n	800163c <HAL_RCC_OscConfig+0x354>
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001600:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001604:	2104      	movs	r1, #4
 8001606:	430a      	orrs	r2, r1
 8001608:	65da      	str	r2, [r3, #92]	; 0x5c
 800160a:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 800160c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800160e:	4b02      	ldr	r3, [pc, #8]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001610:	2101      	movs	r1, #1
 8001612:	430a      	orrs	r2, r1
 8001614:	65da      	str	r2, [r3, #92]	; 0x5c
 8001616:	e01d      	b.n	8001654 <HAL_RCC_OscConfig+0x36c>
 8001618:	40021000 	.word	0x40021000
 800161c:	fffeffff 	.word	0xfffeffff
 8001620:	fffbffff 	.word	0xfffbffff
 8001624:	ffff80ff 	.word	0xffff80ff
 8001628:	ffffc7ff 	.word	0xffffc7ff
 800162c:	02dc6c00 	.word	0x02dc6c00
 8001630:	20000018 	.word	0x20000018
 8001634:	2000001c 	.word	0x2000001c
 8001638:	fffffeff 	.word	0xfffffeff
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_RCC_OscConfig+0x3e8>)
 800163e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_RCC_OscConfig+0x3e8>)
 8001642:	2101      	movs	r1, #1
 8001644:	438a      	bics	r2, r1
 8001646:	65da      	str	r2, [r3, #92]	; 0x5c
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <HAL_RCC_OscConfig+0x3e8>)
 800164a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_RCC_OscConfig+0x3e8>)
 800164e:	2104      	movs	r1, #4
 8001650:	438a      	bics	r2, r1
 8001652:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d014      	beq.n	8001686 <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff f95e 	bl	800091c <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001664:	e009      	b.n	800167a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff f959 	bl	800091c <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_RCC_OscConfig+0x3ec>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e025      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_RCC_OscConfig+0x3e8>)
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x37e>
 8001684:	e013      	b.n	80016ae <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7ff f949 	bl	800091c <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800168e:	e009      	b.n	80016a4 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff f944 	bl	800091c <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_RCC_OscConfig+0x3ec>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e010      	b.n	80016c6 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_RCC_OscConfig+0x3e8>)
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	2202      	movs	r2, #2
 80016aa:	4013      	ands	r3, r2
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016ae:	230f      	movs	r3, #15
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_RCC_OscConfig+0x3e8>)
 80016ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_RCC_OscConfig+0x3e8>)
 80016be:	4906      	ldr	r1, [pc, #24]	; (80016d8 <HAL_RCC_OscConfig+0x3f0>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b006      	add	sp, #24
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	40021000 	.word	0x40021000
 80016d4:	00001388 	.word	0x00001388
 80016d8:	efffffff 	.word	0xefffffff

080016dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0e9      	b.n	80018c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f0:	4b76      	ldr	r3, [pc, #472]	; (80018cc <HAL_RCC_ClockConfig+0x1f0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2207      	movs	r2, #7
 80016f6:	4013      	ands	r3, r2
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d91e      	bls.n	800173c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b73      	ldr	r3, [pc, #460]	; (80018cc <HAL_RCC_ClockConfig+0x1f0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2207      	movs	r2, #7
 8001704:	4393      	bics	r3, r2
 8001706:	0019      	movs	r1, r3
 8001708:	4b70      	ldr	r3, [pc, #448]	; (80018cc <HAL_RCC_ClockConfig+0x1f0>)
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001710:	f7ff f904 	bl	800091c <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001718:	e009      	b.n	800172e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171a:	f7ff f8ff 	bl	800091c <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	4a6a      	ldr	r2, [pc, #424]	; (80018d0 <HAL_RCC_ClockConfig+0x1f4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e0ca      	b.n	80018c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800172e:	4b67      	ldr	r3, [pc, #412]	; (80018cc <HAL_RCC_ClockConfig+0x1f0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2207      	movs	r2, #7
 8001734:	4013      	ands	r3, r2
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d1ee      	bne.n	800171a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2202      	movs	r2, #2
 8001742:	4013      	ands	r3, r2
 8001744:	d017      	beq.n	8001776 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2204      	movs	r2, #4
 800174c:	4013      	ands	r3, r2
 800174e:	d008      	beq.n	8001762 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001750:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a60      	ldr	r2, [pc, #384]	; (80018d8 <HAL_RCC_ClockConfig+0x1fc>)
 8001756:	401a      	ands	r2, r3
 8001758:	4b5e      	ldr	r3, [pc, #376]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 800175a:	21b0      	movs	r1, #176	; 0xb0
 800175c:	0109      	lsls	r1, r1, #4
 800175e:	430a      	orrs	r2, r1
 8001760:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001762:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	4a5d      	ldr	r2, [pc, #372]	; (80018dc <HAL_RCC_ClockConfig+0x200>)
 8001768:	4013      	ands	r3, r2
 800176a:	0019      	movs	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2201      	movs	r2, #1
 800177c:	4013      	ands	r3, r2
 800177e:	d055      	beq.n	800182c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001780:	4b54      	ldr	r3, [pc, #336]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	221c      	movs	r2, #28
 8001786:	4393      	bics	r3, r2
 8001788:	0019      	movs	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d107      	bne.n	80017ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179c:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	029b      	lsls	r3, r3, #10
 80017a4:	4013      	ands	r3, r2
 80017a6:	d11f      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e08b      	b.n	80018c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b4:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4013      	ands	r3, r2
 80017be:	d113      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e07f      	b.n	80018c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d106      	bne.n	80017da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80017cc:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 80017ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d108      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e074      	b.n	80018c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80017da:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e06d      	b.n	80018c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017e8:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2207      	movs	r2, #7
 80017ee:	4393      	bics	r3, r2
 80017f0:	0019      	movs	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017fc:	f7ff f88e 	bl	800091c <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001804:	e009      	b.n	800181a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001806:	f7ff f889 	bl	800091c <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4a2f      	ldr	r2, [pc, #188]	; (80018d0 <HAL_RCC_ClockConfig+0x1f4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e054      	b.n	80018c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2238      	movs	r2, #56	; 0x38
 8001820:	401a      	ands	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	429a      	cmp	r2, r3
 800182a:	d1ec      	bne.n	8001806 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_RCC_ClockConfig+0x1f0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2207      	movs	r2, #7
 8001832:	4013      	ands	r3, r2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d21e      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2207      	movs	r2, #7
 8001840:	4393      	bics	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_RCC_ClockConfig+0x1f0>)
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800184c:	f7ff f866 	bl	800091c <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001854:	e009      	b.n	800186a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001856:	f7ff f861 	bl	800091c <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <HAL_RCC_ClockConfig+0x1f4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e02c      	b.n	80018c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2207      	movs	r2, #7
 8001870:	4013      	ands	r3, r2
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d1ee      	bne.n	8001856 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2204      	movs	r2, #4
 800187e:	4013      	ands	r3, r2
 8001880:	d009      	beq.n	8001896 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <HAL_RCC_ClockConfig+0x204>)
 8001888:	4013      	ands	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001896:	f000 f82b 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 800189a:	0001      	movs	r1, r0
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	220f      	movs	r2, #15
 80018a4:	401a      	ands	r2, r3
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_RCC_ClockConfig+0x208>)
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	58d3      	ldr	r3, [r2, r3]
 80018ac:	221f      	movs	r2, #31
 80018ae:	4013      	ands	r3, r2
 80018b0:	000a      	movs	r2, r1
 80018b2:	40da      	lsrs	r2, r3
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_RCC_ClockConfig+0x20c>)
 80018b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_RCC_ClockConfig+0x210>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0018      	movs	r0, r3
 80018be:	f7fe ffd3 	bl	8000868 <HAL_InitTick>
 80018c2:	0003      	movs	r3, r0
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b004      	add	sp, #16
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40022000 	.word	0x40022000
 80018d0:	00001388 	.word	0x00001388
 80018d4:	40021000 	.word	0x40021000
 80018d8:	ffff84ff 	.word	0xffff84ff
 80018dc:	fffff0ff 	.word	0xfffff0ff
 80018e0:	ffff8fff 	.word	0xffff8fff
 80018e4:	08002d08 	.word	0x08002d08
 80018e8:	20000018 	.word	0x20000018
 80018ec:	2000001c 	.word	0x2000001c

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_RCC_GetSysClockFreq+0x78>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2238      	movs	r2, #56	; 0x38
 80018fc:	4013      	ands	r3, r2
 80018fe:	d10f      	bne.n	8001920 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_GetSysClockFreq+0x78>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0adb      	lsrs	r3, r3, #11
 8001906:	2207      	movs	r2, #7
 8001908:	4013      	ands	r3, r2
 800190a:	2201      	movs	r2, #1
 800190c:	409a      	lsls	r2, r3
 800190e:	0013      	movs	r3, r2
 8001910:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001912:	6839      	ldr	r1, [r7, #0]
 8001914:	4815      	ldr	r0, [pc, #84]	; (800196c <HAL_RCC_GetSysClockFreq+0x7c>)
 8001916:	f7fe fbf7 	bl	8000108 <__udivsi3>
 800191a:	0003      	movs	r3, r0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	e01e      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_RCC_GetSysClockFreq+0x78>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2238      	movs	r2, #56	; 0x38
 8001926:	4013      	ands	r3, r2
 8001928:	2b08      	cmp	r3, #8
 800192a:	d102      	bne.n	8001932 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_GetSysClockFreq+0x80>)
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	e015      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_RCC_GetSysClockFreq+0x78>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2238      	movs	r2, #56	; 0x38
 8001938:	4013      	ands	r3, r2
 800193a:	2b20      	cmp	r3, #32
 800193c:	d103      	bne.n	8001946 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	e00b      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_RCC_GetSysClockFreq+0x78>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2238      	movs	r2, #56	; 0x38
 800194c:	4013      	ands	r3, r2
 800194e:	2b18      	cmp	r3, #24
 8001950:	d103      	bne.n	800195a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001952:	23fa      	movs	r3, #250	; 0xfa
 8001954:	01db      	lsls	r3, r3, #7
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	e001      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800195e:	687b      	ldr	r3, [r7, #4]
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000
 800196c:	02dc6c00 	.word	0x02dc6c00
 8001970:	01e84800 	.word	0x01e84800

08001974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e04a      	b.n	8001a1c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	223d      	movs	r2, #61	; 0x3d
 800198a:	5c9b      	ldrb	r3, [r3, r2]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d107      	bne.n	80019a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	223c      	movs	r2, #60	; 0x3c
 8001996:	2100      	movs	r1, #0
 8001998:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	0018      	movs	r0, r3
 800199e:	f7fe fe0b 	bl	80005b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	223d      	movs	r2, #61	; 0x3d
 80019a6:	2102      	movs	r1, #2
 80019a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3304      	adds	r3, #4
 80019b2:	0019      	movs	r1, r3
 80019b4:	0010      	movs	r0, r2
 80019b6:	f000 fd45 	bl	8002444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2248      	movs	r2, #72	; 0x48
 80019be:	2101      	movs	r1, #1
 80019c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	223e      	movs	r2, #62	; 0x3e
 80019c6:	2101      	movs	r1, #1
 80019c8:	5499      	strb	r1, [r3, r2]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	223f      	movs	r2, #63	; 0x3f
 80019ce:	2101      	movs	r1, #1
 80019d0:	5499      	strb	r1, [r3, r2]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2240      	movs	r2, #64	; 0x40
 80019d6:	2101      	movs	r1, #1
 80019d8:	5499      	strb	r1, [r3, r2]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2241      	movs	r2, #65	; 0x41
 80019de:	2101      	movs	r1, #1
 80019e0:	5499      	strb	r1, [r3, r2]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2242      	movs	r2, #66	; 0x42
 80019e6:	2101      	movs	r1, #1
 80019e8:	5499      	strb	r1, [r3, r2]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2243      	movs	r2, #67	; 0x43
 80019ee:	2101      	movs	r1, #1
 80019f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2244      	movs	r2, #68	; 0x44
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2245      	movs	r2, #69	; 0x45
 80019fe:	2101      	movs	r1, #1
 8001a00:	5499      	strb	r1, [r3, r2]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2246      	movs	r2, #70	; 0x46
 8001a06:	2101      	movs	r1, #1
 8001a08:	5499      	strb	r1, [r3, r2]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2247      	movs	r2, #71	; 0x47
 8001a0e:	2101      	movs	r1, #1
 8001a10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	223d      	movs	r2, #61	; 0x3d
 8001a16:	2101      	movs	r1, #1
 8001a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b002      	add	sp, #8
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e04a      	b.n	8001acc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	223d      	movs	r2, #61	; 0x3d
 8001a3a:	5c9b      	ldrb	r3, [r3, r2]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d107      	bne.n	8001a52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	223c      	movs	r2, #60	; 0x3c
 8001a46:	2100      	movs	r1, #0
 8001a48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 f841 	bl	8001ad4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	223d      	movs	r2, #61	; 0x3d
 8001a56:	2102      	movs	r1, #2
 8001a58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3304      	adds	r3, #4
 8001a62:	0019      	movs	r1, r3
 8001a64:	0010      	movs	r0, r2
 8001a66:	f000 fced 	bl	8002444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2248      	movs	r2, #72	; 0x48
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	223e      	movs	r2, #62	; 0x3e
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	223f      	movs	r2, #63	; 0x3f
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2241      	movs	r2, #65	; 0x41
 8001a8e:	2101      	movs	r1, #1
 8001a90:	5499      	strb	r1, [r3, r2]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2242      	movs	r2, #66	; 0x42
 8001a96:	2101      	movs	r1, #1
 8001a98:	5499      	strb	r1, [r3, r2]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2243      	movs	r2, #67	; 0x43
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2244      	movs	r2, #68	; 0x44
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	5499      	strb	r1, [r3, r2]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2245      	movs	r2, #69	; 0x45
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2246      	movs	r2, #70	; 0x46
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	5499      	strb	r1, [r3, r2]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2247      	movs	r2, #71	; 0x47
 8001abe:	2101      	movs	r1, #1
 8001ac0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	223d      	movs	r2, #61	; 0x3d
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	001a      	movs	r2, r3
 8001af2:	1cbb      	adds	r3, r7, #2
 8001af4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001af6:	2317      	movs	r3, #23
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d108      	bne.n	8001b16 <HAL_TIM_PWM_Start_DMA+0x32>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	223e      	movs	r2, #62	; 0x3e
 8001b08:	5c9b      	ldrb	r3, [r3, r2]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	3b02      	subs	r3, #2
 8001b0e:	425a      	negs	r2, r3
 8001b10:	4153      	adcs	r3, r2
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	e037      	b.n	8001b86 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d108      	bne.n	8001b2e <HAL_TIM_PWM_Start_DMA+0x4a>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	223f      	movs	r2, #63	; 0x3f
 8001b20:	5c9b      	ldrb	r3, [r3, r2]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3b02      	subs	r3, #2
 8001b26:	425a      	negs	r2, r3
 8001b28:	4153      	adcs	r3, r2
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	e02b      	b.n	8001b86 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d108      	bne.n	8001b46 <HAL_TIM_PWM_Start_DMA+0x62>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	5c9b      	ldrb	r3, [r3, r2]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3b02      	subs	r3, #2
 8001b3e:	425a      	negs	r2, r3
 8001b40:	4153      	adcs	r3, r2
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	e01f      	b.n	8001b86 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b0c      	cmp	r3, #12
 8001b4a:	d108      	bne.n	8001b5e <HAL_TIM_PWM_Start_DMA+0x7a>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2241      	movs	r2, #65	; 0x41
 8001b50:	5c9b      	ldrb	r3, [r3, r2]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	3b02      	subs	r3, #2
 8001b56:	425a      	negs	r2, r3
 8001b58:	4153      	adcs	r3, r2
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	e013      	b.n	8001b86 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b10      	cmp	r3, #16
 8001b62:	d108      	bne.n	8001b76 <HAL_TIM_PWM_Start_DMA+0x92>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2242      	movs	r2, #66	; 0x42
 8001b68:	5c9b      	ldrb	r3, [r3, r2]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3b02      	subs	r3, #2
 8001b6e:	425a      	negs	r2, r3
 8001b70:	4153      	adcs	r3, r2
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	e007      	b.n	8001b86 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2243      	movs	r2, #67	; 0x43
 8001b7a:	5c9b      	ldrb	r3, [r3, r2]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3b02      	subs	r3, #2
 8001b80:	425a      	negs	r2, r3
 8001b82:	4153      	adcs	r3, r2
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e183      	b.n	8001e96 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d108      	bne.n	8001ba6 <HAL_TIM_PWM_Start_DMA+0xc2>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	223e      	movs	r2, #62	; 0x3e
 8001b98:	5c9b      	ldrb	r3, [r3, r2]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	425a      	negs	r2, r3
 8001ba0:	4153      	adcs	r3, r2
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	e037      	b.n	8001c16 <HAL_TIM_PWM_Start_DMA+0x132>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d108      	bne.n	8001bbe <HAL_TIM_PWM_Start_DMA+0xda>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	223f      	movs	r2, #63	; 0x3f
 8001bb0:	5c9b      	ldrb	r3, [r3, r2]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	425a      	negs	r2, r3
 8001bb8:	4153      	adcs	r3, r2
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	e02b      	b.n	8001c16 <HAL_TIM_PWM_Start_DMA+0x132>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d108      	bne.n	8001bd6 <HAL_TIM_PWM_Start_DMA+0xf2>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2240      	movs	r2, #64	; 0x40
 8001bc8:	5c9b      	ldrb	r3, [r3, r2]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	425a      	negs	r2, r3
 8001bd0:	4153      	adcs	r3, r2
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	e01f      	b.n	8001c16 <HAL_TIM_PWM_Start_DMA+0x132>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b0c      	cmp	r3, #12
 8001bda:	d108      	bne.n	8001bee <HAL_TIM_PWM_Start_DMA+0x10a>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2241      	movs	r2, #65	; 0x41
 8001be0:	5c9b      	ldrb	r3, [r3, r2]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	425a      	negs	r2, r3
 8001be8:	4153      	adcs	r3, r2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	e013      	b.n	8001c16 <HAL_TIM_PWM_Start_DMA+0x132>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b10      	cmp	r3, #16
 8001bf2:	d108      	bne.n	8001c06 <HAL_TIM_PWM_Start_DMA+0x122>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2242      	movs	r2, #66	; 0x42
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	425a      	negs	r2, r3
 8001c00:	4153      	adcs	r3, r2
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	e007      	b.n	8001c16 <HAL_TIM_PWM_Start_DMA+0x132>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2243      	movs	r2, #67	; 0x43
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	425a      	negs	r2, r3
 8001c12:	4153      	adcs	r3, r2
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d035      	beq.n	8001c86 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) && (Length > 0U))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_TIM_PWM_Start_DMA+0x148>
 8001c20:	1cbb      	adds	r3, r7, #2
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e134      	b.n	8001e96 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d104      	bne.n	8001c3c <HAL_TIM_PWM_Start_DMA+0x158>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	223e      	movs	r2, #62	; 0x3e
 8001c36:	2102      	movs	r1, #2
 8001c38:	5499      	strb	r1, [r3, r2]
 8001c3a:	e026      	b.n	8001c8a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d104      	bne.n	8001c4c <HAL_TIM_PWM_Start_DMA+0x168>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	223f      	movs	r2, #63	; 0x3f
 8001c46:	2102      	movs	r1, #2
 8001c48:	5499      	strb	r1, [r3, r2]
 8001c4a:	e01e      	b.n	8001c8a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d104      	bne.n	8001c5c <HAL_TIM_PWM_Start_DMA+0x178>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	2102      	movs	r1, #2
 8001c58:	5499      	strb	r1, [r3, r2]
 8001c5a:	e016      	b.n	8001c8a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d104      	bne.n	8001c6c <HAL_TIM_PWM_Start_DMA+0x188>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2241      	movs	r2, #65	; 0x41
 8001c66:	2102      	movs	r1, #2
 8001c68:	5499      	strb	r1, [r3, r2]
 8001c6a:	e00e      	b.n	8001c8a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d104      	bne.n	8001c7c <HAL_TIM_PWM_Start_DMA+0x198>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2242      	movs	r2, #66	; 0x42
 8001c76:	2102      	movs	r1, #2
 8001c78:	5499      	strb	r1, [r3, r2]
 8001c7a:	e006      	b.n	8001c8a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2243      	movs	r2, #67	; 0x43
 8001c80:	2102      	movs	r1, #2
 8001c82:	5499      	strb	r1, [r3, r2]
 8001c84:	e001      	b.n	8001c8a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e105      	b.n	8001e96 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d100      	bne.n	8001c92 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8001c90:	e080      	b.n	8001d94 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b0c      	cmp	r3, #12
 8001c96:	d900      	bls.n	8001c9a <HAL_TIM_PWM_Start_DMA+0x1b6>
 8001c98:	e0a1      	b.n	8001dde <HAL_TIM_PWM_Start_DMA+0x2fa>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d054      	beq.n	8001d4a <HAL_TIM_PWM_Start_DMA+0x266>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d900      	bls.n	8001ca8 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8001ca6:	e09a      	b.n	8001dde <HAL_TIM_PWM_Start_DMA+0x2fa>
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_PWM_Start_DMA+0x1d2>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d025      	beq.n	8001d00 <HAL_TIM_PWM_Start_DMA+0x21c>
 8001cb4:	e093      	b.n	8001dde <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	4a79      	ldr	r2, [pc, #484]	; (8001ea0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	4a78      	ldr	r2, [pc, #480]	; (8001ea4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001cc4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	4a77      	ldr	r2, [pc, #476]	; (8001ea8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3334      	adds	r3, #52	; 0x34
 8001cda:	001a      	movs	r2, r3
 8001cdc:	1cbb      	adds	r3, r7, #2
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	f7fe ffb0 	bl	8000c44 <HAL_DMA_Start_IT>
 8001ce4:	1e03      	subs	r3, r0, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0d4      	b.n	8001e96 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2180      	movs	r1, #128	; 0x80
 8001cf8:	0089      	lsls	r1, r1, #2
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	60da      	str	r2, [r3, #12]
      break;
 8001cfe:	e073      	b.n	8001de8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	4a66      	ldr	r2, [pc, #408]	; (8001ea0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	4a65      	ldr	r2, [pc, #404]	; (8001ea4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	4a64      	ldr	r2, [pc, #400]	; (8001ea8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3338      	adds	r3, #56	; 0x38
 8001d24:	001a      	movs	r2, r3
 8001d26:	1cbb      	adds	r3, r7, #2
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	f7fe ff8b 	bl	8000c44 <HAL_DMA_Start_IT>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0af      	b.n	8001e96 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	00c9      	lsls	r1, r1, #3
 8001d44:	430a      	orrs	r2, r1
 8001d46:	60da      	str	r2, [r3, #12]
      break;
 8001d48:	e04e      	b.n	8001de8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	4a54      	ldr	r2, [pc, #336]	; (8001ea0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	4a53      	ldr	r2, [pc, #332]	; (8001ea4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	333c      	adds	r3, #60	; 0x3c
 8001d6e:	001a      	movs	r2, r3
 8001d70:	1cbb      	adds	r3, r7, #2
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	f7fe ff66 	bl	8000c44 <HAL_DMA_Start_IT>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e08a      	b.n	8001e96 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2180      	movs	r1, #128	; 0x80
 8001d8c:	0109      	lsls	r1, r1, #4
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	60da      	str	r2, [r3, #12]
      break;
 8001d92:	e029      	b.n	8001de8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4a41      	ldr	r2, [pc, #260]	; (8001ea0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	4a40      	ldr	r2, [pc, #256]	; (8001ea4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	4a3f      	ldr	r2, [pc, #252]	; (8001ea8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3340      	adds	r3, #64	; 0x40
 8001db8:	001a      	movs	r2, r3
 8001dba:	1cbb      	adds	r3, r7, #2
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	f7fe ff41 	bl	8000c44 <HAL_DMA_Start_IT>
 8001dc2:	1e03      	subs	r3, r0, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e065      	b.n	8001e96 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0149      	lsls	r1, r1, #5
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	60da      	str	r2, [r3, #12]
      break;
 8001ddc:	e004      	b.n	8001de8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8001dde:	2317      	movs	r3, #23
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
      break;
 8001de6:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001de8:	2317      	movs	r3, #23
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d14e      	bne.n	8001e90 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 fec6 	bl	8002b8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a29      	ldr	r2, [pc, #164]	; (8001eac <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d009      	beq.n	8001e1e <HAL_TIM_PWM_Start_DMA+0x33a>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a28      	ldr	r2, [pc, #160]	; (8001eb0 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d004      	beq.n	8001e1e <HAL_TIM_PWM_Start_DMA+0x33a>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_TIM_PWM_Start_DMA+0x33e>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_TIM_PWM_Start_DMA+0x340>
 8001e22:	2300      	movs	r3, #0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2180      	movs	r1, #128	; 0x80
 8001e34:	0209      	lsls	r1, r1, #8
 8001e36:	430a      	orrs	r2, r1
 8001e38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_TIM_PWM_Start_DMA+0x36a>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1b      	ldr	r2, [pc, #108]	; (8001eb8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d116      	bne.n	8001e7c <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d016      	beq.n	8001e8e <HAL_TIM_PWM_Start_DMA+0x3aa>
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d011      	beq.n	8001e8e <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7a:	e008      	b.n	8001e8e <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2101      	movs	r1, #1
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e000      	b.n	8001e90 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8001e90:	2317      	movs	r3, #23
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	781b      	ldrb	r3, [r3, #0]
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b006      	add	sp, #24
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	08002331 	.word	0x08002331
 8001ea4:	080023db 	.word	0x080023db
 8001ea8:	0800229d 	.word	0x0800229d
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	40014400 	.word	0x40014400
 8001eb4:	40014800 	.word	0x40014800
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	00010007 	.word	0x00010007

08001ec0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ecc:	2317      	movs	r3, #23
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	223c      	movs	r2, #60	; 0x3c
 8001ed8:	5c9b      	ldrb	r3, [r3, r2]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e0e5      	b.n	80020ae <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	223c      	movs	r2, #60	; 0x3c
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b14      	cmp	r3, #20
 8001eee:	d900      	bls.n	8001ef2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ef0:	e0d1      	b.n	8002096 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	009a      	lsls	r2, r3, #2
 8001ef6:	4b70      	ldr	r3, [pc, #448]	; (80020b8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001ef8:	18d3      	adds	r3, r2, r3
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	0011      	movs	r1, r2
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fb08 	bl	800251c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2108      	movs	r1, #8
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2104      	movs	r1, #4
 8001f28:	438a      	bics	r2, r1
 8001f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6999      	ldr	r1, [r3, #24]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	619a      	str	r2, [r3, #24]
      break;
 8001f3e:	e0af      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	0011      	movs	r1, r2
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 fb67 	bl	800261c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	0109      	lsls	r1, r1, #4
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4954      	ldr	r1, [pc, #336]	; (80020bc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6999      	ldr	r1, [r3, #24]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	021a      	lsls	r2, r3, #8
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	619a      	str	r2, [r3, #24]
      break;
 8001f84:	e08c      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	0011      	movs	r1, r2
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 fbc2 	bl	8002718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2108      	movs	r1, #8
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2104      	movs	r1, #4
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69d9      	ldr	r1, [r3, #28]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	61da      	str	r2, [r3, #28]
      break;
 8001fc6:	e06b      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	0011      	movs	r1, r2
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f000 fc23 	bl	800281c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2180      	movs	r1, #128	; 0x80
 8001fe2:	0109      	lsls	r1, r1, #4
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69da      	ldr	r2, [r3, #28]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4932      	ldr	r1, [pc, #200]	; (80020bc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69d9      	ldr	r1, [r3, #28]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	021a      	lsls	r2, r3, #8
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	61da      	str	r2, [r3, #28]
      break;
 800200c:	e048      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	0011      	movs	r1, r2
 8002016:	0018      	movs	r0, r3
 8002018:	f000 fc64 	bl	80028e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2108      	movs	r1, #8
 8002028:	430a      	orrs	r2, r1
 800202a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2104      	movs	r1, #4
 8002038:	438a      	bics	r2, r1
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800204e:	e027      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	0011      	movs	r1, r2
 8002058:	0018      	movs	r0, r3
 800205a:	f000 fc9d 	bl	8002998 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0109      	lsls	r1, r1, #4
 800206c:	430a      	orrs	r2, r1
 800206e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4910      	ldr	r1, [pc, #64]	; (80020bc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800207c:	400a      	ands	r2, r1
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	021a      	lsls	r2, r3, #8
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002094:	e004      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002096:	2317      	movs	r3, #23
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
      break;
 800209e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	223c      	movs	r2, #60	; 0x3c
 80020a4:	2100      	movs	r1, #0
 80020a6:	5499      	strb	r1, [r3, r2]

  return status;
 80020a8:	2317      	movs	r3, #23
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	781b      	ldrb	r3, [r3, #0]
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b006      	add	sp, #24
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	08002d48 	.word	0x08002d48
 80020bc:	fffffbff 	.word	0xfffffbff

080020c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ca:	230f      	movs	r3, #15
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	223c      	movs	r2, #60	; 0x3c
 80020d6:	5c9b      	ldrb	r3, [r3, r2]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_TIM_ConfigClockSource+0x20>
 80020dc:	2302      	movs	r3, #2
 80020de:	e0bc      	b.n	800225a <HAL_TIM_ConfigClockSource+0x19a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	223c      	movs	r2, #60	; 0x3c
 80020e4:	2101      	movs	r1, #1
 80020e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	223d      	movs	r2, #61	; 0x3d
 80020ec:	2102      	movs	r1, #2
 80020ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4a5a      	ldr	r2, [pc, #360]	; (8002264 <HAL_TIM_ConfigClockSource+0x1a4>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4a59      	ldr	r2, [pc, #356]	; (8002268 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002104:	4013      	ands	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	0192      	lsls	r2, r2, #6
 8002118:	4293      	cmp	r3, r2
 800211a:	d040      	beq.n	800219e <HAL_TIM_ConfigClockSource+0xde>
 800211c:	2280      	movs	r2, #128	; 0x80
 800211e:	0192      	lsls	r2, r2, #6
 8002120:	4293      	cmp	r3, r2
 8002122:	d900      	bls.n	8002126 <HAL_TIM_ConfigClockSource+0x66>
 8002124:	e088      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x178>
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	0152      	lsls	r2, r2, #5
 800212a:	4293      	cmp	r3, r2
 800212c:	d100      	bne.n	8002130 <HAL_TIM_ConfigClockSource+0x70>
 800212e:	e088      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x182>
 8002130:	2280      	movs	r2, #128	; 0x80
 8002132:	0152      	lsls	r2, r2, #5
 8002134:	4293      	cmp	r3, r2
 8002136:	d900      	bls.n	800213a <HAL_TIM_ConfigClockSource+0x7a>
 8002138:	e07e      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x178>
 800213a:	2b70      	cmp	r3, #112	; 0x70
 800213c:	d018      	beq.n	8002170 <HAL_TIM_ConfigClockSource+0xb0>
 800213e:	d900      	bls.n	8002142 <HAL_TIM_ConfigClockSource+0x82>
 8002140:	e07a      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x178>
 8002142:	2b60      	cmp	r3, #96	; 0x60
 8002144:	d04f      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x126>
 8002146:	d900      	bls.n	800214a <HAL_TIM_ConfigClockSource+0x8a>
 8002148:	e076      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x178>
 800214a:	2b50      	cmp	r3, #80	; 0x50
 800214c:	d03b      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0x106>
 800214e:	d900      	bls.n	8002152 <HAL_TIM_ConfigClockSource+0x92>
 8002150:	e072      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x178>
 8002152:	2b40      	cmp	r3, #64	; 0x40
 8002154:	d057      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0x146>
 8002156:	d900      	bls.n	800215a <HAL_TIM_ConfigClockSource+0x9a>
 8002158:	e06e      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x178>
 800215a:	2b30      	cmp	r3, #48	; 0x30
 800215c:	d063      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x166>
 800215e:	d86b      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x178>
 8002160:	2b20      	cmp	r3, #32
 8002162:	d060      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x166>
 8002164:	d868      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x178>
 8002166:	2b00      	cmp	r3, #0
 8002168:	d05d      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x166>
 800216a:	2b10      	cmp	r3, #16
 800216c:	d05b      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x166>
 800216e:	e063      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6899      	ldr	r1, [r3, #8]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f000 fce4 	bl	8002b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2277      	movs	r2, #119	; 0x77
 8002190:	4313      	orrs	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	609a      	str	r2, [r3, #8]
      break;
 800219c:	e052      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6899      	ldr	r1, [r3, #8]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f000 fccd 	bl	8002b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	01c9      	lsls	r1, r1, #7
 80021c0:	430a      	orrs	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]
      break;
 80021c4:	e03e      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	001a      	movs	r2, r3
 80021d4:	f000 fc3e 	bl	8002a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2150      	movs	r1, #80	; 0x50
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 fc98 	bl	8002b14 <TIM_ITRx_SetConfig>
      break;
 80021e4:	e02e      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	001a      	movs	r2, r3
 80021f4:	f000 fc5c 	bl	8002ab0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2160      	movs	r1, #96	; 0x60
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 fc88 	bl	8002b14 <TIM_ITRx_SetConfig>
      break;
 8002204:	e01e      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	001a      	movs	r2, r3
 8002214:	f000 fc1e 	bl	8002a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2140      	movs	r1, #64	; 0x40
 800221e:	0018      	movs	r0, r3
 8002220:	f000 fc78 	bl	8002b14 <TIM_ITRx_SetConfig>
      break;
 8002224:	e00e      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0019      	movs	r1, r3
 8002230:	0010      	movs	r0, r2
 8002232:	f000 fc6f 	bl	8002b14 <TIM_ITRx_SetConfig>
      break;
 8002236:	e005      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002238:	230f      	movs	r3, #15
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
      break;
 8002240:	e000      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002242:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	223d      	movs	r2, #61	; 0x3d
 8002248:	2101      	movs	r1, #1
 800224a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	223c      	movs	r2, #60	; 0x3c
 8002250:	2100      	movs	r1, #0
 8002252:	5499      	strb	r1, [r3, r2]

  return status;
 8002254:	230f      	movs	r3, #15
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	781b      	ldrb	r3, [r3, #0]
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	b004      	add	sp, #16
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	ffceff88 	.word	0xffceff88
 8002268:	ffff00ff 	.word	0xffff00ff

0800226c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	b002      	add	sp, #8
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d107      	bne.n	80022c4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	223e      	movs	r2, #62	; 0x3e
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]
 80022c2:	e02a      	b.n	800231a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d107      	bne.n	80022de <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2202      	movs	r2, #2
 80022d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	223f      	movs	r2, #63	; 0x3f
 80022d8:	2101      	movs	r1, #1
 80022da:	5499      	strb	r1, [r3, r2]
 80022dc:	e01d      	b.n	800231a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2204      	movs	r2, #4
 80022ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2240      	movs	r2, #64	; 0x40
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]
 80022f6:	e010      	b.n	800231a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d107      	bne.n	8002312 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2208      	movs	r2, #8
 8002306:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2241      	movs	r2, #65	; 0x41
 800230c:	2101      	movs	r1, #1
 800230e:	5499      	strb	r1, [r3, r2]
 8002310:	e003      	b.n	800231a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	223d      	movs	r2, #61	; 0x3d
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	0018      	movs	r0, r3
 800231e:	f7ff ffb5 	bl	800228c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bd80      	pop	{r7, pc}

08002330 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d10b      	bne.n	8002360 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d136      	bne.n	80023c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	223e      	movs	r2, #62	; 0x3e
 800235a:	2101      	movs	r1, #1
 800235c:	5499      	strb	r1, [r3, r2]
 800235e:	e031      	b.n	80023c4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	429a      	cmp	r2, r3
 8002368:	d10b      	bne.n	8002382 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2202      	movs	r2, #2
 800236e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d125      	bne.n	80023c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	223f      	movs	r2, #63	; 0x3f
 800237c:	2101      	movs	r1, #1
 800237e:	5499      	strb	r1, [r3, r2]
 8002380:	e020      	b.n	80023c4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	d10b      	bne.n	80023a4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2204      	movs	r2, #4
 8002390:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d114      	bne.n	80023c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]
 80023a2:	e00f      	b.n	80023c4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d10a      	bne.n	80023c4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2208      	movs	r2, #8
 80023b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d103      	bne.n	80023c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2241      	movs	r2, #65	; 0x41
 80023c0:	2101      	movs	r1, #1
 80023c2:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f7ff ff50 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	771a      	strb	r2, [r3, #28]
}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}

080023da <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d103      	bne.n	80023fa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	771a      	strb	r2, [r3, #28]
 80023f8:	e019      	b.n	800242e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	d103      	bne.n	800240c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2202      	movs	r2, #2
 8002408:	771a      	strb	r2, [r3, #28]
 800240a:	e010      	b.n	800242e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d103      	bne.n	800241e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2204      	movs	r2, #4
 800241a:	771a      	strb	r2, [r3, #28]
 800241c:	e007      	b.n	800242e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d102      	bne.n	800242e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2208      	movs	r2, #8
 800242c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	0018      	movs	r0, r3
 8002432:	f7ff ff23 	bl	800227c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b004      	add	sp, #16
 8002442:	bd80      	pop	{r7, pc}

08002444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a2b      	ldr	r2, [pc, #172]	; (8002504 <TIM_Base_SetConfig+0xc0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <TIM_Base_SetConfig+0x20>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <TIM_Base_SetConfig+0xc4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d108      	bne.n	8002476 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2270      	movs	r2, #112	; 0x70
 8002468:	4393      	bics	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a22      	ldr	r2, [pc, #136]	; (8002504 <TIM_Base_SetConfig+0xc0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00f      	beq.n	800249e <TIM_Base_SetConfig+0x5a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a21      	ldr	r2, [pc, #132]	; (8002508 <TIM_Base_SetConfig+0xc4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00b      	beq.n	800249e <TIM_Base_SetConfig+0x5a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a20      	ldr	r2, [pc, #128]	; (800250c <TIM_Base_SetConfig+0xc8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <TIM_Base_SetConfig+0x5a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a1f      	ldr	r2, [pc, #124]	; (8002510 <TIM_Base_SetConfig+0xcc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d003      	beq.n	800249e <TIM_Base_SetConfig+0x5a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a1e      	ldr	r2, [pc, #120]	; (8002514 <TIM_Base_SetConfig+0xd0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d108      	bne.n	80024b0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a1d      	ldr	r2, [pc, #116]	; (8002518 <TIM_Base_SetConfig+0xd4>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2280      	movs	r2, #128	; 0x80
 80024b4:	4393      	bics	r3, r2
 80024b6:	001a      	movs	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <TIM_Base_SetConfig+0xc0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <TIM_Base_SetConfig+0xaa>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <TIM_Base_SetConfig+0xcc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d003      	beq.n	80024ee <TIM_Base_SetConfig+0xaa>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <TIM_Base_SetConfig+0xd0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d103      	bne.n	80024f6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	615a      	str	r2, [r3, #20]
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40000400 	.word	0x40000400
 800250c:	40002000 	.word	0x40002000
 8002510:	40014400 	.word	0x40014400
 8002514:	40014800 	.word	0x40014800
 8002518:	fffffcff 	.word	0xfffffcff

0800251c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	2201      	movs	r2, #1
 800252c:	4393      	bics	r3, r2
 800252e:	001a      	movs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <TIM_OC1_SetConfig+0xe8>)
 800254a:	4013      	ands	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2203      	movs	r2, #3
 8002552:	4393      	bics	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2202      	movs	r2, #2
 8002564:	4393      	bics	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <TIM_OC1_SetConfig+0xec>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <TIM_OC1_SetConfig+0x6e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a23      	ldr	r2, [pc, #140]	; (800260c <TIM_OC1_SetConfig+0xf0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d003      	beq.n	800258a <TIM_OC1_SetConfig+0x6e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a22      	ldr	r2, [pc, #136]	; (8002610 <TIM_OC1_SetConfig+0xf4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d10c      	bne.n	80025a4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2208      	movs	r2, #8
 800258e:	4393      	bics	r3, r2
 8002590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2204      	movs	r2, #4
 80025a0:	4393      	bics	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <TIM_OC1_SetConfig+0xec>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d007      	beq.n	80025bc <TIM_OC1_SetConfig+0xa0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a17      	ldr	r2, [pc, #92]	; (800260c <TIM_OC1_SetConfig+0xf0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d003      	beq.n	80025bc <TIM_OC1_SetConfig+0xa0>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a16      	ldr	r2, [pc, #88]	; (8002610 <TIM_OC1_SetConfig+0xf4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d111      	bne.n	80025e0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4a15      	ldr	r2, [pc, #84]	; (8002614 <TIM_OC1_SetConfig+0xf8>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4a14      	ldr	r2, [pc, #80]	; (8002618 <TIM_OC1_SetConfig+0xfc>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	621a      	str	r2, [r3, #32]
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b006      	add	sp, #24
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	fffeff8f 	.word	0xfffeff8f
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40014400 	.word	0x40014400
 8002610:	40014800 	.word	0x40014800
 8002614:	fffffeff 	.word	0xfffffeff
 8002618:	fffffdff 	.word	0xfffffdff

0800261c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	2210      	movs	r2, #16
 800262c:	4393      	bics	r3, r2
 800262e:	001a      	movs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <TIM_OC2_SetConfig+0xe0>)
 800264a:	4013      	ands	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a2b      	ldr	r2, [pc, #172]	; (8002700 <TIM_OC2_SetConfig+0xe4>)
 8002652:	4013      	ands	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2220      	movs	r2, #32
 8002666:	4393      	bics	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <TIM_OC2_SetConfig+0xe8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10d      	bne.n	800269a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	4393      	bics	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2240      	movs	r2, #64	; 0x40
 8002696:	4393      	bics	r3, r2
 8002698:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a19      	ldr	r2, [pc, #100]	; (8002704 <TIM_OC2_SetConfig+0xe8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <TIM_OC2_SetConfig+0x96>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a18      	ldr	r2, [pc, #96]	; (8002708 <TIM_OC2_SetConfig+0xec>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d003      	beq.n	80026b2 <TIM_OC2_SetConfig+0x96>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a17      	ldr	r2, [pc, #92]	; (800270c <TIM_OC2_SetConfig+0xf0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d113      	bne.n	80026da <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4a16      	ldr	r2, [pc, #88]	; (8002710 <TIM_OC2_SetConfig+0xf4>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4a15      	ldr	r2, [pc, #84]	; (8002714 <TIM_OC2_SetConfig+0xf8>)
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	621a      	str	r2, [r3, #32]
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b006      	add	sp, #24
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	feff8fff 	.word	0xfeff8fff
 8002700:	fffffcff 	.word	0xfffffcff
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40014400 	.word	0x40014400
 800270c:	40014800 	.word	0x40014800
 8002710:	fffffbff 	.word	0xfffffbff
 8002714:	fffff7ff 	.word	0xfffff7ff

08002718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <TIM_OC3_SetConfig+0xdc>)
 8002728:	401a      	ands	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a2d      	ldr	r2, [pc, #180]	; (80027f8 <TIM_OC3_SetConfig+0xe0>)
 8002744:	4013      	ands	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2203      	movs	r2, #3
 800274c:	4393      	bics	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4a27      	ldr	r2, [pc, #156]	; (80027fc <TIM_OC3_SetConfig+0xe4>)
 800275e:	4013      	ands	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a23      	ldr	r2, [pc, #140]	; (8002800 <TIM_OC3_SetConfig+0xe8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10d      	bne.n	8002792 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	4a22      	ldr	r2, [pc, #136]	; (8002804 <TIM_OC3_SetConfig+0xec>)
 800277a:	4013      	ands	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <TIM_OC3_SetConfig+0xf0>)
 800278e:	4013      	ands	r3, r2
 8002790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <TIM_OC3_SetConfig+0xe8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <TIM_OC3_SetConfig+0x92>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a1b      	ldr	r2, [pc, #108]	; (800280c <TIM_OC3_SetConfig+0xf4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d003      	beq.n	80027aa <TIM_OC3_SetConfig+0x92>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <TIM_OC3_SetConfig+0xf8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d113      	bne.n	80027d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <TIM_OC3_SetConfig+0xfc>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4a18      	ldr	r2, [pc, #96]	; (8002818 <TIM_OC3_SetConfig+0x100>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	621a      	str	r2, [r3, #32]
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b006      	add	sp, #24
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	fffffeff 	.word	0xfffffeff
 80027f8:	fffeff8f 	.word	0xfffeff8f
 80027fc:	fffffdff 	.word	0xfffffdff
 8002800:	40012c00 	.word	0x40012c00
 8002804:	fffff7ff 	.word	0xfffff7ff
 8002808:	fffffbff 	.word	0xfffffbff
 800280c:	40014400 	.word	0x40014400
 8002810:	40014800 	.word	0x40014800
 8002814:	ffffefff 	.word	0xffffefff
 8002818:	ffffdfff 	.word	0xffffdfff

0800281c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a26      	ldr	r2, [pc, #152]	; (80028c4 <TIM_OC4_SetConfig+0xa8>)
 800282c:	401a      	ands	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <TIM_OC4_SetConfig+0xac>)
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <TIM_OC4_SetConfig+0xb0>)
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <TIM_OC4_SetConfig+0xb4>)
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	031b      	lsls	r3, r3, #12
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <TIM_OC4_SetConfig+0xb8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d007      	beq.n	800288c <TIM_OC4_SetConfig+0x70>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <TIM_OC4_SetConfig+0xbc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d003      	beq.n	800288c <TIM_OC4_SetConfig+0x70>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a15      	ldr	r2, [pc, #84]	; (80028dc <TIM_OC4_SetConfig+0xc0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d109      	bne.n	80028a0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <TIM_OC4_SetConfig+0xc4>)
 8002890:	4013      	ands	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	019b      	lsls	r3, r3, #6
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	621a      	str	r2, [r3, #32]
}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b006      	add	sp, #24
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	ffffefff 	.word	0xffffefff
 80028c8:	feff8fff 	.word	0xfeff8fff
 80028cc:	fffffcff 	.word	0xfffffcff
 80028d0:	ffffdfff 	.word	0xffffdfff
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40014400 	.word	0x40014400
 80028dc:	40014800 	.word	0x40014800
 80028e0:	ffffbfff 	.word	0xffffbfff

080028e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	4a23      	ldr	r2, [pc, #140]	; (8002980 <TIM_OC5_SetConfig+0x9c>)
 80028f4:	401a      	ands	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <TIM_OC5_SetConfig+0xa0>)
 8002910:	4013      	ands	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4a19      	ldr	r2, [pc, #100]	; (8002988 <TIM_OC5_SetConfig+0xa4>)
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	041b      	lsls	r3, r3, #16
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <TIM_OC5_SetConfig+0xa8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <TIM_OC5_SetConfig+0x66>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <TIM_OC5_SetConfig+0xac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d003      	beq.n	800294a <TIM_OC5_SetConfig+0x66>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a13      	ldr	r2, [pc, #76]	; (8002994 <TIM_OC5_SetConfig+0xb0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d109      	bne.n	800295e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	4a0c      	ldr	r2, [pc, #48]	; (8002980 <TIM_OC5_SetConfig+0x9c>)
 800294e:	4013      	ands	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	621a      	str	r2, [r3, #32]
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b006      	add	sp, #24
 800297e:	bd80      	pop	{r7, pc}
 8002980:	fffeffff 	.word	0xfffeffff
 8002984:	fffeff8f 	.word	0xfffeff8f
 8002988:	fffdffff 	.word	0xfffdffff
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40014400 	.word	0x40014400
 8002994:	40014800 	.word	0x40014800

08002998 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <TIM_OC6_SetConfig+0xa0>)
 80029a8:	401a      	ands	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <TIM_OC6_SetConfig+0xa4>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <TIM_OC6_SetConfig+0xa8>)
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	051b      	lsls	r3, r3, #20
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <TIM_OC6_SetConfig+0xac>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <TIM_OC6_SetConfig+0x68>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <TIM_OC6_SetConfig+0xb0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <TIM_OC6_SetConfig+0x68>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <TIM_OC6_SetConfig+0xb4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d109      	bne.n	8002a14 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <TIM_OC6_SetConfig+0xb8>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	029b      	lsls	r3, r3, #10
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b006      	add	sp, #24
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	ffefffff 	.word	0xffefffff
 8002a3c:	feff8fff 	.word	0xfeff8fff
 8002a40:	ffdfffff 	.word	0xffdfffff
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40014400 	.word	0x40014400
 8002a4c:	40014800 	.word	0x40014800
 8002a50:	fffbffff 	.word	0xfffbffff

08002a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	001a      	movs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	22f0      	movs	r2, #240	; 0xf0
 8002a7e:	4393      	bics	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	220a      	movs	r2, #10
 8002a90:	4393      	bics	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	621a      	str	r2, [r3, #32]
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b006      	add	sp, #24
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	4393      	bics	r3, r2
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <TIM_TI2_ConfigInputStage+0x60>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	031b      	lsls	r3, r3, #12
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	22a0      	movs	r2, #160	; 0xa0
 8002aec:	4393      	bics	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	621a      	str	r2, [r3, #32]
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b006      	add	sp, #24
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	ffff0fff 	.word	0xffff0fff

08002b14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <TIM_ITRx_SetConfig+0x34>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	2207      	movs	r2, #7
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	609a      	str	r2, [r3, #8]
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b004      	add	sp, #16
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	ffcfff8f 	.word	0xffcfff8f

08002b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <TIM_ETR_SetConfig+0x3c>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	021a      	lsls	r2, r3, #8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b006      	add	sp, #24
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	ffff00ff 	.word	0xffff00ff

08002b8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	221f      	movs	r2, #31
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	0013      	movs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	43d2      	mvns	r2, r2
 8002bae:	401a      	ands	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a1a      	ldr	r2, [r3, #32]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	211f      	movs	r1, #31
 8002bbc:	400b      	ands	r3, r1
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4099      	lsls	r1, r3
 8002bc2:	000b      	movs	r3, r1
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b006      	add	sp, #24
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	223c      	movs	r2, #60	; 0x3c
 8002be2:	5c9b      	ldrb	r3, [r3, r2]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e04a      	b.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	223c      	movs	r2, #60	; 0x3c
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	223d      	movs	r2, #61	; 0x3d
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d108      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2270      	movs	r2, #112	; 0x70
 8002c2c:	4393      	bics	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d004      	beq.n	8002c56 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d10c      	bne.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2280      	movs	r2, #128	; 0x80
 8002c5a:	4393      	bics	r3, r2
 8002c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	223d      	movs	r2, #61	; 0x3d
 8002c74:	2101      	movs	r1, #1
 8002c76:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	223c      	movs	r2, #60	; 0x3c
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b004      	add	sp, #16
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	ff0fffff 	.word	0xff0fffff
 8002c94:	40000400 	.word	0x40000400

08002c98 <__libc_init_array>:
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	2600      	movs	r6, #0
 8002c9c:	4d0c      	ldr	r5, [pc, #48]	; (8002cd0 <__libc_init_array+0x38>)
 8002c9e:	4c0d      	ldr	r4, [pc, #52]	; (8002cd4 <__libc_init_array+0x3c>)
 8002ca0:	1b64      	subs	r4, r4, r5
 8002ca2:	10a4      	asrs	r4, r4, #2
 8002ca4:	42a6      	cmp	r6, r4
 8002ca6:	d109      	bne.n	8002cbc <__libc_init_array+0x24>
 8002ca8:	2600      	movs	r6, #0
 8002caa:	f000 f821 	bl	8002cf0 <_init>
 8002cae:	4d0a      	ldr	r5, [pc, #40]	; (8002cd8 <__libc_init_array+0x40>)
 8002cb0:	4c0a      	ldr	r4, [pc, #40]	; (8002cdc <__libc_init_array+0x44>)
 8002cb2:	1b64      	subs	r4, r4, r5
 8002cb4:	10a4      	asrs	r4, r4, #2
 8002cb6:	42a6      	cmp	r6, r4
 8002cb8:	d105      	bne.n	8002cc6 <__libc_init_array+0x2e>
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	00b3      	lsls	r3, r6, #2
 8002cbe:	58eb      	ldr	r3, [r5, r3]
 8002cc0:	4798      	blx	r3
 8002cc2:	3601      	adds	r6, #1
 8002cc4:	e7ee      	b.n	8002ca4 <__libc_init_array+0xc>
 8002cc6:	00b3      	lsls	r3, r6, #2
 8002cc8:	58eb      	ldr	r3, [r5, r3]
 8002cca:	4798      	blx	r3
 8002ccc:	3601      	adds	r6, #1
 8002cce:	e7f2      	b.n	8002cb6 <__libc_init_array+0x1e>
 8002cd0:	08002d9c 	.word	0x08002d9c
 8002cd4:	08002d9c 	.word	0x08002d9c
 8002cd8:	08002d9c 	.word	0x08002d9c
 8002cdc:	08002da0 	.word	0x08002da0

08002ce0 <memset>:
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	1882      	adds	r2, r0, r2
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d100      	bne.n	8002cea <memset+0xa>
 8002ce8:	4770      	bx	lr
 8002cea:	7019      	strb	r1, [r3, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	e7f9      	b.n	8002ce4 <memset+0x4>

08002cf0 <_init>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr

08002cfc <_fini>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr
