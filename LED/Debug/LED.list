
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003198  08003198  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003198  08003198  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003198  08003198  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000ec  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009264  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000151d  00000000  00000000  000292a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  0002a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000628  00000000  00000000  0002ae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019868  00000000  00000000  0002b488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d19  00000000  00000000  00044cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096c78  00000000  00000000  0004da09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e4681  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019dc  00000000  00000000  000e46d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003148 	.word	0x08003148

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003148 	.word	0x08003148

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b0a4      	sub	sp, #144	; 0x90
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t rxBuf[128];
  int indexRead = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fa36 	bl	8000644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f84a 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8d2 	bl	8000384 <MX_GPIO_Init>
  MX_DMA_Init();
 80001e0:	f000 f8b2 	bl	8000348 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f880 	bl	80002e8 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buffer;
  HAL_UART_Receive_DMA(&huart2,rxBuf,sizeof(rxBuf));
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	4619      	mov	r1, r3
 80001ee:	481f      	ldr	r0, [pc, #124]	; (800026c <main+0xa4>)
 80001f0:	f002 fa0c 	bl	800260c <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint8_t readData = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	70fb      	strb	r3, [r7, #3]

	int index = huart2.hdmarx->Instance->CNDTR;//バッファー残容�?
 80001f8:	4b1c      	ldr	r3, [pc, #112]	; (800026c <main+0xa4>)
 80001fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	index = sizeof(rxBuf) - index;//�?新の受信�?ータ位置
 8000204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000208:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800020c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	int remainData = index - indexRead;//ま�?読み込んで�?な�?�?ータ数
 8000210:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if(remainData < 0){remainData = remainData + sizeof(rxBuf);}
 800021e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000222:	2b00      	cmp	r3, #0
 8000224:	da04      	bge.n	8000230 <main+0x68>
 8000226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800022a:	3380      	adds	r3, #128	; 0x80
 800022c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	//読み込み済み�?ータ位置より、最新の受信�?ータ位置が前にある時�?�ま�?読み込んで�?な�?�?ータ数を正しい値にする(バッファー�?で受信�?ータが�?周してた�?��?)

	if(remainData > 0){
 8000230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000234:	2b00      	cmp	r3, #0
 8000236:	dddd      	ble.n	80001f4 <main+0x2c>
		readData = rxBuf[indexRead];
 8000238:	1d3a      	adds	r2, r7, #4
 800023a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800023e:	4413      	add	r3, r2
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	70fb      	strb	r3, [r7, #3]
		indexRead++;
 8000244:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000248:	3301      	adds	r3, #1
 800024a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if(indexRead == sizeof(rxBuf)){indexRead = 0;}
 800024e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000252:	2b80      	cmp	r3, #128	; 0x80
 8000254:	d102      	bne.n	800025c <main+0x94>
 8000256:	2300      	movs	r3, #0
 8000258:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		HAL_UART_Transmit(&huart2, &readData, 1, 100);
 800025c:	1cf9      	adds	r1, r7, #3
 800025e:	2364      	movs	r3, #100	; 0x64
 8000260:	2201      	movs	r2, #1
 8000262:	4802      	ldr	r0, [pc, #8]	; (800026c <main+0xa4>)
 8000264:	f002 f948 	bl	80024f8 <HAL_UART_Transmit>
  {
 8000268:	e7c4      	b.n	80001f4 <main+0x2c>
 800026a:	bf00      	nop
 800026c:	20000028 	.word	0x20000028

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b090      	sub	sp, #64	; 0x40
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f002 ff5a 	bl	8003138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	2310      	movs	r3, #16
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029e:	2300      	movs	r3, #0
 80002a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fe64 	bl	8000f74 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002b2:	f000 f8bf 	bl	8000434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fe8e 	bl	8001ff0 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002da:	f000 f8ab 	bl	8000434 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3740      	adds	r7, #64	; 0x40
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <MX_USART2_UART_Init+0x58>)
 80002ee:	4a15      	ldr	r2, [pc, #84]	; (8000344 <MX_USART2_UART_Init+0x5c>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <MX_USART2_UART_Init+0x58>)
 80002f4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80002f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_USART2_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_USART2_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_USART2_UART_Init+0x58>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_USART2_UART_Init+0x58>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_USART2_UART_Init+0x58>)
 800032c:	f002 f896 	bl	800245c <HAL_UART_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000336:	f000 f87d 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000028 	.word	0x20000028
 8000344:	40004400 	.word	0x40004400

08000348 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800034e:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_DMA_Init+0x38>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <MX_DMA_Init+0x38>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_DMA_Init+0x38>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	2100      	movs	r1, #0
 800036a:	2010      	movs	r0, #16
 800036c:	f000 faab 	bl	80008c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000370:	2010      	movs	r0, #16
 8000372:	f000 fac4 	bl	80008fe <HAL_NVIC_EnableIRQ>

}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4b24      	ldr	r3, [pc, #144]	; (800042c <MX_GPIO_Init+0xa8>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a23      	ldr	r2, [pc, #140]	; (800042c <MX_GPIO_Init+0xa8>)
 80003a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b21      	ldr	r3, [pc, #132]	; (800042c <MX_GPIO_Init+0xa8>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b1e      	ldr	r3, [pc, #120]	; (800042c <MX_GPIO_Init+0xa8>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a1d      	ldr	r2, [pc, #116]	; (800042c <MX_GPIO_Init+0xa8>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_GPIO_Init+0xa8>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_GPIO_Init+0xa8>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a17      	ldr	r2, [pc, #92]	; (800042c <MX_GPIO_Init+0xa8>)
 80003d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_GPIO_Init+0xa8>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2108      	movs	r1, #8
 80003e6:	4812      	ldr	r0, [pc, #72]	; (8000430 <MX_GPIO_Init+0xac>)
 80003e8:	f000 fdac 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 030c 	add.w	r3, r7, #12
 80003fc:	4619      	mov	r1, r3
 80003fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000402:	f000 fc2d 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000406:	2308      	movs	r3, #8
 8000408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000416:	f107 030c 	add.w	r3, r7, #12
 800041a:	4619      	mov	r1, r3
 800041c:	4804      	ldr	r0, [pc, #16]	; (8000430 <MX_GPIO_Init+0xac>)
 800041e:	f000 fc1f 	bl	8000c60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000422:	bf00      	nop
 8000424:	3720      	adds	r7, #32
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	48000400 	.word	0x48000400

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	e7fe      	b.n	800043c <Error_Handler+0x8>
	...

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <HAL_MspInit+0x44>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <HAL_MspInit+0x44>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <HAL_MspInit+0x44>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <HAL_MspInit+0x44>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a08      	ldr	r2, [pc, #32]	; (8000484 <HAL_MspInit+0x44>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <HAL_MspInit+0x44>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a2b      	ldr	r2, [pc, #172]	; (8000554 <HAL_UART_MspInit+0xcc>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d14f      	bne.n	800054a <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004aa:	4b2b      	ldr	r3, [pc, #172]	; (8000558 <HAL_UART_MspInit+0xd0>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a2a      	ldr	r2, [pc, #168]	; (8000558 <HAL_UART_MspInit+0xd0>)
 80004b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b28      	ldr	r3, [pc, #160]	; (8000558 <HAL_UART_MspInit+0xd0>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b25      	ldr	r3, [pc, #148]	; (8000558 <HAL_UART_MspInit+0xd0>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a24      	ldr	r2, [pc, #144]	; (8000558 <HAL_UART_MspInit+0xd0>)
 80004c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b22      	ldr	r3, [pc, #136]	; (8000558 <HAL_UART_MspInit+0xd0>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80004da:	f248 0304 	movw	r3, #32772	; 0x8004
 80004de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e8:	2303      	movs	r3, #3
 80004ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004ec:	2307      	movs	r3, #7
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	4619      	mov	r1, r3
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fa:	f000 fbb1 	bl	8000c60 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <HAL_UART_MspInit+0xd4>)
 8000500:	4a17      	ldr	r2, [pc, #92]	; (8000560 <HAL_UART_MspInit+0xd8>)
 8000502:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_UART_MspInit+0xd4>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <HAL_UART_MspInit+0xd4>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_UART_MspInit+0xd4>)
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_UART_MspInit+0xd4>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <HAL_UART_MspInit+0xd4>)
 800051e:	2200      	movs	r2, #0
 8000520:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_UART_MspInit+0xd4>)
 8000524:	2220      	movs	r2, #32
 8000526:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <HAL_UART_MspInit+0xd4>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800052e:	480b      	ldr	r0, [pc, #44]	; (800055c <HAL_UART_MspInit+0xd4>)
 8000530:	f000 f9ff 	bl	8000932 <HAL_DMA_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800053a:	f7ff ff7b 	bl	8000434 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <HAL_UART_MspInit+0xd4>)
 8000542:	675a      	str	r2, [r3, #116]	; 0x74
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <HAL_UART_MspInit+0xd4>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800054a:	bf00      	nop
 800054c:	3728      	adds	r7, #40	; 0x28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40004400 	.word	0x40004400
 8000558:	40021000 	.word	0x40021000
 800055c:	200000b0 	.word	0x200000b0
 8000560:	4002006c 	.word	0x4002006c

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <NMI_Handler+0x4>

0800056a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <MemManage_Handler+0x4>

08000576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <BusFault_Handler+0x4>

0800057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <UsageFault_Handler+0x4>

08000582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b0:	f000 f88e 	bl	80006d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <DMA1_Channel6_IRQHandler+0x10>)
 80005be:	f000 fa5e 	bl	8000a7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000b0 	.word	0x200000b0

080005cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <SystemInit+0x20>)
 80005d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <SystemInit+0x20>)
 80005d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000628 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f4:	f7ff ffea 	bl	80005cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0a      	ldr	r4, [pc, #40]	; (800063c <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061e:	f002 fd67 	bl	80030f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000622:	f7ff fdd1 	bl	80001c8 <main>

08000626 <LoopForever>:

LoopForever:
    b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000628:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000634:	080031a0 	.word	0x080031a0
  ldr r2, =_sbss
 8000638:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800063c:	200000f8 	.word	0x200000f8

08000640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC1_2_IRQHandler>
	...

08000644 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_Init+0x28>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_Init+0x28>)
 800064e:	f043 0310 	orr.w	r3, r3, #16
 8000652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000654:	2003      	movs	r0, #3
 8000656:	f000 f92b 	bl	80008b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800065a:	2000      	movs	r0, #0
 800065c:	f000 f808 	bl	8000670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000660:	f7ff feee 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40022000 	.word	0x40022000

08000670 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_InitTick+0x54>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_InitTick+0x58>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	fbb3 f3f1 	udiv	r3, r3, r1
 800068a:	fbb2 f3f3 	udiv	r3, r2, r3
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f943 	bl	800091a <HAL_SYSTICK_Config>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	e00e      	b.n	80006bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b0f      	cmp	r3, #15
 80006a2:	d80a      	bhi.n	80006ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a4:	2200      	movs	r2, #0
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ac:	f000 f90b 	bl	80008c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <HAL_InitTick+0x5c>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006b6:	2300      	movs	r3, #0
 80006b8:	e000      	b.n	80006bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000008 	.word	0x20000008
 80006cc:	20000004 	.word	0x20000004

080006d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_IncTick+0x20>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_IncTick+0x24>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <HAL_IncTick+0x24>)
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000008 	.word	0x20000008
 80006f4:	200000f4 	.word	0x200000f4

080006f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <HAL_GetTick+0x14>)
 80006fe:	681b      	ldr	r3, [r3, #0]
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	200000f4 	.word	0x200000f4

08000710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	60d3      	str	r3, [r2, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <__NVIC_GetPriorityGrouping+0x18>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	f003 0307 	and.w	r3, r3, #7
}
 8000766:	4618      	mov	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	2b00      	cmp	r3, #0
 8000784:	db0b      	blt.n	800079e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f003 021f 	and.w	r2, r3, #31
 800078c:	4907      	ldr	r1, [pc, #28]	; (80007ac <__NVIC_EnableIRQ+0x38>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	095b      	lsrs	r3, r3, #5
 8000794:	2001      	movs	r0, #1
 8000796:	fa00 f202 	lsl.w	r2, r0, r2
 800079a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100

080007b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	db0a      	blt.n	80007da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	490c      	ldr	r1, [pc, #48]	; (80007fc <__NVIC_SetPriority+0x4c>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	0112      	lsls	r2, r2, #4
 80007d0:	b2d2      	uxtb	r2, r2
 80007d2:	440b      	add	r3, r1
 80007d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d8:	e00a      	b.n	80007f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4908      	ldr	r1, [pc, #32]	; (8000800 <__NVIC_SetPriority+0x50>)
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	f003 030f 	and.w	r3, r3, #15
 80007e6:	3b04      	subs	r3, #4
 80007e8:	0112      	lsls	r2, r2, #4
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	440b      	add	r3, r1
 80007ee:	761a      	strb	r2, [r3, #24]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000e100 	.word	0xe000e100
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000804:	b480      	push	{r7}
 8000806:	b089      	sub	sp, #36	; 0x24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	f1c3 0307 	rsb	r3, r3, #7
 800081e:	2b04      	cmp	r3, #4
 8000820:	bf28      	it	cs
 8000822:	2304      	movcs	r3, #4
 8000824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3304      	adds	r3, #4
 800082a:	2b06      	cmp	r3, #6
 800082c:	d902      	bls.n	8000834 <NVIC_EncodePriority+0x30>
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3b03      	subs	r3, #3
 8000832:	e000      	b.n	8000836 <NVIC_EncodePriority+0x32>
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	f04f 32ff 	mov.w	r2, #4294967295
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43da      	mvns	r2, r3
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	401a      	ands	r2, r3
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800084c:	f04f 31ff 	mov.w	r1, #4294967295
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	43d9      	mvns	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	4313      	orrs	r3, r2
         );
}
 800085e:	4618      	mov	r0, r3
 8000860:	3724      	adds	r7, #36	; 0x24
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800087c:	d301      	bcc.n	8000882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087e:	2301      	movs	r3, #1
 8000880:	e00f      	b.n	80008a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <SysTick_Config+0x40>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088a:	210f      	movs	r1, #15
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	f7ff ff8e 	bl	80007b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <SysTick_Config+0x40>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <SysTick_Config+0x40>)
 800089c:	2207      	movs	r2, #7
 800089e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	e000e010 	.word	0xe000e010

080008b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff29 	bl	8000710 <__NVIC_SetPriorityGrouping>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d8:	f7ff ff3e 	bl	8000758 <__NVIC_GetPriorityGrouping>
 80008dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	6978      	ldr	r0, [r7, #20]
 80008e4:	f7ff ff8e 	bl	8000804 <NVIC_EncodePriority>
 80008e8:	4602      	mov	r2, r0
 80008ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff5d 	bl	80007b0 <__NVIC_SetPriority>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff31 	bl	8000774 <__NVIC_EnableIRQ>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffa2 	bl	800086c <SysTick_Config>
 8000928:	4603      	mov	r3, r0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000932:	b580      	push	{r7, lr}
 8000934:	b084      	sub	sp, #16
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	e037      	b.n	80009b8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2202      	movs	r2, #2
 800094c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800095e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000962:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800096c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000978:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000984:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	4313      	orrs	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 f940 	bl	8000c20 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
}  
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d101      	bne.n	80009e0 <HAL_DMA_Start_IT+0x20>
 80009dc:	2302      	movs	r3, #2
 80009de:	e04a      	b.n	8000a76 <HAL_DMA_Start_IT+0xb6>
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2201      	movs	r2, #1
 80009e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d13a      	bne.n	8000a68 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2202      	movs	r2, #2
 80009f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 0201 	bic.w	r2, r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 f8d4 	bl	8000bc4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d008      	beq.n	8000a36 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f042 020e 	orr.w	r2, r2, #14
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	e00f      	b.n	8000a56 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f042 020a 	orr.w	r2, r2, #10
 8000a44:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f022 0204 	bic.w	r2, r2, #4
 8000a54:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f042 0201 	orr.w	r2, r2, #1
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	e005      	b.n	8000a74 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000a70:	2302      	movs	r3, #2
 8000a72:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b084      	sub	sp, #16
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d024      	beq.n	8000af0 <HAL_DMA_IRQHandler+0x72>
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d01f      	beq.n	8000af0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f003 0320 	and.w	r3, r3, #32
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d107      	bne.n	8000ace <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f022 0204 	bic.w	r2, r2, #4
 8000acc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8000adc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d06a      	beq.n	8000bbc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000aee:	e065      	b.n	8000bbc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	2202      	movs	r2, #2
 8000af6:	409a      	lsls	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4013      	ands	r3, r2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d02c      	beq.n	8000b5a <HAL_DMA_IRQHandler+0xdc>
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d027      	beq.n	8000b5a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0320 	and.w	r3, r3, #32
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d10b      	bne.n	8000b30 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f022 020a 	bic.w	r2, r2, #10
 8000b26:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b38:	2102      	movs	r1, #2
 8000b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d035      	beq.n	8000bbc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000b58:	e030      	b.n	8000bbc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	2208      	movs	r2, #8
 8000b60:	409a      	lsls	r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4013      	ands	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d028      	beq.n	8000bbc <HAL_DMA_IRQHandler+0x13e>
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d023      	beq.n	8000bbc <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 020e 	bic.w	r2, r2, #14
 8000b82:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d004      	beq.n	8000bbc <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	4798      	blx	r3
    }
  }
}  
 8000bba:	e7ff      	b.n	8000bbc <HAL_DMA_IRQHandler+0x13e>
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b10      	cmp	r3, #16
 8000bf0:	d108      	bne.n	8000c04 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000c02:	e007      	b.n	8000c14 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	60da      	str	r2, [r3, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <DMA_CalcBaseAndBitshift+0x34>)
 8000c30:	4413      	add	r3, r2
 8000c32:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <DMA_CalcBaseAndBitshift+0x38>)
 8000c34:	fba2 2303 	umull	r2, r3, r2, r3
 8000c38:	091b      	lsrs	r3, r3, #4
 8000c3a:	009a      	lsls	r2, r3, #2
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <DMA_CalcBaseAndBitshift+0x3c>)
 8000c44:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	bffdfff8 	.word	0xbffdfff8
 8000c58:	cccccccd 	.word	0xcccccccd
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	e14e      	b.n	8000f0e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	2101      	movs	r1, #1
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 8140 	beq.w	8000f08 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d005      	beq.n	8000ca0 <HAL_GPIO_Init+0x40>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d130      	bne.n	8000d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	f003 0201 	and.w	r2, r3, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d017      	beq.n	8000d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d123      	bne.n	8000d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	6939      	ldr	r1, [r7, #16]
 8000d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0203 	and.w	r2, r3, #3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 809a 	beq.w	8000f08 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd4:	4b55      	ldr	r3, [pc, #340]	; (8000f2c <HAL_GPIO_Init+0x2cc>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a54      	ldr	r2, [pc, #336]	; (8000f2c <HAL_GPIO_Init+0x2cc>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b52      	ldr	r3, [pc, #328]	; (8000f2c <HAL_GPIO_Init+0x2cc>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dec:	4a50      	ldr	r2, [pc, #320]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220f      	movs	r2, #15
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e16:	d013      	beq.n	8000e40 <HAL_GPIO_Init+0x1e0>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a46      	ldr	r2, [pc, #280]	; (8000f34 <HAL_GPIO_Init+0x2d4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d00d      	beq.n	8000e3c <HAL_GPIO_Init+0x1dc>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a45      	ldr	r2, [pc, #276]	; (8000f38 <HAL_GPIO_Init+0x2d8>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d007      	beq.n	8000e38 <HAL_GPIO_Init+0x1d8>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a44      	ldr	r2, [pc, #272]	; (8000f3c <HAL_GPIO_Init+0x2dc>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d101      	bne.n	8000e34 <HAL_GPIO_Init+0x1d4>
 8000e30:	2303      	movs	r3, #3
 8000e32:	e006      	b.n	8000e42 <HAL_GPIO_Init+0x1e2>
 8000e34:	2305      	movs	r3, #5
 8000e36:	e004      	b.n	8000e42 <HAL_GPIO_Init+0x1e2>
 8000e38:	2302      	movs	r3, #2
 8000e3a:	e002      	b.n	8000e42 <HAL_GPIO_Init+0x1e2>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <HAL_GPIO_Init+0x1e2>
 8000e40:	2300      	movs	r3, #0
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	f002 0203 	and.w	r2, r2, #3
 8000e48:	0092      	lsls	r2, r2, #2
 8000e4a:	4093      	lsls	r3, r2
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e52:	4937      	ldr	r1, [pc, #220]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e60:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <HAL_GPIO_Init+0x2e0>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e84:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <HAL_GPIO_Init+0x2e0>)
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_GPIO_Init+0x2e0>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eae:	4a24      	ldr	r2, [pc, #144]	; (8000f40 <HAL_GPIO_Init+0x2e0>)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <HAL_GPIO_Init+0x2e0>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ed8:	4a19      	ldr	r2, [pc, #100]	; (8000f40 <HAL_GPIO_Init+0x2e0>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_GPIO_Init+0x2e0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <HAL_GPIO_Init+0x2e0>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f47f aea9 	bne.w	8000c70 <HAL_GPIO_Init+0x10>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	371c      	adds	r7, #28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000
 8000f34:	48000400 	.word	0x48000400
 8000f38:	48000800 	.word	0x48000800
 8000f3c:	48000c00 	.word	0x48000c00
 8000f40:	40010400 	.word	0x40010400

08000f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f54:	787b      	ldrb	r3, [r7, #1]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f60:	e002      	b.n	8000f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	f001 b823 	b.w	8001fe0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 817d 	beq.w	80012aa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fb0:	4bbc      	ldr	r3, [pc, #752]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d00c      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fbc:	4bb9      	ldr	r3, [pc, #740]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d15c      	bne.n	8001082 <HAL_RCC_OscConfig+0x10e>
 8000fc8:	4bb6      	ldr	r3, [pc, #728]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd4:	d155      	bne.n	8001082 <HAL_RCC_OscConfig+0x10e>
 8000fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fda:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fe2:	fa93 f3a3 	rbit	r3, r3
 8000fe6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fee:	fab3 f383 	clz	r3, r3
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	095b      	lsrs	r3, r3, #5
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d102      	bne.n	8001008 <HAL_RCC_OscConfig+0x94>
 8001002:	4ba8      	ldr	r3, [pc, #672]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	e015      	b.n	8001034 <HAL_RCC_OscConfig+0xc0>
 8001008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001010:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800101c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001020:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001024:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001028:	fa93 f3a3 	rbit	r3, r3
 800102c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001030:	4b9c      	ldr	r3, [pc, #624]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001038:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800103c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001040:	fa92 f2a2 	rbit	r2, r2
 8001044:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001048:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800104c:	fab2 f282 	clz	r2, r2
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	f042 0220 	orr.w	r2, r2, #32
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	f002 021f 	and.w	r2, r2, #31
 800105c:	2101      	movs	r1, #1
 800105e:	fa01 f202 	lsl.w	r2, r1, r2
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 811f 	beq.w	80012a8 <HAL_RCC_OscConfig+0x334>
 800106a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800106e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f040 8116 	bne.w	80012a8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	f000 bfaf 	b.w	8001fe0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001086:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x12e>
 8001094:	4b83      	ldr	r3, [pc, #524]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a82      	ldr	r2, [pc, #520]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e036      	b.n	8001110 <HAL_RCC_OscConfig+0x19c>
 80010a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0x158>
 80010b2:	4b7c      	ldr	r3, [pc, #496]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a7b      	ldr	r2, [pc, #492]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 80010b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b79      	ldr	r3, [pc, #484]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a78      	ldr	r2, [pc, #480]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 80010c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e021      	b.n	8001110 <HAL_RCC_OscConfig+0x19c>
 80010cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x184>
 80010de:	4b71      	ldr	r3, [pc, #452]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a70      	ldr	r2, [pc, #448]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b6e      	ldr	r3, [pc, #440]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6d      	ldr	r2, [pc, #436]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0x19c>
 80010f8:	4b6a      	ldr	r3, [pc, #424]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a69      	ldr	r2, [pc, #420]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 80010fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a66      	ldr	r2, [pc, #408]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001110:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 8001112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001114:	f023 020f 	bic.w	r2, r3, #15
 8001118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800111c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	495f      	ldr	r1, [pc, #380]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 8001126:	4313      	orrs	r3, r2
 8001128:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800112a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800112e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d059      	beq.n	80011ee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fadd 	bl	80006f8 <HAL_GetTick>
 800113e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	e00a      	b.n	800115a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fad8 	bl	80006f8 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b64      	cmp	r3, #100	; 0x64
 8001152:	d902      	bls.n	800115a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	f000 bf43 	b.w	8001fe0 <HAL_RCC_OscConfig+0x106c>
 800115a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800116e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	fab3 f383 	clz	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	095b      	lsrs	r3, r3, #5
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d102      	bne.n	800118c <HAL_RCC_OscConfig+0x218>
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	e015      	b.n	80011b8 <HAL_RCC_OscConfig+0x244>
 800118c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001190:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001194:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001198:	fa93 f3a3 	rbit	r3, r3
 800119c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011a8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80011ac:	fa93 f3a3 	rbit	r3, r3
 80011b0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80011b4:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011bc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80011c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80011c4:	fa92 f2a2 	rbit	r2, r2
 80011c8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80011cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80011d0:	fab2 f282 	clz	r2, r2
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	f042 0220 	orr.w	r2, r2, #32
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	f002 021f 	and.w	r2, r2, #31
 80011e0:	2101      	movs	r1, #1
 80011e2:	fa01 f202 	lsl.w	r2, r1, r2
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0ab      	beq.n	8001144 <HAL_RCC_OscConfig+0x1d0>
 80011ec:	e05d      	b.n	80012aa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fa83 	bl	80006f8 <HAL_GetTick>
 80011f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	e00a      	b.n	800120e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fa7e 	bl	80006f8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b64      	cmp	r3, #100	; 0x64
 8001206:	d902      	bls.n	800120e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	f000 bee9 	b.w	8001fe0 <HAL_RCC_OscConfig+0x106c>
 800120e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001212:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001222:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	095b      	lsrs	r3, r3, #5
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x2cc>
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	e015      	b.n	800126c <HAL_RCC_OscConfig+0x2f8>
 8001240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001244:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001258:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800125c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001260:	fa93 f3a3 	rbit	r3, r3
 8001264:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_RCC_OscConfig+0x330>)
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001270:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001274:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001278:	fa92 f2a2 	rbit	r2, r2
 800127c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001280:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001284:	fab2 f282 	clz	r2, r2
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	f042 0220 	orr.w	r2, r2, #32
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	f002 021f 	and.w	r2, r2, #31
 8001294:	2101      	movs	r1, #1
 8001296:	fa01 f202 	lsl.w	r2, r1, r2
 800129a:	4013      	ands	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1ab      	bne.n	80011f8 <HAL_RCC_OscConfig+0x284>
 80012a0:	e003      	b.n	80012aa <HAL_RCC_OscConfig+0x336>
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 817d 	beq.w	80015ba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012c0:	4ba6      	ldr	r3, [pc, #664]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00b      	beq.n	80012e4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012cc:	4ba3      	ldr	r3, [pc, #652]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d172      	bne.n	80013be <HAL_RCC_OscConfig+0x44a>
 80012d8:	4ba0      	ldr	r3, [pc, #640]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d16c      	bne.n	80013be <HAL_RCC_OscConfig+0x44a>
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012ee:	fa93 f3a3 	rbit	r3, r3
 80012f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	fab3 f383 	clz	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	095b      	lsrs	r3, r3, #5
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b01      	cmp	r3, #1
 800130c:	d102      	bne.n	8001314 <HAL_RCC_OscConfig+0x3a0>
 800130e:	4b93      	ldr	r3, [pc, #588]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	e013      	b.n	800133c <HAL_RCC_OscConfig+0x3c8>
 8001314:	2302      	movs	r3, #2
 8001316:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800132c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001338:	4b88      	ldr	r3, [pc, #544]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	2202      	movs	r2, #2
 800133e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001342:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001346:	fa92 f2a2 	rbit	r2, r2
 800134a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800134e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001352:	fab2 f282 	clz	r2, r2
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	f042 0220 	orr.w	r2, r2, #32
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	f002 021f 	and.w	r2, r2, #31
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00a      	beq.n	8001384 <HAL_RCC_OscConfig+0x410>
 800136e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d002      	beq.n	8001384 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	f000 be2e 	b.w	8001fe0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4b75      	ldr	r3, [pc, #468]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001390:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	21f8      	movs	r1, #248	; 0xf8
 800139a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013a2:	fa91 f1a1 	rbit	r1, r1
 80013a6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80013aa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80013ae:	fab1 f181 	clz	r1, r1
 80013b2:	b2c9      	uxtb	r1, r1
 80013b4:	408b      	lsls	r3, r1
 80013b6:	4969      	ldr	r1, [pc, #420]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013bc:	e0fd      	b.n	80015ba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8088 	beq.w	80014e0 <HAL_RCC_OscConfig+0x56c>
 80013d0:	2301      	movs	r3, #1
 80013d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80013e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	461a      	mov	r2, r3
 80013f8:	2301      	movs	r3, #1
 80013fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff f97c 	bl	80006f8 <HAL_GetTick>
 8001400:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e00a      	b.n	800141c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff f977 	bl	80006f8 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d902      	bls.n	800141c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	f000 bde2 	b.w	8001fe0 <HAL_RCC_OscConfig+0x106c>
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001426:	fa93 f3a3 	rbit	r3, r3
 800142a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800142e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001432:	fab3 f383 	clz	r3, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	095b      	lsrs	r3, r3, #5
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b01      	cmp	r3, #1
 8001444:	d102      	bne.n	800144c <HAL_RCC_OscConfig+0x4d8>
 8001446:	4b45      	ldr	r3, [pc, #276]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	e013      	b.n	8001474 <HAL_RCC_OscConfig+0x500>
 800144c:	2302      	movs	r3, #2
 800144e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001456:	fa93 f3a3 	rbit	r3, r3
 800145a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001464:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001468:	fa93 f3a3 	rbit	r3, r3
 800146c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001470:	4b3a      	ldr	r3, [pc, #232]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	2202      	movs	r2, #2
 8001476:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800147a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800147e:	fa92 f2a2 	rbit	r2, r2
 8001482:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001486:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800148a:	fab2 f282 	clz	r2, r2
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	f042 0220 	orr.w	r2, r2, #32
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	f002 021f 	and.w	r2, r2, #31
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0af      	beq.n	8001406 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	21f8      	movs	r1, #248	; 0xf8
 80014bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014c4:	fa91 f1a1 	rbit	r1, r1
 80014c8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80014cc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80014d0:	fab1 f181 	clz	r1, r1
 80014d4:	b2c9      	uxtb	r1, r1
 80014d6:	408b      	lsls	r3, r1
 80014d8:	4920      	ldr	r1, [pc, #128]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
 80014de:	e06c      	b.n	80015ba <HAL_RCC_OscConfig+0x646>
 80014e0:	2301      	movs	r3, #1
 80014e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80014f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001500:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	461a      	mov	r2, r3
 8001508:	2300      	movs	r3, #0
 800150a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff f8f4 	bl	80006f8 <HAL_GetTick>
 8001510:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001514:	e00a      	b.n	800152c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff f8ef 	bl	80006f8 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d902      	bls.n	800152c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	f000 bd5a 	b.w	8001fe0 <HAL_RCC_OscConfig+0x106c>
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001536:	fa93 f3a3 	rbit	r3, r3
 800153a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800153e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	fab3 f383 	clz	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	095b      	lsrs	r3, r3, #5
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d104      	bne.n	8001560 <HAL_RCC_OscConfig+0x5ec>
 8001556:	4b01      	ldr	r3, [pc, #4]	; (800155c <HAL_RCC_OscConfig+0x5e8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	e015      	b.n	8001588 <HAL_RCC_OscConfig+0x614>
 800155c:	40021000 	.word	0x40021000
 8001560:	2302      	movs	r3, #2
 8001562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001578:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001584:	4bc8      	ldr	r3, [pc, #800]	; (80018a8 <HAL_RCC_OscConfig+0x934>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	2202      	movs	r2, #2
 800158a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800158e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001592:	fa92 f2a2 	rbit	r2, r2
 8001596:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800159a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800159e:	fab2 f282 	clz	r2, r2
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	f042 0220 	orr.w	r2, r2, #32
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	f002 021f 	and.w	r2, r2, #31
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ad      	bne.n	8001516 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8110 	beq.w	80017f0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d079      	beq.n	80016d4 <HAL_RCC_OscConfig+0x760>
 80015e0:	2301      	movs	r3, #1
 80015e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80015f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4bab      	ldr	r3, [pc, #684]	; (80018ac <HAL_RCC_OscConfig+0x938>)
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	461a      	mov	r2, r3
 8001606:	2301      	movs	r3, #1
 8001608:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160a:	f7ff f875 	bl	80006f8 <HAL_GetTick>
 800160e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	e00a      	b.n	800162a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff f870 	bl	80006f8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d902      	bls.n	800162a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	f000 bcdb 	b.w	8001fe0 <HAL_RCC_OscConfig+0x106c>
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001644:	2202      	movs	r2, #2
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	fa93 f2a3 	rbit	r2, r3
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001668:	2202      	movs	r2, #2
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fa93 f2a3 	rbit	r2, r3
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001682:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001684:	4b88      	ldr	r3, [pc, #544]	; (80018a8 <HAL_RCC_OscConfig+0x934>)
 8001686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001690:	2102      	movs	r1, #2
 8001692:	6019      	str	r1, [r3, #0]
 8001694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001698:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	fa93 f1a3 	rbit	r1, r3
 80016a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016aa:	6019      	str	r1, [r3, #0]
  return result;
 80016ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fab3 f383 	clz	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	2101      	movs	r1, #1
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0a0      	beq.n	8001614 <HAL_RCC_OscConfig+0x6a0>
 80016d2:	e08d      	b.n	80017f0 <HAL_RCC_OscConfig+0x87c>
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016f6:	601a      	str	r2, [r3, #0]
  return result;
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001700:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001702:	fab3 f383 	clz	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_OscConfig+0x938>)
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	461a      	mov	r2, r3
 8001712:	2300      	movs	r3, #0
 8001714:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001716:	f7fe ffef 	bl	80006f8 <HAL_GetTick>
 800171a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001720:	f7fe ffea 	bl	80006f8 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d902      	bls.n	8001736 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	f000 bc55 	b.w	8001fe0 <HAL_RCC_OscConfig+0x106c>
 8001736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800173e:	2202      	movs	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001746:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001762:	2202      	movs	r2, #2
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001778:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001786:	2202      	movs	r2, #2
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	fa93 f2a3 	rbit	r2, r3
 8001798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_RCC_OscConfig+0x934>)
 80017a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017ae:	2102      	movs	r1, #2
 80017b0:	6019      	str	r1, [r3, #0]
 80017b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fa93 f1a3 	rbit	r1, r3
 80017c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017c8:	6019      	str	r1, [r3, #0]
  return result;
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	2101      	movs	r1, #1
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d197      	bne.n	8001720 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 81a1 	beq.w	8001b48 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800180c:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_RCC_OscConfig+0x934>)
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d116      	bne.n	8001846 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_RCC_OscConfig+0x934>)
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <HAL_RCC_OscConfig+0x934>)
 800181e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001822:	61d3      	str	r3, [r2, #28]
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_OscConfig+0x934>)
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800182c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001830:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800183e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001840:	2301      	movs	r3, #1
 8001842:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_RCC_OscConfig+0x93c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d11a      	bne.n	8001888 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_RCC_OscConfig+0x93c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <HAL_RCC_OscConfig+0x93c>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7fe ff4b 	bl	80006f8 <HAL_GetTick>
 8001862:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001866:	e009      	b.n	800187c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001868:	f7fe ff46 	bl	80006f8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b64      	cmp	r3, #100	; 0x64
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e3b1      	b.n	8001fe0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_RCC_OscConfig+0x93c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0ef      	beq.n	8001868 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_OscConfig+0x940>
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_RCC_OscConfig+0x934>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a02      	ldr	r2, [pc, #8]	; (80018a8 <HAL_RCC_OscConfig+0x934>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	e03c      	b.n	8001920 <HAL_RCC_OscConfig+0x9ac>
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	10908120 	.word	0x10908120
 80018b0:	40007000 	.word	0x40007000
 80018b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10c      	bne.n	80018de <HAL_RCC_OscConfig+0x96a>
 80018c4:	4bc1      	ldr	r3, [pc, #772]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4ac0      	ldr	r2, [pc, #768]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	4bbe      	ldr	r3, [pc, #760]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4abd      	ldr	r2, [pc, #756]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 80018d6:	f023 0304 	bic.w	r3, r3, #4
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	e020      	b.n	8001920 <HAL_RCC_OscConfig+0x9ac>
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b05      	cmp	r3, #5
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x994>
 80018ee:	4bb7      	ldr	r3, [pc, #732]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4ab6      	ldr	r2, [pc, #728]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	4bb4      	ldr	r3, [pc, #720]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4ab3      	ldr	r2, [pc, #716]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6213      	str	r3, [r2, #32]
 8001906:	e00b      	b.n	8001920 <HAL_RCC_OscConfig+0x9ac>
 8001908:	4bb0      	ldr	r3, [pc, #704]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4aaf      	ldr	r2, [pc, #700]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	6213      	str	r3, [r2, #32]
 8001914:	4bad      	ldr	r3, [pc, #692]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4aac      	ldr	r2, [pc, #688]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8081 	beq.w	8001a34 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7fe fee1 	bl	80006f8 <HAL_GetTick>
 8001936:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7fe fedc 	bl	80006f8 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e345      	b.n	8001fe0 <HAL_RCC_OscConfig+0x106c>
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800195c:	2202      	movs	r2, #2
 800195e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001980:	2202      	movs	r2, #2
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	fa93 f2a3 	rbit	r2, r3
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800199a:	601a      	str	r2, [r3, #0]
  return result;
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	095b      	lsrs	r3, r3, #5
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d102      	bne.n	80019c0 <HAL_RCC_OscConfig+0xa4c>
 80019ba:	4b84      	ldr	r3, [pc, #528]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	e013      	b.n	80019e8 <HAL_RCC_OscConfig+0xa74>
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	4b79      	ldr	r3, [pc, #484]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019f0:	2102      	movs	r1, #2
 80019f2:	6011      	str	r1, [r2, #0]
 80019f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	fa92 f1a2 	rbit	r1, r2
 8001a02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a06:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a0a:	6011      	str	r1, [r2, #0]
  return result;
 8001a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a10:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	fab2 f282 	clz	r2, r2
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	f002 021f 	and.w	r2, r2, #31
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d084      	beq.n	800193c <HAL_RCC_OscConfig+0x9c8>
 8001a32:	e07f      	b.n	8001b34 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a34:	f7fe fe60 	bl	80006f8 <HAL_GetTick>
 8001a38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	e00b      	b.n	8001a56 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7fe fe5b 	bl	80006f8 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e2c4      	b.n	8001fe0 <HAL_RCC_OscConfig+0x106c>
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a5e:	2202      	movs	r2, #2
 8001a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a82:	2202      	movs	r2, #2
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a9c:	601a      	str	r2, [r3, #0]
  return result;
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001aa6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_OscConfig+0xb4e>
 8001abc:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	e013      	b.n	8001aea <HAL_RCC_OscConfig+0xb76>
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001aca:	2202      	movs	r2, #2
 8001acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	fa93 f2a3 	rbit	r2, r3
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001af2:	2102      	movs	r1, #2
 8001af4:	6011      	str	r1, [r2, #0]
 8001af6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001afa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	fa92 f1a2 	rbit	r1, r2
 8001b04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b08:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b0c:	6011      	str	r1, [r2, #0]
  return result;
 8001b0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b12:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	fab2 f282 	clz	r2, r2
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	f002 021f 	and.w	r2, r2, #31
 8001b28:	2101      	movs	r1, #1
 8001b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d184      	bne.n	8001a3e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b34:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	4a22      	ldr	r2, [pc, #136]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 8001b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b46:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8242 	beq.w	8001fde <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <HAL_RCC_OscConfig+0xc58>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	f000 8213 	beq.w	8001f8e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	f040 8162 	bne.w	8001e3e <HAL_RCC_OscConfig+0xeca>
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b9e:	601a      	str	r2, [r3, #0]
  return result;
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ba8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fd9a 	bl	80006f8 <HAL_GetTick>
 8001bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc8:	e00c      	b.n	8001be4 <HAL_RCC_OscConfig+0xc70>
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7fe fd92 	bl	80006f8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e1fd      	b.n	8001fe0 <HAL_RCC_OscConfig+0x106c>
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	fa93 f2a3 	rbit	r2, r3
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c08:	601a      	str	r2, [r3, #0]
  return result;
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_OscConfig+0xcba>
 8001c28:	4bb0      	ldr	r3, [pc, #704]	; (8001eec <HAL_RCC_OscConfig+0xf78>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	e027      	b.n	8001c7e <HAL_RCC_OscConfig+0xd0a>
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fa93 f2a3 	rbit	r2, r3
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	4b9c      	ldr	r3, [pc, #624]	; (8001eec <HAL_RCC_OscConfig+0xf78>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c82:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c8a:	6011      	str	r1, [r2, #0]
 8001c8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c90:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	fa92 f1a2 	rbit	r1, r2
 8001c9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c9e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ca2:	6011      	str	r1, [r2, #0]
  return result;
 8001ca4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	fab2 f282 	clz	r2, r2
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f042 0220 	orr.w	r2, r2, #32
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	f002 021f 	and.w	r2, r2, #31
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d182      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cca:	4b88      	ldr	r3, [pc, #544]	; (8001eec <HAL_RCC_OscConfig+0xf78>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	430b      	orrs	r3, r1
 8001cec:	497f      	ldr	r1, [pc, #508]	; (8001eec <HAL_RCC_OscConfig+0xf78>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
 8001cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001cfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d16:	601a      	str	r2, [r3, #0]
  return result;
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d20:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	461a      	mov	r2, r3
 8001d34:	2301      	movs	r3, #1
 8001d36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7fe fcde 	bl	80006f8 <HAL_GetTick>
 8001d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d42:	f7fe fcd9 	bl	80006f8 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e144      	b.n	8001fe0 <HAL_RCC_OscConfig+0x106c>
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d68:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	fa93 f2a3 	rbit	r2, r3
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d7a:	601a      	str	r2, [r3, #0]
  return result;
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d102      	bne.n	8001da0 <HAL_RCC_OscConfig+0xe2c>
 8001d9a:	4b54      	ldr	r3, [pc, #336]	; (8001eec <HAL_RCC_OscConfig+0xf78>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e027      	b.n	8001df0 <HAL_RCC_OscConfig+0xe7c>
 8001da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001da8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	fa93 f2a3 	rbit	r2, r3
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001dce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	fa93 f2a3 	rbit	r2, r3
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <HAL_RCC_OscConfig+0xf78>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001df4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001df8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dfc:	6011      	str	r1, [r2, #0]
 8001dfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e02:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	fa92 f1a2 	rbit	r1, r2
 8001e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e10:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e14:	6011      	str	r1, [r2, #0]
  return result;
 8001e16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e1a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	fab2 f282 	clz	r2, r2
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f002 021f 	and.w	r2, r2, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f202 	lsl.w	r2, r1, r2
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d082      	beq.n	8001d42 <HAL_RCC_OscConfig+0xdce>
 8001e3c:	e0cf      	b.n	8001fde <HAL_RCC_OscConfig+0x106a>
 8001e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e42:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fa93 f2a3 	rbit	r2, r3
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e62:	601a      	str	r2, [r3, #0]
  return result;
 8001e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e68:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2300      	movs	r3, #0
 8001e82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe fc38 	bl	80006f8 <HAL_GetTick>
 8001e88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8c:	e009      	b.n	8001ea2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7fe fc33 	bl	80006f8 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e09e      	b.n	8001fe0 <HAL_RCC_OscConfig+0x106c>
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ec6:	601a      	str	r2, [r3, #0]
  return result;
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ed0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	095b      	lsrs	r3, r3, #5
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d104      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xf7c>
 8001ee6:	4b01      	ldr	r3, [pc, #4]	; (8001eec <HAL_RCC_OscConfig+0xf78>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	e029      	b.n	8001f40 <HAL_RCC_OscConfig+0xfcc>
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f02:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	fa93 f2a3 	rbit	r2, r3
 8001f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f10:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f28:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	fa93 f2a3 	rbit	r2, r3
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_RCC_OscConfig+0x1078>)
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f44:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f4c:	6011      	str	r1, [r2, #0]
 8001f4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f52:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	fa92 f1a2 	rbit	r1, r2
 8001f5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f60:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f64:	6011      	str	r1, [r2, #0]
  return result;
 8001f66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f6a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	fab2 f282 	clz	r2, r2
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	f042 0220 	orr.w	r2, r2, #32
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f002 021f 	and.w	r2, r2, #31
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f202 	lsl.w	r2, r1, r2
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d180      	bne.n	8001e8e <HAL_RCC_OscConfig+0xf1a>
 8001f8c:	e027      	b.n	8001fde <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e01e      	b.n	8001fe0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_RCC_OscConfig+0x1078>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001faa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d10b      	bne.n	8001fda <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b09e      	sub	sp, #120	; 0x78
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e162      	b.n	80022ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b90      	ldr	r3, [pc, #576]	; (800224c <HAL_RCC_ClockConfig+0x25c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d910      	bls.n	8002038 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b8d      	ldr	r3, [pc, #564]	; (800224c <HAL_RCC_ClockConfig+0x25c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	498b      	ldr	r1, [pc, #556]	; (800224c <HAL_RCC_ClockConfig+0x25c>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b89      	ldr	r3, [pc, #548]	; (800224c <HAL_RCC_ClockConfig+0x25c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e14a      	b.n	80022ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b82      	ldr	r3, [pc, #520]	; (8002250 <HAL_RCC_ClockConfig+0x260>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	497f      	ldr	r1, [pc, #508]	; (8002250 <HAL_RCC_ClockConfig+0x260>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80dc 	beq.w	800221c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d13c      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xf6>
 800206c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002070:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800207a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d102      	bne.n	8002096 <HAL_RCC_ClockConfig+0xa6>
 8002090:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_ClockConfig+0x260>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	e00f      	b.n	80020b6 <HAL_RCC_ClockConfig+0xc6>
 8002096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800209a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	667b      	str	r3, [r7, #100]	; 0x64
 80020a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a8:	663b      	str	r3, [r7, #96]	; 0x60
 80020aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020b2:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_RCC_ClockConfig+0x260>)
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80020bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020be:	fa92 f2a2 	rbit	r2, r2
 80020c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020c6:	fab2 f282 	clz	r2, r2
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	f042 0220 	orr.w	r2, r2, #32
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f002 021f 	and.w	r2, r2, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d17b      	bne.n	80021da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0f3      	b.n	80022ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d13c      	bne.n	8002168 <HAL_RCC_ClockConfig+0x178>
 80020ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_RCC_ClockConfig+0x128>
 8002112:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <HAL_RCC_ClockConfig+0x260>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	e00f      	b.n	8002138 <HAL_RCC_ClockConfig+0x148>
 8002118:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	647b      	str	r3, [r7, #68]	; 0x44
 8002126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002134:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCC_ClockConfig+0x260>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800213c:	63ba      	str	r2, [r7, #56]	; 0x38
 800213e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002140:	fa92 f2a2 	rbit	r2, r2
 8002144:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f042 0220 	orr.w	r2, r2, #32
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f002 021f 	and.w	r2, r2, #31
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d13a      	bne.n	80021da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0b2      	b.n	80022ce <HAL_RCC_ClockConfig+0x2de>
 8002168:	2302      	movs	r3, #2
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d102      	bne.n	8002190 <HAL_RCC_ClockConfig+0x1a0>
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_RCC_ClockConfig+0x260>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	e00d      	b.n	80021ac <HAL_RCC_ClockConfig+0x1bc>
 8002190:	2302      	movs	r3, #2
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
 800219c:	2302      	movs	r3, #2
 800219e:	623b      	str	r3, [r7, #32]
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <HAL_RCC_ClockConfig+0x260>)
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	2202      	movs	r2, #2
 80021ae:	61ba      	str	r2, [r7, #24]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	fa92 f2a2 	rbit	r2, r2
 80021b6:	617a      	str	r2, [r7, #20]
  return result;
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	fab2 f282 	clz	r2, r2
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f042 0220 	orr.w	r2, r2, #32
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	f002 021f 	and.w	r2, r2, #31
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e079      	b.n	80022ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f023 0203 	bic.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	491a      	ldr	r1, [pc, #104]	; (8002250 <HAL_RCC_ClockConfig+0x260>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ec:	f7fe fa84 	bl	80006f8 <HAL_GetTick>
 80021f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	e00a      	b.n	800220a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f4:	f7fe fa80 	bl	80006f8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e061      	b.n	80022ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_ClockConfig+0x260>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 020c 	and.w	r2, r3, #12
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	429a      	cmp	r2, r3
 800221a:	d1eb      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_ClockConfig+0x25c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d214      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_RCC_ClockConfig+0x25c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 0207 	bic.w	r2, r3, #7
 8002232:	4906      	ldr	r1, [pc, #24]	; (800224c <HAL_RCC_ClockConfig+0x25c>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <HAL_RCC_ClockConfig+0x25c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e040      	b.n	80022ce <HAL_RCC_ClockConfig+0x2de>
 800224c:	40022000 	.word	0x40022000
 8002250:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	491a      	ldr	r1, [pc, #104]	; (80022d8 <HAL_RCC_ClockConfig+0x2e8>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4912      	ldr	r1, [pc, #72]	; (80022d8 <HAL_RCC_ClockConfig+0x2e8>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002292:	f000 f829 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8002296:	4601      	mov	r1, r0
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_RCC_ClockConfig+0x2e8>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a0:	22f0      	movs	r2, #240	; 0xf0
 80022a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	fa92 f2a2 	rbit	r2, r2
 80022aa:	60fa      	str	r2, [r7, #12]
  return result;
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	fab2 f282 	clz	r2, r2
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	40d3      	lsrs	r3, r2
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x2ec>)
 80022b8:	5cd3      	ldrb	r3, [r2, r3]
 80022ba:	fa21 f303 	lsr.w	r3, r1, r3
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <HAL_RCC_ClockConfig+0x2f0>)
 80022c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_RCC_ClockConfig+0x2f4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe f9d2 	bl	8000670 <HAL_InitTick>
  
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3778      	adds	r7, #120	; 0x78
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08003160 	.word	0x08003160
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b08b      	sub	sp, #44	; 0x2c
 80022ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d002      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x30>
 8002312:	2b08      	cmp	r3, #8
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x36>
 8002316:	e03c      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002318:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800231a:	623b      	str	r3, [r7, #32]
      break;
 800231c:	e03c      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002324:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002328:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	fa92 f2a2 	rbit	r2, r2
 8002330:	607a      	str	r2, [r7, #4]
  return result;
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	fab2 f282 	clz	r2, r2
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	40d3      	lsrs	r3, r2
 800233c:	4a1c      	ldr	r2, [pc, #112]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	220f      	movs	r2, #15
 800234c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	fa92 f2a2 	rbit	r2, r2
 8002354:	60fa      	str	r2, [r7, #12]
  return result;
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	fab2 f282 	clz	r2, r2
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	40d3      	lsrs	r3, r2
 8002360:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002362:	5cd3      	ldrb	r3, [r2, r3]
 8002364:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	fbb2 f2f3 	udiv	r2, r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	e004      	b.n	800238c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	623b      	str	r3, [r7, #32]
      break;
 8002390:	e002      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002394:	623b      	str	r3, [r7, #32]
      break;
 8002396:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002398:	6a3b      	ldr	r3, [r7, #32]
}
 800239a:	4618      	mov	r0, r3
 800239c:	372c      	adds	r7, #44	; 0x2c
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	007a1200 	.word	0x007a1200
 80023b0:	08003178 	.word	0x08003178
 80023b4:	08003188 	.word	0x08003188
 80023b8:	003d0900 	.word	0x003d0900

080023bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023da:	f7ff ffef 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023de:	4601      	mov	r1, r0
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	fa92 f2a2 	rbit	r2, r2
 80023f4:	603a      	str	r2, [r7, #0]
  return result;
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	fab2 f282 	clz	r2, r2
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	40d3      	lsrs	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	08003170 	.word	0x08003170

08002418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800241e:	f7ff ffcd 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002422:	4601      	mov	r1, r0
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800242c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002430:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	fa92 f2a2 	rbit	r2, r2
 8002438:	603a      	str	r2, [r7, #0]
  return result;
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	fab2 f282 	clz	r2, r2
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	40d3      	lsrs	r3, r2
 8002444:	4a04      	ldr	r2, [pc, #16]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002446:	5cd3      	ldrb	r3, [r2, r3]
 8002448:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	08003170 	.word	0x08003170

0800245c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e040      	b.n	80024f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe f802 	bl	8000488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2224      	movs	r2, #36	; 0x24
 8002488:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f924 	bl	80026e8 <UART_SetConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e022      	b.n	80024f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa4e 	bl	8002954 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fad5 	bl	8002a98 <UART_CheckIdleState>
 80024ee:	4603      	mov	r3, r0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800250c:	2b20      	cmp	r3, #32
 800250e:	d178      	bne.n	8002602 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_UART_Transmit+0x24>
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e071      	b.n	8002604 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2221      	movs	r2, #33	; 0x21
 800252c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800252e:	f7fe f8e3 	bl	80006f8 <HAL_GetTick>
 8002532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	88fa      	ldrh	r2, [r7, #6]
 8002540:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254c:	d108      	bne.n	8002560 <HAL_UART_Transmit+0x68>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d104      	bne.n	8002560 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	e003      	b.n	8002568 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002568:	e030      	b.n	80025cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	2180      	movs	r1, #128	; 0x80
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fb37 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e03c      	b.n	8002604 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10b      	bne.n	80025a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800259c:	b292      	uxth	r2, r2
 800259e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	3302      	adds	r3, #2
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	e008      	b.n	80025ba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b292      	uxth	r2, r2
 80025b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	3301      	adds	r3, #1
 80025b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1c8      	bne.n	800256a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2200      	movs	r2, #0
 80025e0:	2140      	movs	r1, #64	; 0x40
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fb00 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e005      	b.n	8002604 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e000      	b.n	8002604 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002602:	2302      	movs	r3, #2
  }
}
 8002604:	4618      	mov	r0, r3
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002620:	2b20      	cmp	r3, #32
 8002622:	d132      	bne.n	800268a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_UART_Receive_DMA+0x24>
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e02b      	b.n	800268c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d018      	beq.n	800267a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	e853 3f00 	ldrex	r3, [r3]
 8002654:	613b      	str	r3, [r7, #16]
   return(result);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	623b      	str	r3, [r7, #32]
 8002668:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266a:	69f9      	ldr	r1, [r7, #28]
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	e841 2300 	strex	r3, r2, [r1]
 8002672:	61bb      	str	r3, [r7, #24]
   return(result);
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e6      	bne.n	8002648 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	461a      	mov	r2, r3
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fb19 	bl	8002cb8 <UART_Start_Receive_DMA>
 8002686:	4603      	mov	r3, r0
 8002688:	e000      	b.n	800268c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
  }
}
 800268c:	4618      	mov	r0, r3
 800268e:	3728      	adds	r7, #40	; 0x28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4b8a      	ldr	r3, [pc, #552]	; (800293c <UART_SetConfig+0x254>)
 8002714:	4013      	ands	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	6979      	ldr	r1, [r7, #20]
 800271c:	430b      	orrs	r3, r1
 800271e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	430a      	orrs	r2, r1
 8002758:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a78      	ldr	r2, [pc, #480]	; (8002940 <UART_SetConfig+0x258>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d120      	bne.n	80027a6 <UART_SetConfig+0xbe>
 8002764:	4b77      	ldr	r3, [pc, #476]	; (8002944 <UART_SetConfig+0x25c>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b03      	cmp	r3, #3
 800276e:	d817      	bhi.n	80027a0 <UART_SetConfig+0xb8>
 8002770:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <UART_SetConfig+0x90>)
 8002772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002776:	bf00      	nop
 8002778:	08002789 	.word	0x08002789
 800277c:	08002795 	.word	0x08002795
 8002780:	0800279b 	.word	0x0800279b
 8002784:	0800278f 	.word	0x0800278f
 8002788:	2300      	movs	r3, #0
 800278a:	77fb      	strb	r3, [r7, #31]
 800278c:	e01d      	b.n	80027ca <UART_SetConfig+0xe2>
 800278e:	2302      	movs	r3, #2
 8002790:	77fb      	strb	r3, [r7, #31]
 8002792:	e01a      	b.n	80027ca <UART_SetConfig+0xe2>
 8002794:	2304      	movs	r3, #4
 8002796:	77fb      	strb	r3, [r7, #31]
 8002798:	e017      	b.n	80027ca <UART_SetConfig+0xe2>
 800279a:	2308      	movs	r3, #8
 800279c:	77fb      	strb	r3, [r7, #31]
 800279e:	e014      	b.n	80027ca <UART_SetConfig+0xe2>
 80027a0:	2310      	movs	r3, #16
 80027a2:	77fb      	strb	r3, [r7, #31]
 80027a4:	e011      	b.n	80027ca <UART_SetConfig+0xe2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a67      	ldr	r2, [pc, #412]	; (8002948 <UART_SetConfig+0x260>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d102      	bne.n	80027b6 <UART_SetConfig+0xce>
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
 80027b4:	e009      	b.n	80027ca <UART_SetConfig+0xe2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a64      	ldr	r2, [pc, #400]	; (800294c <UART_SetConfig+0x264>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d102      	bne.n	80027c6 <UART_SetConfig+0xde>
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
 80027c4:	e001      	b.n	80027ca <UART_SetConfig+0xe2>
 80027c6:	2310      	movs	r3, #16
 80027c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d2:	d15a      	bne.n	800288a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80027d4:	7ffb      	ldrb	r3, [r7, #31]
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d827      	bhi.n	800282a <UART_SetConfig+0x142>
 80027da:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <UART_SetConfig+0xf8>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	08002805 	.word	0x08002805
 80027e4:	0800280d 	.word	0x0800280d
 80027e8:	08002815 	.word	0x08002815
 80027ec:	0800282b 	.word	0x0800282b
 80027f0:	0800281b 	.word	0x0800281b
 80027f4:	0800282b 	.word	0x0800282b
 80027f8:	0800282b 	.word	0x0800282b
 80027fc:	0800282b 	.word	0x0800282b
 8002800:	08002823 	.word	0x08002823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002804:	f7ff fde6 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8002808:	61b8      	str	r0, [r7, #24]
        break;
 800280a:	e013      	b.n	8002834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800280c:	f7ff fe04 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8002810:	61b8      	str	r0, [r7, #24]
        break;
 8002812:	e00f      	b.n	8002834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002814:	4b4e      	ldr	r3, [pc, #312]	; (8002950 <UART_SetConfig+0x268>)
 8002816:	61bb      	str	r3, [r7, #24]
        break;
 8002818:	e00c      	b.n	8002834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800281a:	f7ff fd65 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 800281e:	61b8      	str	r0, [r7, #24]
        break;
 8002820:	e008      	b.n	8002834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002826:	61bb      	str	r3, [r7, #24]
        break;
 8002828:	e004      	b.n	8002834 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	77bb      	strb	r3, [r7, #30]
        break;
 8002832:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d074      	beq.n	8002924 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	005a      	lsls	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	441a      	add	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b0f      	cmp	r3, #15
 8002854:	d916      	bls.n	8002884 <UART_SetConfig+0x19c>
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d212      	bcs.n	8002884 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	b29b      	uxth	r3, r3
 8002862:	f023 030f 	bic.w	r3, r3, #15
 8002866:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	b29b      	uxth	r3, r3
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	b29a      	uxth	r2, r3
 8002874:	89fb      	ldrh	r3, [r7, #14]
 8002876:	4313      	orrs	r3, r2
 8002878:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	89fa      	ldrh	r2, [r7, #14]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	e04f      	b.n	8002924 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	77bb      	strb	r3, [r7, #30]
 8002888:	e04c      	b.n	8002924 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800288a:	7ffb      	ldrb	r3, [r7, #31]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d828      	bhi.n	80028e2 <UART_SetConfig+0x1fa>
 8002890:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <UART_SetConfig+0x1b0>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028bd 	.word	0x080028bd
 800289c:	080028c5 	.word	0x080028c5
 80028a0:	080028cd 	.word	0x080028cd
 80028a4:	080028e3 	.word	0x080028e3
 80028a8:	080028d3 	.word	0x080028d3
 80028ac:	080028e3 	.word	0x080028e3
 80028b0:	080028e3 	.word	0x080028e3
 80028b4:	080028e3 	.word	0x080028e3
 80028b8:	080028db 	.word	0x080028db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028bc:	f7ff fd8a 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 80028c0:	61b8      	str	r0, [r7, #24]
        break;
 80028c2:	e013      	b.n	80028ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028c4:	f7ff fda8 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 80028c8:	61b8      	str	r0, [r7, #24]
        break;
 80028ca:	e00f      	b.n	80028ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028cc:	4b20      	ldr	r3, [pc, #128]	; (8002950 <UART_SetConfig+0x268>)
 80028ce:	61bb      	str	r3, [r7, #24]
        break;
 80028d0:	e00c      	b.n	80028ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028d2:	f7ff fd09 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 80028d6:	61b8      	str	r0, [r7, #24]
        break;
 80028d8:	e008      	b.n	80028ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028de:	61bb      	str	r3, [r7, #24]
        break;
 80028e0:	e004      	b.n	80028ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	77bb      	strb	r3, [r7, #30]
        break;
 80028ea:	bf00      	nop
    }

    if (pclk != 0U)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d018      	beq.n	8002924 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	085a      	lsrs	r2, r3, #1
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	441a      	add	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d909      	bls.n	8002920 <UART_SetConfig+0x238>
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002912:	d205      	bcs.n	8002920 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	e001      	b.n	8002924 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002930:	7fbb      	ldrb	r3, [r7, #30]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	efff69f3 	.word	0xefff69f3
 8002940:	40013800 	.word	0x40013800
 8002944:	40021000 	.word	0x40021000
 8002948:	40004400 	.word	0x40004400
 800294c:	40004800 	.word	0x40004800
 8002950:	007a1200 	.word	0x007a1200

08002954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01a      	beq.n	8002a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a52:	d10a      	bne.n	8002a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b098      	sub	sp, #96	; 0x60
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002aa8:	f7fd fe26 	bl	80006f8 <HAL_GetTick>
 8002aac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d12e      	bne.n	8002b1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f88c 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d021      	beq.n	8002b1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	e853 3f00 	ldrex	r3, [r3]
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aea:	653b      	str	r3, [r7, #80]	; 0x50
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af4:	647b      	str	r3, [r7, #68]	; 0x44
 8002af6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002afc:	e841 2300 	strex	r3, r2, [r1]
 8002b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e6      	bne.n	8002ad6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e062      	b.n	8002be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d149      	bne.n	8002bbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b30:	2200      	movs	r2, #0
 8002b32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f856 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d03c      	beq.n	8002bbc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
 8002b62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e6      	bne.n	8002b42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3308      	adds	r3, #8
 8002b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	e853 3f00 	ldrex	r3, [r3]
 8002b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3308      	adds	r3, #8
 8002b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b94:	61fa      	str	r2, [r7, #28]
 8002b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b98:	69b9      	ldr	r1, [r7, #24]
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	e841 2300 	strex	r3, r2, [r1]
 8002ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e5      	bne.n	8002b74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e011      	b.n	8002be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3758      	adds	r7, #88	; 0x58
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf8:	e049      	b.n	8002c8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d045      	beq.n	8002c8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fd fd79 	bl	80006f8 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e048      	b.n	8002cae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d031      	beq.n	8002c8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d110      	bne.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f8ff 	bl	8002e44 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2208      	movs	r2, #8
 8002c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e029      	b.n	8002cae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c68:	d111      	bne.n	8002c8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f8e5 	bl	8002e44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e00f      	b.n	8002cae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4013      	ands	r3, r2
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	bf0c      	ite	eq
 8002c9e:	2301      	moveq	r3, #1
 8002ca0:	2300      	movne	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d0a6      	beq.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b096      	sub	sp, #88	; 0x58
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	88fa      	ldrh	r2, [r7, #6]
 8002cd0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2222      	movs	r2, #34	; 0x22
 8002ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d028      	beq.n	8002d3e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf0:	4a3e      	ldr	r2, [pc, #248]	; (8002dec <UART_Start_Receive_DMA+0x134>)
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf8:	4a3d      	ldr	r2, [pc, #244]	; (8002df0 <UART_Start_Receive_DMA+0x138>)
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d00:	4a3c      	ldr	r2, [pc, #240]	; (8002df4 <UART_Start_Receive_DMA+0x13c>)
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	2200      	movs	r2, #0
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3324      	adds	r3, #36	; 0x24
 8002d16:	4619      	mov	r1, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	f7fd fe4e 	bl	80009c0 <HAL_DMA_Start_IT>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e051      	b.n	8002de2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d018      	beq.n	8002d78 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d66:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e6      	bne.n	8002d46 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3308      	adds	r3, #8
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3308      	adds	r3, #8
 8002d96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d98:	637a      	str	r2, [r7, #52]	; 0x34
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e5      	bne.n	8002d78 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3308      	adds	r3, #8
 8002db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	e853 3f00 	ldrex	r3, [r3]
 8002dba:	613b      	str	r3, [r7, #16]
   return(result);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3308      	adds	r3, #8
 8002dca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dcc:	623a      	str	r2, [r7, #32]
 8002dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd0:	69f9      	ldr	r1, [r7, #28]
 8002dd2:	6a3a      	ldr	r2, [r7, #32]
 8002dd4:	e841 2300 	strex	r3, r2, [r1]
 8002dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e5      	bne.n	8002dac <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3758      	adds	r7, #88	; 0x58
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	08002f0d 	.word	0x08002f0d
 8002df0:	08003033 	.word	0x08003033
 8002df4:	08003071 	.word	0x08003071

08002df8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	e853 3f00 	ldrex	r3, [r3]
 8002e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	6979      	ldr	r1, [r7, #20]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e6      	bne.n	8002e00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002e38:	bf00      	nop
 8002e3a:	3724      	adds	r7, #36	; 0x24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b095      	sub	sp, #84	; 0x54
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e6      	bne.n	8002e4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3308      	adds	r3, #8
 8002e84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	e853 3f00 	ldrex	r3, [r3]
 8002e8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea6:	e841 2300 	strex	r3, r2, [r1]
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e5      	bne.n	8002e7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d118      	bne.n	8002eec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f023 0310 	bic.w	r3, r3, #16
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	6979      	ldr	r1, [r7, #20]
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	e841 2300 	strex	r3, r2, [r1]
 8002ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e6      	bne.n	8002eba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f00:	bf00      	nop
 8002f02:	3754      	adds	r7, #84	; 0x54
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b09c      	sub	sp, #112	; 0x70
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d071      	beq.n	8003006 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8002f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f24:	2200      	movs	r2, #0
 8002f26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e6      	bne.n	8002f2a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3308      	adds	r3, #8
 8002f62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	667b      	str	r3, [r7, #100]	; 0x64
 8002f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3308      	adds	r3, #8
 8002f7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f7c:	647a      	str	r2, [r7, #68]	; 0x44
 8002f7e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e5      	bne.n	8002f5c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3308      	adds	r3, #8
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa6:	663b      	str	r3, [r7, #96]	; 0x60
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3308      	adds	r3, #8
 8002fae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fb0:	633a      	str	r2, [r7, #48]	; 0x30
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb8:	e841 2300 	strex	r3, r2, [r1]
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e5      	bne.n	8002f90 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d118      	bne.n	8003006 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f023 0310 	bic.w	r3, r3, #16
 8002fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	69b9      	ldr	r1, [r7, #24]
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	e841 2300 	strex	r3, r2, [r1]
 8002ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e6      	bne.n	8002fd4 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003008:	2200      	movs	r2, #0
 800300a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800300c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003010:	2b01      	cmp	r3, #1
 8003012:	d107      	bne.n	8003024 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003016:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800301a:	4619      	mov	r1, r3
 800301c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800301e:	f7ff fb57 	bl	80026d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003022:	e002      	b.n	800302a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003024:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003026:	f7ff fb35 	bl	8002694 <HAL_UART_RxCpltCallback>
}
 800302a:	bf00      	nop
 800302c:	3770      	adds	r7, #112	; 0x70
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304a:	2b01      	cmp	r3, #1
 800304c:	d109      	bne.n	8003062 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	b29b      	uxth	r3, r3
 8003058:	4619      	mov	r1, r3
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7ff fb38 	bl	80026d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003060:	e002      	b.n	8003068 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff fb20 	bl	80026a8 <HAL_UART_RxHalfCpltCallback>
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003082:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b80      	cmp	r3, #128	; 0x80
 8003098:	d109      	bne.n	80030ae <UART_DMAError+0x3e>
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b21      	cmp	r3, #33	; 0x21
 800309e:	d106      	bne.n	80030ae <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80030a8:	6978      	ldr	r0, [r7, #20]
 80030aa:	f7ff fea5 	bl	8002df8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d109      	bne.n	80030d0 <UART_DMAError+0x60>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b22      	cmp	r3, #34	; 0x22
 80030c0:	d106      	bne.n	80030d0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80030ca:	6978      	ldr	r0, [r7, #20]
 80030cc:	f7ff feba 	bl	8002e44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d6:	f043 0210 	orr.w	r2, r3, #16
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030e0:	6978      	ldr	r0, [r7, #20]
 80030e2:	f7ff faeb 	bl	80026bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030e6:	bf00      	nop
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <__libc_init_array>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	4d0d      	ldr	r5, [pc, #52]	; (8003128 <__libc_init_array+0x38>)
 80030f4:	4c0d      	ldr	r4, [pc, #52]	; (800312c <__libc_init_array+0x3c>)
 80030f6:	1b64      	subs	r4, r4, r5
 80030f8:	10a4      	asrs	r4, r4, #2
 80030fa:	2600      	movs	r6, #0
 80030fc:	42a6      	cmp	r6, r4
 80030fe:	d109      	bne.n	8003114 <__libc_init_array+0x24>
 8003100:	4d0b      	ldr	r5, [pc, #44]	; (8003130 <__libc_init_array+0x40>)
 8003102:	4c0c      	ldr	r4, [pc, #48]	; (8003134 <__libc_init_array+0x44>)
 8003104:	f000 f820 	bl	8003148 <_init>
 8003108:	1b64      	subs	r4, r4, r5
 800310a:	10a4      	asrs	r4, r4, #2
 800310c:	2600      	movs	r6, #0
 800310e:	42a6      	cmp	r6, r4
 8003110:	d105      	bne.n	800311e <__libc_init_array+0x2e>
 8003112:	bd70      	pop	{r4, r5, r6, pc}
 8003114:	f855 3b04 	ldr.w	r3, [r5], #4
 8003118:	4798      	blx	r3
 800311a:	3601      	adds	r6, #1
 800311c:	e7ee      	b.n	80030fc <__libc_init_array+0xc>
 800311e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003122:	4798      	blx	r3
 8003124:	3601      	adds	r6, #1
 8003126:	e7f2      	b.n	800310e <__libc_init_array+0x1e>
 8003128:	08003198 	.word	0x08003198
 800312c:	08003198 	.word	0x08003198
 8003130:	08003198 	.word	0x08003198
 8003134:	0800319c 	.word	0x0800319c

08003138 <memset>:
 8003138:	4402      	add	r2, r0
 800313a:	4603      	mov	r3, r0
 800313c:	4293      	cmp	r3, r2
 800313e:	d100      	bne.n	8003142 <memset+0xa>
 8003140:	4770      	bx	lr
 8003142:	f803 1b01 	strb.w	r1, [r3], #1
 8003146:	e7f9      	b.n	800313c <memset+0x4>

08003148 <_init>:
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	bf00      	nop
 800314c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314e:	bc08      	pop	{r3}
 8003150:	469e      	mov	lr, r3
 8003152:	4770      	bx	lr

08003154 <_fini>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	bf00      	nop
 8003158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315a:	bc08      	pop	{r3}
 800315c:	469e      	mov	lr, r3
 800315e:	4770      	bx	lr
