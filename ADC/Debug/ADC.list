
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003798  08003798  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003798  08003798  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003798  08003798  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000100  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000010c  2000010c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a495  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014aa  00000000  00000000  0002a4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002b980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000710  00000000  00000000  0002c108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a26e  00000000  00000000  0002c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a360  00000000  00000000  00046a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e04b  00000000  00000000  00050de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000eee31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e20  00000000  00000000  000eee84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003748 	.word	0x08003748

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003748 	.word	0x08003748

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa4f 	bl	8000670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f82b 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f917 	bl	8000408 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f8e5 	bl	80003a8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001de:	f000 f861 	bl	80002a4 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i=0; i<2; i++){
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e016      	b.n	8000216 <main+0x4e>
		  HAL_ADC_Start(&hadc1);
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <main+0x58>)
 80001ea:	f000 fc39 	bl	8000a60 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 80001ee:	210a      	movs	r1, #10
 80001f0:	480b      	ldr	r0, [pc, #44]	; (8000220 <main+0x58>)
 80001f2:	f000 fceb 	bl	8000bcc <HAL_ADC_PollForConversion>
		  adc_value = HAL_ADC_GetValue(&hadc1);
 80001f6:	480a      	ldr	r0, [pc, #40]	; (8000220 <main+0x58>)
 80001f8:	f000 fdb6 	bl	8000d68 <HAL_ADC_GetValue>
 80001fc:	4603      	mov	r3, r0
 80001fe:	b29a      	uxth	r2, r3
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <main+0x5c>)
 8000202:	801a      	strh	r2, [r3, #0]
		  adc[i] = adc_value;
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <main+0x5c>)
 8000206:	8819      	ldrh	r1, [r3, #0]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <main+0x60>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i=0; i<2; i++){
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b01      	cmp	r3, #1
 800021a:	dde5      	ble.n	80001e8 <main+0x20>
 800021c:	e7e1      	b.n	80001e2 <main+0x1a>
 800021e:	bf00      	nop
 8000220:	20000028 	.word	0x20000028
 8000224:	20000100 	.word	0x20000100
 8000228:	20000104 	.word	0x20000104

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b090      	sub	sp, #64	; 0x40
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	2228      	movs	r2, #40	; 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f003 fa7c 	bl	8003738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024e:	2302      	movs	r3, #2
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025a:	2300      	movs	r3, #0
 800025c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fc36 	bl	8001ad4 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800026e:	f000 f8ef 	bl	8000450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fc60 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000296:	f000 f8db 	bl	8000450 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08a      	sub	sp, #40	; 0x28
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002aa:	f107 031c 	add.w	r3, r7, #28
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
 80002c2:	611a      	str	r2, [r3, #16]
 80002c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c6:	4b37      	ldr	r3, [pc, #220]	; (80003a4 <MX_ADC1_Init+0x100>)
 80002c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80002ce:	4b35      	ldr	r3, [pc, #212]	; (80003a4 <MX_ADC1_Init+0x100>)
 80002d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80002d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002d6:	4b33      	ldr	r3, [pc, #204]	; (80003a4 <MX_ADC1_Init+0x100>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002dc:	4b31      	ldr	r3, [pc, #196]	; (80003a4 <MX_ADC1_Init+0x100>)
 80002de:	2201      	movs	r2, #1
 80002e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e2:	4b30      	ldr	r3, [pc, #192]	; (80003a4 <MX_ADC1_Init+0x100>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80002e8:	4b2e      	ldr	r3, [pc, #184]	; (80003a4 <MX_ADC1_Init+0x100>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80002f0:	4b2c      	ldr	r3, [pc, #176]	; (80003a4 <MX_ADC1_Init+0x100>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002f6:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <MX_ADC1_Init+0x100>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002fc:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <MX_ADC1_Init+0x100>)
 80002fe:	2201      	movs	r2, #1
 8000300:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000302:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <MX_ADC1_Init+0x100>)
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000308:	4b26      	ldr	r3, [pc, #152]	; (80003a4 <MX_ADC1_Init+0x100>)
 800030a:	2202      	movs	r2, #2
 800030c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800030e:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <MX_ADC1_Init+0x100>)
 8000310:	2200      	movs	r2, #0
 8000312:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000316:	4b23      	ldr	r3, [pc, #140]	; (80003a4 <MX_ADC1_Init+0x100>)
 8000318:	2204      	movs	r2, #4
 800031a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800031c:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <MX_ADC1_Init+0x100>)
 800031e:	2200      	movs	r2, #0
 8000320:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000322:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <MX_ADC1_Init+0x100>)
 8000324:	2200      	movs	r2, #0
 8000326:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000328:	481e      	ldr	r0, [pc, #120]	; (80003a4 <MX_ADC1_Init+0x100>)
 800032a:	f000 fa07 	bl	800073c <HAL_ADC_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000334:	f000 f88c 	bl	8000450 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000338:	2300      	movs	r3, #0
 800033a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800033c:	f107 031c 	add.w	r3, r7, #28
 8000340:	4619      	mov	r1, r3
 8000342:	4818      	ldr	r0, [pc, #96]	; (80003a4 <MX_ADC1_Init+0x100>)
 8000344:	f000 ffde 	bl	8001304 <HAL_ADCEx_MultiModeConfigChannel>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800034e:	f000 f87f 	bl	8000450 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000352:	2301      	movs	r3, #1
 8000354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000356:	2301      	movs	r3, #1
 8000358:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4619      	mov	r1, r3
 800036e:	480d      	ldr	r0, [pc, #52]	; (80003a4 <MX_ADC1_Init+0x100>)
 8000370:	f000 fd08 	bl	8000d84 <HAL_ADC_ConfigChannel>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800037a:	f000 f869 	bl	8000450 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800037e:	2302      	movs	r3, #2
 8000380:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000382:	2302      	movs	r3, #2
 8000384:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4619      	mov	r1, r3
 800038a:	4806      	ldr	r0, [pc, #24]	; (80003a4 <MX_ADC1_Init+0x100>)
 800038c:	f000 fcfa 	bl	8000d84 <HAL_ADC_ConfigChannel>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000396:	f000 f85b 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	3728      	adds	r7, #40	; 0x28
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000028 	.word	0x20000028

080003a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <MX_USART2_UART_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ec:	f002 fde6 	bl	8002fbc <HAL_UART_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f82b 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000078 	.word	0x20000078
 8000404:	40004400 	.word	0x40004400

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_GPIO_Init+0x44>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <MX_GPIO_Init+0x44>)
 8000414:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <MX_GPIO_Init+0x44>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_GPIO_Init+0x44>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a08      	ldr	r2, [pc, #32]	; (800044c <MX_GPIO_Init+0x44>)
 800042c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000430:	6153      	str	r3, [r2, #20]
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_GPIO_Init+0x44>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	e7fe      	b.n	8000458 <Error_Handler+0x8>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x44>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <HAL_MspInit+0x44>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_MspInit+0x44>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_MspInit+0x44>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <HAL_MspInit+0x44>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_MspInit+0x44>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08a      	sub	sp, #40	; 0x28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
 80004ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004c4:	d124      	bne.n	8000510 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004c6:	4b14      	ldr	r3, [pc, #80]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a13      	ldr	r2, [pc, #76]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_ADC_MspInit+0x74>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004f6:	2303      	movs	r3, #3
 80004f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fa:	2303      	movs	r3, #3
 80004fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	4619      	mov	r1, r3
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f001 f970 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000510:	bf00      	nop
 8000512:	3728      	adds	r7, #40	; 0x28
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000

0800051c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a18      	ldr	r2, [pc, #96]	; (800059c <HAL_UART_MspInit+0x80>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d129      	bne.n	8000592 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <HAL_UART_MspInit+0x84>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <HAL_UART_MspInit+0x84>)
 8000544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_UART_MspInit+0x84>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_UART_MspInit+0x84>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <HAL_UART_MspInit+0x84>)
 800055c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_UART_MspInit+0x84>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800056e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000574:	2302      	movs	r3, #2
 8000576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057c:	2303      	movs	r3, #3
 800057e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000580:	2307      	movs	r3, #7
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f001 f92f 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40004400 	.word	0x40004400
 80005a0:	40021000 	.word	0x40021000

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <NMI_Handler+0x4>

080005aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <HardFault_Handler+0x4>

080005b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <MemManage_Handler+0x4>

080005b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <BusFault_Handler+0x4>

080005bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <UsageFault_Handler+0x4>

080005c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f0:	f000 f884 	bl	80006fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <SystemInit+0x20>)
 80005fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <SystemInit+0x20>)
 8000604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800061c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000654 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000620:	f7ff ffea 	bl	80005f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0a      	ldr	r4, [pc, #40]	; (8000668 <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800064a:	f003 f851 	bl	80036f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800064e:	f7ff fdbb 	bl	80001c8 <main>

08000652 <LoopForever>:

LoopForever:
    b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000654:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000660:	080037a0 	.word	0x080037a0
  ldr r2, =_sbss
 8000664:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000668:	2000010c 	.word	0x2000010c

0800066c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC1_2_IRQHandler>
	...

08000670 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <HAL_Init+0x28>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_Init+0x28>)
 800067a:	f043 0310 	orr.w	r3, r3, #16
 800067e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000680:	2003      	movs	r0, #3
 8000682:	f001 f881 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f808 	bl	800069c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800068c:	f7ff fee6 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40022000 	.word	0x40022000

0800069c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_InitTick+0x54>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_InitTick+0x58>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f88b 	bl	80017d6 <HAL_SYSTICK_Config>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e00e      	b.n	80006e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d80a      	bhi.n	80006e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d0:	2200      	movs	r2, #0
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	f04f 30ff 	mov.w	r0, #4294967295
 80006d8:	f001 f861 	bl	800179e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <HAL_InitTick+0x5c>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006e2:	2300      	movs	r3, #0
 80006e4:	e000      	b.n	80006e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000008 	.word	0x20000008
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_IncTick+0x20>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_IncTick+0x24>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4413      	add	r3, r2
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <HAL_IncTick+0x24>)
 800070e:	6013      	str	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000008 	.word	0x20000008
 8000720:	20000108 	.word	0x20000108

08000724 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return uwTick;  
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <HAL_GetTick+0x14>)
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000108 	.word	0x20000108

0800073c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09a      	sub	sp, #104	; 0x68
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800074a:	2300      	movs	r3, #0
 800074c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000758:	2301      	movs	r3, #1
 800075a:	e172      	b.n	8000a42 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	2b00      	cmp	r3, #0
 800076c:	d176      	bne.n	800085c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	2b00      	cmp	r3, #0
 8000774:	d152      	bne.n	800081c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff fe87 	bl	80004a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d13b      	bne.n	800081c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 fed7 	bl	8001558 <ADC_Disable>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 0310 	and.w	r3, r3, #16
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d12f      	bne.n	800081c <HAL_ADC_Init+0xe0>
 80007bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d12b      	bne.n	800081c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007cc:	f023 0302 	bic.w	r3, r3, #2
 80007d0:	f043 0202 	orr.w	r2, r3, #2
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80007e6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	689a      	ldr	r2, [r3, #8]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007f8:	4b94      	ldr	r3, [pc, #592]	; (8000a4c <HAL_ADC_Init+0x310>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a94      	ldr	r2, [pc, #592]	; (8000a50 <HAL_ADC_Init+0x314>)
 80007fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000802:	0c9a      	lsrs	r2, r3, #18
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800080e:	e002      	b.n	8000816 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	3b01      	subs	r3, #1
 8000814:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1f9      	bne.n	8000810 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d007      	beq.n	800083a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000838:	d110      	bne.n	800085c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f023 0312 	bic.w	r3, r3, #18
 8000842:	f043 0210 	orr.w	r2, r3, #16
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f043 0201 	orr.w	r2, r3, #1
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 0310 	and.w	r3, r3, #16
 8000864:	2b00      	cmp	r3, #0
 8000866:	f040 80df 	bne.w	8000a28 <HAL_ADC_Init+0x2ec>
 800086a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 80da 	bne.w	8000a28 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800087e:	2b00      	cmp	r3, #0
 8000880:	f040 80d2 	bne.w	8000a28 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800088c:	f043 0202 	orr.w	r2, r3, #2
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000894:	4b6f      	ldr	r3, [pc, #444]	; (8000a54 <HAL_ADC_Init+0x318>)
 8000896:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008a0:	d102      	bne.n	80008a8 <HAL_ADC_Init+0x16c>
 80008a2:	4b6d      	ldr	r3, [pc, #436]	; (8000a58 <HAL_ADC_Init+0x31c>)
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e002      	b.n	80008ae <HAL_ADC_Init+0x172>
 80008a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008ac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d108      	bne.n	80008ce <HAL_ADC_Init+0x192>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d101      	bne.n	80008ce <HAL_ADC_Init+0x192>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <HAL_ADC_Init+0x194>
 80008ce:	2300      	movs	r3, #0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d11c      	bne.n	800090e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80008d4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d010      	beq.n	80008fc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d107      	bne.n	80008f6 <HAL_ADC_Init+0x1ba>
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d101      	bne.n	80008f6 <HAL_ADC_Init+0x1ba>
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <HAL_ADC_Init+0x1bc>
 80008f6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d108      	bne.n	800090e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80008fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	431a      	orrs	r2, r3
 800090a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800090c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7e5b      	ldrb	r3, [r3, #25]
 8000912:	035b      	lsls	r3, r3, #13
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000918:	2a01      	cmp	r2, #1
 800091a:	d002      	beq.n	8000922 <HAL_ADC_Init+0x1e6>
 800091c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000920:	e000      	b.n	8000924 <HAL_ADC_Init+0x1e8>
 8000922:	2200      	movs	r2, #0
 8000924:	431a      	orrs	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	431a      	orrs	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	4313      	orrs	r3, r2
 8000932:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000934:	4313      	orrs	r3, r2
 8000936:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d11b      	bne.n	800097a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7e5b      	ldrb	r3, [r3, #25]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d109      	bne.n	800095e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	3b01      	subs	r3, #1
 8000950:	045a      	lsls	r2, r3, #17
 8000952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000954:	4313      	orrs	r3, r2
 8000956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800095a:	663b      	str	r3, [r7, #96]	; 0x60
 800095c:	e00d      	b.n	800097a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000966:	f043 0220 	orr.w	r2, r3, #32
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f043 0201 	orr.w	r2, r3, #1
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097e:	2b01      	cmp	r3, #1
 8000980:	d007      	beq.n	8000992 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	4313      	orrs	r3, r2
 800098c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800098e:	4313      	orrs	r3, r2
 8000990:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	f003 030c 	and.w	r3, r3, #12
 800099c:	2b00      	cmp	r3, #0
 800099e:	d114      	bne.n	80009ca <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009ae:	f023 0302 	bic.w	r3, r3, #2
 80009b2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	7e1b      	ldrb	r3, [r3, #24]
 80009b8:	039a      	lsls	r2, r3, #14
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4313      	orrs	r3, r2
 80009c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80009c6:	4313      	orrs	r3, r2
 80009c8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <HAL_ADC_Init+0x320>)
 80009d2:	4013      	ands	r3, r2
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	6812      	ldr	r2, [r2, #0]
 80009d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80009da:	430b      	orrs	r3, r1
 80009dc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	691b      	ldr	r3, [r3, #16]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d10c      	bne.n	8000a00 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	f023 010f 	bic.w	r1, r3, #15
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	1e5a      	subs	r2, r3, #1
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	631a      	str	r2, [r3, #48]	; 0x30
 80009fe:	e007      	b.n	8000a10 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 020f 	bic.w	r2, r2, #15
 8000a0e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f023 0303 	bic.w	r3, r3, #3
 8000a1e:	f043 0201 	orr.w	r2, r3, #1
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	641a      	str	r2, [r3, #64]	; 0x40
 8000a26:	e00a      	b.n	8000a3e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f023 0312 	bic.w	r3, r3, #18
 8000a30:	f043 0210 	orr.w	r2, r3, #16
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000a38:	2301      	movs	r3, #1
 8000a3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000a3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3768      	adds	r7, #104	; 0x68
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	431bde83 	.word	0x431bde83
 8000a54:	50000300 	.word	0x50000300
 8000a58:	50000100 	.word	0x50000100
 8000a5c:	fff0c007 	.word	0xfff0c007

08000a60 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 809c 	bne.w	8000bb4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d101      	bne.n	8000a8a <HAL_ADC_Start+0x2a>
 8000a86:	2302      	movs	r3, #2
 8000a88:	e097      	b.n	8000bba <HAL_ADC_Start+0x15a>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 fcfc 	bl	8001490 <ADC_Enable>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f040 8083 	bne.w	8000baa <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ab8:	4b42      	ldr	r3, [pc, #264]	; (8000bc4 <HAL_ADC_Start+0x164>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f003 031f 	and.w	r3, r3, #31
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d004      	beq.n	8000ace <HAL_ADC_Start+0x6e>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000acc:	d115      	bne.n	8000afa <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d027      	beq.n	8000b38 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000af0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000af8:	e01e      	b.n	8000b38 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b0e:	d004      	beq.n	8000b1a <HAL_ADC_Start+0xba>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a2c      	ldr	r2, [pc, #176]	; (8000bc8 <HAL_ADC_Start+0x168>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d10e      	bne.n	8000b38 <HAL_ADC_Start+0xd8>
 8000b1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d007      	beq.n	8000b38 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b44:	d106      	bne.n	8000b54 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f023 0206 	bic.w	r2, r3, #6
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	645a      	str	r2, [r3, #68]	; 0x44
 8000b52:	e002      	b.n	8000b5a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	221c      	movs	r2, #28
 8000b68:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_ADC_Start+0x164>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f003 031f 	and.w	r3, r3, #31
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d010      	beq.n	8000b98 <HAL_ADC_Start+0x138>
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_ADC_Start+0x164>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f003 031f 	and.w	r3, r3, #31
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	d00a      	beq.n	8000b98 <HAL_ADC_Start+0x138>
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HAL_ADC_Start+0x164>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 031f 	and.w	r3, r3, #31
 8000b8a:	2b09      	cmp	r3, #9
 8000b8c:	d004      	beq.n	8000b98 <HAL_ADC_Start+0x138>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b96:	d10f      	bne.n	8000bb8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f042 0204 	orr.w	r2, r2, #4
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	e006      	b.n	8000bb8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000bb2:	e001      	b.n	8000bb8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	50000300 	.word	0x50000300
 8000bc8:	50000100 	.word	0x50000100

08000bcc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d102      	bne.n	8000be8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000be2:	2308      	movs	r3, #8
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	e02e      	b.n	8000c46 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000be8:	4b5e      	ldr	r3, [pc, #376]	; (8000d64 <HAL_ADC_PollForConversion+0x198>)
 8000bea:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f003 031f 	and.w	r3, r3, #31
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d112      	bne.n	8000c1e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d11d      	bne.n	8000c42 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f043 0220 	orr.w	r2, r3, #32
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e09d      	b.n	8000d5a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d00b      	beq.n	8000c42 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f043 0220 	orr.w	r2, r3, #32
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e08b      	b.n	8000d5a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000c42:	230c      	movs	r3, #12
 8000c44:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c46:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <HAL_ADC_PollForConversion+0x198>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f003 031f 	and.w	r3, r3, #31
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d004      	beq.n	8000c5c <HAL_ADC_PollForConversion+0x90>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c5a:	d104      	bne.n	8000c66 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	e003      	b.n	8000c6e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000c66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000c6e:	f7ff fd59 	bl	8000724 <HAL_GetTick>
 8000c72:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000c74:	e021      	b.n	8000cba <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7c:	d01d      	beq.n	8000cba <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d007      	beq.n	8000c94 <HAL_ADC_PollForConversion+0xc8>
 8000c84:	f7ff fd4e 	bl	8000724 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d212      	bcs.n	8000cba <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10b      	bne.n	8000cba <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f043 0204 	orr.w	r2, r3, #4
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e04f      	b.n	8000d5a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0d6      	beq.n	8000c76 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d131      	bne.n	8000d46 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d12c      	bne.n	8000d46 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	2b08      	cmp	r3, #8
 8000cf8:	d125      	bne.n	8000d46 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d112      	bne.n	8000d2e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d112      	bne.n	8000d46 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f043 0201 	orr.w	r2, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d2c:	e00b      	b.n	8000d46 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f043 0220 	orr.w	r2, r3, #32
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f043 0201 	orr.w	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d103      	bne.n	8000d58 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	50000300 	.word	0x50000300

08000d68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b09b      	sub	sp, #108	; 0x6c
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d101      	bne.n	8000da6 <HAL_ADC_ConfigChannel+0x22>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e2a4      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x56c>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f040 8288 	bne.w	80012ce <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	d81c      	bhi.n	8000e00 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	461a      	mov	r2, r3
 8000dda:	231f      	movs	r3, #31
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4019      	ands	r1, r3
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa00 f203 	lsl.w	r2, r0, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
 8000dfe:	e063      	b.n	8000ec8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b09      	cmp	r3, #9
 8000e06:	d81e      	bhi.n	8000e46 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	3b1e      	subs	r3, #30
 8000e1c:	221f      	movs	r2, #31
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4019      	ands	r1, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	3b1e      	subs	r3, #30
 8000e38:	fa00 f203 	lsl.w	r2, r0, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	635a      	str	r2, [r3, #52]	; 0x34
 8000e44:	e040      	b.n	8000ec8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b0e      	cmp	r3, #14
 8000e4c:	d81e      	bhi.n	8000e8c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	3b3c      	subs	r3, #60	; 0x3c
 8000e62:	221f      	movs	r2, #31
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	4019      	ands	r1, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	3b3c      	subs	r3, #60	; 0x3c
 8000e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	639a      	str	r2, [r3, #56]	; 0x38
 8000e8a:	e01d      	b.n	8000ec8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	3b5a      	subs	r3, #90	; 0x5a
 8000ea0:	221f      	movs	r2, #31
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	4019      	ands	r1, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	3b5a      	subs	r3, #90	; 0x5a
 8000ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f040 80e5 	bne.w	80010a2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b09      	cmp	r3, #9
 8000ede:	d91c      	bls.n	8000f1a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6999      	ldr	r1, [r3, #24]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	3b1e      	subs	r3, #30
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	4019      	ands	r1, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	6898      	ldr	r0, [r3, #8]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	3b1e      	subs	r3, #30
 8000f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	619a      	str	r2, [r3, #24]
 8000f18:	e019      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6959      	ldr	r1, [r3, #20]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4019      	ands	r1, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	6898      	ldr	r0, [r3, #8]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	fa00 f203 	lsl.w	r2, r0, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d84f      	bhi.n	8001010 <HAL_ADC_ConfigChannel+0x28c>
 8000f70:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <HAL_ADC_ConfigChannel+0x1f4>)
 8000f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f76:	bf00      	nop
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000fab 	.word	0x08000fab
 8000f80:	08000fcd 	.word	0x08000fcd
 8000f84:	08000fef 	.word	0x08000fef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f8e:	4b94      	ldr	r3, [pc, #592]	; (80011e0 <HAL_ADC_ConfigChannel+0x45c>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	0691      	lsls	r1, r2, #26
 8000f98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000fa6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000fa8:	e07e      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000fb0:	4b8b      	ldr	r3, [pc, #556]	; (80011e0 <HAL_ADC_ConfigChannel+0x45c>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	0691      	lsls	r1, r2, #26
 8000fba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000fc8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000fca:	e06d      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000fd2:	4b83      	ldr	r3, [pc, #524]	; (80011e0 <HAL_ADC_ConfigChannel+0x45c>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	0691      	lsls	r1, r2, #26
 8000fdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000fea:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000fec:	e05c      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000ff4:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <HAL_ADC_ConfigChannel+0x45c>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	0691      	lsls	r1, r2, #26
 8000ffe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001000:	430a      	orrs	r2, r1
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800100c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800100e:	e04b      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	069b      	lsls	r3, r3, #26
 8001020:	429a      	cmp	r2, r3
 8001022:	d107      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001032:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800103a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	069b      	lsls	r3, r3, #26
 8001044:	429a      	cmp	r2, r3
 8001046:	d107      	bne.n	8001058 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001056:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800105e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	069b      	lsls	r3, r3, #26
 8001068:	429a      	cmp	r2, r3
 800106a:	d107      	bne.n	800107c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800107a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001082:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	069b      	lsls	r3, r3, #26
 800108c:	429a      	cmp	r2, r3
 800108e:	d10a      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800109e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80010a0:	e001      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80010a2:	bf00      	nop
 80010a4:	e000      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80010a6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d108      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x344>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d101      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x344>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <HAL_ADC_ConfigChannel+0x346>
 80010c8:	2300      	movs	r3, #0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f040 810a 	bne.w	80012e4 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d00f      	beq.n	80010f8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	400a      	ands	r2, r1
 80010f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80010f6:	e049      	b.n	800118c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2201      	movs	r2, #1
 8001106:	409a      	lsls	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b09      	cmp	r3, #9
 8001118:	d91c      	bls.n	8001154 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6999      	ldr	r1, [r3, #24]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	3b1b      	subs	r3, #27
 800112c:	2207      	movs	r2, #7
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	4019      	ands	r1, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	6898      	ldr	r0, [r3, #8]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	3b1b      	subs	r3, #27
 8001146:	fa00 f203 	lsl.w	r2, r0, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	619a      	str	r2, [r3, #24]
 8001152:	e01b      	b.n	800118c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6959      	ldr	r1, [r3, #20]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	2207      	movs	r2, #7
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	4019      	ands	r1, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	6898      	ldr	r0, [r3, #8]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	fa00 f203 	lsl.w	r2, r0, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_ADC_ConfigChannel+0x460>)
 800118e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b10      	cmp	r3, #16
 8001196:	d105      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d015      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80011a8:	2b11      	cmp	r3, #17
 80011aa:	d105      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80011ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00b      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80011bc:	2b12      	cmp	r3, #18
 80011be:	f040 8091 	bne.w	80012e4 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80011c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 808a 	bne.w	80012e4 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011d8:	d108      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x468>
 80011da:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_ADC_ConfigChannel+0x464>)
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	e008      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x46e>
 80011e0:	83fff000 	.word	0x83fff000
 80011e4:	50000300 	.word	0x50000300
 80011e8:	50000100 	.word	0x50000100
 80011ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011f0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d108      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x48e>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b01      	cmp	r3, #1
 800120c:	d101      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x48e>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_ADC_ConfigChannel+0x490>
 8001212:	2300      	movs	r3, #0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d150      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001218:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800121a:	2b00      	cmp	r3, #0
 800121c:	d010      	beq.n	8001240 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d107      	bne.n	800123a <HAL_ADC_ConfigChannel+0x4b6>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b01      	cmp	r3, #1
 8001234:	d101      	bne.n	800123a <HAL_ADC_ConfigChannel+0x4b6>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_ADC_ConfigChannel+0x4b8>
 800123a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800123c:	2b00      	cmp	r3, #0
 800123e:	d13c      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b10      	cmp	r3, #16
 8001246:	d11d      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x500>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001250:	d118      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800125a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800125c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800125e:	4b27      	ldr	r3, [pc, #156]	; (80012fc <HAL_ADC_ConfigChannel+0x578>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a27      	ldr	r2, [pc, #156]	; (8001300 <HAL_ADC_ConfigChannel+0x57c>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	0c9a      	lsrs	r2, r3, #18
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001274:	e002      	b.n	800127c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	3b01      	subs	r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f9      	bne.n	8001276 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001282:	e02e      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b11      	cmp	r3, #17
 800128a:	d10b      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x520>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001294:	d106      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800129e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012a2:	e01e      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b12      	cmp	r3, #18
 80012aa:	d11a      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80012ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012b8:	e013      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f043 0220 	orr.w	r2, r3, #32
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80012cc:	e00a      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f043 0220 	orr.w	r2, r3, #32
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80012e0:	e000      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012e2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80012ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	376c      	adds	r7, #108	; 0x6c
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	20000000 	.word	0x20000000
 8001300:	431bde83 	.word	0x431bde83

08001304 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001304:	b480      	push	{r7}
 8001306:	b099      	sub	sp, #100	; 0x64
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800131c:	d102      	bne.n	8001324 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800131e:	4b5a      	ldr	r3, [pc, #360]	; (8001488 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	e002      	b.n	800132a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001324:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001328:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0a2      	b.n	800147a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800133e:	2302      	movs	r3, #2
 8001340:	e09b      	b.n	800147a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d17f      	bne.n	8001458 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d179      	bne.n	8001458 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001364:	4b49      	ldr	r3, [pc, #292]	; (800148c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001366:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d040      	beq.n	80013f2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6859      	ldr	r1, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001382:	035b      	lsls	r3, r3, #13
 8001384:	430b      	orrs	r3, r1
 8001386:	431a      	orrs	r2, r3
 8001388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800138a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b01      	cmp	r3, #1
 8001398:	d108      	bne.n	80013ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80013ac:	2300      	movs	r3, #0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d15c      	bne.n	800146c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d107      	bne.n	80013ce <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80013ce:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d14b      	bne.n	800146c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80013d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80013dc:	f023 030f 	bic.w	r3, r3, #15
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	6811      	ldr	r1, [r2, #0]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	6892      	ldr	r2, [r2, #8]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013ee:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80013f0:	e03c      	b.n	800146c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80013f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013fc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d108      	bne.n	800141e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800141e:	2300      	movs	r3, #0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d123      	bne.n	800146c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001440:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001442:	2b00      	cmp	r3, #0
 8001444:	d112      	bne.n	800146c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800144e:	f023 030f 	bic.w	r3, r3, #15
 8001452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001454:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001456:	e009      	b.n	800146c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f043 0220 	orr.w	r2, r3, #32
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800146a:	e000      	b.n	800146e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800146c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001476:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800147a:	4618      	mov	r0, r3
 800147c:	3764      	adds	r7, #100	; 0x64
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	50000100 	.word	0x50000100
 800148c:	50000300 	.word	0x50000300

08001490 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d108      	bne.n	80014bc <ADC_Enable+0x2c>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <ADC_Enable+0x2c>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <ADC_Enable+0x2e>
 80014bc:	2300      	movs	r3, #0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d143      	bne.n	800154a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	4b22      	ldr	r3, [pc, #136]	; (8001554 <ADC_Enable+0xc4>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00d      	beq.n	80014ec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f043 0210 	orr.w	r2, r3, #16
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e02f      	b.n	800154c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80014fc:	f7ff f912 	bl	8000724 <HAL_GetTick>
 8001500:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001502:	e01b      	b.n	800153c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001504:	f7ff f90e 	bl	8000724 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d914      	bls.n	800153c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b01      	cmp	r3, #1
 800151e:	d00d      	beq.n	800153c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	f043 0210 	orr.w	r2, r3, #16
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001530:	f043 0201 	orr.w	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e007      	b.n	800154c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b01      	cmp	r3, #1
 8001548:	d1dc      	bne.n	8001504 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	8000003f 	.word	0x8000003f

08001558 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d108      	bne.n	8001584 <ADC_Disable+0x2c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <ADC_Disable+0x2c>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <ADC_Disable+0x2e>
 8001584:	2300      	movs	r3, #0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d047      	beq.n	800161a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 030d 	and.w	r3, r3, #13
 8001594:	2b01      	cmp	r3, #1
 8001596:	d10f      	bne.n	80015b8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0202 	orr.w	r2, r2, #2
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2203      	movs	r2, #3
 80015ae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80015b0:	f7ff f8b8 	bl	8000724 <HAL_GetTick>
 80015b4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015b6:	e029      	b.n	800160c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f043 0210 	orr.w	r2, r3, #16
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e023      	b.n	800161c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015d4:	f7ff f8a6 	bl	8000724 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d914      	bls.n	800160c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d10d      	bne.n	800160c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f043 0210 	orr.w	r2, r3, #16
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f043 0201 	orr.w	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e007      	b.n	800161c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b01      	cmp	r3, #1
 8001618:	d0dc      	beq.n	80015d4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	; (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	; (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
         );
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001754:	d301      	bcc.n	800175a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001756:	2301      	movs	r3, #1
 8001758:	e00f      	b.n	800177a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <SysTick_Config+0x40>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001762:	210f      	movs	r1, #15
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f7ff ff8e 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <SysTick_Config+0x40>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <SysTick_Config+0x40>)
 8001774:	2207      	movs	r2, #7
 8001776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff47 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff5c 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff8e 	bl	80016dc <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffb0 	bl	8001744 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fe:	e14e      	b.n	8001a9e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2101      	movs	r1, #1
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8140 	beq.w	8001a98 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d005      	beq.n	8001830 <HAL_GPIO_Init+0x40>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d130      	bne.n	8001892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001866:	2201      	movs	r2, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 0201 	and.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b03      	cmp	r3, #3
 800189c:	d017      	beq.n	80018ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d123      	bne.n	8001922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3208      	adds	r2, #8
 80018e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	6939      	ldr	r1, [r7, #16]
 800191e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0203 	and.w	r2, r3, #3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 809a 	beq.w	8001a98 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001964:	4b55      	ldr	r3, [pc, #340]	; (8001abc <HAL_GPIO_Init+0x2cc>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a54      	ldr	r2, [pc, #336]	; (8001abc <HAL_GPIO_Init+0x2cc>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b52      	ldr	r3, [pc, #328]	; (8001abc <HAL_GPIO_Init+0x2cc>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800197c:	4a50      	ldr	r2, [pc, #320]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019a6:	d013      	beq.n	80019d0 <HAL_GPIO_Init+0x1e0>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a46      	ldr	r2, [pc, #280]	; (8001ac4 <HAL_GPIO_Init+0x2d4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00d      	beq.n	80019cc <HAL_GPIO_Init+0x1dc>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a45      	ldr	r2, [pc, #276]	; (8001ac8 <HAL_GPIO_Init+0x2d8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d007      	beq.n	80019c8 <HAL_GPIO_Init+0x1d8>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a44      	ldr	r2, [pc, #272]	; (8001acc <HAL_GPIO_Init+0x2dc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d101      	bne.n	80019c4 <HAL_GPIO_Init+0x1d4>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019c4:	2305      	movs	r3, #5
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019d0:	2300      	movs	r3, #0
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019e2:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a14:	4a2e      	ldr	r2, [pc, #184]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a3e:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a68:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a92:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f47f aea9 	bne.w	8001800 <HAL_GPIO_Init+0x10>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	48000800 	.word	0x48000800
 8001acc:	48000c00 	.word	0x48000c00
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f001 b823 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 817d 	beq.w	8001e0a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b10:	4bbc      	ldr	r3, [pc, #752]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d00c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b1c:	4bb9      	ldr	r3, [pc, #740]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d15c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x10e>
 8001b28:	4bb6      	ldr	r3, [pc, #728]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b34:	d155      	bne.n	8001be2 <HAL_RCC_OscConfig+0x10e>
 8001b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_RCC_OscConfig+0x94>
 8001b62:	4ba8      	ldr	r3, [pc, #672]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	e015      	b.n	8001b94 <HAL_RCC_OscConfig+0xc0>
 8001b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b6c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b90:	4b9c      	ldr	r3, [pc, #624]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b98:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ba0:	fa92 f2a2 	rbit	r2, r2
 8001ba4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ba8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 811f 	beq.w	8001e08 <HAL_RCC_OscConfig+0x334>
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 8116 	bne.w	8001e08 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f000 bfaf 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12e>
 8001bf4:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a82      	ldr	r2, [pc, #520]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e036      	b.n	8001c70 <HAL_RCC_OscConfig+0x19c>
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x158>
 8001c12:	4b7c      	ldr	r3, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7b      	ldr	r2, [pc, #492]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a78      	ldr	r2, [pc, #480]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e021      	b.n	8001c70 <HAL_RCC_OscConfig+0x19c>
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x184>
 8001c3e:	4b71      	ldr	r3, [pc, #452]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a70      	ldr	r2, [pc, #448]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6e      	ldr	r3, [pc, #440]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6d      	ldr	r2, [pc, #436]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0x19c>
 8001c58:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a69      	ldr	r2, [pc, #420]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a66      	ldr	r2, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c70:	4b64      	ldr	r3, [pc, #400]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	f023 020f 	bic.w	r2, r3, #15
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	495f      	ldr	r1, [pc, #380]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d059      	beq.n	8001d4e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7fe fd43 	bl	8000724 <HAL_GetTick>
 8001c9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7fe fd3e 	bl	8000724 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b64      	cmp	r3, #100	; 0x64
 8001cb2:	d902      	bls.n	8001cba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f000 bf43 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 8001cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001cce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	095b      	lsrs	r3, r3, #5
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <HAL_RCC_OscConfig+0x218>
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	e015      	b.n	8001d18 <HAL_RCC_OscConfig+0x244>
 8001cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d04:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d1c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d20:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d24:	fa92 f2a2 	rbit	r2, r2
 8001d28:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d2c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f002 021f 	and.w	r2, r2, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ab      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x1d0>
 8001d4c:	e05d      	b.n	8001e0a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7fe fce9 	bl	8000724 <HAL_GetTick>
 8001d52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d58:	f7fe fce4 	bl	8000724 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d902      	bls.n	8001d6e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	f000 bee9 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 8001d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d72:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d102      	bne.n	8001da0 <HAL_RCC_OscConfig+0x2cc>
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e015      	b.n	8001dcc <HAL_RCC_OscConfig+0x2f8>
 8001da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001dbc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dd0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001dd4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001dd8:	fa92 f2a2 	rbit	r2, r2
 8001ddc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001de0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001de4:	fab2 f282 	clz	r2, r2
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f002 021f 	and.w	r2, r2, #31
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1ab      	bne.n	8001d58 <HAL_RCC_OscConfig+0x284>
 8001e00:	e003      	b.n	8001e0a <HAL_RCC_OscConfig+0x336>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 817d 	beq.w	800211a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e20:	4ba6      	ldr	r3, [pc, #664]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e2c:	4ba3      	ldr	r3, [pc, #652]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d172      	bne.n	8001f1e <HAL_RCC_OscConfig+0x44a>
 8001e38:	4ba0      	ldr	r3, [pc, #640]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d16c      	bne.n	8001f1e <HAL_RCC_OscConfig+0x44a>
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_OscConfig+0x3a0>
 8001e6e:	4b93      	ldr	r3, [pc, #588]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e013      	b.n	8001e9c <HAL_RCC_OscConfig+0x3c8>
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e98:	4b88      	ldr	r3, [pc, #544]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ea2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ea6:	fa92 f2a2 	rbit	r2, r2
 8001eaa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001eae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001eb2:	fab2 f282 	clz	r2, r2
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f042 0220 	orr.w	r2, r2, #32
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f002 021f 	and.w	r2, r2, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00a      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x410>
 8001ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d002      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f000 be2e 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b75      	ldr	r3, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	21f8      	movs	r1, #248	; 0xf8
 8001efa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f02:	fa91 f1a1 	rbit	r1, r1
 8001f06:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f0a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f0e:	fab1 f181 	clz	r1, r1
 8001f12:	b2c9      	uxtb	r1, r1
 8001f14:	408b      	lsls	r3, r1
 8001f16:	4969      	ldr	r1, [pc, #420]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1c:	e0fd      	b.n	800211a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8088 	beq.w	8002040 <HAL_RCC_OscConfig+0x56c>
 8001f30:	2301      	movs	r3, #1
 8001f32:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	461a      	mov	r2, r3
 8001f58:	2301      	movs	r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fbe2 	bl	8000724 <HAL_GetTick>
 8001f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f66:	f7fe fbdd 	bl	8000724 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d902      	bls.n	8001f7c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	f000 bde2 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x4d8>
 8001fa6:	4b45      	ldr	r3, [pc, #276]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e013      	b.n	8001fd4 <HAL_RCC_OscConfig+0x500>
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fc4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001fda:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001fde:	fa92 f2a2 	rbit	r2, r2
 8001fe2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001fe6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001fea:	fab2 f282 	clz	r2, r2
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	f042 0220 	orr.w	r2, r2, #32
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f002 021f 	and.w	r2, r2, #31
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0af      	beq.n	8001f66 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	21f8      	movs	r1, #248	; 0xf8
 800201c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002024:	fa91 f1a1 	rbit	r1, r1
 8002028:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800202c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002030:	fab1 f181 	clz	r1, r1
 8002034:	b2c9      	uxtb	r1, r1
 8002036:	408b      	lsls	r3, r1
 8002038:	4920      	ldr	r1, [pc, #128]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
 800203e:	e06c      	b.n	800211a <HAL_RCC_OscConfig+0x646>
 8002040:	2301      	movs	r3, #1
 8002042:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002052:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002060:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	461a      	mov	r2, r3
 8002068:	2300      	movs	r3, #0
 800206a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe fb5a 	bl	8000724 <HAL_GetTick>
 8002070:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002076:	f7fe fb55 	bl	8000724 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d902      	bls.n	800208c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	f000 bd5a 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800209e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d104      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5ec>
 80020b6:	4b01      	ldr	r3, [pc, #4]	; (80020bc <HAL_RCC_OscConfig+0x5e8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	e015      	b.n	80020e8 <HAL_RCC_OscConfig+0x614>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	2302      	movs	r3, #2
 80020c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020e4:	4bc8      	ldr	r3, [pc, #800]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	2202      	movs	r2, #2
 80020ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80020ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020f2:	fa92 f2a2 	rbit	r2, r2
 80020f6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80020fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ad      	bne.n	8002076 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8110 	beq.w	8002350 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d079      	beq.n	8002234 <HAL_RCC_OscConfig+0x760>
 8002140:	2301      	movs	r3, #1
 8002142:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	4bab      	ldr	r3, [pc, #684]	; (800240c <HAL_RCC_OscConfig+0x938>)
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	461a      	mov	r2, r3
 8002166:	2301      	movs	r3, #1
 8002168:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7fe fadb 	bl	8000724 <HAL_GetTick>
 800216e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	e00a      	b.n	800218a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002174:	f7fe fad6 	bl	8000724 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d902      	bls.n	800218a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	f000 bcdb 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800219c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021a4:	2202      	movs	r2, #2
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	fa93 f2a3 	rbit	r2, r3
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021c8:	2202      	movs	r2, #2
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fa93 f2a3 	rbit	r2, r3
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e4:	4b88      	ldr	r3, [pc, #544]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 80021e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021f0:	2102      	movs	r1, #2
 80021f2:	6019      	str	r1, [r3, #0]
 80021f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f1a3 	rbit	r1, r3
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800220a:	6019      	str	r1, [r3, #0]
  return result;
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0a0      	beq.n	8002174 <HAL_RCC_OscConfig+0x6a0>
 8002232:	e08d      	b.n	8002350 <HAL_RCC_OscConfig+0x87c>
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002244:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f2a3 	rbit	r2, r3
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002256:	601a      	str	r2, [r3, #0]
  return result;
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002260:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	4b68      	ldr	r3, [pc, #416]	; (800240c <HAL_RCC_OscConfig+0x938>)
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	461a      	mov	r2, r3
 8002272:	2300      	movs	r3, #0
 8002274:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7fe fa55 	bl	8000724 <HAL_GetTick>
 800227a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002280:	f7fe fa50 	bl	8000724 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d902      	bls.n	8002296 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	f000 bc55 	b.w	8002b40 <HAL_RCC_OscConfig+0x106c>
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800229e:	2202      	movs	r2, #2
 80022a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022c2:	2202      	movs	r2, #2
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fa93 f2a3 	rbit	r2, r3
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022e6:	2202      	movs	r2, #2
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	fa93 f2a3 	rbit	r2, r3
 80022f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002300:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002302:	4b41      	ldr	r3, [pc, #260]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 8002304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800230e:	2102      	movs	r1, #2
 8002310:	6019      	str	r1, [r3, #0]
 8002312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002316:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f1a3 	rbit	r1, r3
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002328:	6019      	str	r1, [r3, #0]
  return result;
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d197      	bne.n	8002280 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 81a1 	beq.w	80026a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d116      	bne.n	80023a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	4b23      	ldr	r3, [pc, #140]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	4a22      	ldr	r2, [pc, #136]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 800237e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002382:	61d3      	str	r3, [r2, #28]
 8002384:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800239e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_RCC_OscConfig+0x93c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11a      	bne.n	80023e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HAL_RCC_OscConfig+0x93c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a16      	ldr	r2, [pc, #88]	; (8002410 <HAL_RCC_OscConfig+0x93c>)
 80023b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023be:	f7fe f9b1 	bl	8000724 <HAL_GetTick>
 80023c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	e009      	b.n	80023dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe f9ac 	bl	8000724 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	; 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e3b1      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_OscConfig+0x93c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ef      	beq.n	80023c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10d      	bne.n	8002414 <HAL_RCC_OscConfig+0x940>
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a02      	ldr	r2, [pc, #8]	; (8002408 <HAL_RCC_OscConfig+0x934>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	e03c      	b.n	8002480 <HAL_RCC_OscConfig+0x9ac>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	10908120 	.word	0x10908120
 8002410:	40007000 	.word	0x40007000
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10c      	bne.n	800243e <HAL_RCC_OscConfig+0x96a>
 8002424:	4bc1      	ldr	r3, [pc, #772]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4ac0      	ldr	r2, [pc, #768]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	4bbe      	ldr	r3, [pc, #760]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4abd      	ldr	r2, [pc, #756]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002436:	f023 0304 	bic.w	r3, r3, #4
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e020      	b.n	8002480 <HAL_RCC_OscConfig+0x9ac>
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b05      	cmp	r3, #5
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x994>
 800244e:	4bb7      	ldr	r3, [pc, #732]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4ab6      	ldr	r2, [pc, #728]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4bb4      	ldr	r3, [pc, #720]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4ab3      	ldr	r2, [pc, #716]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0x9ac>
 8002468:	4bb0      	ldr	r3, [pc, #704]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4aaf      	ldr	r2, [pc, #700]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	4bad      	ldr	r3, [pc, #692]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4aac      	ldr	r2, [pc, #688]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800247a:	f023 0304 	bic.w	r3, r3, #4
 800247e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8081 	beq.w	8002594 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7fe f947 	bl	8000724 <HAL_GetTick>
 8002496:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7fe f942 	bl	8000724 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e345      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024bc:	2202      	movs	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024e0:	2202      	movs	r2, #2
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f2a3 	rbit	r2, r3
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024fa:	601a      	str	r2, [r3, #0]
  return result;
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002504:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	095b      	lsrs	r3, r3, #5
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d102      	bne.n	8002520 <HAL_RCC_OscConfig+0xa4c>
 800251a:	4b84      	ldr	r3, [pc, #528]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	e013      	b.n	8002548 <HAL_RCC_OscConfig+0xa74>
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002528:	2202      	movs	r2, #2
 800252a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002530:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	fa93 f2a3 	rbit	r2, r3
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	4b79      	ldr	r3, [pc, #484]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800254c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002550:	2102      	movs	r1, #2
 8002552:	6011      	str	r1, [r2, #0]
 8002554:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002558:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	fa92 f1a2 	rbit	r1, r2
 8002562:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002566:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800256a:	6011      	str	r1, [r2, #0]
  return result;
 800256c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002570:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	fab2 f282 	clz	r2, r2
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	f002 021f 	and.w	r2, r2, #31
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f202 	lsl.w	r2, r1, r2
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d084      	beq.n	800249c <HAL_RCC_OscConfig+0x9c8>
 8002592:	e07f      	b.n	8002694 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002594:	f7fe f8c6 	bl	8000724 <HAL_GetTick>
 8002598:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259c:	e00b      	b.n	80025b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe f8c1 	bl	8000724 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e2c4      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025be:	2202      	movs	r2, #2
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025e2:	2202      	movs	r2, #2
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025fc:	601a      	str	r2, [r3, #0]
  return result;
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002606:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d102      	bne.n	8002622 <HAL_RCC_OscConfig+0xb4e>
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	e013      	b.n	800264a <HAL_RCC_OscConfig+0xb76>
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800262a:	2202      	movs	r2, #2
 800262c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002640:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800264e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002652:	2102      	movs	r1, #2
 8002654:	6011      	str	r1, [r2, #0]
 8002656:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	fa92 f1a2 	rbit	r1, r2
 8002664:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002668:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800266c:	6011      	str	r1, [r2, #0]
  return result;
 800266e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002672:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	fab2 f282 	clz	r2, r2
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f002 021f 	and.w	r2, r2, #31
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d184      	bne.n	800259e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002694:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 80026a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8242 	beq.w	8002b3e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ba:	4b1c      	ldr	r3, [pc, #112]	; (800272c <HAL_RCC_OscConfig+0xc58>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	f000 8213 	beq.w	8002aee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f040 8162 	bne.w	800299e <HAL_RCC_OscConfig+0xeca>
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	fa93 f2a3 	rbit	r2, r3
 80026f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026fe:	601a      	str	r2, [r3, #0]
  return result;
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002708:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002714:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	461a      	mov	r2, r3
 800271c:	2300      	movs	r3, #0
 800271e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe f800 	bl	8000724 <HAL_GetTick>
 8002724:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002728:	e00c      	b.n	8002744 <HAL_RCC_OscConfig+0xc70>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fd fff8 	bl	8000724 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e1fd      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800274c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002756:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002768:	601a      	str	r2, [r3, #0]
  return result;
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002772:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d102      	bne.n	800278e <HAL_RCC_OscConfig+0xcba>
 8002788:	4bb0      	ldr	r3, [pc, #704]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	e027      	b.n	80027de <HAL_RCC_OscConfig+0xd0a>
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002796:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fa93 f2a3 	rbit	r2, r3
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	4b9c      	ldr	r3, [pc, #624]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027ea:	6011      	str	r1, [r2, #0]
 80027ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	fa92 f1a2 	rbit	r1, r2
 80027fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002802:	6011      	str	r1, [r2, #0]
  return result;
 8002804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002808:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	fab2 f282 	clz	r2, r2
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f042 0220 	orr.w	r2, r2, #32
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f002 021f 	and.w	r2, r2, #31
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f202 	lsl.w	r2, r1, r2
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d182      	bne.n	8002730 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282a:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	430b      	orrs	r3, r1
 800284c:	497f      	ldr	r1, [pc, #508]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800285a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800285e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fa93 f2a3 	rbit	r2, r3
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002876:	601a      	str	r2, [r3, #0]
  return result;
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002880:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800288c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	461a      	mov	r2, r3
 8002894:	2301      	movs	r3, #1
 8002896:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fd ff44 	bl	8000724 <HAL_GetTick>
 800289c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a0:	e009      	b.n	80028b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fd ff3f 	bl	8000724 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e144      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fa93 f2a3 	rbit	r2, r3
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028da:	601a      	str	r2, [r3, #0]
  return result;
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80028e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d102      	bne.n	8002900 <HAL_RCC_OscConfig+0xe2c>
 80028fa:	4b54      	ldr	r3, [pc, #336]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	e027      	b.n	8002950 <HAL_RCC_OscConfig+0xe7c>
 8002900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002904:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800290c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f2a3 	rbit	r2, r3
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800292e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002954:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002958:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800295c:	6011      	str	r1, [r2, #0]
 800295e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002962:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	fa92 f1a2 	rbit	r1, r2
 800296c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002970:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002974:	6011      	str	r1, [r2, #0]
  return result;
 8002976:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800297a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	fab2 f282 	clz	r2, r2
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f042 0220 	orr.w	r2, r2, #32
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f002 021f 	and.w	r2, r2, #31
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f202 	lsl.w	r2, r1, r2
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d082      	beq.n	80028a2 <HAL_RCC_OscConfig+0xdce>
 800299c:	e0cf      	b.n	8002b3e <HAL_RCC_OscConfig+0x106a>
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	fa93 f2a3 	rbit	r2, r3
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029c2:	601a      	str	r2, [r3, #0]
  return result;
 80029c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	461a      	mov	r2, r3
 80029e0:	2300      	movs	r3, #0
 80029e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7fd fe9e 	bl	8000724 <HAL_GetTick>
 80029e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ec:	e009      	b.n	8002a02 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fd fe99 	bl	8000724 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e09e      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fa93 f2a3 	rbit	r2, r3
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a26:	601a      	str	r2, [r3, #0]
  return result;
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d104      	bne.n	8002a50 <HAL_RCC_OscConfig+0xf7c>
 8002a46:	4b01      	ldr	r3, [pc, #4]	; (8002a4c <HAL_RCC_OscConfig+0xf78>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	e029      	b.n	8002aa0 <HAL_RCC_OscConfig+0xfcc>
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fa93 f2a3 	rbit	r2, r3
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	fa93 f2a3 	rbit	r2, r3
 8002a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCC_OscConfig+0x1078>)
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002aa8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002aac:	6011      	str	r1, [r2, #0]
 8002aae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	fa92 f1a2 	rbit	r1, r2
 8002abc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ac0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ac4:	6011      	str	r1, [r2, #0]
  return result;
 8002ac6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	fab2 f282 	clz	r2, r2
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	f042 0220 	orr.w	r2, r2, #32
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f002 021f 	and.w	r2, r2, #31
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d180      	bne.n	80029ee <HAL_RCC_OscConfig+0xf1a>
 8002aec:	e027      	b.n	8002b3e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e01e      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_RCC_OscConfig+0x1078>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d10b      	bne.n	8002b3a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b09e      	sub	sp, #120	; 0x78
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e162      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b90      	ldr	r3, [pc, #576]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d910      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b8d      	ldr	r3, [pc, #564]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 0207 	bic.w	r2, r3, #7
 8002b7e:	498b      	ldr	r1, [pc, #556]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b89      	ldr	r3, [pc, #548]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e14a      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b82      	ldr	r3, [pc, #520]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	497f      	ldr	r1, [pc, #508]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80dc 	beq.w	8002d7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d13c      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xf6>
 8002bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xa6>
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	e00f      	b.n	8002c16 <HAL_RCC_ClockConfig+0xc6>
 8002bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	667b      	str	r3, [r7, #100]	; 0x64
 8002c04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c08:	663b      	str	r3, [r7, #96]	; 0x60
 8002c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c12:	4b67      	ldr	r3, [pc, #412]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c1e:	fa92 f2a2 	rbit	r2, r2
 8002c22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c26:	fab2 f282 	clz	r2, r2
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f042 0220 	orr.w	r2, r2, #32
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f002 021f 	and.w	r2, r2, #31
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d17b      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0f3      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d13c      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x178>
 8002c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d102      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x128>
 8002c72:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	e00f      	b.n	8002c98 <HAL_RCC_ClockConfig+0x148>
 8002c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
 8002c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c94:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ca0:	fa92 f2a2 	rbit	r2, r2
 8002ca4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca8:	fab2 f282 	clz	r2, r2
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f042 0220 	orr.w	r2, r2, #32
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f002 021f 	and.w	r2, r2, #31
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d13a      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0b2      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x1a0>
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	e00d      	b.n	8002d0c <HAL_RCC_ClockConfig+0x1bc>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	61ba      	str	r2, [r7, #24]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	fa92 f2a2 	rbit	r2, r2
 8002d16:	617a      	str	r2, [r7, #20]
  return result;
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	fab2 f282 	clz	r2, r2
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	f042 0220 	orr.w	r2, r2, #32
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	f002 021f 	and.w	r2, r2, #31
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e079      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	491a      	ldr	r1, [pc, #104]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d4c:	f7fd fcea 	bl	8000724 <HAL_GetTick>
 8002d50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fd fce6 	bl	8000724 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e061      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d214      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 0207 	bic.w	r2, r3, #7
 8002d92:	4906      	ldr	r1, [pc, #24]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b04      	ldr	r3, [pc, #16]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e040      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	491a      	ldr	r1, [pc, #104]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4912      	ldr	r1, [pc, #72]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002df2:	f000 f829 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002df6:	4601      	mov	r1, r0
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e00:	22f0      	movs	r2, #240	; 0xf0
 8002e02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	fa92 f2a2 	rbit	r2, r2
 8002e0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	fab2 f282 	clz	r2, r2
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	40d3      	lsrs	r3, r2
 8002e16:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <HAL_RCC_ClockConfig+0x2ec>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
 8002e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_RCC_ClockConfig+0x2f0>)
 8002e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_ClockConfig+0x2f4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fc38 	bl	800069c <HAL_InitTick>
  
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3778      	adds	r7, #120	; 0x78
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08003760 	.word	0x08003760
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b08b      	sub	sp, #44	; 0x2c
 8002e4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d002      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x30>
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_GetSysClockFreq+0x36>
 8002e76:	e03c      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e7a:	623b      	str	r3, [r7, #32]
      break;
 8002e7c:	e03c      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	fa92 f2a2 	rbit	r2, r2
 8002e90:	607a      	str	r2, [r7, #4]
  return result;
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	40d3      	lsrs	r3, r2
 8002e9c:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ea0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ea2:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	220f      	movs	r2, #15
 8002eac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	fa92 f2a2 	rbit	r2, r2
 8002eb4:	60fa      	str	r2, [r7, #12]
  return result;
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	fab2 f282 	clz	r2, r2
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	40d3      	lsrs	r3, r2
 8002ec0:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee0:	e004      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	623b      	str	r3, [r7, #32]
      break;
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ef4:	623b      	str	r3, [r7, #32]
      break;
 8002ef6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	372c      	adds	r7, #44	; 0x2c
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	007a1200 	.word	0x007a1200
 8002f10:	08003778 	.word	0x08003778
 8002f14:	08003788 	.word	0x08003788
 8002f18:	003d0900 	.word	0x003d0900

08002f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000000 	.word	0x20000000

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f3a:	f7ff ffef 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f3e:	4601      	mov	r1, r0
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	fa92 f2a2 	rbit	r2, r2
 8002f54:	603a      	str	r2, [r7, #0]
  return result;
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	fab2 f282 	clz	r2, r2
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	40d3      	lsrs	r3, r2
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f62:	5cd3      	ldrb	r3, [r2, r3]
 8002f64:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08003770 	.word	0x08003770

08002f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f7e:	f7ff ffcd 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f82:	4601      	mov	r1, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	fa92 f2a2 	rbit	r2, r2
 8002f98:	603a      	str	r2, [r7, #0]
  return result;
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	fab2 f282 	clz	r2, r2
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	40d3      	lsrs	r3, r2
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002fa6:	5cd3      	ldrb	r3, [r2, r3]
 8002fa8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08003770 	.word	0x08003770

08002fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e040      	b.n	8003050 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fa9c 	bl	800051c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f82c 	bl	8003058 <UART_SetConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e022      	b.n	8003050 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f956 	bl	80032c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f9dd 	bl	8003408 <UART_CheckIdleState>
 800304e:	4603      	mov	r3, r0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4b8a      	ldr	r3, [pc, #552]	; (80032ac <UART_SetConfig+0x254>)
 8003084:	4013      	ands	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	6979      	ldr	r1, [r7, #20]
 800308c:	430b      	orrs	r3, r1
 800308e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a78      	ldr	r2, [pc, #480]	; (80032b0 <UART_SetConfig+0x258>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d120      	bne.n	8003116 <UART_SetConfig+0xbe>
 80030d4:	4b77      	ldr	r3, [pc, #476]	; (80032b4 <UART_SetConfig+0x25c>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d817      	bhi.n	8003110 <UART_SetConfig+0xb8>
 80030e0:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <UART_SetConfig+0x90>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	080030f9 	.word	0x080030f9
 80030ec:	08003105 	.word	0x08003105
 80030f0:	0800310b 	.word	0x0800310b
 80030f4:	080030ff 	.word	0x080030ff
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e01d      	b.n	800313a <UART_SetConfig+0xe2>
 80030fe:	2302      	movs	r3, #2
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e01a      	b.n	800313a <UART_SetConfig+0xe2>
 8003104:	2304      	movs	r3, #4
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e017      	b.n	800313a <UART_SetConfig+0xe2>
 800310a:	2308      	movs	r3, #8
 800310c:	77fb      	strb	r3, [r7, #31]
 800310e:	e014      	b.n	800313a <UART_SetConfig+0xe2>
 8003110:	2310      	movs	r3, #16
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e011      	b.n	800313a <UART_SetConfig+0xe2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a67      	ldr	r2, [pc, #412]	; (80032b8 <UART_SetConfig+0x260>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d102      	bne.n	8003126 <UART_SetConfig+0xce>
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e009      	b.n	800313a <UART_SetConfig+0xe2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a64      	ldr	r2, [pc, #400]	; (80032bc <UART_SetConfig+0x264>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d102      	bne.n	8003136 <UART_SetConfig+0xde>
 8003130:	2300      	movs	r3, #0
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e001      	b.n	800313a <UART_SetConfig+0xe2>
 8003136:	2310      	movs	r3, #16
 8003138:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003142:	d15a      	bne.n	80031fa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003144:	7ffb      	ldrb	r3, [r7, #31]
 8003146:	2b08      	cmp	r3, #8
 8003148:	d827      	bhi.n	800319a <UART_SetConfig+0x142>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <UART_SetConfig+0xf8>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	08003175 	.word	0x08003175
 8003154:	0800317d 	.word	0x0800317d
 8003158:	08003185 	.word	0x08003185
 800315c:	0800319b 	.word	0x0800319b
 8003160:	0800318b 	.word	0x0800318b
 8003164:	0800319b 	.word	0x0800319b
 8003168:	0800319b 	.word	0x0800319b
 800316c:	0800319b 	.word	0x0800319b
 8003170:	08003193 	.word	0x08003193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003174:	f7ff fede 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8003178:	61b8      	str	r0, [r7, #24]
        break;
 800317a:	e013      	b.n	80031a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800317c:	f7ff fefc 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8003180:	61b8      	str	r0, [r7, #24]
        break;
 8003182:	e00f      	b.n	80031a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003184:	4b4e      	ldr	r3, [pc, #312]	; (80032c0 <UART_SetConfig+0x268>)
 8003186:	61bb      	str	r3, [r7, #24]
        break;
 8003188:	e00c      	b.n	80031a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318a:	f7ff fe5d 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 800318e:	61b8      	str	r0, [r7, #24]
        break;
 8003190:	e008      	b.n	80031a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003196:	61bb      	str	r3, [r7, #24]
        break;
 8003198:	e004      	b.n	80031a4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	77bb      	strb	r3, [r7, #30]
        break;
 80031a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d074      	beq.n	8003294 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	005a      	lsls	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	441a      	add	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b0f      	cmp	r3, #15
 80031c4:	d916      	bls.n	80031f4 <UART_SetConfig+0x19c>
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031cc:	d212      	bcs.n	80031f4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f023 030f 	bic.w	r3, r3, #15
 80031d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	89fb      	ldrh	r3, [r7, #14]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	89fa      	ldrh	r2, [r7, #14]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	e04f      	b.n	8003294 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	77bb      	strb	r3, [r7, #30]
 80031f8:	e04c      	b.n	8003294 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031fa:	7ffb      	ldrb	r3, [r7, #31]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d828      	bhi.n	8003252 <UART_SetConfig+0x1fa>
 8003200:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <UART_SetConfig+0x1b0>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	0800322d 	.word	0x0800322d
 800320c:	08003235 	.word	0x08003235
 8003210:	0800323d 	.word	0x0800323d
 8003214:	08003253 	.word	0x08003253
 8003218:	08003243 	.word	0x08003243
 800321c:	08003253 	.word	0x08003253
 8003220:	08003253 	.word	0x08003253
 8003224:	08003253 	.word	0x08003253
 8003228:	0800324b 	.word	0x0800324b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800322c:	f7ff fe82 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8003230:	61b8      	str	r0, [r7, #24]
        break;
 8003232:	e013      	b.n	800325c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003234:	f7ff fea0 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8003238:	61b8      	str	r0, [r7, #24]
        break;
 800323a:	e00f      	b.n	800325c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800323c:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <UART_SetConfig+0x268>)
 800323e:	61bb      	str	r3, [r7, #24]
        break;
 8003240:	e00c      	b.n	800325c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003242:	f7ff fe01 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8003246:	61b8      	str	r0, [r7, #24]
        break;
 8003248:	e008      	b.n	800325c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800324e:	61bb      	str	r3, [r7, #24]
        break;
 8003250:	e004      	b.n	800325c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	77bb      	strb	r3, [r7, #30]
        break;
 800325a:	bf00      	nop
    }

    if (pclk != 0U)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d018      	beq.n	8003294 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	085a      	lsrs	r2, r3, #1
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	441a      	add	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b0f      	cmp	r3, #15
 800327a:	d909      	bls.n	8003290 <UART_SetConfig+0x238>
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003282:	d205      	bcs.n	8003290 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	b29a      	uxth	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	e001      	b.n	8003294 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	efff69f3 	.word	0xefff69f3
 80032b0:	40013800 	.word	0x40013800
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40004400 	.word	0x40004400
 80032bc:	40004800 	.word	0x40004800
 80032c0:	007a1200 	.word	0x007a1200

080032c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01a      	beq.n	80033da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033c2:	d10a      	bne.n	80033da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
  }
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b098      	sub	sp, #96	; 0x60
 800340c:	af02      	add	r7, sp, #8
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003418:	f7fd f984 	bl	8000724 <HAL_GetTick>
 800341c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b08      	cmp	r3, #8
 800342a:	d12e      	bne.n	800348a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800342c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003434:	2200      	movs	r2, #0
 8003436:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f88c 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d021      	beq.n	800348a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345a:	653b      	str	r3, [r7, #80]	; 0x50
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003464:	647b      	str	r3, [r7, #68]	; 0x44
 8003466:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800346a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e6      	bne.n	8003446 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e062      	b.n	8003550 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b04      	cmp	r3, #4
 8003496:	d149      	bne.n	800352c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f856 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d03c      	beq.n	800352c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	623b      	str	r3, [r7, #32]
   return(result);
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
 80034d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e6      	bne.n	80034b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3308      	adds	r3, #8
 80034ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3308      	adds	r3, #8
 8003502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003504:	61fa      	str	r2, [r7, #28]
 8003506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	69b9      	ldr	r1, [r7, #24]
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	e841 2300 	strex	r3, r2, [r1]
 8003510:	617b      	str	r3, [r7, #20]
   return(result);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e5      	bne.n	80034e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e011      	b.n	8003550 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3758      	adds	r7, #88	; 0x58
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003568:	e049      	b.n	80035fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d045      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003572:	f7fd f8d7 	bl	8000724 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <UART_WaitOnFlagUntilTimeout+0x30>
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e048      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d031      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d110      	bne.n	80035ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2208      	movs	r2, #8
 80035ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f838 	bl	8003626 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2208      	movs	r2, #8
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e029      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d8:	d111      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f81e 	bl	8003626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e00f      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4013      	ands	r3, r2
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	429a      	cmp	r2, r3
 800361a:	d0a6      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003626:	b480      	push	{r7}
 8003628:	b095      	sub	sp, #84	; 0x54
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364c:	643b      	str	r3, [r7, #64]	; 0x40
 800364e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e6      	bne.n	800362e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3308      	adds	r3, #8
 8003666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003680:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e5      	bne.n	8003660 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003698:	2b01      	cmp	r3, #1
 800369a:	d118      	bne.n	80036ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f023 0310 	bic.w	r3, r3, #16
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6979      	ldr	r1, [r7, #20]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	613b      	str	r3, [r7, #16]
   return(result);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e6      	bne.n	800369c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036e2:	bf00      	nop
 80036e4:	3754      	adds	r7, #84	; 0x54
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <__libc_init_array>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	4d0d      	ldr	r5, [pc, #52]	; (8003728 <__libc_init_array+0x38>)
 80036f4:	4c0d      	ldr	r4, [pc, #52]	; (800372c <__libc_init_array+0x3c>)
 80036f6:	1b64      	subs	r4, r4, r5
 80036f8:	10a4      	asrs	r4, r4, #2
 80036fa:	2600      	movs	r6, #0
 80036fc:	42a6      	cmp	r6, r4
 80036fe:	d109      	bne.n	8003714 <__libc_init_array+0x24>
 8003700:	4d0b      	ldr	r5, [pc, #44]	; (8003730 <__libc_init_array+0x40>)
 8003702:	4c0c      	ldr	r4, [pc, #48]	; (8003734 <__libc_init_array+0x44>)
 8003704:	f000 f820 	bl	8003748 <_init>
 8003708:	1b64      	subs	r4, r4, r5
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	2600      	movs	r6, #0
 800370e:	42a6      	cmp	r6, r4
 8003710:	d105      	bne.n	800371e <__libc_init_array+0x2e>
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	f855 3b04 	ldr.w	r3, [r5], #4
 8003718:	4798      	blx	r3
 800371a:	3601      	adds	r6, #1
 800371c:	e7ee      	b.n	80036fc <__libc_init_array+0xc>
 800371e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003722:	4798      	blx	r3
 8003724:	3601      	adds	r6, #1
 8003726:	e7f2      	b.n	800370e <__libc_init_array+0x1e>
 8003728:	08003798 	.word	0x08003798
 800372c:	08003798 	.word	0x08003798
 8003730:	08003798 	.word	0x08003798
 8003734:	0800379c 	.word	0x0800379c

08003738 <memset>:
 8003738:	4402      	add	r2, r0
 800373a:	4603      	mov	r3, r0
 800373c:	4293      	cmp	r3, r2
 800373e:	d100      	bne.n	8003742 <memset+0xa>
 8003740:	4770      	bx	lr
 8003742:	f803 1b01 	strb.w	r1, [r3], #1
 8003746:	e7f9      	b.n	800373c <memset+0x4>

08003748 <_init>:
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	bf00      	nop
 800374c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374e:	bc08      	pop	{r3}
 8003750:	469e      	mov	lr, r3
 8003752:	4770      	bx	lr

08003754 <_fini>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr
