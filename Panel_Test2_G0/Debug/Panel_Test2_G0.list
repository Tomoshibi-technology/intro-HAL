
Panel_Test2_G0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f2c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002fe4  08002fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003078  08003078  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003078  08003078  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003078  08003078  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800307c  0800307c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000000c  0800308c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  0800308c  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f4c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a5  00000000  00000000  00029f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f05  00000000  00000000  0002cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba9a  00000000  00000000  00040cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000808d0  00000000  00000000  0004c74f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd01f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002610  00000000  00000000  000cd070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002fcc 	.word	0x08002fcc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002fcc 	.word	0x08002fcc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <set_color>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_color(uint8_t buf[][3], uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	000c      	movs	r4, r1
 8000222:	0010      	movs	r0, r2
 8000224:	0019      	movs	r1, r3
 8000226:	1cbb      	adds	r3, r7, #2
 8000228:	1c22      	adds	r2, r4, #0
 800022a:	801a      	strh	r2, [r3, #0]
 800022c:	1c7b      	adds	r3, r7, #1
 800022e:	1c02      	adds	r2, r0, #0
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	003b      	movs	r3, r7
 8000234:	1c0a      	adds	r2, r1, #0
 8000236:	701a      	strb	r2, [r3, #0]
	buf[PIXEL_NUM][0]=green;
 8000238:	1cbb      	adds	r3, r7, #2
 800023a:	881a      	ldrh	r2, [r3, #0]
 800023c:	0013      	movs	r3, r2
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	189b      	adds	r3, r3, r2
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	18d3      	adds	r3, r2, r3
 8000246:	003a      	movs	r2, r7
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	701a      	strb	r2, [r3, #0]
	buf[PIXEL_NUM][1]=red;
 800024c:	1cbb      	adds	r3, r7, #2
 800024e:	881a      	ldrh	r2, [r3, #0]
 8000250:	0013      	movs	r3, r2
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	189b      	adds	r3, r3, r2
 8000256:	687a      	ldr	r2, [r7, #4]
 8000258:	18d3      	adds	r3, r2, r3
 800025a:	1c7a      	adds	r2, r7, #1
 800025c:	7812      	ldrb	r2, [r2, #0]
 800025e:	705a      	strb	r2, [r3, #1]
	buf[PIXEL_NUM][2]=blue;
 8000260:	1cbb      	adds	r3, r7, #2
 8000262:	881a      	ldrh	r2, [r3, #0]
 8000264:	0013      	movs	r3, r2
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	189b      	adds	r3, r3, r2
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	18d2      	adds	r2, r2, r3
 800026e:	2318      	movs	r3, #24
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	7093      	strb	r3, [r2, #2]
}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b003      	add	sp, #12
 800027c:	bd90      	pop	{r4, r7, pc}
	...

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fac3 	bl	8000810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f88d 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f981 	bl	8000594 <MX_GPIO_Init>
  MX_DMA_Init();
 8000292:	f000 f961 	bl	8000558 <MX_DMA_Init>
  MX_TIM3_Init();
 8000296:	f000 f8e1 	bl	800045c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800029a:	2380      	movs	r3, #128	; 0x80
 800029c:	0059      	lsls	r1, r3, #1
 800029e:	23a0      	movs	r3, #160	; 0xa0
 80002a0:	05db      	lsls	r3, r3, #23
 80002a2:	2201      	movs	r2, #1
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 ffcd 	bl	8001244 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start_DMA( &htim3, TIM_CHANNEL_2, (uint32_t*)buffer, 50+72);
  
  for(int i=0; i<LEDs; i++){
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
 80002ae:	e00b      	b.n	80002c8 <main+0x48>
    set_color(CLR_Buf, i, 3, 3, 0);
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	b299      	uxth	r1, r3
 80002b4:	4839      	ldr	r0, [pc, #228]	; (800039c <main+0x11c>)
 80002b6:	2300      	movs	r3, #0
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2303      	movs	r3, #3
 80002bc:	2203      	movs	r2, #3
 80002be:	f7ff ffab 	bl	8000218 <set_color>
  for(int i=0; i<LEDs; i++){
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	3301      	adds	r3, #1
 80002c6:	617b      	str	r3, [r7, #20]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	2b07      	cmp	r3, #7
 80002cc:	ddf0      	ble.n	80002b0 <main+0x30>
  }

  for(int i=0; i<RST; i++){
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	e007      	b.n	80002e4 <main+0x64>
    PWM_Buf[i]=0;
 80002d4:	4a32      	ldr	r2, [pc, #200]	; (80003a0 <main+0x120>)
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	18d3      	adds	r3, r2, r3
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<RST; i++){
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	3301      	adds	r3, #1
 80002e2:	613b      	str	r3, [r7, #16]
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	2b31      	cmp	r3, #49	; 0x31
 80002e8:	ddf4      	ble.n	80002d4 <main+0x54>
  }


  for(int i=0; i<LEDs; i++){
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	e04a      	b.n	8000386 <main+0x106>
	for(int j=0; j<3; j++){
 80002f0:	2300      	movs	r3, #0
 80002f2:	60bb      	str	r3, [r7, #8]
 80002f4:	e041      	b.n	800037a <main+0xfa>
      for(int k=7; k>=0; k--){
 80002f6:	2307      	movs	r3, #7
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	e038      	b.n	800036e <main+0xee>
        int x=(CLR_Buf[i][j]>>k)&1;
 80002fc:	4927      	ldr	r1, [pc, #156]	; (800039c <main+0x11c>)
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	0013      	movs	r3, r2
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	189b      	adds	r3, r3, r2
 8000306:	18ca      	adds	r2, r1, r3
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	18d3      	adds	r3, r2, r3
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	001a      	movs	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	411a      	asrs	r2, r3
 8000314:	0013      	movs	r3, r2
 8000316:	2201      	movs	r2, #1
 8000318:	4013      	ands	r3, r2
 800031a:	603b      	str	r3, [r7, #0]
        if(x==1){PWM_Buf[RST+(i*24)+(j*8)+(7-k)]=12;}
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d111      	bne.n	8000346 <main+0xc6>
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	0013      	movs	r3, r2
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	189b      	adds	r3, r3, r2
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	3332      	adds	r3, #50	; 0x32
 800032e:	001a      	movs	r2, r3
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	00db      	lsls	r3, r3, #3
 8000334:	18d2      	adds	r2, r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2107      	movs	r1, #7
 800033a:	1acb      	subs	r3, r1, r3
 800033c:	18d3      	adds	r3, r2, r3
 800033e:	4a18      	ldr	r2, [pc, #96]	; (80003a0 <main+0x120>)
 8000340:	210c      	movs	r1, #12
 8000342:	54d1      	strb	r1, [r2, r3]
 8000344:	e010      	b.n	8000368 <main+0xe8>
        else{PWM_Buf[RST+(i*24)+(j*8)+(7-k)]=4;}
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	0013      	movs	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	189b      	adds	r3, r3, r2
 800034e:	00db      	lsls	r3, r3, #3
 8000350:	3332      	adds	r3, #50	; 0x32
 8000352:	001a      	movs	r2, r3
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	18d2      	adds	r2, r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2107      	movs	r1, #7
 800035e:	1acb      	subs	r3, r1, r3
 8000360:	18d3      	adds	r3, r2, r3
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <main+0x120>)
 8000364:	2104      	movs	r1, #4
 8000366:	54d1      	strb	r1, [r2, r3]
      for(int k=7; k>=0; k--){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	3b01      	subs	r3, #1
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2b00      	cmp	r3, #0
 8000372:	dac3      	bge.n	80002fc <main+0x7c>
	for(int j=0; j<3; j++){
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	3301      	adds	r3, #1
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	2b02      	cmp	r3, #2
 800037e:	ddba      	ble.n	80002f6 <main+0x76>
  for(int i=0; i<LEDs; i++){
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	3301      	adds	r3, #1
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	2b07      	cmp	r3, #7
 800038a:	ddb1      	ble.n	80002f0 <main+0x70>
      }
    }
  }

   HAL_TIM_PWM_Start_DMA( &htim3, TIM_CHANNEL_2, (uint32_t*)PWM_Buf, ELEMENT_NUM);
 800038c:	23f2      	movs	r3, #242	; 0xf2
 800038e:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <main+0x120>)
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <main+0x124>)
 8000392:	2104      	movs	r1, #4
 8000394:	f001 fd06 	bl	8001da4 <HAL_TIM_PWM_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000398:	e7fe      	b.n	8000398 <main+0x118>
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	200001c4 	.word	0x200001c4
 80003a0:	200000d0 	.word	0x200000d0
 80003a4:	20000028 	.word	0x20000028

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b093      	sub	sp, #76	; 0x4c
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	2414      	movs	r4, #20
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	0018      	movs	r0, r3
 80003b4:	2334      	movs	r3, #52	; 0x34
 80003b6:	001a      	movs	r2, r3
 80003b8:	2100      	movs	r1, #0
 80003ba:	f002 fdff 	bl	8002fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	0018      	movs	r0, r3
 80003c2:	2310      	movs	r3, #16
 80003c4:	001a      	movs	r2, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	f002 fdf8 	bl	8002fbc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003cc:	2380      	movs	r3, #128	; 0x80
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 ff55 	bl	8001280 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	2202      	movs	r2, #2
 80003da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	2280      	movs	r2, #128	; 0x80
 80003e0:	0052      	lsls	r2, r2, #1
 80003e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003e4:	0021      	movs	r1, r4
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2240      	movs	r2, #64	; 0x40
 80003f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2202      	movs	r2, #2
 80003f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2202      	movs	r2, #2
 80003fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2200      	movs	r2, #0
 8000402:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	220c      	movs	r2, #12
 8000408:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	0292      	lsls	r2, r2, #10
 8000410:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	22c0      	movs	r2, #192	; 0xc0
 8000416:	05d2      	lsls	r2, r2, #23
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	187b      	adds	r3, r7, r1
 800041c:	0018      	movs	r0, r3
 800041e:	f000 ff6f 	bl	8001300 <HAL_RCC_OscConfig>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000426:	f000 f8ed 	bl	8000604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2207      	movs	r2, #7
 800042e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2202      	movs	r2, #2
 8000434:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2101      	movs	r1, #1
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fa6a 	bl	8001920 <HAL_RCC_ClockConfig>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000450:	f000 f8d8 	bl	8000604 <Error_Handler>
  }
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b013      	add	sp, #76	; 0x4c
 800045a:	bd90      	pop	{r4, r7, pc}

0800045c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08e      	sub	sp, #56	; 0x38
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000462:	2328      	movs	r3, #40	; 0x28
 8000464:	18fb      	adds	r3, r7, r3
 8000466:	0018      	movs	r0, r3
 8000468:	2310      	movs	r3, #16
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f002 fda5 	bl	8002fbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000472:	231c      	movs	r3, #28
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	0018      	movs	r0, r3
 8000478:	230c      	movs	r3, #12
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f002 fd9d 	bl	8002fbc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000482:	003b      	movs	r3, r7
 8000484:	0018      	movs	r0, r3
 8000486:	231c      	movs	r3, #28
 8000488:	001a      	movs	r2, r3
 800048a:	2100      	movs	r1, #0
 800048c:	f002 fd96 	bl	8002fbc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000490:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <MX_TIM3_Init+0xf4>)
 8000492:	4a30      	ldr	r2, [pc, #192]	; (8000554 <MX_TIM3_Init+0xf8>)
 8000494:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8000496:	4b2e      	ldr	r3, [pc, #184]	; (8000550 <MX_TIM3_Init+0xf4>)
 8000498:	2203      	movs	r2, #3
 800049a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049c:	4b2c      	ldr	r3, [pc, #176]	; (8000550 <MX_TIM3_Init+0xf4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 80004a2:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <MX_TIM3_Init+0xf4>)
 80004a4:	220e      	movs	r2, #14
 80004a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a8:	4b29      	ldr	r3, [pc, #164]	; (8000550 <MX_TIM3_Init+0xf4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ae:	4b28      	ldr	r3, [pc, #160]	; (8000550 <MX_TIM3_Init+0xf4>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004b4:	4b26      	ldr	r3, [pc, #152]	; (8000550 <MX_TIM3_Init+0xf4>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fbbc 	bl	8001c34 <HAL_TIM_Base_Init>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80004c0:	f000 f8a0 	bl	8000604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c4:	2128      	movs	r1, #40	; 0x28
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	0152      	lsls	r2, r2, #5
 80004cc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004ce:	187a      	adds	r2, r7, r1
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <MX_TIM3_Init+0xf4>)
 80004d2:	0011      	movs	r1, r2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 ff53 	bl	8002380 <HAL_TIM_ConfigClockSource>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80004de:	f000 f891 	bl	8000604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_TIM3_Init+0xf4>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fbfd 	bl	8001ce4 <HAL_TIM_PWM_Init>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80004ee:	f000 f889 	bl	8000604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f2:	211c      	movs	r1, #28
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000500:	187a      	adds	r2, r7, r1
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_TIM3_Init+0xf4>)
 8000504:	0011      	movs	r1, r2
 8000506:	0018      	movs	r0, r3
 8000508:	f002 fcd2 	bl	8002eb0 <HAL_TIMEx_MasterConfigSynchronization>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000510:	f000 f878 	bl	8000604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000514:	003b      	movs	r3, r7
 8000516:	2260      	movs	r2, #96	; 0x60
 8000518:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800051a:	003b      	movs	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000520:	003b      	movs	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000526:	003b      	movs	r3, r7
 8000528:	2204      	movs	r2, #4
 800052a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800052c:	0039      	movs	r1, r7
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_TIM3_Init+0xf4>)
 8000530:	2204      	movs	r2, #4
 8000532:	0018      	movs	r0, r3
 8000534:	f001 fe24 	bl	8002180 <HAL_TIM_PWM_ConfigChannel>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800053c:	f000 f862 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <MX_TIM3_Init+0xf4>)
 8000542:	0018      	movs	r0, r3
 8000544:	f000 f8d4 	bl	80006f0 <HAL_TIM_MspPostInit>

}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b00e      	add	sp, #56	; 0x38
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000028 	.word	0x20000028
 8000554:	40000400 	.word	0x40000400

08000558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_DMA_Init+0x38>)
 8000560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_DMA_Init+0x38>)
 8000564:	2101      	movs	r1, #1
 8000566:	430a      	orrs	r2, r1
 8000568:	639a      	str	r2, [r3, #56]	; 0x38
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_DMA_Init+0x38>)
 800056c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800056e:	2201      	movs	r2, #1
 8000570:	4013      	ands	r3, r2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	2009      	movs	r0, #9
 800057c:	f000 fa7a 	bl	8000a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000580:	2009      	movs	r0, #9
 8000582:	f000 fa8c 	bl	8000a9e <HAL_NVIC_EnableIRQ>

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40021000 	.word	0x40021000

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	0018      	movs	r0, r3
 800059e:	2314      	movs	r3, #20
 80005a0:	001a      	movs	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	f002 fd0a 	bl	8002fbc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_GPIO_Init+0x6c>)
 80005aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_GPIO_Init+0x6c>)
 80005ae:	2101      	movs	r1, #1
 80005b0:	430a      	orrs	r2, r1
 80005b2:	635a      	str	r2, [r3, #52]	; 0x34
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_GPIO_Init+0x6c>)
 80005b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b8:	2201      	movs	r2, #1
 80005ba:	4013      	ands	r3, r2
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	0059      	lsls	r1, r3, #1
 80005c4:	23a0      	movs	r3, #160	; 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	2200      	movs	r2, #0
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 fe3a 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	0052      	lsls	r2, r2, #1
 80005d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2201      	movs	r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ea:	1d3a      	adds	r2, r7, #4
 80005ec:	23a0      	movs	r3, #160	; 0xa0
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 fcc2 	bl	8000f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b006      	add	sp, #24
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x44>)
 8000618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_MspInit+0x44>)
 800061c:	2101      	movs	r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	641a      	str	r2, [r3, #64]	; 0x40
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x44>)
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	2201      	movs	r2, #1
 8000628:	4013      	ands	r3, r2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_MspInit+0x44>)
 8000630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_MspInit+0x44>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	0549      	lsls	r1, r1, #21
 8000638:	430a      	orrs	r2, r1
 800063a:	63da      	str	r2, [r3, #60]	; 0x3c
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <HAL_MspInit+0x44>)
 800063e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	055b      	lsls	r3, r3, #21
 8000644:	4013      	ands	r3, r2
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <HAL_TIM_Base_MspInit+0x88>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d136      	bne.n	80006d8 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <HAL_TIM_Base_MspInit+0x8c>)
 800066c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <HAL_TIM_Base_MspInit+0x8c>)
 8000670:	2102      	movs	r1, #2
 8000672:	430a      	orrs	r2, r1
 8000674:	63da      	str	r2, [r3, #60]	; 0x3c
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <HAL_TIM_Base_MspInit+0x8c>)
 8000678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800067a:	2202      	movs	r2, #2
 800067c:	4013      	ands	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <HAL_TIM_Base_MspInit+0x94>)
 8000686:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 800068a:	2221      	movs	r2, #33	; 0x21
 800068c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 8000690:	2210      	movs	r2, #16
 8000692:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 80006b0:	2220      	movs	r2, #32
 80006b2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 80006b6:	22c0      	movs	r2, #192	; 0xc0
 80006b8:	0192      	lsls	r2, r2, #6
 80006ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fa0a 	bl	8000ad8 <HAL_DMA_Init>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80006c8:	f7ff ff9c 	bl	8000604 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_TIM_Base_MspInit+0x90>)
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b004      	add	sp, #16
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40000400 	.word	0x40000400
 80006e4:	40021000 	.word	0x40021000
 80006e8:	20000074 	.word	0x20000074
 80006ec:	40020008 	.word	0x40020008

080006f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	240c      	movs	r4, #12
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	0018      	movs	r0, r3
 80006fe:	2314      	movs	r3, #20
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f002 fc5a 	bl	8002fbc <memset>
  if(htim->Instance==TIM3)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <HAL_TIM_MspPostInit+0x70>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d122      	bne.n	8000758 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_TIM_MspPostInit+0x74>)
 8000714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <HAL_TIM_MspPostInit+0x74>)
 8000718:	2101      	movs	r1, #1
 800071a:	430a      	orrs	r2, r1
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <HAL_TIM_MspPostInit+0x74>)
 8000720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000722:	2201      	movs	r2, #1
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800072a:	0021      	movs	r1, r4
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2202      	movs	r2, #2
 8000736:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2201      	movs	r2, #1
 8000748:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	187a      	adds	r2, r7, r1
 800074c:	23a0      	movs	r3, #160	; 0xa0
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	0011      	movs	r1, r2
 8000752:	0018      	movs	r0, r3
 8000754:	f000 fc12 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b009      	add	sp, #36	; 0x24
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	40000400 	.word	0x40000400
 8000764:	40021000 	.word	0x40021000

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800076c:	e7fe      	b.n	800076c <NMI_Handler+0x4>

0800076e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <HardFault_Handler+0x4>

08000774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078c:	f000 f8aa 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <DMA1_Channel1_IRQHandler+0x14>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 faaa 	bl	8000cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	20000074 	.word	0x20000074

080007b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007c0:	f7ff fff6 	bl	80007b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c6:	490d      	ldr	r1, [pc, #52]	; (80007fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <LoopForever+0xe>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007dc:	4c0a      	ldr	r4, [pc, #40]	; (8000808 <LoopForever+0x16>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ea:	f002 fbc3 	bl	8002f74 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007ee:	f7ff fd47 	bl	8000280 <main>

080007f2 <LoopForever>:

LoopForever:
  b LoopForever
 80007f2:	e7fe      	b.n	80007f2 <LoopForever>
  ldr   r0, =_estack
 80007f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000800:	08003080 	.word	0x08003080
  ldr r2, =_sbss
 8000804:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000808:	200001e0 	.word	0x200001e0

0800080c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC1_IRQHandler>
	...

08000810 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_Init+0x3c>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_Init+0x3c>)
 8000822:	2180      	movs	r1, #128	; 0x80
 8000824:	0049      	lsls	r1, r1, #1
 8000826:	430a      	orrs	r2, r1
 8000828:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800082a:	2003      	movs	r0, #3
 800082c:	f000 f810 	bl	8000850 <HAL_InitTick>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d003      	beq.n	800083c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e001      	b.n	8000840 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800083c:	f7ff fee8 	bl	8000610 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40022000 	.word	0x40022000

08000850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000858:	230f      	movs	r3, #15
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_InitTick+0x88>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d02b      	beq.n	80008c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <HAL_InitTick+0x8c>)
 800086a:	681c      	ldr	r4, [r3, #0]
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_InitTick+0x88>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	0019      	movs	r1, r3
 8000872:	23fa      	movs	r3, #250	; 0xfa
 8000874:	0098      	lsls	r0, r3, #2
 8000876:	f7ff fc43 	bl	8000100 <__udivsi3>
 800087a:	0003      	movs	r3, r0
 800087c:	0019      	movs	r1, r3
 800087e:	0020      	movs	r0, r4
 8000880:	f7ff fc3e 	bl	8000100 <__udivsi3>
 8000884:	0003      	movs	r3, r0
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f919 	bl	8000abe <HAL_SYSTICK_Config>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d112      	bne.n	80008b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d80a      	bhi.n	80008ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	2301      	movs	r3, #1
 800089a:	425b      	negs	r3, r3
 800089c:	2200      	movs	r2, #0
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 f8e8 	bl	8000a74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_InitTick+0x90>)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e00d      	b.n	80008c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008ac:	230f      	movs	r3, #15
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	e008      	b.n	80008c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008b6:	230f      	movs	r3, #15
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e003      	b.n	80008c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c0:	230f      	movs	r3, #15
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008c8:	230f      	movs	r3, #15
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	781b      	ldrb	r3, [r3, #0]
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b005      	add	sp, #20
 80008d4:	bd90      	pop	{r4, r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_IncTick+0x1c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	001a      	movs	r2, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_IncTick+0x20>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	18d2      	adds	r2, r2, r3
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <HAL_IncTick+0x20>)
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	20000008 	.word	0x20000008
 8000904:	200001dc 	.word	0x200001dc

08000908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b02      	ldr	r3, [pc, #8]	; (8000918 <HAL_GetTick+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	200001dc 	.word	0x200001dc

0800091c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b7f      	cmp	r3, #127	; 0x7f
 800092e:	d809      	bhi.n	8000944 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	001a      	movs	r2, r3
 8000936:	231f      	movs	r3, #31
 8000938:	401a      	ands	r2, r3
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <__NVIC_EnableIRQ+0x30>)
 800093c:	2101      	movs	r1, #1
 800093e:	4091      	lsls	r1, r2
 8000940:	000a      	movs	r2, r1
 8000942:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b002      	add	sp, #8
 800094a:	bd80      	pop	{r7, pc}
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	0002      	movs	r2, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b7f      	cmp	r3, #127	; 0x7f
 8000964:	d828      	bhi.n	80009b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000966:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <__NVIC_SetPriority+0xd4>)
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b25b      	sxtb	r3, r3
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	33c0      	adds	r3, #192	; 0xc0
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	589b      	ldr	r3, [r3, r2]
 8000976:	1dfa      	adds	r2, r7, #7
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	0011      	movs	r1, r2
 800097c:	2203      	movs	r2, #3
 800097e:	400a      	ands	r2, r1
 8000980:	00d2      	lsls	r2, r2, #3
 8000982:	21ff      	movs	r1, #255	; 0xff
 8000984:	4091      	lsls	r1, r2
 8000986:	000a      	movs	r2, r1
 8000988:	43d2      	mvns	r2, r2
 800098a:	401a      	ands	r2, r3
 800098c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	019b      	lsls	r3, r3, #6
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	401a      	ands	r2, r3
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	0018      	movs	r0, r3
 800099c:	2303      	movs	r3, #3
 800099e:	4003      	ands	r3, r0
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a4:	481f      	ldr	r0, [pc, #124]	; (8000a24 <__NVIC_SetPriority+0xd4>)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	430a      	orrs	r2, r1
 80009b0:	33c0      	adds	r3, #192	; 0xc0
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009b6:	e031      	b.n	8000a1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <__NVIC_SetPriority+0xd8>)
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	0019      	movs	r1, r3
 80009c0:	230f      	movs	r3, #15
 80009c2:	400b      	ands	r3, r1
 80009c4:	3b08      	subs	r3, #8
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	3306      	adds	r3, #6
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	18d3      	adds	r3, r2, r3
 80009ce:	3304      	adds	r3, #4
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1dfa      	adds	r2, r7, #7
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	0011      	movs	r1, r2
 80009d8:	2203      	movs	r2, #3
 80009da:	400a      	ands	r2, r1
 80009dc:	00d2      	lsls	r2, r2, #3
 80009de:	21ff      	movs	r1, #255	; 0xff
 80009e0:	4091      	lsls	r1, r2
 80009e2:	000a      	movs	r2, r1
 80009e4:	43d2      	mvns	r2, r2
 80009e6:	401a      	ands	r2, r3
 80009e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	019b      	lsls	r3, r3, #6
 80009ee:	22ff      	movs	r2, #255	; 0xff
 80009f0:	401a      	ands	r2, r3
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	0018      	movs	r0, r3
 80009f8:	2303      	movs	r3, #3
 80009fa:	4003      	ands	r3, r0
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <__NVIC_SetPriority+0xd8>)
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	001c      	movs	r4, r3
 8000a08:	230f      	movs	r3, #15
 8000a0a:	4023      	ands	r3, r4
 8000a0c:	3b08      	subs	r3, #8
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	430a      	orrs	r2, r1
 8000a12:	3306      	adds	r3, #6
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	18c3      	adds	r3, r0, r3
 8000a18:	3304      	adds	r3, #4
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b003      	add	sp, #12
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	045b      	lsls	r3, r3, #17
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d301      	bcc.n	8000a44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a40:	2301      	movs	r3, #1
 8000a42:	e010      	b.n	8000a66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <SysTick_Config+0x44>)
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	3a01      	subs	r2, #1
 8000a4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	425b      	negs	r3, r3
 8000a50:	2103      	movs	r1, #3
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff ff7c 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SysTick_Config+0x44>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SysTick_Config+0x44>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	0018      	movs	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b002      	add	sp, #8
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	210f      	movs	r1, #15
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	1c02      	adds	r2, r0, #0
 8000a84:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff ff5d 	bl	8000950 <__NVIC_SetPriority>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b004      	add	sp, #16
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff ff33 	bl	800091c <__NVIC_EnableIRQ>
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff ffaf 	bl	8000a2c <SysTick_Config>
 8000ace:	0003      	movs	r3, r0
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e077      	b.n	8000bda <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a3d      	ldr	r2, [pc, #244]	; (8000be4 <HAL_DMA_Init+0x10c>)
 8000af0:	4694      	mov	ip, r2
 8000af2:	4463      	add	r3, ip
 8000af4:	2114      	movs	r1, #20
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff fb02 	bl	8000100 <__udivsi3>
 8000afc:	0003      	movs	r3, r0
 8000afe:	009a      	lsls	r2, r3, #2
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2225      	movs	r2, #37	; 0x25
 8000b08:	2102      	movs	r1, #2
 8000b0a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4934      	ldr	r1, [pc, #208]	; (8000be8 <HAL_DMA_Init+0x110>)
 8000b18:	400a      	ands	r2, r1
 8000b1a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6819      	ldr	r1, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	691b      	ldr	r3, [r3, #16]
 8000b30:	431a      	orrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	431a      	orrs	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	431a      	orrs	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	0018      	movs	r0, r3
 8000b56:	f000 f9c1 	bl	8000edc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	01db      	lsls	r3, r3, #7
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d102      	bne.n	8000b6c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b74:	213f      	movs	r1, #63	; 0x3f
 8000b76:	400a      	ands	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000b82:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d011      	beq.n	8000bb0 <HAL_DMA_Init+0xd8>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d80d      	bhi.n	8000bb0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 f9cc 	bl	8000f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	e008      	b.n	8000bc2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2225      	movs	r2, #37	; 0x25
 8000bcc:	2101      	movs	r1, #1
 8000bce:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2224      	movs	r2, #36	; 0x24
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	bffdfff8 	.word	0xbffdfff8
 8000be8:	ffff800f 	.word	0xffff800f

08000bec <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bfa:	2317      	movs	r3, #23
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2224      	movs	r2, #36	; 0x24
 8000c06:	5c9b      	ldrb	r3, [r3, r2]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d101      	bne.n	8000c10 <HAL_DMA_Start_IT+0x24>
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	e06f      	b.n	8000cf0 <HAL_DMA_Start_IT+0x104>
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2224      	movs	r2, #36	; 0x24
 8000c14:	2101      	movs	r1, #1
 8000c16:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2225      	movs	r2, #37	; 0x25
 8000c1c:	5c9b      	ldrb	r3, [r3, r2]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d157      	bne.n	8000cd4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2225      	movs	r2, #37	; 0x25
 8000c28:	2102      	movs	r1, #2
 8000c2a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	438a      	bics	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f000 f907 	bl	8000e5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d008      	beq.n	8000c68 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	210e      	movs	r1, #14
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e00f      	b.n	8000c88 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2104      	movs	r1, #4
 8000c74:	438a      	bics	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	210a      	movs	r1, #10
 8000c84:	430a      	orrs	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	025b      	lsls	r3, r3, #9
 8000c92:	4013      	ands	r3, r2
 8000c94:	d008      	beq.n	8000ca8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d008      	beq.n	8000cc2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	0049      	lsls	r1, r1, #1
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e00a      	b.n	8000cea <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2280      	movs	r2, #128	; 0x80
 8000cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2224      	movs	r2, #36	; 0x24
 8000cde:	2100      	movs	r1, #0
 8000ce0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000ce2:	2317      	movs	r3, #23
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000cea:	2317      	movs	r3, #23
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	781b      	ldrb	r3, [r3, #0]
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b006      	add	sp, #24
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000d00:	4b55      	ldr	r3, [pc, #340]	; (8000e58 <HAL_DMA_IRQHandler+0x160>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	221c      	movs	r2, #28
 8000d14:	4013      	ands	r3, r2
 8000d16:	2204      	movs	r2, #4
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d027      	beq.n	8000d72 <HAL_DMA_IRQHandler+0x7a>
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	2204      	movs	r2, #4
 8000d26:	4013      	ands	r3, r2
 8000d28:	d023      	beq.n	8000d72 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2220      	movs	r2, #32
 8000d32:	4013      	ands	r3, r2
 8000d34:	d107      	bne.n	8000d46 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2104      	movs	r1, #4
 8000d42:	438a      	bics	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000d46:	4b44      	ldr	r3, [pc, #272]	; (8000e58 <HAL_DMA_IRQHandler+0x160>)
 8000d48:	6859      	ldr	r1, [r3, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	221c      	movs	r2, #28
 8000d50:	4013      	ands	r3, r2
 8000d52:	2204      	movs	r2, #4
 8000d54:	409a      	lsls	r2, r3
 8000d56:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <HAL_DMA_IRQHandler+0x160>)
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d100      	bne.n	8000d66 <HAL_DMA_IRQHandler+0x6e>
 8000d64:	e073      	b.n	8000e4e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	0010      	movs	r0, r2
 8000d6e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000d70:	e06d      	b.n	8000e4e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	221c      	movs	r2, #28
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4013      	ands	r3, r2
 8000d84:	d02e      	beq.n	8000de4 <HAL_DMA_IRQHandler+0xec>
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	2202      	movs	r2, #2
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	d02a      	beq.n	8000de4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2220      	movs	r2, #32
 8000d96:	4013      	ands	r3, r2
 8000d98:	d10b      	bne.n	8000db2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	210a      	movs	r1, #10
 8000da6:	438a      	bics	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2225      	movs	r2, #37	; 0x25
 8000dae:	2101      	movs	r1, #1
 8000db0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <HAL_DMA_IRQHandler+0x160>)
 8000db4:	6859      	ldr	r1, [r3, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	221c      	movs	r2, #28
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <HAL_DMA_IRQHandler+0x160>)
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2224      	movs	r2, #36	; 0x24
 8000dcc:	2100      	movs	r1, #0
 8000dce:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d03a      	beq.n	8000e4e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	0010      	movs	r0, r2
 8000de0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000de2:	e034      	b.n	8000e4e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	221c      	movs	r2, #28
 8000dea:	4013      	ands	r3, r2
 8000dec:	2208      	movs	r2, #8
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4013      	ands	r3, r2
 8000df6:	d02b      	beq.n	8000e50 <HAL_DMA_IRQHandler+0x158>
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d027      	beq.n	8000e50 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	210e      	movs	r1, #14
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_DMA_IRQHandler+0x160>)
 8000e12:	6859      	ldr	r1, [r3, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	221c      	movs	r2, #28
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_DMA_IRQHandler+0x160>)
 8000e22:	430a      	orrs	r2, r1
 8000e24:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2225      	movs	r2, #37	; 0x25
 8000e30:	2101      	movs	r1, #1
 8000e32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2224      	movs	r2, #36	; 0x24
 8000e38:	2100      	movs	r1, #0
 8000e3a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d005      	beq.n	8000e50 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	0010      	movs	r0, r2
 8000e4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46c0      	nop			; (mov r8, r8)
}
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b004      	add	sp, #16
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40020000 	.word	0x40020000

08000e5c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000e72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d004      	beq.n	8000e86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e84:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <DMA_SetConfig+0x7c>)
 8000e88:	6859      	ldr	r1, [r3, #4]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	221c      	movs	r2, #28
 8000e90:	4013      	ands	r3, r2
 8000e92:	2201      	movs	r2, #1
 8000e94:	409a      	lsls	r2, r3
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <DMA_SetConfig+0x7c>)
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2b10      	cmp	r3, #16
 8000eaa:	d108      	bne.n	8000ebe <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ebc:	e007      	b.n	8000ece <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	60da      	str	r2, [r3, #12]
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b004      	add	sp, #16
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	40020000 	.word	0x40020000

08000edc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000eec:	4694      	mov	ip, r2
 8000eee:	4463      	add	r3, ip
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	001a      	movs	r2, r3
 8000efe:	23ff      	movs	r3, #255	; 0xff
 8000f00:	4013      	ands	r3, r2
 8000f02:	3b08      	subs	r3, #8
 8000f04:	2114      	movs	r1, #20
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff f8fa 	bl	8000100 <__udivsi3>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000f14:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	221f      	movs	r2, #31
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b004      	add	sp, #16
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	10008200 	.word	0x10008200
 8000f30:	40020880 	.word	0x40020880

08000f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	223f      	movs	r2, #63	; 0x3f
 8000f42:	4013      	ands	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000f4a:	4694      	mov	ip, r2
 8000f4c:	4463      	add	r3, ip
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	001a      	movs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	4013      	ands	r3, r2
 8000f64:	2201      	movs	r2, #1
 8000f66:	409a      	lsls	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b004      	add	sp, #16
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	1000823f 	.word	0x1000823f
 8000f78:	40020940 	.word	0x40020940

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	e147      	b.n	800121c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4091      	lsls	r1, r2
 8000f96:	000a      	movs	r2, r1
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d100      	bne.n	8000fa4 <HAL_GPIO_Init+0x28>
 8000fa2:	e138      	b.n	8001216 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d005      	beq.n	8000fbc <HAL_GPIO_Init+0x40>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d130      	bne.n	800101e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	0013      	movs	r3, r2
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	0013      	movs	r3, r2
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	2201      	movs	r2, #1
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	4013      	ands	r3, r2
 8001026:	2b03      	cmp	r3, #3
 8001028:	d017      	beq.n	800105a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2203      	movs	r2, #3
 8001060:	4013      	ands	r3, r2
 8001062:	2b02      	cmp	r3, #2
 8001064:	d123      	bne.n	80010ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	58d3      	ldr	r3, [r2, r3]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2207      	movs	r2, #7
 8001078:	4013      	ands	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	43da      	mvns	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691a      	ldr	r2, [r3, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2107      	movs	r1, #7
 8001092:	400b      	ands	r3, r1
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	6939      	ldr	r1, [r7, #16]
 80010ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	401a      	ands	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	23c0      	movs	r3, #192	; 0xc0
 80010e8:	029b      	lsls	r3, r3, #10
 80010ea:	4013      	ands	r3, r2
 80010ec:	d100      	bne.n	80010f0 <HAL_GPIO_Init+0x174>
 80010ee:	e092      	b.n	8001216 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010f0:	4a50      	ldr	r2, [pc, #320]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3318      	adds	r3, #24
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	589b      	ldr	r3, [r3, r2]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2203      	movs	r2, #3
 8001102:	4013      	ands	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	220f      	movs	r2, #15
 8001108:	409a      	lsls	r2, r3
 800110a:	0013      	movs	r3, r2
 800110c:	43da      	mvns	r2, r3
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	429a      	cmp	r2, r3
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x1ca>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a45      	ldr	r2, [pc, #276]	; (8001238 <HAL_GPIO_Init+0x2bc>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x1c6>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a44      	ldr	r2, [pc, #272]	; (800123c <HAL_GPIO_Init+0x2c0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x1c2>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a43      	ldr	r2, [pc, #268]	; (8001240 <HAL_GPIO_Init+0x2c4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x1be>
 8001136:	2303      	movs	r3, #3
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x1cc>
 800113a:	2305      	movs	r3, #5
 800113c:	e004      	b.n	8001148 <HAL_GPIO_Init+0x1cc>
 800113e:	2302      	movs	r3, #2
 8001140:	e002      	b.n	8001148 <HAL_GPIO_Init+0x1cc>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <HAL_GPIO_Init+0x1cc>
 8001146:	2300      	movs	r3, #0
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	2103      	movs	r1, #3
 800114c:	400a      	ands	r2, r1
 800114e:	00d2      	lsls	r2, r2, #3
 8001150:	4093      	lsls	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001158:	4936      	ldr	r1, [pc, #216]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3318      	adds	r3, #24
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001166:	4b33      	ldr	r3, [pc, #204]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43da      	mvns	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	035b      	lsls	r3, r3, #13
 800117e:	4013      	ands	r3, r2
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43da      	mvns	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	039b      	lsls	r3, r3, #14
 80011a8:	4013      	ands	r3, r2
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011ba:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 80011bc:	2384      	movs	r3, #132	; 0x84
 80011be:	58d3      	ldr	r3, [r2, r3]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43da      	mvns	r2, r3
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	029b      	lsls	r3, r3, #10
 80011d4:	4013      	ands	r3, r2
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011e0:	4914      	ldr	r1, [pc, #80]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 80011e2:	2284      	movs	r2, #132	; 0x84
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	58d3      	ldr	r3, [r2, r3]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43da      	mvns	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	025b      	lsls	r3, r3, #9
 8001202:	4013      	ands	r3, r2
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800120e:	4909      	ldr	r1, [pc, #36]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	40da      	lsrs	r2, r3
 8001224:	1e13      	subs	r3, r2, #0
 8001226:	d000      	beq.n	800122a <HAL_GPIO_Init+0x2ae>
 8001228:	e6b0      	b.n	8000f8c <HAL_GPIO_Init+0x10>
  }
}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b006      	add	sp, #24
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021800 	.word	0x40021800
 8001238:	50000400 	.word	0x50000400
 800123c:	50000800 	.word	0x50000800
 8001240:	50000c00 	.word	0x50000c00

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	0008      	movs	r0, r1
 800124e:	0011      	movs	r1, r2
 8001250:	1cbb      	adds	r3, r7, #2
 8001252:	1c02      	adds	r2, r0, #0
 8001254:	801a      	strh	r2, [r3, #0]
 8001256:	1c7b      	adds	r3, r7, #1
 8001258:	1c0a      	adds	r2, r1, #0
 800125a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800125c:	1c7b      	adds	r3, r7, #1
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001264:	1cbb      	adds	r3, r7, #2
 8001266:	881a      	ldrh	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800126c:	e003      	b.n	8001276 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800126e:	1cbb      	adds	r3, r7, #2
 8001270:	881a      	ldrh	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b002      	add	sp, #8
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800128e:	4013      	ands	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d11f      	bne.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	0013      	movs	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	189b      	adds	r3, r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4912      	ldr	r1, [pc, #72]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80012b2:	0018      	movs	r0, r3
 80012b4:	f7fe ff24 	bl	8000100 <__udivsi3>
 80012b8:	0003      	movs	r3, r0
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012be:	e008      	b.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e001      	b.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e009      	b.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	401a      	ands	r2, r3
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d0ed      	beq.n	80012c0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b004      	add	sp, #16
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	40007000 	.word	0x40007000
 80012f4:	fffff9ff 	.word	0xfffff9ff
 80012f8:	20000000 	.word	0x20000000
 80012fc:	000f4240 	.word	0x000f4240

08001300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e2f3      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2201      	movs	r2, #1
 8001318:	4013      	ands	r3, r2
 800131a:	d100      	bne.n	800131e <HAL_RCC_OscConfig+0x1e>
 800131c:	e07c      	b.n	8001418 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131e:	4bc3      	ldr	r3, [pc, #780]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2238      	movs	r2, #56	; 0x38
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001328:	4bc0      	ldr	r3, [pc, #768]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2203      	movs	r2, #3
 800132e:	4013      	ands	r3, r2
 8001330:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b10      	cmp	r3, #16
 8001336:	d102      	bne.n	800133e <HAL_RCC_OscConfig+0x3e>
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d002      	beq.n	8001344 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d10b      	bne.n	800135c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	4bb9      	ldr	r3, [pc, #740]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	029b      	lsls	r3, r3, #10
 800134c:	4013      	ands	r3, r2
 800134e:	d062      	beq.n	8001416 <HAL_RCC_OscConfig+0x116>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d15e      	bne.n	8001416 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e2ce      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	429a      	cmp	r2, r3
 8001366:	d107      	bne.n	8001378 <HAL_RCC_OscConfig+0x78>
 8001368:	4bb0      	ldr	r3, [pc, #704]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4baf      	ldr	r3, [pc, #700]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800136e:	2180      	movs	r1, #128	; 0x80
 8001370:	0249      	lsls	r1, r1, #9
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e020      	b.n	80013ba <HAL_RCC_OscConfig+0xba>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	23a0      	movs	r3, #160	; 0xa0
 800137e:	02db      	lsls	r3, r3, #11
 8001380:	429a      	cmp	r2, r3
 8001382:	d10e      	bne.n	80013a2 <HAL_RCC_OscConfig+0xa2>
 8001384:	4ba9      	ldr	r3, [pc, #676]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4ba8      	ldr	r3, [pc, #672]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	02c9      	lsls	r1, r1, #11
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	4ba6      	ldr	r3, [pc, #664]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4ba5      	ldr	r3, [pc, #660]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	0249      	lsls	r1, r1, #9
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e00b      	b.n	80013ba <HAL_RCC_OscConfig+0xba>
 80013a2:	4ba2      	ldr	r3, [pc, #648]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4ba1      	ldr	r3, [pc, #644]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80013a8:	49a1      	ldr	r1, [pc, #644]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80013aa:	400a      	ands	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	4b9f      	ldr	r3, [pc, #636]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b9e      	ldr	r3, [pc, #632]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80013b4:	499f      	ldr	r1, [pc, #636]	; (8001634 <HAL_RCC_OscConfig+0x334>)
 80013b6:	400a      	ands	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d014      	beq.n	80013ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff faa1 	bl	8000908 <HAL_GetTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fa9c 	bl	8000908 <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e28d      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013de:	4b93      	ldr	r3, [pc, #588]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	029b      	lsls	r3, r3, #10
 80013e6:	4013      	ands	r3, r2
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0xcc>
 80013ea:	e015      	b.n	8001418 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fa8c 	bl	8000908 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f6:	f7ff fa87 	bl	8000908 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b64      	cmp	r3, #100	; 0x64
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e278      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001408:	4b88      	ldr	r3, [pc, #544]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	029b      	lsls	r3, r3, #10
 8001410:	4013      	ands	r3, r2
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0xf6>
 8001414:	e000      	b.n	8001418 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001416:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2202      	movs	r2, #2
 800141e:	4013      	ands	r3, r2
 8001420:	d100      	bne.n	8001424 <HAL_RCC_OscConfig+0x124>
 8001422:	e099      	b.n	8001558 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001424:	4b81      	ldr	r3, [pc, #516]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2238      	movs	r2, #56	; 0x38
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800142e:	4b7f      	ldr	r3, [pc, #508]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2203      	movs	r2, #3
 8001434:	4013      	ands	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b10      	cmp	r3, #16
 800143c:	d102      	bne.n	8001444 <HAL_RCC_OscConfig+0x144>
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d002      	beq.n	800144a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d135      	bne.n	80014b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800144a:	4b78      	ldr	r3, [pc, #480]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4013      	ands	r3, r2
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x162>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e24b      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b72      	ldr	r3, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4a74      	ldr	r2, [pc, #464]	; (8001638 <HAL_RCC_OscConfig+0x338>)
 8001468:	4013      	ands	r3, r2
 800146a:	0019      	movs	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	021a      	lsls	r2, r3, #8
 8001472:	4b6e      	ldr	r3, [pc, #440]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001474:	430a      	orrs	r2, r1
 8001476:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d112      	bne.n	80014a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800147e:	4b6b      	ldr	r3, [pc, #428]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a6e      	ldr	r2, [pc, #440]	; (800163c <HAL_RCC_OscConfig+0x33c>)
 8001484:	4013      	ands	r3, r2
 8001486:	0019      	movs	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	4b67      	ldr	r3, [pc, #412]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001492:	4b66      	ldr	r3, [pc, #408]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0adb      	lsrs	r3, r3, #11
 8001498:	2207      	movs	r2, #7
 800149a:	4013      	ands	r3, r2
 800149c:	4a68      	ldr	r2, [pc, #416]	; (8001640 <HAL_RCC_OscConfig+0x340>)
 800149e:	40da      	lsrs	r2, r3
 80014a0:	4b68      	ldr	r3, [pc, #416]	; (8001644 <HAL_RCC_OscConfig+0x344>)
 80014a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014a4:	4b68      	ldr	r3, [pc, #416]	; (8001648 <HAL_RCC_OscConfig+0x348>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff f9d1 	bl	8000850 <HAL_InitTick>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d051      	beq.n	8001556 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e221      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d030      	beq.n	8001520 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014be:	4b5b      	ldr	r3, [pc, #364]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a5e      	ldr	r2, [pc, #376]	; (800163c <HAL_RCC_OscConfig+0x33c>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	0019      	movs	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014d2:	4b56      	ldr	r3, [pc, #344]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b55      	ldr	r3, [pc, #340]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	0049      	lsls	r1, r1, #1
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fa12 	bl	8000908 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fa0d 	bl	8000908 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e1fe      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fc:	4b4b      	ldr	r3, [pc, #300]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4013      	ands	r3, r2
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001508:	4b48      	ldr	r3, [pc, #288]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <HAL_RCC_OscConfig+0x338>)
 800150e:	4013      	ands	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	021a      	lsls	r2, r3, #8
 8001518:	4b44      	ldr	r3, [pc, #272]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	e01b      	b.n	8001558 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001520:	4b42      	ldr	r3, [pc, #264]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b41      	ldr	r3, [pc, #260]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001526:	4949      	ldr	r1, [pc, #292]	; (800164c <HAL_RCC_OscConfig+0x34c>)
 8001528:	400a      	ands	r2, r1
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff f9ec 	bl	8000908 <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff f9e7 	bl	8000908 <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1d8      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001548:	4b38      	ldr	r3, [pc, #224]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4013      	ands	r3, r2
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x236>
 8001554:	e000      	b.n	8001558 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001556:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2208      	movs	r2, #8
 800155e:	4013      	ands	r3, r2
 8001560:	d047      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001562:	4b32      	ldr	r3, [pc, #200]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2238      	movs	r2, #56	; 0x38
 8001568:	4013      	ands	r3, r2
 800156a:	2b18      	cmp	r3, #24
 800156c:	d10a      	bne.n	8001584 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800156e:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001572:	2202      	movs	r2, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d03c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2f2>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d138      	bne.n	80015f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e1ba      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d019      	beq.n	80015c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800158e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001590:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001592:	2101      	movs	r1, #1
 8001594:	430a      	orrs	r2, r1
 8001596:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff f9b6 	bl	8000908 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff f9b1 	bl	8000908 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1a2      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	2202      	movs	r2, #2
 80015ba:	4013      	ands	r3, r2
 80015bc:	d0f1      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2a2>
 80015be:	e018      	b.n	80015f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80015c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	438a      	bics	r2, r1
 80015ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff f99c 	bl	8000908 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff f997 	bl	8000908 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e188      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80015ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ec:	2202      	movs	r2, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d1f1      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2204      	movs	r2, #4
 80015f8:	4013      	ands	r3, r2
 80015fa:	d100      	bne.n	80015fe <HAL_RCC_OscConfig+0x2fe>
 80015fc:	e0c6      	b.n	800178c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	231f      	movs	r3, #31
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2238      	movs	r2, #56	; 0x38
 800160c:	4013      	ands	r3, r2
 800160e:	2b20      	cmp	r3, #32
 8001610:	d11e      	bne.n	8001650 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001616:	2202      	movs	r2, #2
 8001618:	4013      	ands	r3, r2
 800161a:	d100      	bne.n	800161e <HAL_RCC_OscConfig+0x31e>
 800161c:	e0b6      	b.n	800178c <HAL_RCC_OscConfig+0x48c>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d000      	beq.n	8001628 <HAL_RCC_OscConfig+0x328>
 8001626:	e0b1      	b.n	800178c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e166      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
 800162c:	40021000 	.word	0x40021000
 8001630:	fffeffff 	.word	0xfffeffff
 8001634:	fffbffff 	.word	0xfffbffff
 8001638:	ffff80ff 	.word	0xffff80ff
 800163c:	ffffc7ff 	.word	0xffffc7ff
 8001640:	00f42400 	.word	0x00f42400
 8001644:	20000000 	.word	0x20000000
 8001648:	20000004 	.word	0x20000004
 800164c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001650:	4bac      	ldr	r3, [pc, #688]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	055b      	lsls	r3, r3, #21
 8001658:	4013      	ands	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_RCC_OscConfig+0x360>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x362>
 8001660:	2300      	movs	r3, #0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d011      	beq.n	800168a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4ba7      	ldr	r3, [pc, #668]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800166a:	4ba6      	ldr	r3, [pc, #664]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	0549      	lsls	r1, r1, #21
 8001670:	430a      	orrs	r2, r1
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c
 8001674:	4ba3      	ldr	r3, [pc, #652]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	055b      	lsls	r3, r3, #21
 800167c:	4013      	ands	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001682:	231f      	movs	r3, #31
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168a:	4b9f      	ldr	r3, [pc, #636]	; (8001908 <HAL_RCC_OscConfig+0x608>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4013      	ands	r3, r2
 8001694:	d11a      	bne.n	80016cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001696:	4b9c      	ldr	r3, [pc, #624]	; (8001908 <HAL_RCC_OscConfig+0x608>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4b9b      	ldr	r3, [pc, #620]	; (8001908 <HAL_RCC_OscConfig+0x608>)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	0049      	lsls	r1, r1, #1
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016a4:	f7ff f930 	bl	8000908 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ae:	f7ff f92b 	bl	8000908 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e11c      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c0:	4b91      	ldr	r3, [pc, #580]	; (8001908 <HAL_RCC_OscConfig+0x608>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3e2>
 80016d4:	4b8b      	ldr	r3, [pc, #556]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 80016d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d8:	4b8a      	ldr	r3, [pc, #552]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 80016da:	2101      	movs	r1, #1
 80016dc:	430a      	orrs	r2, r1
 80016de:	65da      	str	r2, [r3, #92]	; 0x5c
 80016e0:	e01c      	b.n	800171c <HAL_RCC_OscConfig+0x41c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x404>
 80016ea:	4b86      	ldr	r3, [pc, #536]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 80016ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ee:	4b85      	ldr	r3, [pc, #532]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 80016f0:	2104      	movs	r1, #4
 80016f2:	430a      	orrs	r2, r1
 80016f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016f6:	4b83      	ldr	r3, [pc, #524]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 80016f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016fa:	4b82      	ldr	r3, [pc, #520]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 80016fc:	2101      	movs	r1, #1
 80016fe:	430a      	orrs	r2, r1
 8001700:	65da      	str	r2, [r3, #92]	; 0x5c
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0x41c>
 8001704:	4b7f      	ldr	r3, [pc, #508]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001706:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001708:	4b7e      	ldr	r3, [pc, #504]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 800170a:	2101      	movs	r1, #1
 800170c:	438a      	bics	r2, r1
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001710:	4b7c      	ldr	r3, [pc, #496]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001712:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001714:	4b7b      	ldr	r3, [pc, #492]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001716:	2104      	movs	r1, #4
 8001718:	438a      	bics	r2, r1
 800171a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d014      	beq.n	800174e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff f8f0 	bl	8000908 <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172c:	e009      	b.n	8001742 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff f8eb 	bl	8000908 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	4a74      	ldr	r2, [pc, #464]	; (800190c <HAL_RCC_OscConfig+0x60c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e0db      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001742:	4b70      	ldr	r3, [pc, #448]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	2202      	movs	r2, #2
 8001748:	4013      	ands	r3, r2
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x42e>
 800174c:	e013      	b.n	8001776 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff f8db 	bl	8000908 <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001756:	e009      	b.n	800176c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff f8d6 	bl	8000908 <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	4a6a      	ldr	r2, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x60c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0c6      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800176c:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	2202      	movs	r2, #2
 8001772:	4013      	ands	r3, r2
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001776:	231f      	movs	r3, #31
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b60      	ldr	r3, [pc, #384]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001784:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001786:	4962      	ldr	r1, [pc, #392]	; (8001910 <HAL_RCC_OscConfig+0x610>)
 8001788:	400a      	ands	r2, r1
 800178a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d100      	bne.n	8001796 <HAL_RCC_OscConfig+0x496>
 8001794:	e0b0      	b.n	80018f8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2238      	movs	r2, #56	; 0x38
 800179c:	4013      	ands	r3, r2
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d100      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4a4>
 80017a2:	e078      	b.n	8001896 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d153      	bne.n	8001854 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b55      	ldr	r3, [pc, #340]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b54      	ldr	r3, [pc, #336]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 80017b2:	4958      	ldr	r1, [pc, #352]	; (8001914 <HAL_RCC_OscConfig+0x614>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff f8a6 	bl	8000908 <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff f8a1 	bl	8000908 <HAL_GetTick>
 80017c6:	0002      	movs	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e092      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d4:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	049b      	lsls	r3, r3, #18
 80017dc:	4013      	ands	r3, r2
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e0:	4b48      	ldr	r3, [pc, #288]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	431a      	orrs	r2, r3
 8001808:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 800180a:	430a      	orrs	r2, r1
 800180c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b3c      	ldr	r3, [pc, #240]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0449      	lsls	r1, r1, #17
 8001818:	430a      	orrs	r2, r1
 800181a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800181c:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	0549      	lsls	r1, r1, #21
 8001826:	430a      	orrs	r2, r1
 8001828:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff f86d 	bl	8000908 <HAL_GetTick>
 800182e:	0003      	movs	r3, r0
 8001830:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff f868 	bl	8000908 <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e059      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	049b      	lsls	r3, r3, #18
 800184e:	4013      	ands	r3, r2
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x534>
 8001852:	e051      	b.n	80018f8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 800185a:	492e      	ldr	r1, [pc, #184]	; (8001914 <HAL_RCC_OscConfig+0x614>)
 800185c:	400a      	ands	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff f852 	bl	8000908 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff f84d 	bl	8000908 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e03e      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	049b      	lsls	r3, r3, #18
 8001884:	4013      	ands	r3, r2
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 800188e:	4923      	ldr	r1, [pc, #140]	; (800191c <HAL_RCC_OscConfig+0x61c>)
 8001890:	400a      	ands	r2, r1
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	e030      	b.n	80018f8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e02b      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_RCC_OscConfig+0x604>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2203      	movs	r2, #3
 80018ac:	401a      	ands	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d11e      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2270      	movs	r2, #112	; 0x70
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d117      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	23fe      	movs	r3, #254	; 0xfe
 80018c8:	01db      	lsls	r3, r3, #7
 80018ca:	401a      	ands	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d10e      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	23f8      	movs	r3, #248	; 0xf8
 80018da:	039b      	lsls	r3, r3, #14
 80018dc:	401a      	ands	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d106      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	0f5b      	lsrs	r3, r3, #29
 80018ea:	075a      	lsls	r2, r3, #29
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b008      	add	sp, #32
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	40021000 	.word	0x40021000
 8001908:	40007000 	.word	0x40007000
 800190c:	00001388 	.word	0x00001388
 8001910:	efffffff 	.word	0xefffffff
 8001914:	feffffff 	.word	0xfeffffff
 8001918:	1fc1808c 	.word	0x1fc1808c
 800191c:	effefffc 	.word	0xeffefffc

08001920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0e9      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <HAL_RCC_ClockConfig+0x1f0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2207      	movs	r2, #7
 800193a:	4013      	ands	r3, r2
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d91e      	bls.n	8001980 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2207      	movs	r2, #7
 8001948:	4393      	bics	r3, r2
 800194a:	0019      	movs	r1, r3
 800194c:	4b70      	ldr	r3, [pc, #448]	; (8001b10 <HAL_RCC_ClockConfig+0x1f0>)
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001954:	f7fe ffd8 	bl	8000908 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800195c:	e009      	b.n	8001972 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195e:	f7fe ffd3 	bl	8000908 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	4a6a      	ldr	r2, [pc, #424]	; (8001b14 <HAL_RCC_ClockConfig+0x1f4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e0ca      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001972:	4b67      	ldr	r3, [pc, #412]	; (8001b10 <HAL_RCC_ClockConfig+0x1f0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2207      	movs	r2, #7
 8001978:	4013      	ands	r3, r2
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d1ee      	bne.n	800195e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d015      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2204      	movs	r2, #4
 8001990:	4013      	ands	r3, r2
 8001992:	d006      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001994:	4b60      	ldr	r3, [pc, #384]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 800199a:	21e0      	movs	r1, #224	; 0xe0
 800199c:	01c9      	lsls	r1, r1, #7
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a2:	4b5d      	ldr	r3, [pc, #372]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4a5d      	ldr	r2, [pc, #372]	; (8001b1c <HAL_RCC_ClockConfig+0x1fc>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	4b59      	ldr	r3, [pc, #356]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 80019b2:	430a      	orrs	r2, r1
 80019b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2201      	movs	r2, #1
 80019bc:	4013      	ands	r3, r2
 80019be:	d057      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c8:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	029b      	lsls	r3, r3, #10
 80019d0:	4013      	ands	r3, r2
 80019d2:	d12b      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e097      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e0:	4b4d      	ldr	r3, [pc, #308]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	049b      	lsls	r3, r3, #18
 80019e8:	4013      	ands	r3, r2
 80019ea:	d11f      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e08b      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f8:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4013      	ands	r3, r2
 8001a02:	d113      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e07f      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a10:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 8001a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a14:	2202      	movs	r2, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	d108      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e074      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	2202      	movs	r2, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e06d      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a2c:	4b3a      	ldr	r3, [pc, #232]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2207      	movs	r2, #7
 8001a32:	4393      	bics	r3, r2
 8001a34:	0019      	movs	r1, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a40:	f7fe ff62 	bl	8000908 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a48:	e009      	b.n	8001a5e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f7fe ff5d 	bl	8000908 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4a2f      	ldr	r2, [pc, #188]	; (8001b14 <HAL_RCC_ClockConfig+0x1f4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e054      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2238      	movs	r2, #56	; 0x38
 8001a64:	401a      	ands	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1ec      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2207      	movs	r2, #7
 8001a76:	4013      	ands	r3, r2
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d21e      	bcs.n	8001abc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2207      	movs	r2, #7
 8001a84:	4393      	bics	r3, r2
 8001a86:	0019      	movs	r1, r3
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a90:	f7fe ff3a 	bl	8000908 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a98:	e009      	b.n	8001aae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9a:	f7fe ff35 	bl	8000908 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <HAL_RCC_ClockConfig+0x1f4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e02c      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1ee      	bne.n	8001a9a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d009      	beq.n	8001ada <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <HAL_RCC_ClockConfig+0x200>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	0019      	movs	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ada:	f000 f829 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001ade:	0001      	movs	r1, r0
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	401a      	ands	r2, r3
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_RCC_ClockConfig+0x204>)
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	58d3      	ldr	r3, [r2, r3]
 8001af0:	221f      	movs	r2, #31
 8001af2:	4013      	ands	r3, r2
 8001af4:	000a      	movs	r2, r1
 8001af6:	40da      	lsrs	r2, r3
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_ClockConfig+0x208>)
 8001afa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_ClockConfig+0x20c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7fe fea5 	bl	8000850 <HAL_InitTick>
 8001b06:	0003      	movs	r3, r0
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b004      	add	sp, #16
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40022000 	.word	0x40022000
 8001b14:	00001388 	.word	0x00001388
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	fffff0ff 	.word	0xfffff0ff
 8001b20:	ffff8fff 	.word	0xffff8fff
 8001b24:	08002fe4 	.word	0x08002fe4
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004

08001b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b36:	4b3c      	ldr	r3, [pc, #240]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2238      	movs	r2, #56	; 0x38
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d10f      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b40:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0adb      	lsrs	r3, r3, #11
 8001b46:	2207      	movs	r2, #7
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	0013      	movs	r3, r2
 8001b50:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b52:	6839      	ldr	r1, [r7, #0]
 8001b54:	4835      	ldr	r0, [pc, #212]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b56:	f7fe fad3 	bl	8000100 <__udivsi3>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e05d      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2238      	movs	r2, #56	; 0x38
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d102      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	e054      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2238      	movs	r2, #56	; 0x38
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b10      	cmp	r3, #16
 8001b7c:	d138      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2203      	movs	r2, #3
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	2207      	movs	r2, #7
 8001b90:	4013      	ands	r3, r2
 8001b92:	3301      	adds	r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d10d      	bne.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	4824      	ldr	r0, [pc, #144]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ba0:	f7fe faae 	bl	8000100 <__udivsi3>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	227f      	movs	r2, #127	; 0x7f
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	434b      	muls	r3, r1
 8001bb4:	617b      	str	r3, [r7, #20]
        break;
 8001bb6:	e00d      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	481c      	ldr	r0, [pc, #112]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bbc:	f7fe faa0 	bl	8000100 <__udivsi3>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	227f      	movs	r2, #127	; 0x7f
 8001bcc:	4013      	ands	r3, r2
 8001bce:	434b      	muls	r3, r1
 8001bd0:	617b      	str	r3, [r7, #20]
        break;
 8001bd2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0f5b      	lsrs	r3, r3, #29
 8001bda:	2207      	movs	r2, #7
 8001bdc:	4013      	ands	r3, r2
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f7fe fa8b 	bl	8000100 <__udivsi3>
 8001bea:	0003      	movs	r3, r0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	e015      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2238      	movs	r2, #56	; 0x38
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d103      	bne.n	8001c04 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2238      	movs	r2, #56	; 0x38
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b18      	cmp	r3, #24
 8001c0e:	d103      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c10:	23fa      	movs	r3, #250	; 0xfa
 8001c12:	01db      	lsls	r3, r3, #7
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	e001      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c1c:	693b      	ldr	r3, [r7, #16]
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b006      	add	sp, #24
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	00f42400 	.word	0x00f42400
 8001c30:	007a1200 	.word	0x007a1200

08001c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e04a      	b.n	8001cdc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	223d      	movs	r2, #61	; 0x3d
 8001c4a:	5c9b      	ldrb	r3, [r3, r2]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d107      	bne.n	8001c62 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	223c      	movs	r2, #60	; 0x3c
 8001c56:	2100      	movs	r1, #0
 8001c58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7fe fcfb 	bl	8000658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	223d      	movs	r2, #61	; 0x3d
 8001c66:	2102      	movs	r1, #2
 8001c68:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	0019      	movs	r1, r3
 8001c74:	0010      	movs	r0, r2
 8001c76:	f000 fd45 	bl	8002704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2248      	movs	r2, #72	; 0x48
 8001c7e:	2101      	movs	r1, #1
 8001c80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	223e      	movs	r2, #62	; 0x3e
 8001c86:	2101      	movs	r1, #1
 8001c88:	5499      	strb	r1, [r3, r2]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	223f      	movs	r2, #63	; 0x3f
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2241      	movs	r2, #65	; 0x41
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	5499      	strb	r1, [r3, r2]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2242      	movs	r2, #66	; 0x42
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	5499      	strb	r1, [r3, r2]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2243      	movs	r2, #67	; 0x43
 8001cae:	2101      	movs	r1, #1
 8001cb0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2244      	movs	r2, #68	; 0x44
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	5499      	strb	r1, [r3, r2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2245      	movs	r2, #69	; 0x45
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2246      	movs	r2, #70	; 0x46
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2247      	movs	r2, #71	; 0x47
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	223d      	movs	r2, #61	; 0x3d
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e04a      	b.n	8001d8c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	223d      	movs	r2, #61	; 0x3d
 8001cfa:	5c9b      	ldrb	r3, [r3, r2]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d107      	bne.n	8001d12 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	223c      	movs	r2, #60	; 0x3c
 8001d06:	2100      	movs	r1, #0
 8001d08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 f841 	bl	8001d94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	223d      	movs	r2, #61	; 0x3d
 8001d16:	2102      	movs	r1, #2
 8001d18:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3304      	adds	r3, #4
 8001d22:	0019      	movs	r1, r3
 8001d24:	0010      	movs	r0, r2
 8001d26:	f000 fced 	bl	8002704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2248      	movs	r2, #72	; 0x48
 8001d2e:	2101      	movs	r1, #1
 8001d30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	223e      	movs	r2, #62	; 0x3e
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	223f      	movs	r2, #63	; 0x3f
 8001d3e:	2101      	movs	r1, #1
 8001d40:	5499      	strb	r1, [r3, r2]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2240      	movs	r2, #64	; 0x40
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2241      	movs	r2, #65	; 0x41
 8001d4e:	2101      	movs	r1, #1
 8001d50:	5499      	strb	r1, [r3, r2]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2242      	movs	r2, #66	; 0x42
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2243      	movs	r2, #67	; 0x43
 8001d5e:	2101      	movs	r1, #1
 8001d60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2244      	movs	r2, #68	; 0x44
 8001d66:	2101      	movs	r1, #1
 8001d68:	5499      	strb	r1, [r3, r2]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2245      	movs	r2, #69	; 0x45
 8001d6e:	2101      	movs	r1, #1
 8001d70:	5499      	strb	r1, [r3, r2]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2246      	movs	r2, #70	; 0x46
 8001d76:	2101      	movs	r1, #1
 8001d78:	5499      	strb	r1, [r3, r2]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2247      	movs	r2, #71	; 0x47
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	223d      	movs	r2, #61	; 0x3d
 8001d86:	2101      	movs	r1, #1
 8001d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b002      	add	sp, #8
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b002      	add	sp, #8
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	001a      	movs	r2, r3
 8001db2:	1cbb      	adds	r3, r7, #2
 8001db4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001db6:	2317      	movs	r3, #23
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d108      	bne.n	8001dd6 <HAL_TIM_PWM_Start_DMA+0x32>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	223e      	movs	r2, #62	; 0x3e
 8001dc8:	5c9b      	ldrb	r3, [r3, r2]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	3b02      	subs	r3, #2
 8001dce:	425a      	negs	r2, r3
 8001dd0:	4153      	adcs	r3, r2
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	e037      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d108      	bne.n	8001dee <HAL_TIM_PWM_Start_DMA+0x4a>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	223f      	movs	r2, #63	; 0x3f
 8001de0:	5c9b      	ldrb	r3, [r3, r2]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	3b02      	subs	r3, #2
 8001de6:	425a      	negs	r2, r3
 8001de8:	4153      	adcs	r3, r2
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	e02b      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d108      	bne.n	8001e06 <HAL_TIM_PWM_Start_DMA+0x62>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2240      	movs	r2, #64	; 0x40
 8001df8:	5c9b      	ldrb	r3, [r3, r2]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	3b02      	subs	r3, #2
 8001dfe:	425a      	negs	r2, r3
 8001e00:	4153      	adcs	r3, r2
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	e01f      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d108      	bne.n	8001e1e <HAL_TIM_PWM_Start_DMA+0x7a>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2241      	movs	r2, #65	; 0x41
 8001e10:	5c9b      	ldrb	r3, [r3, r2]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3b02      	subs	r3, #2
 8001e16:	425a      	negs	r2, r3
 8001e18:	4153      	adcs	r3, r2
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	e013      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b10      	cmp	r3, #16
 8001e22:	d108      	bne.n	8001e36 <HAL_TIM_PWM_Start_DMA+0x92>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2242      	movs	r2, #66	; 0x42
 8001e28:	5c9b      	ldrb	r3, [r3, r2]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3b02      	subs	r3, #2
 8001e2e:	425a      	negs	r2, r3
 8001e30:	4153      	adcs	r3, r2
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	e007      	b.n	8001e46 <HAL_TIM_PWM_Start_DMA+0xa2>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2243      	movs	r2, #67	; 0x43
 8001e3a:	5c9b      	ldrb	r3, [r3, r2]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3b02      	subs	r3, #2
 8001e40:	425a      	negs	r2, r3
 8001e42:	4153      	adcs	r3, r2
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e183      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d108      	bne.n	8001e66 <HAL_TIM_PWM_Start_DMA+0xc2>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	223e      	movs	r2, #62	; 0x3e
 8001e58:	5c9b      	ldrb	r3, [r3, r2]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	425a      	negs	r2, r3
 8001e60:	4153      	adcs	r3, r2
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	e037      	b.n	8001ed6 <HAL_TIM_PWM_Start_DMA+0x132>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d108      	bne.n	8001e7e <HAL_TIM_PWM_Start_DMA+0xda>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	223f      	movs	r2, #63	; 0x3f
 8001e70:	5c9b      	ldrb	r3, [r3, r2]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	425a      	negs	r2, r3
 8001e78:	4153      	adcs	r3, r2
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	e02b      	b.n	8001ed6 <HAL_TIM_PWM_Start_DMA+0x132>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d108      	bne.n	8001e96 <HAL_TIM_PWM_Start_DMA+0xf2>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	5c9b      	ldrb	r3, [r3, r2]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	425a      	negs	r2, r3
 8001e90:	4153      	adcs	r3, r2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	e01f      	b.n	8001ed6 <HAL_TIM_PWM_Start_DMA+0x132>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d108      	bne.n	8001eae <HAL_TIM_PWM_Start_DMA+0x10a>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2241      	movs	r2, #65	; 0x41
 8001ea0:	5c9b      	ldrb	r3, [r3, r2]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	425a      	negs	r2, r3
 8001ea8:	4153      	adcs	r3, r2
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	e013      	b.n	8001ed6 <HAL_TIM_PWM_Start_DMA+0x132>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b10      	cmp	r3, #16
 8001eb2:	d108      	bne.n	8001ec6 <HAL_TIM_PWM_Start_DMA+0x122>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2242      	movs	r2, #66	; 0x42
 8001eb8:	5c9b      	ldrb	r3, [r3, r2]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	425a      	negs	r2, r3
 8001ec0:	4153      	adcs	r3, r2
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	e007      	b.n	8001ed6 <HAL_TIM_PWM_Start_DMA+0x132>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2243      	movs	r2, #67	; 0x43
 8001eca:	5c9b      	ldrb	r3, [r3, r2]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	425a      	negs	r2, r3
 8001ed2:	4153      	adcs	r3, r2
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d035      	beq.n	8001f46 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_TIM_PWM_Start_DMA+0x144>
 8001ee0:	1cbb      	adds	r3, r7, #2
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e134      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d104      	bne.n	8001efc <HAL_TIM_PWM_Start_DMA+0x158>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	223e      	movs	r2, #62	; 0x3e
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	5499      	strb	r1, [r3, r2]
 8001efa:	e026      	b.n	8001f4a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d104      	bne.n	8001f0c <HAL_TIM_PWM_Start_DMA+0x168>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	223f      	movs	r2, #63	; 0x3f
 8001f06:	2102      	movs	r1, #2
 8001f08:	5499      	strb	r1, [r3, r2]
 8001f0a:	e01e      	b.n	8001f4a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d104      	bne.n	8001f1c <HAL_TIM_PWM_Start_DMA+0x178>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2240      	movs	r2, #64	; 0x40
 8001f16:	2102      	movs	r1, #2
 8001f18:	5499      	strb	r1, [r3, r2]
 8001f1a:	e016      	b.n	8001f4a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d104      	bne.n	8001f2c <HAL_TIM_PWM_Start_DMA+0x188>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2241      	movs	r2, #65	; 0x41
 8001f26:	2102      	movs	r1, #2
 8001f28:	5499      	strb	r1, [r3, r2]
 8001f2a:	e00e      	b.n	8001f4a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d104      	bne.n	8001f3c <HAL_TIM_PWM_Start_DMA+0x198>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2242      	movs	r2, #66	; 0x42
 8001f36:	2102      	movs	r1, #2
 8001f38:	5499      	strb	r1, [r3, r2]
 8001f3a:	e006      	b.n	8001f4a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2243      	movs	r2, #67	; 0x43
 8001f40:	2102      	movs	r1, #2
 8001f42:	5499      	strb	r1, [r3, r2]
 8001f44:	e001      	b.n	8001f4a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e105      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	d100      	bne.n	8001f52 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8001f50:	e080      	b.n	8002054 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b0c      	cmp	r3, #12
 8001f56:	d900      	bls.n	8001f5a <HAL_TIM_PWM_Start_DMA+0x1b6>
 8001f58:	e0a1      	b.n	800209e <HAL_TIM_PWM_Start_DMA+0x2fa>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d054      	beq.n	800200a <HAL_TIM_PWM_Start_DMA+0x266>
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d900      	bls.n	8001f68 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8001f66:	e09a      	b.n	800209e <HAL_TIM_PWM_Start_DMA+0x2fa>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_PWM_Start_DMA+0x1d2>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d025      	beq.n	8001fc0 <HAL_TIM_PWM_Start_DMA+0x21c>
 8001f74:	e093      	b.n	800209e <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	4a79      	ldr	r2, [pc, #484]	; (8002160 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	4a78      	ldr	r2, [pc, #480]	; (8002164 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	4a77      	ldr	r2, [pc, #476]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3334      	adds	r3, #52	; 0x34
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	1cbb      	adds	r3, r7, #2
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	f7fe fe24 	bl	8000bec <HAL_DMA_Start_IT>
 8001fa4:	1e03      	subs	r3, r0, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0d4      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	0089      	lsls	r1, r1, #2
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	60da      	str	r2, [r3, #12]
      break;
 8001fbe:	e073      	b.n	80020a8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	4a66      	ldr	r2, [pc, #408]	; (8002160 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	4a65      	ldr	r2, [pc, #404]	; (8002164 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	4a64      	ldr	r2, [pc, #400]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3338      	adds	r3, #56	; 0x38
 8001fe4:	001a      	movs	r2, r3
 8001fe6:	1cbb      	adds	r3, r7, #2
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	f7fe fdff 	bl	8000bec <HAL_DMA_Start_IT>
 8001fee:	1e03      	subs	r3, r0, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0af      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	00c9      	lsls	r1, r1, #3
 8002004:	430a      	orrs	r2, r1
 8002006:	60da      	str	r2, [r3, #12]
      break;
 8002008:	e04e      	b.n	80020a8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	4a54      	ldr	r2, [pc, #336]	; (8002160 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	4a53      	ldr	r2, [pc, #332]	; (8002164 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002018:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	4a52      	ldr	r2, [pc, #328]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002020:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	333c      	adds	r3, #60	; 0x3c
 800202e:	001a      	movs	r2, r3
 8002030:	1cbb      	adds	r3, r7, #2
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	f7fe fdda 	bl	8000bec <HAL_DMA_Start_IT>
 8002038:	1e03      	subs	r3, r0, #0
 800203a:	d001      	beq.n	8002040 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e08a      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0109      	lsls	r1, r1, #4
 800204e:	430a      	orrs	r2, r1
 8002050:	60da      	str	r2, [r3, #12]
      break;
 8002052:	e029      	b.n	80020a8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	4a41      	ldr	r2, [pc, #260]	; (8002160 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	4a40      	ldr	r2, [pc, #256]	; (8002164 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002062:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	4a3f      	ldr	r2, [pc, #252]	; (8002168 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800206a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3340      	adds	r3, #64	; 0x40
 8002078:	001a      	movs	r2, r3
 800207a:	1cbb      	adds	r3, r7, #2
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	f7fe fdb5 	bl	8000bec <HAL_DMA_Start_IT>
 8002082:	1e03      	subs	r3, r0, #0
 8002084:	d001      	beq.n	800208a <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e065      	b.n	8002156 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	0149      	lsls	r1, r1, #5
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]
      break;
 800209c:	e004      	b.n	80020a8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 800209e:	2317      	movs	r3, #23
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
      break;
 80020a6:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80020a8:	2317      	movs	r3, #23
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d14e      	bne.n	8002150 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	2201      	movs	r2, #1
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 fed4 	bl	8002e68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a29      	ldr	r2, [pc, #164]	; (800216c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d009      	beq.n	80020de <HAL_TIM_PWM_Start_DMA+0x33a>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a28      	ldr	r2, [pc, #160]	; (8002170 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d004      	beq.n	80020de <HAL_TIM_PWM_Start_DMA+0x33a>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a26      	ldr	r2, [pc, #152]	; (8002174 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_TIM_PWM_Start_DMA+0x33e>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_TIM_PWM_Start_DMA+0x340>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	0209      	lsls	r1, r1, #8
 80020f6:	430a      	orrs	r2, r1
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1b      	ldr	r2, [pc, #108]	; (800216c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d004      	beq.n	800210e <HAL_TIM_PWM_Start_DMA+0x36a>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d116      	bne.n	800213c <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b06      	cmp	r3, #6
 800211e:	d016      	beq.n	800214e <HAL_TIM_PWM_Start_DMA+0x3aa>
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	025b      	lsls	r3, r3, #9
 8002126:	429a      	cmp	r2, r3
 8002128:	d011      	beq.n	800214e <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213a:	e008      	b.n	800214e <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e000      	b.n	8002150 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002150:	2317      	movs	r3, #23
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	781b      	ldrb	r3, [r3, #0]
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b006      	add	sp, #24
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	080025f1 	.word	0x080025f1
 8002164:	0800269b 	.word	0x0800269b
 8002168:	0800255d 	.word	0x0800255d
 800216c:	40012c00 	.word	0x40012c00
 8002170:	40014400 	.word	0x40014400
 8002174:	40014800 	.word	0x40014800
 8002178:	40000400 	.word	0x40000400
 800217c:	00010007 	.word	0x00010007

08002180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800218c:	2317      	movs	r3, #23
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	223c      	movs	r2, #60	; 0x3c
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0x22>
 800219e:	2302      	movs	r3, #2
 80021a0:	e0e5      	b.n	800236e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	223c      	movs	r2, #60	; 0x3c
 80021a6:	2101      	movs	r1, #1
 80021a8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b14      	cmp	r3, #20
 80021ae:	d900      	bls.n	80021b2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80021b0:	e0d1      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	009a      	lsls	r2, r3, #2
 80021b6:	4b70      	ldr	r3, [pc, #448]	; (8002378 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80021b8:	18d3      	adds	r3, r2, r3
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	0011      	movs	r1, r2
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 fb16 	bl	80027f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2108      	movs	r1, #8
 80021d8:	430a      	orrs	r2, r1
 80021da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2104      	movs	r1, #4
 80021e8:	438a      	bics	r2, r1
 80021ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6999      	ldr	r1, [r3, #24]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	619a      	str	r2, [r3, #24]
      break;
 80021fe:	e0af      	b.n	8002360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fb75 	bl	80028f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	0109      	lsls	r1, r1, #4
 800221c:	430a      	orrs	r2, r1
 800221e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4954      	ldr	r1, [pc, #336]	; (800237c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800222c:	400a      	ands	r2, r1
 800222e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6999      	ldr	r1, [r3, #24]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	021a      	lsls	r2, r3, #8
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	619a      	str	r2, [r3, #24]
      break;
 8002244:	e08c      	b.n	8002360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	0011      	movs	r1, r2
 800224e:	0018      	movs	r0, r3
 8002250:	f000 fbd0 	bl	80029f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2108      	movs	r1, #8
 8002260:	430a      	orrs	r2, r1
 8002262:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2104      	movs	r1, #4
 8002270:	438a      	bics	r2, r1
 8002272:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69d9      	ldr	r1, [r3, #28]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	61da      	str	r2, [r3, #28]
      break;
 8002286:	e06b      	b.n	8002360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	0011      	movs	r1, r2
 8002290:	0018      	movs	r0, r3
 8002292:	f000 fc31 	bl	8002af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0109      	lsls	r1, r1, #4
 80022a4:	430a      	orrs	r2, r1
 80022a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69da      	ldr	r2, [r3, #28]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4932      	ldr	r1, [pc, #200]	; (800237c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69d9      	ldr	r1, [r3, #28]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	021a      	lsls	r2, r3, #8
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	61da      	str	r2, [r3, #28]
      break;
 80022cc:	e048      	b.n	8002360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	0011      	movs	r1, r2
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 fc72 	bl	8002bc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2108      	movs	r1, #8
 80022e8:	430a      	orrs	r2, r1
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2104      	movs	r1, #4
 80022f8:	438a      	bics	r2, r1
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800230e:	e027      	b.n	8002360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	0011      	movs	r1, r2
 8002318:	0018      	movs	r0, r3
 800231a:	f000 fcab 	bl	8002c74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2180      	movs	r1, #128	; 0x80
 800232a:	0109      	lsls	r1, r1, #4
 800232c:	430a      	orrs	r2, r1
 800232e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4910      	ldr	r1, [pc, #64]	; (800237c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800233c:	400a      	ands	r2, r1
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	021a      	lsls	r2, r3, #8
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002354:	e004      	b.n	8002360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002356:	2317      	movs	r3, #23
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
      break;
 800235e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	223c      	movs	r2, #60	; 0x3c
 8002364:	2100      	movs	r1, #0
 8002366:	5499      	strb	r1, [r3, r2]

  return status;
 8002368:	2317      	movs	r3, #23
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	781b      	ldrb	r3, [r3, #0]
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b006      	add	sp, #24
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	08003024 	.word	0x08003024
 800237c:	fffffbff 	.word	0xfffffbff

08002380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	230f      	movs	r3, #15
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	223c      	movs	r2, #60	; 0x3c
 8002396:	5c9b      	ldrb	r3, [r3, r2]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_TIM_ConfigClockSource+0x20>
 800239c:	2302      	movs	r3, #2
 800239e:	e0bc      	b.n	800251a <HAL_TIM_ConfigClockSource+0x19a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	223c      	movs	r2, #60	; 0x3c
 80023a4:	2101      	movs	r1, #1
 80023a6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	223d      	movs	r2, #61	; 0x3d
 80023ac:	2102      	movs	r1, #2
 80023ae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4a5a      	ldr	r2, [pc, #360]	; (8002524 <HAL_TIM_ConfigClockSource+0x1a4>)
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4a59      	ldr	r2, [pc, #356]	; (8002528 <HAL_TIM_ConfigClockSource+0x1a8>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	0192      	lsls	r2, r2, #6
 80023d8:	4293      	cmp	r3, r2
 80023da:	d040      	beq.n	800245e <HAL_TIM_ConfigClockSource+0xde>
 80023dc:	2280      	movs	r2, #128	; 0x80
 80023de:	0192      	lsls	r2, r2, #6
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d900      	bls.n	80023e6 <HAL_TIM_ConfigClockSource+0x66>
 80023e4:	e088      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
 80023e6:	2280      	movs	r2, #128	; 0x80
 80023e8:	0152      	lsls	r2, r2, #5
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d100      	bne.n	80023f0 <HAL_TIM_ConfigClockSource+0x70>
 80023ee:	e088      	b.n	8002502 <HAL_TIM_ConfigClockSource+0x182>
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	0152      	lsls	r2, r2, #5
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d900      	bls.n	80023fa <HAL_TIM_ConfigClockSource+0x7a>
 80023f8:	e07e      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
 80023fa:	2b70      	cmp	r3, #112	; 0x70
 80023fc:	d018      	beq.n	8002430 <HAL_TIM_ConfigClockSource+0xb0>
 80023fe:	d900      	bls.n	8002402 <HAL_TIM_ConfigClockSource+0x82>
 8002400:	e07a      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
 8002402:	2b60      	cmp	r3, #96	; 0x60
 8002404:	d04f      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x126>
 8002406:	d900      	bls.n	800240a <HAL_TIM_ConfigClockSource+0x8a>
 8002408:	e076      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
 800240a:	2b50      	cmp	r3, #80	; 0x50
 800240c:	d03b      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x106>
 800240e:	d900      	bls.n	8002412 <HAL_TIM_ConfigClockSource+0x92>
 8002410:	e072      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d057      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x146>
 8002416:	d900      	bls.n	800241a <HAL_TIM_ConfigClockSource+0x9a>
 8002418:	e06e      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
 800241a:	2b30      	cmp	r3, #48	; 0x30
 800241c:	d063      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x166>
 800241e:	d86b      	bhi.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
 8002420:	2b20      	cmp	r3, #32
 8002422:	d060      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x166>
 8002424:	d868      	bhi.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
 8002426:	2b00      	cmp	r3, #0
 8002428:	d05d      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x166>
 800242a:	2b10      	cmp	r3, #16
 800242c:	d05b      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x166>
 800242e:	e063      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6899      	ldr	r1, [r3, #8]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f000 fcf2 	bl	8002e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2277      	movs	r2, #119	; 0x77
 8002450:	4313      	orrs	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	609a      	str	r2, [r3, #8]
      break;
 800245c:	e052      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6899      	ldr	r1, [r3, #8]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f000 fcdb 	bl	8002e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2180      	movs	r1, #128	; 0x80
 800247e:	01c9      	lsls	r1, r1, #7
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
      break;
 8002484:	e03e      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	001a      	movs	r2, r3
 8002494:	f000 fc4c 	bl	8002d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2150      	movs	r1, #80	; 0x50
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 fca6 	bl	8002df0 <TIM_ITRx_SetConfig>
      break;
 80024a4:	e02e      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	001a      	movs	r2, r3
 80024b4:	f000 fc6a 	bl	8002d8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2160      	movs	r1, #96	; 0x60
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 fc96 	bl	8002df0 <TIM_ITRx_SetConfig>
      break;
 80024c4:	e01e      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	001a      	movs	r2, r3
 80024d4:	f000 fc2c 	bl	8002d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2140      	movs	r1, #64	; 0x40
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 fc86 	bl	8002df0 <TIM_ITRx_SetConfig>
      break;
 80024e4:	e00e      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0019      	movs	r1, r3
 80024f0:	0010      	movs	r0, r2
 80024f2:	f000 fc7d 	bl	8002df0 <TIM_ITRx_SetConfig>
      break;
 80024f6:	e005      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80024f8:	230f      	movs	r3, #15
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
      break;
 8002500:	e000      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002502:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	223d      	movs	r2, #61	; 0x3d
 8002508:	2101      	movs	r1, #1
 800250a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	223c      	movs	r2, #60	; 0x3c
 8002510:	2100      	movs	r1, #0
 8002512:	5499      	strb	r1, [r3, r2]

  return status;
 8002514:	230f      	movs	r3, #15
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	781b      	ldrb	r3, [r3, #0]
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b004      	add	sp, #16
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	ffceff88 	.word	0xffceff88
 8002528:	ffff00ff 	.word	0xffff00ff

0800252c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b002      	add	sp, #8
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}

0800255c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	d107      	bne.n	8002584 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	223e      	movs	r2, #62	; 0x3e
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]
 8002582:	e02a      	b.n	80025da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	d107      	bne.n	800259e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2202      	movs	r2, #2
 8002592:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	223f      	movs	r2, #63	; 0x3f
 8002598:	2101      	movs	r1, #1
 800259a:	5499      	strb	r1, [r3, r2]
 800259c:	e01d      	b.n	80025da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d107      	bne.n	80025b8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2204      	movs	r2, #4
 80025ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2240      	movs	r2, #64	; 0x40
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]
 80025b6:	e010      	b.n	80025da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d107      	bne.n	80025d2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2208      	movs	r2, #8
 80025c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2241      	movs	r2, #65	; 0x41
 80025cc:	2101      	movs	r1, #1
 80025ce:	5499      	strb	r1, [r3, r2]
 80025d0:	e003      	b.n	80025da <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	223d      	movs	r2, #61	; 0x3d
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ffb5 	bl	800254c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b004      	add	sp, #16
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	429a      	cmp	r2, r3
 8002606:	d10b      	bne.n	8002620 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d136      	bne.n	8002684 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	223e      	movs	r2, #62	; 0x3e
 800261a:	2101      	movs	r1, #1
 800261c:	5499      	strb	r1, [r3, r2]
 800261e:	e031      	b.n	8002684 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	429a      	cmp	r2, r3
 8002628:	d10b      	bne.n	8002642 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2202      	movs	r2, #2
 800262e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d125      	bne.n	8002684 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	223f      	movs	r2, #63	; 0x3f
 800263c:	2101      	movs	r1, #1
 800263e:	5499      	strb	r1, [r3, r2]
 8002640:	e020      	b.n	8002684 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	429a      	cmp	r2, r3
 800264a:	d10b      	bne.n	8002664 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2204      	movs	r2, #4
 8002650:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d114      	bne.n	8002684 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2240      	movs	r2, #64	; 0x40
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]
 8002662:	e00f      	b.n	8002684 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	d10a      	bne.n	8002684 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2208      	movs	r2, #8
 8002672:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2241      	movs	r2, #65	; 0x41
 8002680:	2101      	movs	r1, #1
 8002682:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	0018      	movs	r0, r3
 8002688:	f7ff ff50 	bl	800252c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	771a      	strb	r2, [r3, #28]
}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b004      	add	sp, #16
 8002698:	bd80      	pop	{r7, pc}

0800269a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d103      	bne.n	80026ba <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	771a      	strb	r2, [r3, #28]
 80026b8:	e019      	b.n	80026ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d103      	bne.n	80026cc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2202      	movs	r2, #2
 80026c8:	771a      	strb	r2, [r3, #28]
 80026ca:	e010      	b.n	80026ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d103      	bne.n	80026de <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2204      	movs	r2, #4
 80026da:	771a      	strb	r2, [r3, #28]
 80026dc:	e007      	b.n	80026ee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d102      	bne.n	80026ee <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2208      	movs	r2, #8
 80026ec:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7ff ff23 	bl	800253c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	771a      	strb	r2, [r3, #28]
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b004      	add	sp, #16
 8002702:	bd80      	pop	{r7, pc}

08002704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a32      	ldr	r2, [pc, #200]	; (80027e0 <TIM_Base_SetConfig+0xdc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_Base_SetConfig+0x20>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a31      	ldr	r2, [pc, #196]	; (80027e4 <TIM_Base_SetConfig+0xe0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d108      	bne.n	8002736 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2270      	movs	r2, #112	; 0x70
 8002728:	4393      	bics	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a29      	ldr	r2, [pc, #164]	; (80027e0 <TIM_Base_SetConfig+0xdc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00f      	beq.n	800275e <TIM_Base_SetConfig+0x5a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <TIM_Base_SetConfig+0xe0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00b      	beq.n	800275e <TIM_Base_SetConfig+0x5a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <TIM_Base_SetConfig+0xe4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <TIM_Base_SetConfig+0x5a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a26      	ldr	r2, [pc, #152]	; (80027ec <TIM_Base_SetConfig+0xe8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d003      	beq.n	800275e <TIM_Base_SetConfig+0x5a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <TIM_Base_SetConfig+0xec>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d108      	bne.n	8002770 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <TIM_Base_SetConfig+0xf0>)
 8002762:	4013      	ands	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	4393      	bics	r3, r2
 8002776:	001a      	movs	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <TIM_Base_SetConfig+0xdc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <TIM_Base_SetConfig+0xaa>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <TIM_Base_SetConfig+0xe8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d003      	beq.n	80027ae <TIM_Base_SetConfig+0xaa>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <TIM_Base_SetConfig+0xec>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d103      	bne.n	80027b6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2201      	movs	r2, #1
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d106      	bne.n	80027d6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2201      	movs	r2, #1
 80027ce:	4393      	bics	r3, r2
 80027d0:	001a      	movs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	611a      	str	r2, [r3, #16]
  }
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b004      	add	sp, #16
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40002000 	.word	0x40002000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800
 80027f4:	fffffcff 	.word	0xfffffcff

080027f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	2201      	movs	r2, #1
 800280e:	4393      	bics	r3, r2
 8002810:	001a      	movs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a2e      	ldr	r2, [pc, #184]	; (80028e0 <TIM_OC1_SetConfig+0xe8>)
 8002826:	4013      	ands	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2203      	movs	r2, #3
 800282e:	4393      	bics	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2202      	movs	r2, #2
 8002840:	4393      	bics	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <TIM_OC1_SetConfig+0xec>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <TIM_OC1_SetConfig+0x6e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <TIM_OC1_SetConfig+0xf0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d003      	beq.n	8002866 <TIM_OC1_SetConfig+0x6e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a22      	ldr	r2, [pc, #136]	; (80028ec <TIM_OC1_SetConfig+0xf4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d10c      	bne.n	8002880 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2208      	movs	r2, #8
 800286a:	4393      	bics	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2204      	movs	r2, #4
 800287c:	4393      	bics	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <TIM_OC1_SetConfig+0xec>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <TIM_OC1_SetConfig+0xa0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a17      	ldr	r2, [pc, #92]	; (80028e8 <TIM_OC1_SetConfig+0xf0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d003      	beq.n	8002898 <TIM_OC1_SetConfig+0xa0>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a16      	ldr	r2, [pc, #88]	; (80028ec <TIM_OC1_SetConfig+0xf4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4a15      	ldr	r2, [pc, #84]	; (80028f0 <TIM_OC1_SetConfig+0xf8>)
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <TIM_OC1_SetConfig+0xfc>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	621a      	str	r2, [r3, #32]
}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b006      	add	sp, #24
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	fffeff8f 	.word	0xfffeff8f
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40014400 	.word	0x40014400
 80028ec:	40014800 	.word	0x40014800
 80028f0:	fffffeff 	.word	0xfffffeff
 80028f4:	fffffdff 	.word	0xfffffdff

080028f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	2210      	movs	r2, #16
 800290e:	4393      	bics	r3, r2
 8002910:	001a      	movs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a2c      	ldr	r2, [pc, #176]	; (80029d8 <TIM_OC2_SetConfig+0xe0>)
 8002926:	4013      	ands	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4a2b      	ldr	r2, [pc, #172]	; (80029dc <TIM_OC2_SetConfig+0xe4>)
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2220      	movs	r2, #32
 8002942:	4393      	bics	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <TIM_OC2_SetConfig+0xe8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10d      	bne.n	8002976 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	4393      	bics	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2240      	movs	r2, #64	; 0x40
 8002972:	4393      	bics	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <TIM_OC2_SetConfig+0xe8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <TIM_OC2_SetConfig+0x96>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <TIM_OC2_SetConfig+0xec>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <TIM_OC2_SetConfig+0x96>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a17      	ldr	r2, [pc, #92]	; (80029e8 <TIM_OC2_SetConfig+0xf0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d113      	bne.n	80029b6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4a16      	ldr	r2, [pc, #88]	; (80029ec <TIM_OC2_SetConfig+0xf4>)
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <TIM_OC2_SetConfig+0xf8>)
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	621a      	str	r2, [r3, #32]
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b006      	add	sp, #24
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	feff8fff 	.word	0xfeff8fff
 80029dc:	fffffcff 	.word	0xfffffcff
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40014400 	.word	0x40014400
 80029e8:	40014800 	.word	0x40014800
 80029ec:	fffffbff 	.word	0xfffffbff
 80029f0:	fffff7ff 	.word	0xfffff7ff

080029f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4a31      	ldr	r2, [pc, #196]	; (8002ad0 <TIM_OC3_SetConfig+0xdc>)
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a2d      	ldr	r2, [pc, #180]	; (8002ad4 <TIM_OC3_SetConfig+0xe0>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2203      	movs	r2, #3
 8002a28:	4393      	bics	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4a27      	ldr	r2, [pc, #156]	; (8002ad8 <TIM_OC3_SetConfig+0xe4>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a23      	ldr	r2, [pc, #140]	; (8002adc <TIM_OC3_SetConfig+0xe8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10d      	bne.n	8002a6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <TIM_OC3_SetConfig+0xec>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <TIM_OC3_SetConfig+0xf0>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <TIM_OC3_SetConfig+0xe8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <TIM_OC3_SetConfig+0x92>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <TIM_OC3_SetConfig+0xf4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d003      	beq.n	8002a86 <TIM_OC3_SetConfig+0x92>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <TIM_OC3_SetConfig+0xf8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d113      	bne.n	8002aae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <TIM_OC3_SetConfig+0xfc>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <TIM_OC3_SetConfig+0x100>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	621a      	str	r2, [r3, #32]
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b006      	add	sp, #24
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	fffffeff 	.word	0xfffffeff
 8002ad4:	fffeff8f 	.word	0xfffeff8f
 8002ad8:	fffffdff 	.word	0xfffffdff
 8002adc:	40012c00 	.word	0x40012c00
 8002ae0:	fffff7ff 	.word	0xfffff7ff
 8002ae4:	fffffbff 	.word	0xfffffbff
 8002ae8:	40014400 	.word	0x40014400
 8002aec:	40014800 	.word	0x40014800
 8002af0:	ffffefff 	.word	0xffffefff
 8002af4:	ffffdfff 	.word	0xffffdfff

08002af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4a24      	ldr	r2, [pc, #144]	; (8002ba0 <TIM_OC4_SetConfig+0xa8>)
 8002b0e:	401a      	ands	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <TIM_OC4_SetConfig+0xac>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <TIM_OC4_SetConfig+0xb0>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <TIM_OC4_SetConfig+0xb4>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	031b      	lsls	r3, r3, #12
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <TIM_OC4_SetConfig+0xb8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <TIM_OC4_SetConfig+0x70>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <TIM_OC4_SetConfig+0xbc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_OC4_SetConfig+0x70>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <TIM_OC4_SetConfig+0xc0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d109      	bne.n	8002b7c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <TIM_OC4_SetConfig+0xc4>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	019b      	lsls	r3, r3, #6
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b006      	add	sp, #24
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	ffffefff 	.word	0xffffefff
 8002ba4:	feff8fff 	.word	0xfeff8fff
 8002ba8:	fffffcff 	.word	0xfffffcff
 8002bac:	ffffdfff 	.word	0xffffdfff
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40014400 	.word	0x40014400
 8002bb8:	40014800 	.word	0x40014800
 8002bbc:	ffffbfff 	.word	0xffffbfff

08002bc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <TIM_OC5_SetConfig+0x9c>)
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <TIM_OC5_SetConfig+0xa0>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <TIM_OC5_SetConfig+0xa4>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	041b      	lsls	r3, r3, #16
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a15      	ldr	r2, [pc, #84]	; (8002c68 <TIM_OC5_SetConfig+0xa8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <TIM_OC5_SetConfig+0x66>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <TIM_OC5_SetConfig+0xac>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d003      	beq.n	8002c26 <TIM_OC5_SetConfig+0x66>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <TIM_OC5_SetConfig+0xb0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d109      	bne.n	8002c3a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <TIM_OC5_SetConfig+0x9c>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	621a      	str	r2, [r3, #32]
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b006      	add	sp, #24
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	fffeffff 	.word	0xfffeffff
 8002c60:	fffeff8f 	.word	0xfffeff8f
 8002c64:	fffdffff 	.word	0xfffdffff
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800

08002c74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <TIM_OC6_SetConfig+0xa0>)
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <TIM_OC6_SetConfig+0xa4>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4a1a      	ldr	r2, [pc, #104]	; (8002d1c <TIM_OC6_SetConfig+0xa8>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	051b      	lsls	r3, r3, #20
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <TIM_OC6_SetConfig+0xac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <TIM_OC6_SetConfig+0x68>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <TIM_OC6_SetConfig+0xb0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <TIM_OC6_SetConfig+0x68>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <TIM_OC6_SetConfig+0xb4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d109      	bne.n	8002cf0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <TIM_OC6_SetConfig+0xb8>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	029b      	lsls	r3, r3, #10
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b006      	add	sp, #24
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	ffefffff 	.word	0xffefffff
 8002d18:	feff8fff 	.word	0xfeff8fff
 8002d1c:	ffdfffff 	.word	0xffdfffff
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40014400 	.word	0x40014400
 8002d28:	40014800 	.word	0x40014800
 8002d2c:	fffbffff 	.word	0xfffbffff

08002d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	2201      	movs	r2, #1
 8002d48:	4393      	bics	r3, r2
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	22f0      	movs	r2, #240	; 0xf0
 8002d5a:	4393      	bics	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	220a      	movs	r2, #10
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	621a      	str	r2, [r3, #32]
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b006      	add	sp, #24
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	2210      	movs	r2, #16
 8002da4:	4393      	bics	r3, r2
 8002da6:	001a      	movs	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <TIM_TI2_ConfigInputStage+0x60>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	031b      	lsls	r3, r3, #12
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	22a0      	movs	r2, #160	; 0xa0
 8002dc8:	4393      	bics	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b006      	add	sp, #24
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	ffff0fff 	.word	0xffff0fff

08002df0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <TIM_ITRx_SetConfig+0x34>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	2207      	movs	r2, #7
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	609a      	str	r2, [r3, #8]
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b004      	add	sp, #16
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	ffcfff8f 	.word	0xffcfff8f

08002e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <TIM_ETR_SetConfig+0x3c>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	021a      	lsls	r2, r3, #8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b006      	add	sp, #24
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	ffff00ff 	.word	0xffff00ff

08002e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	221f      	movs	r2, #31
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	0013      	movs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	43d2      	mvns	r2, r2
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	211f      	movs	r1, #31
 8002e98:	400b      	ands	r3, r1
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4099      	lsls	r1, r3
 8002e9e:	000b      	movs	r3, r1
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	621a      	str	r2, [r3, #32]
}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b006      	add	sp, #24
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	223c      	movs	r2, #60	; 0x3c
 8002ebe:	5c9b      	ldrb	r3, [r3, r2]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e04a      	b.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	223c      	movs	r2, #60	; 0x3c
 8002ecc:	2101      	movs	r1, #1
 8002ece:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	223d      	movs	r2, #61	; 0x3d
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2270      	movs	r2, #112	; 0x70
 8002f08:	4393      	bics	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d004      	beq.n	8002f32 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d10c      	bne.n	8002f4c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	4393      	bics	r3, r2
 8002f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	223d      	movs	r2, #61	; 0x3d
 8002f50:	2101      	movs	r1, #1
 8002f52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	223c      	movs	r2, #60	; 0x3c
 8002f58:	2100      	movs	r1, #0
 8002f5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	0018      	movs	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b004      	add	sp, #16
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	ff0fffff 	.word	0xff0fffff
 8002f70:	40000400 	.word	0x40000400

08002f74 <__libc_init_array>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	2600      	movs	r6, #0
 8002f78:	4d0c      	ldr	r5, [pc, #48]	; (8002fac <__libc_init_array+0x38>)
 8002f7a:	4c0d      	ldr	r4, [pc, #52]	; (8002fb0 <__libc_init_array+0x3c>)
 8002f7c:	1b64      	subs	r4, r4, r5
 8002f7e:	10a4      	asrs	r4, r4, #2
 8002f80:	42a6      	cmp	r6, r4
 8002f82:	d109      	bne.n	8002f98 <__libc_init_array+0x24>
 8002f84:	2600      	movs	r6, #0
 8002f86:	f000 f821 	bl	8002fcc <_init>
 8002f8a:	4d0a      	ldr	r5, [pc, #40]	; (8002fb4 <__libc_init_array+0x40>)
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	; (8002fb8 <__libc_init_array+0x44>)
 8002f8e:	1b64      	subs	r4, r4, r5
 8002f90:	10a4      	asrs	r4, r4, #2
 8002f92:	42a6      	cmp	r6, r4
 8002f94:	d105      	bne.n	8002fa2 <__libc_init_array+0x2e>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	00b3      	lsls	r3, r6, #2
 8002f9a:	58eb      	ldr	r3, [r5, r3]
 8002f9c:	4798      	blx	r3
 8002f9e:	3601      	adds	r6, #1
 8002fa0:	e7ee      	b.n	8002f80 <__libc_init_array+0xc>
 8002fa2:	00b3      	lsls	r3, r6, #2
 8002fa4:	58eb      	ldr	r3, [r5, r3]
 8002fa6:	4798      	blx	r3
 8002fa8:	3601      	adds	r6, #1
 8002faa:	e7f2      	b.n	8002f92 <__libc_init_array+0x1e>
 8002fac:	08003078 	.word	0x08003078
 8002fb0:	08003078 	.word	0x08003078
 8002fb4:	08003078 	.word	0x08003078
 8002fb8:	0800307c 	.word	0x0800307c

08002fbc <memset>:
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	1882      	adds	r2, r0, r2
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d100      	bne.n	8002fc6 <memset+0xa>
 8002fc4:	4770      	bx	lr
 8002fc6:	7019      	strb	r1, [r3, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	e7f9      	b.n	8002fc0 <memset+0x4>

08002fcc <_init>:
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd2:	bc08      	pop	{r3}
 8002fd4:	469e      	mov	lr, r3
 8002fd6:	4770      	bx	lr

08002fd8 <_fini>:
 8002fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fde:	bc08      	pop	{r3}
 8002fe0:	469e      	mov	lr, r3
 8002fe2:	4770      	bx	lr
