
G030K6T6-MD-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035ac  080035ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035ac  080035ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035ac  080035ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  080035c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080035c0  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd96  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f23  00000000  00000000  0002fdca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00031cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00032a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b16  00000000  00000000  00033708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcd8  00000000  00000000  0004821e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008635e  00000000  00000000  00057ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de254  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003094  00000000  00000000  000de2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080034b8 	.word	0x080034b8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080034b8 	.word	0x080034b8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fbea 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f80b 	bl	800040e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f9c0 	bl	800077c <MX_GPIO_Init>
  MX_TIM3_Init();
 80003fc:	f000 f850 	bl	80004a0 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000400:	f000 f8b2 	bl	8000568 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000404:	f000 f938 	bl	8000678 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000408:	f000 f984 	bl	8000714 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800040c:	e7fe      	b.n	800040c <main+0x20>

0800040e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040e:	b590      	push	{r4, r7, lr}
 8000410:	b093      	sub	sp, #76	; 0x4c
 8000412:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000414:	2414      	movs	r4, #20
 8000416:	193b      	adds	r3, r7, r4
 8000418:	0018      	movs	r0, r3
 800041a:	2334      	movs	r3, #52	; 0x34
 800041c:	001a      	movs	r2, r3
 800041e:	2100      	movs	r1, #0
 8000420:	f003 f842 	bl	80034a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	0018      	movs	r0, r3
 8000428:	2310      	movs	r3, #16
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f003 f83b 	bl	80034a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000432:	2380      	movs	r3, #128	; 0x80
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fe64 	bl	8001104 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800043c:	193b      	adds	r3, r7, r4
 800043e:	2202      	movs	r2, #2
 8000440:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800044a:	193b      	adds	r3, r7, r4
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000450:	193b      	adds	r3, r7, r4
 8000452:	2240      	movs	r2, #64	; 0x40
 8000454:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000456:	193b      	adds	r3, r7, r4
 8000458:	2200      	movs	r2, #0
 800045a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fe9c 	bl	800119c <HAL_RCC_OscConfig>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000468:	f000 f9b6 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2207      	movs	r2, #7
 8000470:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2200      	movs	r2, #0
 8000482:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2100      	movs	r1, #0
 8000488:	0018      	movs	r0, r3
 800048a:	f001 f997 	bl	80017bc <HAL_RCC_ClockConfig>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000492:	f000 f9a1 	bl	80007d8 <Error_Handler>
  }
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b013      	add	sp, #76	; 0x4c
 800049c:	bd90      	pop	{r4, r7, pc}
	...

080004a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b08d      	sub	sp, #52	; 0x34
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004a6:	240c      	movs	r4, #12
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	0018      	movs	r0, r3
 80004ac:	2324      	movs	r3, #36	; 0x24
 80004ae:	001a      	movs	r2, r3
 80004b0:	2100      	movs	r1, #0
 80004b2:	f002 fff9 	bl	80034a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b6:	003b      	movs	r3, r7
 80004b8:	0018      	movs	r0, r3
 80004ba:	230c      	movs	r3, #12
 80004bc:	001a      	movs	r2, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	f002 fff2 	bl	80034a8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004c4:	4b25      	ldr	r3, [pc, #148]	; (800055c <MX_TIM3_Init+0xbc>)
 80004c6:	4a26      	ldr	r2, [pc, #152]	; (8000560 <MX_TIM3_Init+0xc0>)
 80004c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004ca:	4b24      	ldr	r3, [pc, #144]	; (800055c <MX_TIM3_Init+0xbc>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d0:	4b22      	ldr	r3, [pc, #136]	; (800055c <MX_TIM3_Init+0xbc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004d6:	4b21      	ldr	r3, [pc, #132]	; (800055c <MX_TIM3_Init+0xbc>)
 80004d8:	4a22      	ldr	r2, [pc, #136]	; (8000564 <MX_TIM3_Init+0xc4>)
 80004da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <MX_TIM3_Init+0xbc>)
 80004de:	2200      	movs	r2, #0
 80004e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <MX_TIM3_Init+0xbc>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004e8:	0021      	movs	r1, r4
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2201      	movs	r2, #1
 80004ee:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2201      	movs	r2, #1
 80004fa:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2201      	movs	r2, #1
 8000512:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000520:	187a      	adds	r2, r7, r1
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_TIM3_Init+0xbc>)
 8000524:	0011      	movs	r1, r2
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fcd0 	bl	8001ecc <HAL_TIM_Encoder_Init>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000530:	f000 f952 	bl	80007d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000534:	003b      	movs	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053a:	003b      	movs	r3, r7
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000540:	003a      	movs	r2, r7
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_TIM3_Init+0xbc>)
 8000544:	0011      	movs	r1, r2
 8000546:	0018      	movs	r0, r3
 8000548:	f002 f97e 	bl	8002848 <HAL_TIMEx_MasterConfigSynchronization>
 800054c:	1e03      	subs	r3, r0, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000550:	f000 f942 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b00d      	add	sp, #52	; 0x34
 800055a:	bd90      	pop	{r4, r7, pc}
 800055c:	20000028 	.word	0x20000028
 8000560:	40000400 	.word	0x40000400
 8000564:	0000ffff 	.word	0x0000ffff

08000568 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800056e:	2334      	movs	r3, #52	; 0x34
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	0018      	movs	r0, r3
 8000574:	231c      	movs	r3, #28
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f002 ff95 	bl	80034a8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800057e:	003b      	movs	r3, r7
 8000580:	0018      	movs	r0, r3
 8000582:	2334      	movs	r3, #52	; 0x34
 8000584:	001a      	movs	r2, r3
 8000586:	2100      	movs	r1, #0
 8000588:	f002 ff8e 	bl	80034a8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800058c:	4b37      	ldr	r3, [pc, #220]	; (800066c <MX_TIM16_Init+0x104>)
 800058e:	4a38      	ldr	r2, [pc, #224]	; (8000670 <MX_TIM16_Init+0x108>)
 8000590:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000592:	4b36      	ldr	r3, [pc, #216]	; (800066c <MX_TIM16_Init+0x104>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000598:	4b34      	ldr	r3, [pc, #208]	; (800066c <MX_TIM16_Init+0x104>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800059e:	4b33      	ldr	r3, [pc, #204]	; (800066c <MX_TIM16_Init+0x104>)
 80005a0:	4a34      	ldr	r2, [pc, #208]	; (8000674 <MX_TIM16_Init+0x10c>)
 80005a2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a4:	4b31      	ldr	r3, [pc, #196]	; (800066c <MX_TIM16_Init+0x104>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80005aa:	4b30      	ldr	r3, [pc, #192]	; (800066c <MX_TIM16_Init+0x104>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b0:	4b2e      	ldr	r3, [pc, #184]	; (800066c <MX_TIM16_Init+0x104>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80005b6:	4b2d      	ldr	r3, [pc, #180]	; (800066c <MX_TIM16_Init+0x104>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fbcf 	bl	8001d5c <HAL_TIM_Base_Init>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80005c2:	f000 f909 	bl	80007d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <MX_TIM16_Init+0x104>)
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fc1f 	bl	8001e0c <HAL_TIM_PWM_Init>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80005d2:	f000 f901 	bl	80007d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d6:	2134      	movs	r1, #52	; 0x34
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2260      	movs	r2, #96	; 0x60
 80005dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000602:	1879      	adds	r1, r7, r1
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_TIM16_Init+0x104>)
 8000606:	2200      	movs	r2, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fd07 	bl	800201c <HAL_TIM_PWM_ConfigChannel>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000612:	f000 f8e1 	bl	80007d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000616:	003b      	movs	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800061c:	003b      	movs	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000622:	003b      	movs	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000628:	003b      	movs	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800062e:	003b      	movs	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000634:	003b      	movs	r3, r7
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	0192      	lsls	r2, r2, #6
 800063a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800063c:	003b      	movs	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000642:	003b      	movs	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000648:	003a      	movs	r2, r7
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_TIM16_Init+0x104>)
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f002 f95c 	bl	800290c <HAL_TIMEx_ConfigBreakDeadTime>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000658:	f000 f8be 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <MX_TIM16_Init+0x104>)
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f970 	bl	8000944 <HAL_TIM_MspPostInit>

}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b014      	add	sp, #80	; 0x50
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000074 	.word	0x20000074
 8000670:	40014400 	.word	0x40014400
 8000674:	0000ffff 	.word	0x0000ffff

08000678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <MX_USART1_UART_Init+0x94>)
 800067e:	4a24      	ldr	r2, [pc, #144]	; (8000710 <MX_USART1_UART_Init+0x98>)
 8000680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000682:	4b22      	ldr	r3, [pc, #136]	; (800070c <MX_USART1_UART_Init+0x94>)
 8000684:	22e1      	movs	r2, #225	; 0xe1
 8000686:	0252      	lsls	r2, r2, #9
 8000688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <MX_USART1_UART_Init+0x94>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_USART1_UART_Init+0x94>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_USART1_UART_Init+0x94>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_USART1_UART_Init+0x94>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_USART1_UART_Init+0x94>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_USART1_UART_Init+0x94>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_USART1_UART_Init+0x94>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_USART1_UART_Init+0x94>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_USART1_UART_Init+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_USART1_UART_Init+0x94>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f002 f9be 	bl	8002a44 <HAL_UART_Init>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006cc:	f000 f884 	bl	80007d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART1_UART_Init+0x94>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 fde3 	bl	80032a0 <HAL_UARTEx_SetTxFifoThreshold>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006de:	f000 f87b 	bl	80007d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_USART1_UART_Init+0x94>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 fe1a 	bl	8003320 <HAL_UARTEx_SetRxFifoThreshold>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006f0:	f000 f872 	bl	80007d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <MX_USART1_UART_Init+0x94>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 fd98 	bl	800322c <HAL_UARTEx_DisableFifoMode>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000700:	f000 f86a 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	200000c0 	.word	0x200000c0
 8000710:	40013800 	.word	0x40013800

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <MX_USART2_UART_Init+0x64>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000720:	22e1      	movs	r2, #225	; 0xe1
 8000722:	0252      	lsls	r2, r2, #9
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800075e:	0018      	movs	r0, r3
 8000760:	f002 f970 	bl	8002a44 <HAL_UART_Init>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000768:	f000 f836 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	20000154 	.word	0x20000154
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_GPIO_Init+0x58>)
 8000784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_GPIO_Init+0x58>)
 8000788:	2104      	movs	r1, #4
 800078a:	430a      	orrs	r2, r1
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_GPIO_Init+0x58>)
 8000790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000792:	2204      	movs	r2, #4
 8000794:	4013      	ands	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_GPIO_Init+0x58>)
 800079c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_GPIO_Init+0x58>)
 80007a0:	2101      	movs	r1, #1
 80007a2:	430a      	orrs	r2, r1
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_GPIO_Init+0x58>)
 80007a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007aa:	2201      	movs	r2, #1
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_GPIO_Init+0x58>)
 80007b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_GPIO_Init+0x58>)
 80007b8:	2102      	movs	r1, #2
 80007ba:	430a      	orrs	r2, r1
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <MX_GPIO_Init+0x58>)
 80007c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c2:	2202      	movs	r2, #2
 80007c4:	4013      	ands	r3, r2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b004      	add	sp, #16
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40021000 	.word	0x40021000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x44>)
 80007ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_MspInit+0x44>)
 80007f0:	2101      	movs	r1, #1
 80007f2:	430a      	orrs	r2, r1
 80007f4:	641a      	str	r2, [r3, #64]	; 0x40
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x44>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	2201      	movs	r2, #1
 80007fc:	4013      	ands	r3, r2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x44>)
 8000804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_MspInit+0x44>)
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	0549      	lsls	r1, r1, #21
 800080c:	430a      	orrs	r2, r1
 800080e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_MspInit+0x44>)
 8000812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	055b      	lsls	r3, r3, #21
 8000818:	4013      	ands	r3, r2
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b08b      	sub	sp, #44	; 0x2c
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	2414      	movs	r4, #20
 8000836:	193b      	adds	r3, r7, r4
 8000838:	0018      	movs	r0, r3
 800083a:	2314      	movs	r3, #20
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f002 fe32 	bl	80034a8 <memset>
  if(htim_encoder->Instance==TIM3)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a2b      	ldr	r2, [pc, #172]	; (80008f8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d14f      	bne.n	80008ee <HAL_TIM_Encoder_MspInit+0xc2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <HAL_TIM_Encoder_MspInit+0xd0>)
 8000850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <HAL_TIM_Encoder_MspInit+0xd0>)
 8000854:	2102      	movs	r1, #2
 8000856:	430a      	orrs	r2, r1
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <HAL_TIM_Encoder_MspInit+0xd0>)
 800085c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800085e:	2202      	movs	r2, #2
 8000860:	4013      	ands	r3, r2
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <HAL_TIM_Encoder_MspInit+0xd0>)
 8000868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <HAL_TIM_Encoder_MspInit+0xd0>)
 800086c:	2101      	movs	r1, #1
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <HAL_TIM_Encoder_MspInit+0xd0>)
 8000874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000876:	2201      	movs	r2, #1
 8000878:	4013      	ands	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <HAL_TIM_Encoder_MspInit+0xd0>)
 8000880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <HAL_TIM_Encoder_MspInit+0xd0>)
 8000884:	2104      	movs	r1, #4
 8000886:	430a      	orrs	r2, r1
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <HAL_TIM_Encoder_MspInit+0xd0>)
 800088c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088e:	2204      	movs	r2, #4
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2202      	movs	r2, #2
 80008a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2201      	movs	r2, #1
 80008b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	193a      	adds	r2, r7, r4
 80008b6:	23a0      	movs	r3, #160	; 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	0011      	movs	r1, r2
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fabd 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c2:	0021      	movs	r1, r4
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2202      	movs	r2, #2
 80008ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2201      	movs	r2, #1
 80008e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_TIM_Encoder_MspInit+0xd4>)
 80008e6:	0019      	movs	r1, r3
 80008e8:	0010      	movs	r0, r2
 80008ea:	f000 faa7 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b00b      	add	sp, #44	; 0x2c
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40000400 	.word	0x40000400
 80008fc:	40021000 	.word	0x40021000
 8000900:	50000800 	.word	0x50000800

08000904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_TIM_Base_MspInit+0x38>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d10d      	bne.n	8000932 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 8000918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	0289      	lsls	r1, r1, #10
 8000920:	430a      	orrs	r2, r1
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 8000926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	029b      	lsls	r3, r3, #10
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b004      	add	sp, #16
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40014400 	.word	0x40014400
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b08b      	sub	sp, #44	; 0x2c
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	2414      	movs	r4, #20
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	2314      	movs	r3, #20
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f002 fda6 	bl	80034a8 <memset>
  if(htim->Instance==TIM16)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a25      	ldr	r2, [pc, #148]	; (80009f8 <HAL_TIM_MspPostInit+0xb4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d143      	bne.n	80009ee <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <HAL_TIM_MspPostInit+0xb8>)
 8000968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <HAL_TIM_MspPostInit+0xb8>)
 800096c:	2101      	movs	r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	635a      	str	r2, [r3, #52]	; 0x34
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <HAL_TIM_MspPostInit+0xb8>)
 8000974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000976:	2201      	movs	r2, #1
 8000978:	4013      	ands	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <HAL_TIM_MspPostInit+0xb8>)
 8000980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_TIM_MspPostInit+0xb8>)
 8000984:	2102      	movs	r1, #2
 8000986:	430a      	orrs	r2, r1
 8000988:	635a      	str	r2, [r3, #52]	; 0x34
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_TIM_MspPostInit+0xb8>)
 800098c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098e:	2202      	movs	r2, #2
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2240      	movs	r2, #64	; 0x40
 800099a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2202      	movs	r2, #2
 80009a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2205      	movs	r2, #5
 80009b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	193a      	adds	r2, r7, r4
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 fa3d 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009c2:	0021      	movs	r1, r4
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2202      	movs	r2, #2
 80009ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2202      	movs	r2, #2
 80009e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_TIM_MspPostInit+0xbc>)
 80009e6:	0019      	movs	r1, r3
 80009e8:	0010      	movs	r0, r2
 80009ea:	f000 fa27 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b00b      	add	sp, #44	; 0x2c
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40014400 	.word	0x40014400
 80009fc:	40021000 	.word	0x40021000
 8000a00:	50000400 	.word	0x50000400

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b093      	sub	sp, #76	; 0x4c
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	2334      	movs	r3, #52	; 0x34
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	0018      	movs	r0, r3
 8000a12:	2314      	movs	r3, #20
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f002 fd46 	bl	80034a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	241c      	movs	r4, #28
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	0018      	movs	r0, r3
 8000a22:	2318      	movs	r3, #24
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f002 fd3e 	bl	80034a8 <memset>
  if(huart->Instance==USART1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a3e      	ldr	r2, [pc, #248]	; (8000b2c <HAL_UART_MspInit+0x128>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d140      	bne.n	8000ab8 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 f863 	bl	8001b10 <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a4e:	f7ff fec3 	bl	80007d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a56:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	01c9      	lsls	r1, r1, #7
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a60:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	01db      	lsls	r3, r3, #7
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a86:	2134      	movs	r1, #52	; 0x34
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	22c0      	movs	r2, #192	; 0xc0
 8000a8c:	00d2      	lsls	r2, r2, #3
 8000a8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2202      	movs	r2, #2
 8000a94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	187a      	adds	r2, r7, r1
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f000 f9c3 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab6:	e035      	b.n	8000b24 <HAL_UART_MspInit+0x120>
  else if(huart->Instance==USART2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <HAL_UART_MspInit+0x130>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d130      	bne.n	8000b24 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0289      	lsls	r1, r1, #10
 8000acc:	430a      	orrs	r2, r1
 8000ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	029b      	lsls	r3, r3, #10
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	635a      	str	r2, [r3, #52]	; 0x34
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_UART_MspInit+0x12c>)
 8000aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aee:	2201      	movs	r2, #1
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000af6:	2134      	movs	r1, #52	; 0x34
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <HAL_UART_MspInit+0x134>)
 8000afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2202      	movs	r2, #2
 8000b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2201      	movs	r2, #1
 8000b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	187a      	adds	r2, r7, r1
 8000b18:	23a0      	movs	r3, #160	; 0xa0
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 f98c 	bl	8000e3c <HAL_GPIO_Init>
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b013      	add	sp, #76	; 0x4c
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	40013800 	.word	0x40013800
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40004400 	.word	0x40004400
 8000b38:	00008004 	.word	0x00008004

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f89c 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b78:	f7ff fff7 	bl	8000b6a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7e:	490d      	ldr	r1, [pc, #52]	; (8000bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <LoopForever+0xe>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b94:	4c0a      	ldr	r4, [pc, #40]	; (8000bc0 <LoopForever+0x16>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ba2:	f002 fc5d 	bl	8003460 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ba6:	f7ff fc21 	bl	80003ec <main>

08000baa <LoopForever>:

LoopForever:
  b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   r0, =_estack
 8000bac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb8:	080035b4 	.word	0x080035b4
  ldr r2, =_sbss
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc0:	200001ec 	.word	0x200001ec

08000bc4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_Init+0x3c>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_Init+0x3c>)
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	0049      	lsls	r1, r1, #1
 8000bde:	430a      	orrs	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be2:	2003      	movs	r0, #3
 8000be4:	f000 f810 	bl	8000c08 <HAL_InitTick>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	e001      	b.n	8000bf8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fdf6 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <HAL_InitTick+0x88>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d02b      	beq.n	8000c78 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <HAL_InitTick+0x8c>)
 8000c22:	681c      	ldr	r4, [r3, #0]
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <HAL_InitTick+0x88>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	0019      	movs	r1, r3
 8000c2a:	23fa      	movs	r3, #250	; 0xfa
 8000c2c:	0098      	lsls	r0, r3, #2
 8000c2e:	f7ff fa67 	bl	8000100 <__udivsi3>
 8000c32:	0003      	movs	r3, r0
 8000c34:	0019      	movs	r1, r3
 8000c36:	0020      	movs	r0, r4
 8000c38:	f7ff fa62 	bl	8000100 <__udivsi3>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 f8ef 	bl	8000e22 <HAL_SYSTICK_Config>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d112      	bne.n	8000c6e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d80a      	bhi.n	8000c64 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	2301      	movs	r3, #1
 8000c52:	425b      	negs	r3, r3
 8000c54:	2200      	movs	r2, #0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 f8ce 	bl	8000df8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_InitTick+0x90>)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	e00d      	b.n	8000c80 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e008      	b.n	8000c80 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6e:	230f      	movs	r3, #15
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e003      	b.n	8000c80 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c80:	230f      	movs	r3, #15
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	781b      	ldrb	r3, [r3, #0]
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b005      	add	sp, #20
 8000c8c:	bd90      	pop	{r4, r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_IncTick+0x1c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	18d2      	adds	r2, r2, r3
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_IncTick+0x20>)
 8000cae:	601a      	str	r2, [r3, #0]
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	200001e8 	.word	0x200001e8

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b02      	ldr	r3, [pc, #8]	; (8000cd0 <HAL_GetTick+0x10>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	200001e8 	.word	0x200001e8

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	0002      	movs	r2, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ce8:	d828      	bhi.n	8000d3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cea:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <__NVIC_SetPriority+0xd4>)
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	33c0      	adds	r3, #192	; 0xc0
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	589b      	ldr	r3, [r3, r2]
 8000cfa:	1dfa      	adds	r2, r7, #7
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	0011      	movs	r1, r2
 8000d00:	2203      	movs	r2, #3
 8000d02:	400a      	ands	r2, r1
 8000d04:	00d2      	lsls	r2, r2, #3
 8000d06:	21ff      	movs	r1, #255	; 0xff
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	000a      	movs	r2, r1
 8000d0c:	43d2      	mvns	r2, r2
 8000d0e:	401a      	ands	r2, r3
 8000d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	019b      	lsls	r3, r3, #6
 8000d16:	22ff      	movs	r2, #255	; 0xff
 8000d18:	401a      	ands	r2, r3
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	2303      	movs	r3, #3
 8000d22:	4003      	ands	r3, r0
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d28:	481f      	ldr	r0, [pc, #124]	; (8000da8 <__NVIC_SetPriority+0xd4>)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	430a      	orrs	r2, r1
 8000d34:	33c0      	adds	r3, #192	; 0xc0
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d3a:	e031      	b.n	8000da0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d3c:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <__NVIC_SetPriority+0xd8>)
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	0019      	movs	r1, r3
 8000d44:	230f      	movs	r3, #15
 8000d46:	400b      	ands	r3, r1
 8000d48:	3b08      	subs	r3, #8
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3306      	adds	r3, #6
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	18d3      	adds	r3, r2, r3
 8000d52:	3304      	adds	r3, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	1dfa      	adds	r2, r7, #7
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	400a      	ands	r2, r1
 8000d60:	00d2      	lsls	r2, r2, #3
 8000d62:	21ff      	movs	r1, #255	; 0xff
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	019b      	lsls	r3, r3, #6
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	401a      	ands	r2, r3
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	4003      	ands	r3, r0
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <__NVIC_SetPriority+0xd8>)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	001c      	movs	r4, r3
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	4023      	ands	r3, r4
 8000d90:	3b08      	subs	r3, #8
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	430a      	orrs	r2, r1
 8000d96:	3306      	adds	r3, #6
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	18c3      	adds	r3, r0, r3
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	601a      	str	r2, [r3, #0]
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b003      	add	sp, #12
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	1e5a      	subs	r2, r3, #1
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	045b      	lsls	r3, r3, #17
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d301      	bcc.n	8000dc8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e010      	b.n	8000dea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <SysTick_Config+0x44>)
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff ff7c 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x44>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x44>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	0018      	movs	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	210f      	movs	r1, #15
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	1c02      	adds	r2, r0, #0
 8000e08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff ff5d 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b004      	add	sp, #16
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff ffbf 	bl	8000db0 <SysTick_Config>
 8000e32:	0003      	movs	r3, r0
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4a:	e147      	b.n	80010dc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4091      	lsls	r1, r2
 8000e56:	000a      	movs	r2, r1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d100      	bne.n	8000e64 <HAL_GPIO_Init+0x28>
 8000e62:	e138      	b.n	80010d6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2203      	movs	r2, #3
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d005      	beq.n	8000e7c <HAL_GPIO_Init+0x40>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2203      	movs	r2, #3
 8000e76:	4013      	ands	r3, r2
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d130      	bne.n	8000ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	409a      	lsls	r2, r3
 8000e8a:	0013      	movs	r3, r2
 8000e8c:	43da      	mvns	r2, r3
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	409a      	lsls	r2, r3
 8000e9e:	0013      	movs	r3, r2
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	2201      	movs	r2, #1
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d017      	beq.n	8000f1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	4013      	ands	r3, r2
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d123      	bne.n	8000f6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	58d3      	ldr	r3, [r2, r3]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	2207      	movs	r2, #7
 8000f38:	4013      	ands	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2107      	movs	r1, #7
 8000f52:	400b      	ands	r3, r1
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	6939      	ldr	r1, [r7, #16]
 8000f6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	23c0      	movs	r3, #192	; 0xc0
 8000fa8:	029b      	lsls	r3, r3, #10
 8000faa:	4013      	ands	r3, r2
 8000fac:	d100      	bne.n	8000fb0 <HAL_GPIO_Init+0x174>
 8000fae:	e092      	b.n	80010d6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000fb0:	4a50      	ldr	r2, [pc, #320]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3318      	adds	r3, #24
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	589b      	ldr	r3, [r3, r2]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	0013      	movs	r3, r2
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	23a0      	movs	r3, #160	; 0xa0
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d013      	beq.n	8001006 <HAL_GPIO_Init+0x1ca>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a45      	ldr	r2, [pc, #276]	; (80010f8 <HAL_GPIO_Init+0x2bc>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00d      	beq.n	8001002 <HAL_GPIO_Init+0x1c6>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a44      	ldr	r2, [pc, #272]	; (80010fc <HAL_GPIO_Init+0x2c0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d007      	beq.n	8000ffe <HAL_GPIO_Init+0x1c2>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a43      	ldr	r2, [pc, #268]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_GPIO_Init+0x1be>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x1cc>
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	e004      	b.n	8001008 <HAL_GPIO_Init+0x1cc>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e002      	b.n	8001008 <HAL_GPIO_Init+0x1cc>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_GPIO_Init+0x1cc>
 8001006:	2300      	movs	r3, #0
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	2103      	movs	r1, #3
 800100c:	400a      	ands	r2, r1
 800100e:	00d2      	lsls	r2, r2, #3
 8001010:	4093      	lsls	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001018:	4936      	ldr	r1, [pc, #216]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3318      	adds	r3, #24
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	035b      	lsls	r3, r3, #13
 800103e:	4013      	ands	r3, r2
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43da      	mvns	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	039b      	lsls	r3, r3, #14
 8001068:	4013      	ands	r3, r2
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800107a:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 800107c:	2384      	movs	r3, #132	; 0x84
 800107e:	58d3      	ldr	r3, [r2, r3]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43da      	mvns	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	029b      	lsls	r3, r3, #10
 8001094:	4013      	ands	r3, r2
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a0:	4914      	ldr	r1, [pc, #80]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 80010a2:	2284      	movs	r2, #132	; 0x84
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	58d3      	ldr	r3, [r2, r3]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	4013      	ands	r3, r2
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ce:	4909      	ldr	r1, [pc, #36]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	40da      	lsrs	r2, r3
 80010e4:	1e13      	subs	r3, r2, #0
 80010e6:	d000      	beq.n	80010ea <HAL_GPIO_Init+0x2ae>
 80010e8:	e6b0      	b.n	8000e4c <HAL_GPIO_Init+0x10>
  }
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b006      	add	sp, #24
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021800 	.word	0x40021800
 80010f8:	50000400 	.word	0x50000400
 80010fc:	50000800 	.word	0x50000800
 8001100:	50000c00 	.word	0x50000c00

08001104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001112:	4013      	ands	r3, r2
 8001114:	0019      	movs	r1, r3
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	429a      	cmp	r2, r3
 8001126:	d11f      	bne.n	8001168 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	0013      	movs	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	189b      	adds	r3, r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4912      	ldr	r1, [pc, #72]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001136:	0018      	movs	r0, r3
 8001138:	f7fe ffe2 	bl	8000100 <__udivsi3>
 800113c:	0003      	movs	r3, r0
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001142:	e008      	b.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3b01      	subs	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e001      	b.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e009      	b.n	800116a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	401a      	ands	r2, r3
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	429a      	cmp	r2, r3
 8001166:	d0ed      	beq.n	8001144 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	40007000 	.word	0x40007000
 8001178:	fffff9ff 	.word	0xfffff9ff
 800117c:	20000000 	.word	0x20000000
 8001180:	000f4240 	.word	0x000f4240

08001184 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <LL_RCC_GetAPB1Prescaler+0x14>)
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	23e0      	movs	r3, #224	; 0xe0
 800118e:	01db      	lsls	r3, r3, #7
 8001190:	4013      	ands	r3, r2
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e2f3      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2201      	movs	r2, #1
 80011b4:	4013      	ands	r3, r2
 80011b6:	d100      	bne.n	80011ba <HAL_RCC_OscConfig+0x1e>
 80011b8:	e07c      	b.n	80012b4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ba:	4bc3      	ldr	r3, [pc, #780]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2238      	movs	r2, #56	; 0x38
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011c4:	4bc0      	ldr	r3, [pc, #768]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2203      	movs	r2, #3
 80011ca:	4013      	ands	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b10      	cmp	r3, #16
 80011d2:	d102      	bne.n	80011da <HAL_RCC_OscConfig+0x3e>
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d002      	beq.n	80011e0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d10b      	bne.n	80011f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	4bb9      	ldr	r3, [pc, #740]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	029b      	lsls	r3, r3, #10
 80011e8:	4013      	ands	r3, r2
 80011ea:	d062      	beq.n	80012b2 <HAL_RCC_OscConfig+0x116>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d15e      	bne.n	80012b2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e2ce      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	025b      	lsls	r3, r3, #9
 8001200:	429a      	cmp	r2, r3
 8001202:	d107      	bne.n	8001214 <HAL_RCC_OscConfig+0x78>
 8001204:	4bb0      	ldr	r3, [pc, #704]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4baf      	ldr	r3, [pc, #700]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	0249      	lsls	r1, r1, #9
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	e020      	b.n	8001256 <HAL_RCC_OscConfig+0xba>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	23a0      	movs	r3, #160	; 0xa0
 800121a:	02db      	lsls	r3, r3, #11
 800121c:	429a      	cmp	r2, r3
 800121e:	d10e      	bne.n	800123e <HAL_RCC_OscConfig+0xa2>
 8001220:	4ba9      	ldr	r3, [pc, #676]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4ba8      	ldr	r3, [pc, #672]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	02c9      	lsls	r1, r1, #11
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	4ba6      	ldr	r3, [pc, #664]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4ba5      	ldr	r3, [pc, #660]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001234:	2180      	movs	r1, #128	; 0x80
 8001236:	0249      	lsls	r1, r1, #9
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e00b      	b.n	8001256 <HAL_RCC_OscConfig+0xba>
 800123e:	4ba2      	ldr	r3, [pc, #648]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4ba1      	ldr	r3, [pc, #644]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001244:	49a1      	ldr	r1, [pc, #644]	; (80014cc <HAL_RCC_OscConfig+0x330>)
 8001246:	400a      	ands	r2, r1
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	4b9f      	ldr	r3, [pc, #636]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b9e      	ldr	r3, [pc, #632]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001250:	499f      	ldr	r1, [pc, #636]	; (80014d0 <HAL_RCC_OscConfig+0x334>)
 8001252:	400a      	ands	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d014      	beq.n	8001288 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fd2f 	bl	8000cc0 <HAL_GetTick>
 8001262:	0003      	movs	r3, r0
 8001264:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fd2a 	bl	8000cc0 <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e28d      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800127a:	4b93      	ldr	r3, [pc, #588]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	029b      	lsls	r3, r3, #10
 8001282:	4013      	ands	r3, r2
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0xcc>
 8001286:	e015      	b.n	80012b4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001288:	f7ff fd1a 	bl	8000cc0 <HAL_GetTick>
 800128c:	0003      	movs	r3, r0
 800128e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001292:	f7ff fd15 	bl	8000cc0 <HAL_GetTick>
 8001296:	0002      	movs	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b64      	cmp	r3, #100	; 0x64
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e278      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012a4:	4b88      	ldr	r3, [pc, #544]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	029b      	lsls	r3, r3, #10
 80012ac:	4013      	ands	r3, r2
 80012ae:	d1f0      	bne.n	8001292 <HAL_RCC_OscConfig+0xf6>
 80012b0:	e000      	b.n	80012b4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2202      	movs	r2, #2
 80012ba:	4013      	ands	r3, r2
 80012bc:	d100      	bne.n	80012c0 <HAL_RCC_OscConfig+0x124>
 80012be:	e099      	b.n	80013f4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c0:	4b81      	ldr	r3, [pc, #516]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2238      	movs	r2, #56	; 0x38
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ca:	4b7f      	ldr	r3, [pc, #508]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2203      	movs	r2, #3
 80012d0:	4013      	ands	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2b10      	cmp	r3, #16
 80012d8:	d102      	bne.n	80012e0 <HAL_RCC_OscConfig+0x144>
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d002      	beq.n	80012e6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d135      	bne.n	8001352 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e6:	4b78      	ldr	r3, [pc, #480]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4013      	ands	r3, r2
 80012f0:	d005      	beq.n	80012fe <HAL_RCC_OscConfig+0x162>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e24b      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	4b72      	ldr	r3, [pc, #456]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a74      	ldr	r2, [pc, #464]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 8001304:	4013      	ands	r3, r2
 8001306:	0019      	movs	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	021a      	lsls	r2, r3, #8
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001310:	430a      	orrs	r2, r1
 8001312:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d112      	bne.n	8001340 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800131a:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6e      	ldr	r2, [pc, #440]	; (80014d8 <HAL_RCC_OscConfig+0x33c>)
 8001320:	4013      	ands	r3, r2
 8001322:	0019      	movs	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	4b67      	ldr	r3, [pc, #412]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800132a:	430a      	orrs	r2, r1
 800132c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800132e:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	0adb      	lsrs	r3, r3, #11
 8001334:	2207      	movs	r2, #7
 8001336:	4013      	ands	r3, r2
 8001338:	4a68      	ldr	r2, [pc, #416]	; (80014dc <HAL_RCC_OscConfig+0x340>)
 800133a:	40da      	lsrs	r2, r3
 800133c:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <HAL_RCC_OscConfig+0x344>)
 800133e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001340:	4b68      	ldr	r3, [pc, #416]	; (80014e4 <HAL_RCC_OscConfig+0x348>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0018      	movs	r0, r3
 8001346:	f7ff fc5f 	bl	8000c08 <HAL_InitTick>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d051      	beq.n	80013f2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e221      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d030      	beq.n	80013bc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800135a:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a5e      	ldr	r2, [pc, #376]	; (80014d8 <HAL_RCC_OscConfig+0x33c>)
 8001360:	4013      	ands	r3, r2
 8001362:	0019      	movs	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800136a:	430a      	orrs	r2, r1
 800136c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800136e:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b55      	ldr	r3, [pc, #340]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	0049      	lsls	r1, r1, #1
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fca0 	bl	8000cc0 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fc9b 	bl	8000cc0 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1fe      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001398:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4013      	ands	r3, r2
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b48      	ldr	r3, [pc, #288]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a4a      	ldr	r2, [pc, #296]	; (80014d4 <HAL_RCC_OscConfig+0x338>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	0019      	movs	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	021a      	lsls	r2, r3, #8
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80013b6:	430a      	orrs	r2, r1
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	e01b      	b.n	80013f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80013c2:	4949      	ldr	r1, [pc, #292]	; (80014e8 <HAL_RCC_OscConfig+0x34c>)
 80013c4:	400a      	ands	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fc7a 	bl	8000cc0 <HAL_GetTick>
 80013cc:	0003      	movs	r3, r0
 80013ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc75 	bl	8000cc0 <HAL_GetTick>
 80013d6:	0002      	movs	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1d8      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e4:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4013      	ands	r3, r2
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x236>
 80013f0:	e000      	b.n	80013f4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2208      	movs	r2, #8
 80013fa:	4013      	ands	r3, r2
 80013fc:	d047      	beq.n	800148e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013fe:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2238      	movs	r2, #56	; 0x38
 8001404:	4013      	ands	r3, r2
 8001406:	2b18      	cmp	r3, #24
 8001408:	d10a      	bne.n	8001420 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800140a:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d03c      	beq.n	800148e <HAL_RCC_OscConfig+0x2f2>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d138      	bne.n	800148e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e1ba      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d019      	beq.n	800145c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800142a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800142e:	2101      	movs	r1, #1
 8001430:	430a      	orrs	r2, r1
 8001432:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fc44 	bl	8000cc0 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff fc3f 	bl	8000cc0 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e1a2      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001454:	2202      	movs	r2, #2
 8001456:	4013      	ands	r3, r2
 8001458:	d0f1      	beq.n	800143e <HAL_RCC_OscConfig+0x2a2>
 800145a:	e018      	b.n	800148e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 800145e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001462:	2101      	movs	r1, #1
 8001464:	438a      	bics	r2, r1
 8001466:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fc2a 	bl	8000cc0 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fc25 	bl	8000cc0 <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e188      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 8001486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001488:	2202      	movs	r2, #2
 800148a:	4013      	ands	r3, r2
 800148c:	d1f1      	bne.n	8001472 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2204      	movs	r2, #4
 8001494:	4013      	ands	r3, r2
 8001496:	d100      	bne.n	800149a <HAL_RCC_OscConfig+0x2fe>
 8001498:	e0c6      	b.n	8001628 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	231f      	movs	r3, #31
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2238      	movs	r2, #56	; 0x38
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b20      	cmp	r3, #32
 80014ac:	d11e      	bne.n	80014ec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_RCC_OscConfig+0x32c>)
 80014b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b2:	2202      	movs	r2, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	d100      	bne.n	80014ba <HAL_RCC_OscConfig+0x31e>
 80014b8:	e0b6      	b.n	8001628 <HAL_RCC_OscConfig+0x48c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d000      	beq.n	80014c4 <HAL_RCC_OscConfig+0x328>
 80014c2:	e0b1      	b.n	8001628 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e166      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
 80014c8:	40021000 	.word	0x40021000
 80014cc:	fffeffff 	.word	0xfffeffff
 80014d0:	fffbffff 	.word	0xfffbffff
 80014d4:	ffff80ff 	.word	0xffff80ff
 80014d8:	ffffc7ff 	.word	0xffffc7ff
 80014dc:	00f42400 	.word	0x00f42400
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000004 	.word	0x20000004
 80014e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014ec:	4bac      	ldr	r3, [pc, #688]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80014ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	055b      	lsls	r3, r3, #21
 80014f4:	4013      	ands	r3, r2
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_OscConfig+0x360>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x362>
 80014fc:	2300      	movs	r3, #0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d011      	beq.n	8001526 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4ba7      	ldr	r3, [pc, #668]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001506:	4ba6      	ldr	r3, [pc, #664]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0549      	lsls	r1, r1, #21
 800150c:	430a      	orrs	r2, r1
 800150e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001510:	4ba3      	ldr	r3, [pc, #652]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	055b      	lsls	r3, r3, #21
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800151e:	231f      	movs	r3, #31
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001526:	4b9f      	ldr	r3, [pc, #636]	; (80017a4 <HAL_RCC_OscConfig+0x608>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4013      	ands	r3, r2
 8001530:	d11a      	bne.n	8001568 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001532:	4b9c      	ldr	r3, [pc, #624]	; (80017a4 <HAL_RCC_OscConfig+0x608>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b9b      	ldr	r3, [pc, #620]	; (80017a4 <HAL_RCC_OscConfig+0x608>)
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0049      	lsls	r1, r1, #1
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001540:	f7ff fbbe 	bl	8000cc0 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff fbb9 	bl	8000cc0 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e11c      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155c:	4b91      	ldr	r3, [pc, #580]	; (80017a4 <HAL_RCC_OscConfig+0x608>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4013      	ands	r3, r2
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x3e2>
 8001570:	4b8b      	ldr	r3, [pc, #556]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001574:	4b8a      	ldr	r3, [pc, #552]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001576:	2101      	movs	r1, #1
 8001578:	430a      	orrs	r2, r1
 800157a:	65da      	str	r2, [r3, #92]	; 0x5c
 800157c:	e01c      	b.n	80015b8 <HAL_RCC_OscConfig+0x41c>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b05      	cmp	r3, #5
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x404>
 8001586:	4b86      	ldr	r3, [pc, #536]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001588:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800158a:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 800158c:	2104      	movs	r1, #4
 800158e:	430a      	orrs	r2, r1
 8001590:	65da      	str	r2, [r3, #92]	; 0x5c
 8001592:	4b83      	ldr	r3, [pc, #524]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001594:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001596:	4b82      	ldr	r3, [pc, #520]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001598:	2101      	movs	r1, #1
 800159a:	430a      	orrs	r2, r1
 800159c:	65da      	str	r2, [r3, #92]	; 0x5c
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0x41c>
 80015a0:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80015a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015a4:	4b7e      	ldr	r3, [pc, #504]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80015a6:	2101      	movs	r1, #1
 80015a8:	438a      	bics	r2, r1
 80015aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80015ac:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80015ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015b0:	4b7b      	ldr	r3, [pc, #492]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80015b2:	2104      	movs	r1, #4
 80015b4:	438a      	bics	r2, r1
 80015b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d014      	beq.n	80015ea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb7e 	bl	8000cc0 <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015c8:	e009      	b.n	80015de <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ca:	f7ff fb79 	bl	8000cc0 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	4a74      	ldr	r2, [pc, #464]	; (80017a8 <HAL_RCC_OscConfig+0x60c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e0db      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015de:	4b70      	ldr	r3, [pc, #448]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80015e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e2:	2202      	movs	r2, #2
 80015e4:	4013      	ands	r3, r2
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x42e>
 80015e8:	e013      	b.n	8001612 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fb69 	bl	8000cc0 <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015f2:	e009      	b.n	8001608 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff fb64 	bl	8000cc0 <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	4a6a      	ldr	r2, [pc, #424]	; (80017a8 <HAL_RCC_OscConfig+0x60c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0c6      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001608:	4b65      	ldr	r3, [pc, #404]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	2202      	movs	r2, #2
 800160e:	4013      	ands	r3, r2
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001612:	231f      	movs	r3, #31
 8001614:	18fb      	adds	r3, r7, r3
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800161c:	4b60      	ldr	r3, [pc, #384]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 800161e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001620:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001622:	4962      	ldr	r1, [pc, #392]	; (80017ac <HAL_RCC_OscConfig+0x610>)
 8001624:	400a      	ands	r2, r1
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d100      	bne.n	8001632 <HAL_RCC_OscConfig+0x496>
 8001630:	e0b0      	b.n	8001794 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001632:	4b5b      	ldr	r3, [pc, #364]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2238      	movs	r2, #56	; 0x38
 8001638:	4013      	ands	r3, r2
 800163a:	2b10      	cmp	r3, #16
 800163c:	d100      	bne.n	8001640 <HAL_RCC_OscConfig+0x4a4>
 800163e:	e078      	b.n	8001732 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d153      	bne.n	80016f0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001648:	4b55      	ldr	r3, [pc, #340]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 800164e:	4958      	ldr	r1, [pc, #352]	; (80017b0 <HAL_RCC_OscConfig+0x614>)
 8001650:	400a      	ands	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fb34 	bl	8000cc0 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165e:	f7ff fb2f 	bl	8000cc0 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e092      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001670:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	049b      	lsls	r3, r3, #18
 8001678:	4013      	ands	r3, r2
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800167c:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4a4c      	ldr	r2, [pc, #304]	; (80017b4 <HAL_RCC_OscConfig+0x618>)
 8001682:	4013      	ands	r3, r2
 8001684:	0019      	movs	r1, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1a      	ldr	r2, [r3, #32]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	431a      	orrs	r2, r3
 80016a4:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0449      	lsls	r1, r1, #17
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	0549      	lsls	r1, r1, #21
 80016c2:	430a      	orrs	r2, r1
 80016c4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff fafb 	bl	8000cc0 <HAL_GetTick>
 80016ca:	0003      	movs	r3, r0
 80016cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff faf6 	bl	8000cc0 <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e059      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e2:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	049b      	lsls	r3, r3, #18
 80016ea:	4013      	ands	r3, r2
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x534>
 80016ee:	e051      	b.n	8001794 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 80016f6:	492e      	ldr	r1, [pc, #184]	; (80017b0 <HAL_RCC_OscConfig+0x614>)
 80016f8:	400a      	ands	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fae0 	bl	8000cc0 <HAL_GetTick>
 8001700:	0003      	movs	r3, r0
 8001702:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff fadb 	bl	8000cc0 <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e03e      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	049b      	lsls	r3, r3, #18
 8001720:	4013      	ands	r3, r2
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 800172a:	4923      	ldr	r1, [pc, #140]	; (80017b8 <HAL_RCC_OscConfig+0x61c>)
 800172c:	400a      	ands	r2, r1
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	e030      	b.n	8001794 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e02b      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_RCC_OscConfig+0x604>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2203      	movs	r2, #3
 8001748:	401a      	ands	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	429a      	cmp	r2, r3
 8001750:	d11e      	bne.n	8001790 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2270      	movs	r2, #112	; 0x70
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d117      	bne.n	8001790 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	23fe      	movs	r3, #254	; 0xfe
 8001764:	01db      	lsls	r3, r3, #7
 8001766:	401a      	ands	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d10e      	bne.n	8001790 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	23f8      	movs	r3, #248	; 0xf8
 8001776:	039b      	lsls	r3, r3, #14
 8001778:	401a      	ands	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d106      	bne.n	8001790 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	0f5b      	lsrs	r3, r3, #29
 8001786:	075a      	lsls	r2, r3, #29
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b008      	add	sp, #32
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40007000 	.word	0x40007000
 80017a8:	00001388 	.word	0x00001388
 80017ac:	efffffff 	.word	0xefffffff
 80017b0:	feffffff 	.word	0xfeffffff
 80017b4:	1fc1808c 	.word	0x1fc1808c
 80017b8:	effefffc 	.word	0xeffefffc

080017bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0e9      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b76      	ldr	r3, [pc, #472]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2207      	movs	r2, #7
 80017d6:	4013      	ands	r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d91e      	bls.n	800181c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2207      	movs	r2, #7
 80017e4:	4393      	bics	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	4b70      	ldr	r3, [pc, #448]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017f0:	f7ff fa66 	bl	8000cc0 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017f8:	e009      	b.n	800180e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fa:	f7ff fa61 	bl	8000cc0 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	4a6a      	ldr	r2, [pc, #424]	; (80019b0 <HAL_RCC_ClockConfig+0x1f4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e0ca      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800180e:	4b67      	ldr	r3, [pc, #412]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2207      	movs	r2, #7
 8001814:	4013      	ands	r3, r2
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d1ee      	bne.n	80017fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d015      	beq.n	8001852 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2204      	movs	r2, #4
 800182c:	4013      	ands	r3, r2
 800182e:	d006      	beq.n	800183e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001830:	4b60      	ldr	r3, [pc, #384]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001836:	21e0      	movs	r1, #224	; 0xe0
 8001838:	01c9      	lsls	r1, r1, #7
 800183a:	430a      	orrs	r2, r1
 800183c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183e:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	4a5d      	ldr	r2, [pc, #372]	; (80019b8 <HAL_RCC_ClockConfig+0x1fc>)
 8001844:	4013      	ands	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 800184e:	430a      	orrs	r2, r1
 8001850:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2201      	movs	r2, #1
 8001858:	4013      	ands	r3, r2
 800185a:	d057      	beq.n	800190c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d107      	bne.n	8001874 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001864:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	029b      	lsls	r3, r3, #10
 800186c:	4013      	ands	r3, r2
 800186e:	d12b      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e097      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d107      	bne.n	800188c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187c:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	049b      	lsls	r3, r3, #18
 8001884:	4013      	ands	r3, r2
 8001886:	d11f      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e08b      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001894:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4013      	ands	r3, r2
 800189e:	d113      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e07f      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	2202      	movs	r2, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d108      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e074      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ba:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e06d      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018c8:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2207      	movs	r2, #7
 80018ce:	4393      	bics	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018dc:	f7ff f9f0 	bl	8000cc0 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e4:	e009      	b.n	80018fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e6:	f7ff f9eb 	bl	8000cc0 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <HAL_RCC_ClockConfig+0x1f4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e054      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2238      	movs	r2, #56	; 0x38
 8001900:	401a      	ands	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	429a      	cmp	r2, r3
 800190a:	d1ec      	bne.n	80018e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2207      	movs	r2, #7
 8001912:	4013      	ands	r3, r2
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d21e      	bcs.n	8001958 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2207      	movs	r2, #7
 8001920:	4393      	bics	r3, r2
 8001922:	0019      	movs	r1, r3
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800192c:	f7ff f9c8 	bl	8000cc0 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001934:	e009      	b.n	800194a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001936:	f7ff f9c3 	bl	8000cc0 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <HAL_RCC_ClockConfig+0x1f4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e02c      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2207      	movs	r2, #7
 8001950:	4013      	ands	r3, r2
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d1ee      	bne.n	8001936 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2204      	movs	r2, #4
 800195e:	4013      	ands	r3, r2
 8001960:	d009      	beq.n	8001976 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4a15      	ldr	r2, [pc, #84]	; (80019bc <HAL_RCC_ClockConfig+0x200>)
 8001968:	4013      	ands	r3, r2
 800196a:	0019      	movs	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001972:	430a      	orrs	r2, r1
 8001974:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001976:	f000 f829 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800197a:	0001      	movs	r1, r0
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	220f      	movs	r2, #15
 8001984:	401a      	ands	r2, r3
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_RCC_ClockConfig+0x204>)
 8001988:	0092      	lsls	r2, r2, #2
 800198a:	58d3      	ldr	r3, [r2, r3]
 800198c:	221f      	movs	r2, #31
 800198e:	4013      	ands	r3, r2
 8001990:	000a      	movs	r2, r1
 8001992:	40da      	lsrs	r2, r3
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_ClockConfig+0x208>)
 8001996:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_ClockConfig+0x20c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff f933 	bl	8000c08 <HAL_InitTick>
 80019a2:	0003      	movs	r3, r0
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b004      	add	sp, #16
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40022000 	.word	0x40022000
 80019b0:	00001388 	.word	0x00001388
 80019b4:	40021000 	.word	0x40021000
 80019b8:	fffff0ff 	.word	0xfffff0ff
 80019bc:	ffff8fff 	.word	0xffff8fff
 80019c0:	080034d0 	.word	0x080034d0
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d2:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2238      	movs	r2, #56	; 0x38
 80019d8:	4013      	ands	r3, r2
 80019da:	d10f      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0adb      	lsrs	r3, r3, #11
 80019e2:	2207      	movs	r2, #7
 80019e4:	4013      	ands	r3, r2
 80019e6:	2201      	movs	r2, #1
 80019e8:	409a      	lsls	r2, r3
 80019ea:	0013      	movs	r3, r2
 80019ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	4835      	ldr	r0, [pc, #212]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019f2:	f7fe fb85 	bl	8000100 <__udivsi3>
 80019f6:	0003      	movs	r3, r0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	e05d      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019fc:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2238      	movs	r2, #56	; 0x38
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d102      	bne.n	8001a0e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a08:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_RCC_GetSysClockFreq+0x100>)
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	e054      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2238      	movs	r2, #56	; 0x38
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d138      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2203      	movs	r2, #3
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d10d      	bne.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	4824      	ldr	r0, [pc, #144]	; (8001acc <HAL_RCC_GetSysClockFreq+0x100>)
 8001a3c:	f7fe fb60 	bl	8000100 <__udivsi3>
 8001a40:	0003      	movs	r3, r0
 8001a42:	0019      	movs	r1, r3
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	227f      	movs	r2, #127	; 0x7f
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	434b      	muls	r3, r1
 8001a50:	617b      	str	r3, [r7, #20]
        break;
 8001a52:	e00d      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	481c      	ldr	r0, [pc, #112]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a58:	f7fe fb52 	bl	8000100 <__udivsi3>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	0019      	movs	r1, r3
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	227f      	movs	r2, #127	; 0x7f
 8001a68:	4013      	ands	r3, r2
 8001a6a:	434b      	muls	r3, r1
 8001a6c:	617b      	str	r3, [r7, #20]
        break;
 8001a6e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0f5b      	lsrs	r3, r3, #29
 8001a76:	2207      	movs	r2, #7
 8001a78:	4013      	ands	r3, r2
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	6978      	ldr	r0, [r7, #20]
 8001a82:	f7fe fb3d 	bl	8000100 <__udivsi3>
 8001a86:	0003      	movs	r3, r0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	e015      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2238      	movs	r2, #56	; 0x38
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d103      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2238      	movs	r2, #56	; 0x38
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b18      	cmp	r3, #24
 8001aaa:	d103      	bne.n	8001ab4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001aac:	23fa      	movs	r3, #250	; 0xfa
 8001aae:	01db      	lsls	r3, r3, #7
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	e001      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ab8:	693b      	ldr	r3, [r7, #16]
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b006      	add	sp, #24
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	00f42400 	.word	0x00f42400
 8001acc:	007a1200 	.word	0x007a1200

08001ad0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad4:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ae8:	f7ff fff2 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001aec:	0004      	movs	r4, r0
 8001aee:	f7ff fb49 	bl	8001184 <LL_RCC_GetAPB1Prescaler>
 8001af2:	0003      	movs	r3, r0
 8001af4:	0b1a      	lsrs	r2, r3, #12
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	58d3      	ldr	r3, [r2, r3]
 8001afc:	221f      	movs	r2, #31
 8001afe:	4013      	ands	r3, r2
 8001b00:	40dc      	lsrs	r4, r3
 8001b02:	0023      	movs	r3, r4
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	08003510 	.word	0x08003510

08001b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b18:	2313      	movs	r3, #19
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b20:	2312      	movs	r3, #18
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	029b      	lsls	r3, r3, #10
 8001b30:	4013      	ands	r3, r2
 8001b32:	d100      	bne.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b34:	e0a3      	b.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b36:	2011      	movs	r0, #17
 8001b38:	183b      	adds	r3, r7, r0
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3e:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	055b      	lsls	r3, r3, #21
 8001b46:	4013      	ands	r3, r2
 8001b48:	d110      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b4e:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	0549      	lsls	r1, r1, #21
 8001b54:	430a      	orrs	r2, r1
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b58:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	055b      	lsls	r3, r3, #21
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b6c:	4b74      	ldr	r3, [pc, #464]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b73      	ldr	r3, [pc, #460]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0049      	lsls	r1, r1, #1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b7a:	f7ff f8a1 	bl	8000cc0 <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b82:	e00b      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7ff f89c 	bl	8000cc0 <HAL_GetTick>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d904      	bls.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b92:	2313      	movs	r3, #19
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2203      	movs	r2, #3
 8001b98:	701a      	strb	r2, [r3, #0]
        break;
 8001b9a:	e005      	b.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b9c:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d0ed      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ba8:	2313      	movs	r3, #19
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d154      	bne.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bb2:	4b62      	ldr	r3, [pc, #392]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb6:	23c0      	movs	r3, #192	; 0xc0
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d019      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d014      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bce:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	4a5c      	ldr	r2, [pc, #368]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bd8:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bdc:	4b57      	ldr	r3, [pc, #348]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	0249      	lsls	r1, r1, #9
 8001be2:	430a      	orrs	r2, r1
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001be6:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bea:	4b54      	ldr	r3, [pc, #336]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bec:	4956      	ldr	r1, [pc, #344]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001bee:	400a      	ands	r2, r1
 8001bf0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bf2:	4b52      	ldr	r3, [pc, #328]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d016      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff f85e 	bl	8000cc0 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c08:	e00c      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff f859 	bl	8000cc0 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4a4d      	ldr	r2, [pc, #308]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d904      	bls.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001c1a:	2313      	movs	r3, #19
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	2203      	movs	r2, #3
 8001c20:	701a      	strb	r2, [r3, #0]
            break;
 8001c22:	e004      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c24:	4b45      	ldr	r3, [pc, #276]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d0ed      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001c2e:	2313      	movs	r3, #19
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c38:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	4a41      	ldr	r2, [pc, #260]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c4c:	e00c      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	2213      	movs	r2, #19
 8001c54:	18ba      	adds	r2, r7, r2
 8001c56:	7812      	ldrb	r2, [r2, #0]
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e005      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c5c:	2312      	movs	r3, #18
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2213      	movs	r2, #19
 8001c62:	18ba      	adds	r2, r7, r2
 8001c64:	7812      	ldrb	r2, [r2, #0]
 8001c66:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c68:	2311      	movs	r3, #17
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d105      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c76:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c78:	4935      	ldr	r1, [pc, #212]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2201      	movs	r2, #1
 8001c84:	4013      	ands	r3, r2
 8001c86:	d009      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c88:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	4393      	bics	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d009      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001caa:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	01db      	lsls	r3, r3, #7
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d015      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	0899      	lsrs	r1, r3, #2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	05db      	lsls	r3, r3, #23
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	0249      	lsls	r1, r1, #9
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d016      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	01db      	lsls	r3, r3, #7
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	0249      	lsls	r1, r1, #9
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	781b      	ldrb	r3, [r3, #0]
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b006      	add	sp, #24
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40007000 	.word	0x40007000
 8001d44:	fffffcff 	.word	0xfffffcff
 8001d48:	fffeffff 	.word	0xfffeffff
 8001d4c:	00001388 	.word	0x00001388
 8001d50:	efffffff 	.word	0xefffffff
 8001d54:	ffffcfff 	.word	0xffffcfff
 8001d58:	ffff3fff 	.word	0xffff3fff

08001d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e04a      	b.n	8001e04 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	223d      	movs	r2, #61	; 0x3d
 8001d72:	5c9b      	ldrb	r3, [r3, r2]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d107      	bne.n	8001d8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	223c      	movs	r2, #60	; 0x3c
 8001d7e:	2100      	movs	r1, #0
 8001d80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7fe fdbd 	bl	8000904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	223d      	movs	r2, #61	; 0x3d
 8001d8e:	2102      	movs	r1, #2
 8001d90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	0010      	movs	r0, r2
 8001d9e:	f000 fa3d 	bl	800221c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2248      	movs	r2, #72	; 0x48
 8001da6:	2101      	movs	r1, #1
 8001da8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	223e      	movs	r2, #62	; 0x3e
 8001dae:	2101      	movs	r1, #1
 8001db0:	5499      	strb	r1, [r3, r2]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	223f      	movs	r2, #63	; 0x3f
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2240      	movs	r2, #64	; 0x40
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	5499      	strb	r1, [r3, r2]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2241      	movs	r2, #65	; 0x41
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	5499      	strb	r1, [r3, r2]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2242      	movs	r2, #66	; 0x42
 8001dce:	2101      	movs	r1, #1
 8001dd0:	5499      	strb	r1, [r3, r2]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2243      	movs	r2, #67	; 0x43
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2244      	movs	r2, #68	; 0x44
 8001dde:	2101      	movs	r1, #1
 8001de0:	5499      	strb	r1, [r3, r2]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2245      	movs	r2, #69	; 0x45
 8001de6:	2101      	movs	r1, #1
 8001de8:	5499      	strb	r1, [r3, r2]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2246      	movs	r2, #70	; 0x46
 8001dee:	2101      	movs	r1, #1
 8001df0:	5499      	strb	r1, [r3, r2]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2247      	movs	r2, #71	; 0x47
 8001df6:	2101      	movs	r1, #1
 8001df8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	223d      	movs	r2, #61	; 0x3d
 8001dfe:	2101      	movs	r1, #1
 8001e00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b002      	add	sp, #8
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e04a      	b.n	8001eb4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	223d      	movs	r2, #61	; 0x3d
 8001e22:	5c9b      	ldrb	r3, [r3, r2]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d107      	bne.n	8001e3a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	223c      	movs	r2, #60	; 0x3c
 8001e2e:	2100      	movs	r1, #0
 8001e30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f000 f841 	bl	8001ebc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	223d      	movs	r2, #61	; 0x3d
 8001e3e:	2102      	movs	r1, #2
 8001e40:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	0010      	movs	r0, r2
 8001e4e:	f000 f9e5 	bl	800221c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2248      	movs	r2, #72	; 0x48
 8001e56:	2101      	movs	r1, #1
 8001e58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	223e      	movs	r2, #62	; 0x3e
 8001e5e:	2101      	movs	r1, #1
 8001e60:	5499      	strb	r1, [r3, r2]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	223f      	movs	r2, #63	; 0x3f
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2240      	movs	r2, #64	; 0x40
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2241      	movs	r2, #65	; 0x41
 8001e76:	2101      	movs	r1, #1
 8001e78:	5499      	strb	r1, [r3, r2]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2242      	movs	r2, #66	; 0x42
 8001e7e:	2101      	movs	r1, #1
 8001e80:	5499      	strb	r1, [r3, r2]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2243      	movs	r2, #67	; 0x43
 8001e86:	2101      	movs	r1, #1
 8001e88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2244      	movs	r2, #68	; 0x44
 8001e8e:	2101      	movs	r1, #1
 8001e90:	5499      	strb	r1, [r3, r2]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2245      	movs	r2, #69	; 0x45
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2246      	movs	r2, #70	; 0x46
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	5499      	strb	r1, [r3, r2]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2247      	movs	r2, #71	; 0x47
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	223d      	movs	r2, #61	; 0x3d
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b002      	add	sp, #8
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ec4:	46c0      	nop			; (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b002      	add	sp, #8
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e090      	b.n	8002002 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	223d      	movs	r2, #61	; 0x3d
 8001ee4:	5c9b      	ldrb	r3, [r3, r2]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d107      	bne.n	8001efc <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	223c      	movs	r2, #60	; 0x3c
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f7fe fc98 	bl	800082c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	223d      	movs	r2, #61	; 0x3d
 8001f00:	2102      	movs	r1, #2
 8001f02:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	493f      	ldr	r1, [pc, #252]	; (800200c <HAL_TIM_Encoder_Init+0x140>)
 8001f10:	400a      	ands	r2, r1
 8001f12:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	0010      	movs	r0, r2
 8001f20:	f000 f97c 	bl	800221c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4a31      	ldr	r2, [pc, #196]	; (8002010 <HAL_TIM_Encoder_Init+0x144>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4a2c      	ldr	r2, [pc, #176]	; (8002014 <HAL_TIM_Encoder_Init+0x148>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4a2b      	ldr	r2, [pc, #172]	; (8002018 <HAL_TIM_Encoder_Init+0x14c>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	011a      	lsls	r2, r3, #4
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	031b      	lsls	r3, r3, #12
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2222      	movs	r2, #34	; 0x22
 8001f9a:	4393      	bics	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2288      	movs	r2, #136	; 0x88
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2248      	movs	r2, #72	; 0x48
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	223e      	movs	r2, #62	; 0x3e
 8001fdc:	2101      	movs	r1, #1
 8001fde:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	223f      	movs	r2, #63	; 0x3f
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2244      	movs	r2, #68	; 0x44
 8001fec:	2101      	movs	r1, #1
 8001fee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2245      	movs	r2, #69	; 0x45
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	223d      	movs	r2, #61	; 0x3d
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b006      	add	sp, #24
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	fffebff8 	.word	0xfffebff8
 8002010:	fffffcfc 	.word	0xfffffcfc
 8002014:	fffff3f3 	.word	0xfffff3f3
 8002018:	ffff0f0f 	.word	0xffff0f0f

0800201c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002028:	2317      	movs	r3, #23
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	223c      	movs	r2, #60	; 0x3c
 8002034:	5c9b      	ldrb	r3, [r3, r2]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_TIM_PWM_ConfigChannel+0x22>
 800203a:	2302      	movs	r3, #2
 800203c:	e0e5      	b.n	800220a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	223c      	movs	r2, #60	; 0x3c
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b14      	cmp	r3, #20
 800204a:	d900      	bls.n	800204e <HAL_TIM_PWM_ConfigChannel+0x32>
 800204c:	e0d1      	b.n	80021f2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	009a      	lsls	r2, r3, #2
 8002052:	4b70      	ldr	r3, [pc, #448]	; (8002214 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002054:	18d3      	adds	r3, r2, r3
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	0011      	movs	r1, r2
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f954 	bl	8002310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2108      	movs	r1, #8
 8002074:	430a      	orrs	r2, r1
 8002076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2104      	movs	r1, #4
 8002084:	438a      	bics	r2, r1
 8002086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6999      	ldr	r1, [r3, #24]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	619a      	str	r2, [r3, #24]
      break;
 800209a:	e0af      	b.n	80021fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	0011      	movs	r1, r2
 80020a4:	0018      	movs	r0, r3
 80020a6:	f000 f9b3 	bl	8002410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	0109      	lsls	r1, r1, #4
 80020b8:	430a      	orrs	r2, r1
 80020ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4954      	ldr	r1, [pc, #336]	; (8002218 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80020c8:	400a      	ands	r2, r1
 80020ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6999      	ldr	r1, [r3, #24]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	021a      	lsls	r2, r3, #8
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	619a      	str	r2, [r3, #24]
      break;
 80020e0:	e08c      	b.n	80021fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	0011      	movs	r1, r2
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 fa0e 	bl	800250c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2108      	movs	r1, #8
 80020fc:	430a      	orrs	r2, r1
 80020fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2104      	movs	r1, #4
 800210c:	438a      	bics	r2, r1
 800210e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69d9      	ldr	r1, [r3, #28]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	61da      	str	r2, [r3, #28]
      break;
 8002122:	e06b      	b.n	80021fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	0011      	movs	r1, r2
 800212c:	0018      	movs	r0, r3
 800212e:	f000 fa6f 	bl	8002610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69da      	ldr	r2, [r3, #28]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	0109      	lsls	r1, r1, #4
 8002140:	430a      	orrs	r2, r1
 8002142:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4932      	ldr	r1, [pc, #200]	; (8002218 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002150:	400a      	ands	r2, r1
 8002152:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69d9      	ldr	r1, [r3, #28]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	021a      	lsls	r2, r3, #8
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	61da      	str	r2, [r3, #28]
      break;
 8002168:	e048      	b.n	80021fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	0011      	movs	r1, r2
 8002172:	0018      	movs	r0, r3
 8002174:	f000 fab0 	bl	80026d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2108      	movs	r1, #8
 8002184:	430a      	orrs	r2, r1
 8002186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2104      	movs	r1, #4
 8002194:	438a      	bics	r2, r1
 8002196:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80021aa:	e027      	b.n	80021fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	0011      	movs	r1, r2
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 fae9 	bl	800278c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0109      	lsls	r1, r1, #4
 80021c8:	430a      	orrs	r2, r1
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4910      	ldr	r1, [pc, #64]	; (8002218 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80021d8:	400a      	ands	r2, r1
 80021da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	021a      	lsls	r2, r3, #8
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80021f0:	e004      	b.n	80021fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80021f2:	2317      	movs	r3, #23
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
      break;
 80021fa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	223c      	movs	r2, #60	; 0x3c
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

  return status;
 8002204:	2317      	movs	r3, #23
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b006      	add	sp, #24
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	08003530 	.word	0x08003530
 8002218:	fffffbff 	.word	0xfffffbff

0800221c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a32      	ldr	r2, [pc, #200]	; (80022f8 <TIM_Base_SetConfig+0xdc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d003      	beq.n	800223c <TIM_Base_SetConfig+0x20>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a31      	ldr	r2, [pc, #196]	; (80022fc <TIM_Base_SetConfig+0xe0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d108      	bne.n	800224e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2270      	movs	r2, #112	; 0x70
 8002240:	4393      	bics	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <TIM_Base_SetConfig+0xdc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00f      	beq.n	8002276 <TIM_Base_SetConfig+0x5a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a28      	ldr	r2, [pc, #160]	; (80022fc <TIM_Base_SetConfig+0xe0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00b      	beq.n	8002276 <TIM_Base_SetConfig+0x5a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a27      	ldr	r2, [pc, #156]	; (8002300 <TIM_Base_SetConfig+0xe4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <TIM_Base_SetConfig+0x5a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <TIM_Base_SetConfig+0xe8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d003      	beq.n	8002276 <TIM_Base_SetConfig+0x5a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a25      	ldr	r2, [pc, #148]	; (8002308 <TIM_Base_SetConfig+0xec>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d108      	bne.n	8002288 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a24      	ldr	r2, [pc, #144]	; (800230c <TIM_Base_SetConfig+0xf0>)
 800227a:	4013      	ands	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	4393      	bics	r3, r2
 800228e:	001a      	movs	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <TIM_Base_SetConfig+0xdc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <TIM_Base_SetConfig+0xaa>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <TIM_Base_SetConfig+0xe8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_Base_SetConfig+0xaa>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a11      	ldr	r2, [pc, #68]	; (8002308 <TIM_Base_SetConfig+0xec>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d103      	bne.n	80022ce <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2201      	movs	r2, #1
 80022da:	4013      	ands	r3, r2
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d106      	bne.n	80022ee <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4393      	bics	r3, r2
 80022e8:	001a      	movs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	611a      	str	r2, [r3, #16]
  }
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	40012c00 	.word	0x40012c00
 80022fc:	40000400 	.word	0x40000400
 8002300:	40002000 	.word	0x40002000
 8002304:	40014400 	.word	0x40014400
 8002308:	40014800 	.word	0x40014800
 800230c:	fffffcff 	.word	0xfffffcff

08002310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	2201      	movs	r2, #1
 8002326:	4393      	bics	r3, r2
 8002328:	001a      	movs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <TIM_OC1_SetConfig+0xe8>)
 800233e:	4013      	ands	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2203      	movs	r2, #3
 8002346:	4393      	bics	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2202      	movs	r2, #2
 8002358:	4393      	bics	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a24      	ldr	r2, [pc, #144]	; (80023fc <TIM_OC1_SetConfig+0xec>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <TIM_OC1_SetConfig+0x6e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a23      	ldr	r2, [pc, #140]	; (8002400 <TIM_OC1_SetConfig+0xf0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d003      	beq.n	800237e <TIM_OC1_SetConfig+0x6e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <TIM_OC1_SetConfig+0xf4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10c      	bne.n	8002398 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2208      	movs	r2, #8
 8002382:	4393      	bics	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2204      	movs	r2, #4
 8002394:	4393      	bics	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a18      	ldr	r2, [pc, #96]	; (80023fc <TIM_OC1_SetConfig+0xec>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d007      	beq.n	80023b0 <TIM_OC1_SetConfig+0xa0>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <TIM_OC1_SetConfig+0xf0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d003      	beq.n	80023b0 <TIM_OC1_SetConfig+0xa0>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a16      	ldr	r2, [pc, #88]	; (8002404 <TIM_OC1_SetConfig+0xf4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d111      	bne.n	80023d4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <TIM_OC1_SetConfig+0xf8>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4a14      	ldr	r2, [pc, #80]	; (800240c <TIM_OC1_SetConfig+0xfc>)
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	621a      	str	r2, [r3, #32]
}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b006      	add	sp, #24
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	fffeff8f 	.word	0xfffeff8f
 80023fc:	40012c00 	.word	0x40012c00
 8002400:	40014400 	.word	0x40014400
 8002404:	40014800 	.word	0x40014800
 8002408:	fffffeff 	.word	0xfffffeff
 800240c:	fffffdff 	.word	0xfffffdff

08002410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	2210      	movs	r2, #16
 8002426:	4393      	bics	r3, r2
 8002428:	001a      	movs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4a2c      	ldr	r2, [pc, #176]	; (80024f0 <TIM_OC2_SetConfig+0xe0>)
 800243e:	4013      	ands	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <TIM_OC2_SetConfig+0xe4>)
 8002446:	4013      	ands	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2220      	movs	r2, #32
 800245a:	4393      	bics	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <TIM_OC2_SetConfig+0xe8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10d      	bne.n	800248e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	4393      	bics	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2240      	movs	r2, #64	; 0x40
 800248a:	4393      	bics	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <TIM_OC2_SetConfig+0xe8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <TIM_OC2_SetConfig+0x96>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a18      	ldr	r2, [pc, #96]	; (80024fc <TIM_OC2_SetConfig+0xec>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d003      	beq.n	80024a6 <TIM_OC2_SetConfig+0x96>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a17      	ldr	r2, [pc, #92]	; (8002500 <TIM_OC2_SetConfig+0xf0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d113      	bne.n	80024ce <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4a16      	ldr	r2, [pc, #88]	; (8002504 <TIM_OC2_SetConfig+0xf4>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4a15      	ldr	r2, [pc, #84]	; (8002508 <TIM_OC2_SetConfig+0xf8>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	621a      	str	r2, [r3, #32]
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b006      	add	sp, #24
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	feff8fff 	.word	0xfeff8fff
 80024f4:	fffffcff 	.word	0xfffffcff
 80024f8:	40012c00 	.word	0x40012c00
 80024fc:	40014400 	.word	0x40014400
 8002500:	40014800 	.word	0x40014800
 8002504:	fffffbff 	.word	0xfffffbff
 8002508:	fffff7ff 	.word	0xfffff7ff

0800250c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <TIM_OC3_SetConfig+0xdc>)
 8002522:	401a      	ands	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a2d      	ldr	r2, [pc, #180]	; (80025ec <TIM_OC3_SetConfig+0xe0>)
 8002538:	4013      	ands	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2203      	movs	r2, #3
 8002540:	4393      	bics	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <TIM_OC3_SetConfig+0xe4>)
 8002552:	4013      	ands	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a23      	ldr	r2, [pc, #140]	; (80025f4 <TIM_OC3_SetConfig+0xe8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10d      	bne.n	8002586 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <TIM_OC3_SetConfig+0xec>)
 800256e:	4013      	ands	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <TIM_OC3_SetConfig+0xf0>)
 8002582:	4013      	ands	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <TIM_OC3_SetConfig+0xe8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <TIM_OC3_SetConfig+0x92>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <TIM_OC3_SetConfig+0xf4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d003      	beq.n	800259e <TIM_OC3_SetConfig+0x92>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <TIM_OC3_SetConfig+0xf8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d113      	bne.n	80025c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4a19      	ldr	r2, [pc, #100]	; (8002608 <TIM_OC3_SetConfig+0xfc>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4a18      	ldr	r2, [pc, #96]	; (800260c <TIM_OC3_SetConfig+0x100>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	621a      	str	r2, [r3, #32]
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b006      	add	sp, #24
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	fffffeff 	.word	0xfffffeff
 80025ec:	fffeff8f 	.word	0xfffeff8f
 80025f0:	fffffdff 	.word	0xfffffdff
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	fffff7ff 	.word	0xfffff7ff
 80025fc:	fffffbff 	.word	0xfffffbff
 8002600:	40014400 	.word	0x40014400
 8002604:	40014800 	.word	0x40014800
 8002608:	ffffefff 	.word	0xffffefff
 800260c:	ffffdfff 	.word	0xffffdfff

08002610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <TIM_OC4_SetConfig+0xa8>)
 8002626:	401a      	ands	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a20      	ldr	r2, [pc, #128]	; (80026bc <TIM_OC4_SetConfig+0xac>)
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <TIM_OC4_SetConfig+0xb0>)
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <TIM_OC4_SetConfig+0xb4>)
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	031b      	lsls	r3, r3, #12
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <TIM_OC4_SetConfig+0xb8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d007      	beq.n	8002680 <TIM_OC4_SetConfig+0x70>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a16      	ldr	r2, [pc, #88]	; (80026cc <TIM_OC4_SetConfig+0xbc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d003      	beq.n	8002680 <TIM_OC4_SetConfig+0x70>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <TIM_OC4_SetConfig+0xc0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d109      	bne.n	8002694 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <TIM_OC4_SetConfig+0xc4>)
 8002684:	4013      	ands	r3, r2
 8002686:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	019b      	lsls	r3, r3, #6
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	621a      	str	r2, [r3, #32]
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b006      	add	sp, #24
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	ffffefff 	.word	0xffffefff
 80026bc:	feff8fff 	.word	0xfeff8fff
 80026c0:	fffffcff 	.word	0xfffffcff
 80026c4:	ffffdfff 	.word	0xffffdfff
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40014400 	.word	0x40014400
 80026d0:	40014800 	.word	0x40014800
 80026d4:	ffffbfff 	.word	0xffffbfff

080026d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a21      	ldr	r2, [pc, #132]	; (8002774 <TIM_OC5_SetConfig+0x9c>)
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <TIM_OC5_SetConfig+0xa0>)
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4a19      	ldr	r2, [pc, #100]	; (800277c <TIM_OC5_SetConfig+0xa4>)
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a15      	ldr	r2, [pc, #84]	; (8002780 <TIM_OC5_SetConfig+0xa8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d007      	beq.n	800273e <TIM_OC5_SetConfig+0x66>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a14      	ldr	r2, [pc, #80]	; (8002784 <TIM_OC5_SetConfig+0xac>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d003      	beq.n	800273e <TIM_OC5_SetConfig+0x66>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a13      	ldr	r2, [pc, #76]	; (8002788 <TIM_OC5_SetConfig+0xb0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d109      	bne.n	8002752 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <TIM_OC5_SetConfig+0x9c>)
 8002742:	4013      	ands	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	621a      	str	r2, [r3, #32]
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b006      	add	sp, #24
 8002772:	bd80      	pop	{r7, pc}
 8002774:	fffeffff 	.word	0xfffeffff
 8002778:	fffeff8f 	.word	0xfffeff8f
 800277c:	fffdffff 	.word	0xfffdffff
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40014400 	.word	0x40014400
 8002788:	40014800 	.word	0x40014800

0800278c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a22      	ldr	r2, [pc, #136]	; (800282c <TIM_OC6_SetConfig+0xa0>)
 80027a2:	401a      	ands	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <TIM_OC6_SetConfig+0xa4>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4a1a      	ldr	r2, [pc, #104]	; (8002834 <TIM_OC6_SetConfig+0xa8>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	051b      	lsls	r3, r3, #20
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a16      	ldr	r2, [pc, #88]	; (8002838 <TIM_OC6_SetConfig+0xac>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d007      	beq.n	80027f4 <TIM_OC6_SetConfig+0x68>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a15      	ldr	r2, [pc, #84]	; (800283c <TIM_OC6_SetConfig+0xb0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <TIM_OC6_SetConfig+0x68>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a14      	ldr	r2, [pc, #80]	; (8002840 <TIM_OC6_SetConfig+0xb4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d109      	bne.n	8002808 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	4a13      	ldr	r2, [pc, #76]	; (8002844 <TIM_OC6_SetConfig+0xb8>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	029b      	lsls	r3, r3, #10
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	621a      	str	r2, [r3, #32]
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b006      	add	sp, #24
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	ffefffff 	.word	0xffefffff
 8002830:	feff8fff 	.word	0xfeff8fff
 8002834:	ffdfffff 	.word	0xffdfffff
 8002838:	40012c00 	.word	0x40012c00
 800283c:	40014400 	.word	0x40014400
 8002840:	40014800 	.word	0x40014800
 8002844:	fffbffff 	.word	0xfffbffff

08002848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	223c      	movs	r2, #60	; 0x3c
 8002856:	5c9b      	ldrb	r3, [r3, r2]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800285c:	2302      	movs	r3, #2
 800285e:	e04a      	b.n	80028f6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	223c      	movs	r2, #60	; 0x3c
 8002864:	2101      	movs	r1, #1
 8002866:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	223d      	movs	r2, #61	; 0x3d
 800286c:	2102      	movs	r1, #2
 800286e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d108      	bne.n	800289c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800288e:	4013      	ands	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2270      	movs	r2, #112	; 0x70
 80028a0:	4393      	bics	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a11      	ldr	r2, [pc, #68]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d004      	beq.n	80028ca <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a10      	ldr	r2, [pc, #64]	; (8002908 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10c      	bne.n	80028e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	4393      	bics	r3, r2
 80028d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	223d      	movs	r2, #61	; 0x3d
 80028e8:	2101      	movs	r1, #1
 80028ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	223c      	movs	r2, #60	; 0x3c
 80028f0:	2100      	movs	r1, #0
 80028f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b004      	add	sp, #16
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	40012c00 	.word	0x40012c00
 8002904:	ff0fffff 	.word	0xff0fffff
 8002908:	40000400 	.word	0x40000400

0800290c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	223c      	movs	r2, #60	; 0x3c
 800291e:	5c9b      	ldrb	r3, [r3, r2]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002924:	2302      	movs	r3, #2
 8002926:	e06f      	b.n	8002a08 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	223c      	movs	r2, #60	; 0x3c
 800292c:	2101      	movs	r1, #1
 800292e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	22ff      	movs	r2, #255	; 0xff
 8002934:	4393      	bics	r3, r2
 8002936:	001a      	movs	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4a33      	ldr	r2, [pc, #204]	; (8002a10 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002944:	401a      	ands	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4a30      	ldr	r2, [pc, #192]	; (8002a14 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002952:	401a      	ands	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a2e      	ldr	r2, [pc, #184]	; (8002a18 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002960:	401a      	ands	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a2b      	ldr	r2, [pc, #172]	; (8002a1c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800296e:	401a      	ands	r2, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a29      	ldr	r2, [pc, #164]	; (8002a20 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800297c:	401a      	ands	r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800298a:	401a      	ands	r2, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a24      	ldr	r2, [pc, #144]	; (8002a28 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002998:	401a      	ands	r2, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a21      	ldr	r2, [pc, #132]	; (8002a2c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80029a8:	401a      	ands	r2, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d11c      	bne.n	80029f6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80029c0:	401a      	ands	r2, r3
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	051b      	lsls	r3, r3, #20
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80029d0:	401a      	ands	r2, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80029de:	401a      	ands	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80029ec:	401a      	ands	r2, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223c      	movs	r2, #60	; 0x3c
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b004      	add	sp, #16
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	fffffcff 	.word	0xfffffcff
 8002a14:	fffffbff 	.word	0xfffffbff
 8002a18:	fffff7ff 	.word	0xfffff7ff
 8002a1c:	ffffefff 	.word	0xffffefff
 8002a20:	ffffdfff 	.word	0xffffdfff
 8002a24:	ffffbfff 	.word	0xffffbfff
 8002a28:	fff0ffff 	.word	0xfff0ffff
 8002a2c:	efffffff 	.word	0xefffffff
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	ff0fffff 	.word	0xff0fffff
 8002a38:	feffffff 	.word	0xfeffffff
 8002a3c:	fdffffff 	.word	0xfdffffff
 8002a40:	dfffffff 	.word	0xdfffffff

08002a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e046      	b.n	8002ae4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2288      	movs	r2, #136	; 0x88
 8002a5a:	589b      	ldr	r3, [r3, r2]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2284      	movs	r2, #132	; 0x84
 8002a64:	2100      	movs	r1, #0
 8002a66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7fd ffca 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2288      	movs	r2, #136	; 0x88
 8002a74:	2124      	movs	r1, #36	; 0x24
 8002a76:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2101      	movs	r1, #1
 8002a84:	438a      	bics	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 f996 	bl	8002dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f000 f828 	bl	8002af0 <UART_SetConfig>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e01c      	b.n	8002ae4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	490d      	ldr	r1, [pc, #52]	; (8002aec <HAL_UART_Init+0xa8>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	212a      	movs	r1, #42	; 0x2a
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 fa25 	bl	8002f2c <UART_CheckIdleState>
 8002ae2:	0003      	movs	r3, r0
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	ffffb7ff 	.word	0xffffb7ff

08002af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002af8:	231a      	movs	r3, #26
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4aa1      	ldr	r2, [pc, #644]	; (8002da4 <UART_SetConfig+0x2b4>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4a9c      	ldr	r2, [pc, #624]	; (8002da8 <UART_SetConfig+0x2b8>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a93      	ldr	r2, [pc, #588]	; (8002dac <UART_SetConfig+0x2bc>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	220f      	movs	r2, #15
 8002b74:	4393      	bics	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a89      	ldr	r2, [pc, #548]	; (8002db0 <UART_SetConfig+0x2c0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d127      	bne.n	8002bde <UART_SetConfig+0xee>
 8002b8e:	4b89      	ldr	r3, [pc, #548]	; (8002db4 <UART_SetConfig+0x2c4>)
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	2203      	movs	r2, #3
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d017      	beq.n	8002bca <UART_SetConfig+0xda>
 8002b9a:	d81b      	bhi.n	8002bd4 <UART_SetConfig+0xe4>
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d00a      	beq.n	8002bb6 <UART_SetConfig+0xc6>
 8002ba0:	d818      	bhi.n	8002bd4 <UART_SetConfig+0xe4>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <UART_SetConfig+0xbc>
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d00a      	beq.n	8002bc0 <UART_SetConfig+0xd0>
 8002baa:	e013      	b.n	8002bd4 <UART_SetConfig+0xe4>
 8002bac:	231b      	movs	r3, #27
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e021      	b.n	8002bfa <UART_SetConfig+0x10a>
 8002bb6:	231b      	movs	r3, #27
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2202      	movs	r2, #2
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e01c      	b.n	8002bfa <UART_SetConfig+0x10a>
 8002bc0:	231b      	movs	r3, #27
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e017      	b.n	8002bfa <UART_SetConfig+0x10a>
 8002bca:	231b      	movs	r3, #27
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2208      	movs	r2, #8
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e012      	b.n	8002bfa <UART_SetConfig+0x10a>
 8002bd4:	231b      	movs	r3, #27
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2210      	movs	r2, #16
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	e00d      	b.n	8002bfa <UART_SetConfig+0x10a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a75      	ldr	r2, [pc, #468]	; (8002db8 <UART_SetConfig+0x2c8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d104      	bne.n	8002bf2 <UART_SetConfig+0x102>
 8002be8:	231b      	movs	r3, #27
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e003      	b.n	8002bfa <UART_SetConfig+0x10a>
 8002bf2:	231b      	movs	r3, #27
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69da      	ldr	r2, [r3, #28]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d000      	beq.n	8002c08 <UART_SetConfig+0x118>
 8002c06:	e065      	b.n	8002cd4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002c08:	231b      	movs	r3, #27
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d015      	beq.n	8002c3e <UART_SetConfig+0x14e>
 8002c12:	dc18      	bgt.n	8002c46 <UART_SetConfig+0x156>
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d00d      	beq.n	8002c34 <UART_SetConfig+0x144>
 8002c18:	dc15      	bgt.n	8002c46 <UART_SetConfig+0x156>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <UART_SetConfig+0x134>
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d005      	beq.n	8002c2e <UART_SetConfig+0x13e>
 8002c22:	e010      	b.n	8002c46 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c24:	f7fe ff5e 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	617b      	str	r3, [r7, #20]
        break;
 8002c2c:	e012      	b.n	8002c54 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c2e:	4b63      	ldr	r3, [pc, #396]	; (8002dbc <UART_SetConfig+0x2cc>)
 8002c30:	617b      	str	r3, [r7, #20]
        break;
 8002c32:	e00f      	b.n	8002c54 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c34:	f7fe feca 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	617b      	str	r3, [r7, #20]
        break;
 8002c3c:	e00a      	b.n	8002c54 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	617b      	str	r3, [r7, #20]
        break;
 8002c44:	e006      	b.n	8002c54 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c4a:	231a      	movs	r3, #26
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
        break;
 8002c52:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d100      	bne.n	8002c5c <UART_SetConfig+0x16c>
 8002c5a:	e08d      	b.n	8002d78 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c60:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <UART_SetConfig+0x2d0>)
 8002c62:	0052      	lsls	r2, r2, #1
 8002c64:	5ad3      	ldrh	r3, [r2, r3]
 8002c66:	0019      	movs	r1, r3
 8002c68:	6978      	ldr	r0, [r7, #20]
 8002c6a:	f7fd fa49 	bl	8000100 <__udivsi3>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	005a      	lsls	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	18d2      	adds	r2, r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	0019      	movs	r1, r3
 8002c80:	0010      	movs	r0, r2
 8002c82:	f7fd fa3d 	bl	8000100 <__udivsi3>
 8002c86:	0003      	movs	r3, r0
 8002c88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2b0f      	cmp	r3, #15
 8002c8e:	d91c      	bls.n	8002cca <UART_SetConfig+0x1da>
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	025b      	lsls	r3, r3, #9
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d217      	bcs.n	8002cca <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	200e      	movs	r0, #14
 8002ca0:	183b      	adds	r3, r7, r0
 8002ca2:	210f      	movs	r1, #15
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2207      	movs	r2, #7
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	b299      	uxth	r1, r3
 8002cb4:	183b      	adds	r3, r7, r0
 8002cb6:	183a      	adds	r2, r7, r0
 8002cb8:	8812      	ldrh	r2, [r2, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	183a      	adds	r2, r7, r0
 8002cc4:	8812      	ldrh	r2, [r2, #0]
 8002cc6:	60da      	str	r2, [r3, #12]
 8002cc8:	e056      	b.n	8002d78 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002cca:	231a      	movs	r3, #26
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e051      	b.n	8002d78 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cd4:	231b      	movs	r3, #27
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d015      	beq.n	8002d0a <UART_SetConfig+0x21a>
 8002cde:	dc18      	bgt.n	8002d12 <UART_SetConfig+0x222>
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d00d      	beq.n	8002d00 <UART_SetConfig+0x210>
 8002ce4:	dc15      	bgt.n	8002d12 <UART_SetConfig+0x222>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <UART_SetConfig+0x200>
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d005      	beq.n	8002cfa <UART_SetConfig+0x20a>
 8002cee:	e010      	b.n	8002d12 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf0:	f7fe fef8 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	617b      	str	r3, [r7, #20]
        break;
 8002cf8:	e012      	b.n	8002d20 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cfa:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <UART_SetConfig+0x2cc>)
 8002cfc:	617b      	str	r3, [r7, #20]
        break;
 8002cfe:	e00f      	b.n	8002d20 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d00:	f7fe fe64 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8002d04:	0003      	movs	r3, r0
 8002d06:	617b      	str	r3, [r7, #20]
        break;
 8002d08:	e00a      	b.n	8002d20 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	617b      	str	r3, [r7, #20]
        break;
 8002d10:	e006      	b.n	8002d20 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d16:	231a      	movs	r3, #26
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
        break;
 8002d1e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d028      	beq.n	8002d78 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d2a:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <UART_SetConfig+0x2d0>)
 8002d2c:	0052      	lsls	r2, r2, #1
 8002d2e:	5ad3      	ldrh	r3, [r2, r3]
 8002d30:	0019      	movs	r1, r3
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7fd f9e4 	bl	8000100 <__udivsi3>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	18d2      	adds	r2, r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	0019      	movs	r1, r3
 8002d4a:	0010      	movs	r0, r2
 8002d4c:	f7fd f9d8 	bl	8000100 <__udivsi3>
 8002d50:	0003      	movs	r3, r0
 8002d52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	d90a      	bls.n	8002d70 <UART_SetConfig+0x280>
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d205      	bcs.n	8002d70 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	e003      	b.n	8002d78 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002d70:	231a      	movs	r3, #26
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	226a      	movs	r2, #106	; 0x6a
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2268      	movs	r2, #104	; 0x68
 8002d84:	2101      	movs	r1, #1
 8002d86:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002d94:	231a      	movs	r3, #26
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	781b      	ldrb	r3, [r3, #0]
}
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b008      	add	sp, #32
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	cfff69f3 	.word	0xcfff69f3
 8002da8:	ffffcfff 	.word	0xffffcfff
 8002dac:	11fff4ff 	.word	0x11fff4ff
 8002db0:	40013800 	.word	0x40013800
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40004400 	.word	0x40004400
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	08003584 	.word	0x08003584

08002dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d00b      	beq.n	8002dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a4a      	ldr	r2, [pc, #296]	; (8002f08 <UART_AdvFeatureConfig+0x144>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	2201      	movs	r2, #1
 8002df4:	4013      	ands	r3, r2
 8002df6:	d00b      	beq.n	8002e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a43      	ldr	r2, [pc, #268]	; (8002f0c <UART_AdvFeatureConfig+0x148>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	2202      	movs	r2, #2
 8002e16:	4013      	ands	r3, r2
 8002e18:	d00b      	beq.n	8002e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a3b      	ldr	r2, [pc, #236]	; (8002f10 <UART_AdvFeatureConfig+0x14c>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	2204      	movs	r2, #4
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d00b      	beq.n	8002e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <UART_AdvFeatureConfig+0x150>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	2210      	movs	r2, #16
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d00b      	beq.n	8002e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a2c      	ldr	r2, [pc, #176]	; (8002f18 <UART_AdvFeatureConfig+0x154>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	0019      	movs	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d00b      	beq.n	8002e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	4a25      	ldr	r2, [pc, #148]	; (8002f1c <UART_AdvFeatureConfig+0x158>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	2240      	movs	r2, #64	; 0x40
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d01d      	beq.n	8002ede <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <UART_AdvFeatureConfig+0x15c>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	035b      	lsls	r3, r3, #13
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d10b      	bne.n	8002ede <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <UART_AdvFeatureConfig+0x160>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d00b      	beq.n	8002f00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <UART_AdvFeatureConfig+0x164>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  }
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	ffff7fff 	.word	0xffff7fff
 8002f0c:	fffdffff 	.word	0xfffdffff
 8002f10:	fffeffff 	.word	0xfffeffff
 8002f14:	fffbffff 	.word	0xfffbffff
 8002f18:	ffffefff 	.word	0xffffefff
 8002f1c:	ffffdfff 	.word	0xffffdfff
 8002f20:	ffefffff 	.word	0xffefffff
 8002f24:	ff9fffff 	.word	0xff9fffff
 8002f28:	fff7ffff 	.word	0xfff7ffff

08002f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b092      	sub	sp, #72	; 0x48
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2290      	movs	r2, #144	; 0x90
 8002f38:	2100      	movs	r1, #0
 8002f3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f3c:	f7fd fec0 	bl	8000cc0 <HAL_GetTick>
 8002f40:	0003      	movs	r3, r0
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d12d      	bne.n	8002fae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f54:	2280      	movs	r2, #128	; 0x80
 8002f56:	0391      	lsls	r1, r2, #14
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4a47      	ldr	r2, [pc, #284]	; (8003078 <UART_CheckIdleState+0x14c>)
 8002f5c:	9200      	str	r2, [sp, #0]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f000 f88e 	bl	8003080 <UART_WaitOnFlagUntilTimeout>
 8002f64:	1e03      	subs	r3, r0, #0
 8002f66:	d022      	beq.n	8002fae <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f68:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f72:	2301      	movs	r3, #1
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	f383 8810 	msr	PRIMASK, r3
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2180      	movs	r1, #128	; 0x80
 8002f8a:	438a      	bics	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	f383 8810 	msr	PRIMASK, r3
}
 8002f98:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2288      	movs	r2, #136	; 0x88
 8002f9e:	2120      	movs	r1, #32
 8002fa0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2284      	movs	r2, #132	; 0x84
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e060      	b.n	8003070 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d146      	bne.n	800304a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	03d1      	lsls	r1, r2, #15
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4a2c      	ldr	r2, [pc, #176]	; (8003078 <UART_CheckIdleState+0x14c>)
 8002fc6:	9200      	str	r2, [sp, #0]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f000 f859 	bl	8003080 <UART_WaitOnFlagUntilTimeout>
 8002fce:	1e03      	subs	r3, r0, #0
 8002fd0:	d03b      	beq.n	800304a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
 8002fdc:	2301      	movs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4922      	ldr	r1, [pc, #136]	; (800307c <UART_CheckIdleState+0x150>)
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f383 8810 	msr	PRIMASK, r3
}
 8003002:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003004:	f3ef 8310 	mrs	r3, PRIMASK
 8003008:	61bb      	str	r3, [r7, #24]
  return(result);
 800300a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
 800300e:	2301      	movs	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f383 8810 	msr	PRIMASK, r3
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	438a      	bics	r2, r1
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f383 8810 	msr	PRIMASK, r3
}
 8003034:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	228c      	movs	r2, #140	; 0x8c
 800303a:	2120      	movs	r1, #32
 800303c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2284      	movs	r2, #132	; 0x84
 8003042:	2100      	movs	r1, #0
 8003044:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e012      	b.n	8003070 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2288      	movs	r2, #136	; 0x88
 800304e:	2120      	movs	r1, #32
 8003050:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	228c      	movs	r2, #140	; 0x8c
 8003056:	2120      	movs	r1, #32
 8003058:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2284      	movs	r2, #132	; 0x84
 800306a:	2100      	movs	r1, #0
 800306c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	b010      	add	sp, #64	; 0x40
 8003076:	bd80      	pop	{r7, pc}
 8003078:	01ffffff 	.word	0x01ffffff
 800307c:	fffffedf 	.word	0xfffffedf

08003080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	1dfb      	adds	r3, r7, #7
 800308e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003090:	e051      	b.n	8003136 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	3301      	adds	r3, #1
 8003096:	d04e      	beq.n	8003136 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003098:	f7fd fe12 	bl	8000cc0 <HAL_GetTick>
 800309c:	0002      	movs	r2, r0
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d302      	bcc.n	80030ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e051      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2204      	movs	r2, #4
 80030ba:	4013      	ands	r3, r2
 80030bc:	d03b      	beq.n	8003136 <UART_WaitOnFlagUntilTimeout+0xb6>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d038      	beq.n	8003136 <UART_WaitOnFlagUntilTimeout+0xb6>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b40      	cmp	r3, #64	; 0x40
 80030c8:	d035      	beq.n	8003136 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2208      	movs	r2, #8
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d111      	bne.n	80030fc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2208      	movs	r2, #8
 80030de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 f83c 	bl	8003160 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2290      	movs	r2, #144	; 0x90
 80030ec:	2108      	movs	r1, #8
 80030ee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2284      	movs	r2, #132	; 0x84
 80030f4:	2100      	movs	r1, #0
 80030f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e02c      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	401a      	ands	r2, r3
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	429a      	cmp	r2, r3
 800310e:	d112      	bne.n	8003136 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	0018      	movs	r0, r3
 800311e:	f000 f81f 	bl	8003160 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2290      	movs	r2, #144	; 0x90
 8003126:	2120      	movs	r1, #32
 8003128:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2284      	movs	r2, #132	; 0x84
 800312e:	2100      	movs	r1, #0
 8003130:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e00f      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	4013      	ands	r3, r2
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	425a      	negs	r2, r3
 8003146:	4153      	adcs	r3, r2
 8003148:	b2db      	uxtb	r3, r3
 800314a:	001a      	movs	r2, r3
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d09e      	beq.n	8003092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	0018      	movs	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	b004      	add	sp, #16
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08e      	sub	sp, #56	; 0x38
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003168:	f3ef 8310 	mrs	r3, PRIMASK
 800316c:	617b      	str	r3, [r7, #20]
  return(result);
 800316e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
 8003172:	2301      	movs	r3, #1
 8003174:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f383 8810 	msr	PRIMASK, r3
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4926      	ldr	r1, [pc, #152]	; (8003224 <UART_EndRxTransfer+0xc4>)
 800318a:	400a      	ands	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319a:	f3ef 8310 	mrs	r3, PRIMASK
 800319e:	623b      	str	r3, [r7, #32]
  return(result);
 80031a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
 80031a4:	2301      	movs	r3, #1
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	f383 8810 	msr	PRIMASK, r3
}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	491b      	ldr	r1, [pc, #108]	; (8003228 <UART_EndRxTransfer+0xc8>)
 80031bc:	400a      	ands	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	f383 8810 	msr	PRIMASK, r3
}
 80031ca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d118      	bne.n	8003206 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d4:	f3ef 8310 	mrs	r3, PRIMASK
 80031d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80031da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031de:	2301      	movs	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f383 8810 	msr	PRIMASK, r3
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2110      	movs	r1, #16
 80031f6:	438a      	bics	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f383 8810 	msr	PRIMASK, r3
}
 8003204:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	228c      	movs	r2, #140	; 0x8c
 800320a:	2120      	movs	r1, #32
 800320c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	675a      	str	r2, [r3, #116]	; 0x74
}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b00e      	add	sp, #56	; 0x38
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	fffffedf 	.word	0xfffffedf
 8003228:	effffffe 	.word	0xeffffffe

0800322c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2284      	movs	r2, #132	; 0x84
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_UARTEx_DisableFifoMode+0x16>
 800323e:	2302      	movs	r3, #2
 8003240:	e027      	b.n	8003292 <HAL_UARTEx_DisableFifoMode+0x66>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2284      	movs	r2, #132	; 0x84
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2288      	movs	r2, #136	; 0x88
 800324e:	2124      	movs	r1, #36	; 0x24
 8003250:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	438a      	bics	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4a0b      	ldr	r2, [pc, #44]	; (800329c <HAL_UARTEx_DisableFifoMode+0x70>)
 800326e:	4013      	ands	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2288      	movs	r2, #136	; 0x88
 8003284:	2120      	movs	r1, #32
 8003286:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2284      	movs	r2, #132	; 0x84
 800328c:	2100      	movs	r1, #0
 800328e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b004      	add	sp, #16
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	dfffffff 	.word	0xdfffffff

080032a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2284      	movs	r2, #132	; 0x84
 80032ae:	5c9b      	ldrb	r3, [r3, r2]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e02e      	b.n	8003316 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2284      	movs	r2, #132	; 0x84
 80032bc:	2101      	movs	r1, #1
 80032be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2288      	movs	r2, #136	; 0x88
 80032c4:	2124      	movs	r1, #36	; 0x24
 80032c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2101      	movs	r1, #1
 80032dc:	438a      	bics	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	08d9      	lsrs	r1, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 f854 	bl	80033a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2288      	movs	r2, #136	; 0x88
 8003308:	2120      	movs	r1, #32
 800330a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2284      	movs	r2, #132	; 0x84
 8003310:	2100      	movs	r1, #0
 8003312:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b004      	add	sp, #16
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2284      	movs	r2, #132	; 0x84
 800332e:	5c9b      	ldrb	r3, [r3, r2]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003334:	2302      	movs	r3, #2
 8003336:	e02f      	b.n	8003398 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2284      	movs	r2, #132	; 0x84
 800333c:	2101      	movs	r1, #1
 800333e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2288      	movs	r2, #136	; 0x88
 8003344:	2124      	movs	r1, #36	; 0x24
 8003346:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2101      	movs	r1, #1
 800335c:	438a      	bics	r2, r1
 800335e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4a0e      	ldr	r2, [pc, #56]	; (80033a0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003368:	4013      	ands	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f813 	bl	80033a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2288      	movs	r2, #136	; 0x88
 800338a:	2120      	movs	r1, #32
 800338c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2284      	movs	r2, #132	; 0x84
 8003392:	2100      	movs	r1, #0
 8003394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b004      	add	sp, #16
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	f1ffffff 	.word	0xf1ffffff

080033a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80033a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d108      	bne.n	80033c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	226a      	movs	r2, #106	; 0x6a
 80033b8:	2101      	movs	r1, #1
 80033ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2268      	movs	r2, #104	; 0x68
 80033c0:	2101      	movs	r1, #1
 80033c2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80033c4:	e043      	b.n	800344e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80033c6:	260f      	movs	r6, #15
 80033c8:	19bb      	adds	r3, r7, r6
 80033ca:	2208      	movs	r2, #8
 80033cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80033ce:	200e      	movs	r0, #14
 80033d0:	183b      	adds	r3, r7, r0
 80033d2:	2208      	movs	r2, #8
 80033d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	0e5b      	lsrs	r3, r3, #25
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	240d      	movs	r4, #13
 80033e2:	193b      	adds	r3, r7, r4
 80033e4:	2107      	movs	r1, #7
 80033e6:	400a      	ands	r2, r1
 80033e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	0f5b      	lsrs	r3, r3, #29
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	250c      	movs	r5, #12
 80033f6:	197b      	adds	r3, r7, r5
 80033f8:	2107      	movs	r1, #7
 80033fa:	400a      	ands	r2, r1
 80033fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033fe:	183b      	adds	r3, r7, r0
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	197a      	adds	r2, r7, r5
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	4914      	ldr	r1, [pc, #80]	; (8003458 <UARTEx_SetNbDataToProcess+0xb4>)
 8003408:	5c8a      	ldrb	r2, [r1, r2]
 800340a:	435a      	muls	r2, r3
 800340c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800340e:	197b      	adds	r3, r7, r5
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <UARTEx_SetNbDataToProcess+0xb8>)
 8003414:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003416:	0019      	movs	r1, r3
 8003418:	f7fc fefc 	bl	8000214 <__divsi3>
 800341c:	0003      	movs	r3, r0
 800341e:	b299      	uxth	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	226a      	movs	r2, #106	; 0x6a
 8003424:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003426:	19bb      	adds	r3, r7, r6
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	193a      	adds	r2, r7, r4
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	490a      	ldr	r1, [pc, #40]	; (8003458 <UARTEx_SetNbDataToProcess+0xb4>)
 8003430:	5c8a      	ldrb	r2, [r1, r2]
 8003432:	435a      	muls	r2, r3
 8003434:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003436:	193b      	adds	r3, r7, r4
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <UARTEx_SetNbDataToProcess+0xb8>)
 800343c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800343e:	0019      	movs	r1, r3
 8003440:	f7fc fee8 	bl	8000214 <__divsi3>
 8003444:	0003      	movs	r3, r0
 8003446:	b299      	uxth	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2268      	movs	r2, #104	; 0x68
 800344c:	5299      	strh	r1, [r3, r2]
}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b005      	add	sp, #20
 8003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	0800359c 	.word	0x0800359c
 800345c:	080035a4 	.word	0x080035a4

08003460 <__libc_init_array>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	2600      	movs	r6, #0
 8003464:	4d0c      	ldr	r5, [pc, #48]	; (8003498 <__libc_init_array+0x38>)
 8003466:	4c0d      	ldr	r4, [pc, #52]	; (800349c <__libc_init_array+0x3c>)
 8003468:	1b64      	subs	r4, r4, r5
 800346a:	10a4      	asrs	r4, r4, #2
 800346c:	42a6      	cmp	r6, r4
 800346e:	d109      	bne.n	8003484 <__libc_init_array+0x24>
 8003470:	2600      	movs	r6, #0
 8003472:	f000 f821 	bl	80034b8 <_init>
 8003476:	4d0a      	ldr	r5, [pc, #40]	; (80034a0 <__libc_init_array+0x40>)
 8003478:	4c0a      	ldr	r4, [pc, #40]	; (80034a4 <__libc_init_array+0x44>)
 800347a:	1b64      	subs	r4, r4, r5
 800347c:	10a4      	asrs	r4, r4, #2
 800347e:	42a6      	cmp	r6, r4
 8003480:	d105      	bne.n	800348e <__libc_init_array+0x2e>
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	00b3      	lsls	r3, r6, #2
 8003486:	58eb      	ldr	r3, [r5, r3]
 8003488:	4798      	blx	r3
 800348a:	3601      	adds	r6, #1
 800348c:	e7ee      	b.n	800346c <__libc_init_array+0xc>
 800348e:	00b3      	lsls	r3, r6, #2
 8003490:	58eb      	ldr	r3, [r5, r3]
 8003492:	4798      	blx	r3
 8003494:	3601      	adds	r6, #1
 8003496:	e7f2      	b.n	800347e <__libc_init_array+0x1e>
 8003498:	080035ac 	.word	0x080035ac
 800349c:	080035ac 	.word	0x080035ac
 80034a0:	080035ac 	.word	0x080035ac
 80034a4:	080035b0 	.word	0x080035b0

080034a8 <memset>:
 80034a8:	0003      	movs	r3, r0
 80034aa:	1882      	adds	r2, r0, r2
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d100      	bne.n	80034b2 <memset+0xa>
 80034b0:	4770      	bx	lr
 80034b2:	7019      	strb	r1, [r3, #0]
 80034b4:	3301      	adds	r3, #1
 80034b6:	e7f9      	b.n	80034ac <memset+0x4>

080034b8 <_init>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr

080034c4 <_fini>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr
