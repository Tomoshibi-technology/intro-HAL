
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa0  08002aa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002aa0  08002aa0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aa0  08002aa0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d9a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015fb  00000000  00000000  00029dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000780  00000000  00000000  0002b3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f8  00000000  00000000  0002bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cd7  00000000  00000000  0002c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009698  00000000  00000000  00045f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098434  00000000  00000000  0004f5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e79f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dc8  00000000  00000000  000e7a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a50 	.word	0x08002a50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002a50 	.word	0x08002a50

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa35 	bl	800063c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f841 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8d5 	bl	8000384 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f8a3 	bl	8000324 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80001de:	f000 f877 	bl	80002d0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
//  uint16_t data = 0;

  uint8_t i = 1;
 80001e2:	2301      	movs	r3, #1
 80001e4:	71fb      	strb	r3, [r7, #7]
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80001e6:	2100      	movs	r1, #0
 80001e8:	4817      	ldr	r0, [pc, #92]	; (8000248 <main+0x80>)
 80001ea:	f000 fbb9 	bl	8000960 <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value<<4);
 80001ee:	4b17      	ldr	r3, [pc, #92]	; (800024c <main+0x84>)
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	011b      	lsls	r3, r3, #4
 80001f4:	2200      	movs	r2, #0
 80001f6:	2100      	movs	r1, #0
 80001f8:	4813      	ldr	r0, [pc, #76]	; (8000248 <main+0x80>)
 80001fa:	f000 fb8c 	bl	8000916 <HAL_DAC_SetValue>

	if  (updown == 0) {
 80001fe:	4b14      	ldr	r3, [pc, #80]	; (8000250 <main+0x88>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d10d      	bne.n	8000222 <main+0x5a>
		dac_value+=4;
 8000206:	4b11      	ldr	r3, [pc, #68]	; (800024c <main+0x84>)
 8000208:	881b      	ldrh	r3, [r3, #0]
 800020a:	3304      	adds	r3, #4
 800020c:	b29a      	uxth	r2, r3
 800020e:	4b0f      	ldr	r3, [pc, #60]	; (800024c <main+0x84>)
 8000210:	801a      	strh	r2, [r3, #0]
		if (dac_value > 252) updown = 1;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <main+0x84>)
 8000214:	881b      	ldrh	r3, [r3, #0]
 8000216:	2bfc      	cmp	r3, #252	; 0xfc
 8000218:	d910      	bls.n	800023c <main+0x74>
 800021a:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <main+0x88>)
 800021c:	2201      	movs	r2, #1
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	e00c      	b.n	800023c <main+0x74>
	} else {
		dac_value-=4;
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <main+0x84>)
 8000224:	881b      	ldrh	r3, [r3, #0]
 8000226:	3b04      	subs	r3, #4
 8000228:	b29a      	uxth	r2, r3
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <main+0x84>)
 800022c:	801a      	strh	r2, [r3, #0]
		if (dac_value < 3) updown = 0;
 800022e:	4b07      	ldr	r3, [pc, #28]	; (800024c <main+0x84>)
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	2b02      	cmp	r3, #2
 8000234:	d802      	bhi.n	800023c <main+0x74>
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <main+0x88>)
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
	}

//	HAL_Delay(1);

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 800023c:	2201      	movs	r2, #1
 800023e:	2108      	movs	r1, #8
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <main+0x8c>)
 8000242:	f000 fdb3 	bl	8000dac <HAL_GPIO_WritePin>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value<<4);
 8000246:	e7d2      	b.n	80001ee <main+0x26>
 8000248:	20000028 	.word	0x20000028
 800024c:	200000c4 	.word	0x200000c4
 8000250:	200000c8 	.word	0x200000c8
 8000254:	48000400 	.word	0x48000400

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fbea 	bl	8002a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	2310      	movs	r3, #16
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000286:	2300      	movs	r3, #0
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fda4 	bl	8000ddc <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800029a:	f000 f8bd 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fdce 	bl	8001e58 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c2:	f000 f8a9 	bl	8000418 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_DAC1_Init+0x4c>)
 80002e2:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <MX_DAC1_Init+0x50>)
 80002e4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80002e6:	480d      	ldr	r0, [pc, #52]	; (800031c <MX_DAC1_Init+0x4c>)
 80002e8:	f000 faf3 	bl	80008d2 <HAL_DAC_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80002f2:	f000 f891 	bl	8000418 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80002f6:	2300      	movs	r3, #0
 80002f8:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	4619      	mov	r1, r3
 8000304:	4805      	ldr	r0, [pc, #20]	; (800031c <MX_DAC1_Init+0x4c>)
 8000306:	f000 fb77 	bl	80009f8 <HAL_DAC_ConfigChannel>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000310:	f000 f882 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000028 	.word	0x20000028
 8000320:	40007400 	.word	0x40007400

08000324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000328:	4b14      	ldr	r3, [pc, #80]	; (800037c <MX_USART2_UART_Init+0x58>)
 800032a:	4a15      	ldr	r2, [pc, #84]	; (8000380 <MX_USART2_UART_Init+0x5c>)
 800032c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000330:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <MX_USART2_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_USART2_UART_Init+0x58>)
 800034a:	220c      	movs	r2, #12
 800034c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_USART2_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000368:	f001 ffac 	bl	80022c4 <HAL_UART_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000372:	f000 f851 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000003c 	.word	0x2000003c
 8000380:	40004400 	.word	0x40004400

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4b1d      	ldr	r3, [pc, #116]	; (8000410 <MX_GPIO_Init+0x8c>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <MX_GPIO_Init+0x8c>)
 80003a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <MX_GPIO_Init+0x8c>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b17      	ldr	r3, [pc, #92]	; (8000410 <MX_GPIO_Init+0x8c>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a16      	ldr	r2, [pc, #88]	; (8000410 <MX_GPIO_Init+0x8c>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_GPIO_Init+0x8c>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_GPIO_Init+0x8c>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a10      	ldr	r2, [pc, #64]	; (8000410 <MX_GPIO_Init+0x8c>)
 80003d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_GPIO_Init+0x8c>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2108      	movs	r1, #8
 80003e6:	480b      	ldr	r0, [pc, #44]	; (8000414 <MX_GPIO_Init+0x90>)
 80003e8:	f000 fce0 	bl	8000dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003ec:	2308      	movs	r3, #8
 80003ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	2301      	movs	r3, #1
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003fc:	f107 030c 	add.w	r3, r7, #12
 8000400:	4619      	mov	r1, r3
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_GPIO_Init+0x90>)
 8000404:	f000 fb60 	bl	8000ac8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000
 8000414:	48000400 	.word	0x48000400

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x44>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <HAL_MspInit+0x44>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x44>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <HAL_MspInit+0x44>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <HAL_MspInit+0x44>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <HAL_MspInit+0x44>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a15      	ldr	r2, [pc, #84]	; (80004e0 <HAL_DAC_MspInit+0x74>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d124      	bne.n	80004d8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a14      	ldr	r2, [pc, #80]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 8000494:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_DAC_MspInit+0x78>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004be:	2310      	movs	r3, #16
 80004c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c2:	2303      	movs	r3, #3
 80004c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	4619      	mov	r1, r3
 80004d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d4:	f000 faf8 	bl	8000ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80004d8:	bf00      	nop
 80004da:	3728      	adds	r7, #40	; 0x28
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40007400 	.word	0x40007400
 80004e4:	40021000 	.word	0x40021000

080004e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	; 0x28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a18      	ldr	r2, [pc, #96]	; (8000568 <HAL_UART_MspInit+0x80>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d129      	bne.n	800055e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <HAL_UART_MspInit+0x84>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a17      	ldr	r2, [pc, #92]	; (800056c <HAL_UART_MspInit+0x84>)
 8000510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_UART_MspInit+0x84>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_UART_MspInit+0x84>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a11      	ldr	r2, [pc, #68]	; (800056c <HAL_UART_MspInit+0x84>)
 8000528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_UART_MspInit+0x84>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800053a:	f248 0304 	movw	r3, #32772	; 0x8004
 800053e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000540:	2302      	movs	r3, #2
 8000542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2303      	movs	r3, #3
 800054a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800054c:	2307      	movs	r3, #7
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f000 fab5 	bl	8000ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800055e:	bf00      	nop
 8000560:	3728      	adds	r7, #40	; 0x28
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40004400 	.word	0x40004400
 800056c:	40021000 	.word	0x40021000

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 f884 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <SystemInit+0x20>)
 80005ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <SystemInit+0x20>)
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ec:	f7ff ffea 	bl	80005c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f2:	490d      	ldr	r1, [pc, #52]	; (8000628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <LoopForever+0xe>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000608:	4c0a      	ldr	r4, [pc, #40]	; (8000634 <LoopForever+0x16>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000616:	f002 f9ef 	bl	80029f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800061a:	f7ff fdd5 	bl	80001c8 <main>

0800061e <LoopForever>:

LoopForever:
    b LoopForever
 800061e:	e7fe      	b.n	800061e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000620:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800062c:	08002aa8 	.word	0x08002aa8
  ldr r2, =_sbss
 8000630:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000634:	200000d0 	.word	0x200000d0

08000638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC1_2_IRQHandler>
	...

0800063c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_Init+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <HAL_Init+0x28>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064c:	2003      	movs	r0, #3
 800064e:	f000 f90d 	bl	800086c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f808 	bl	8000668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000658:	f7ff fee4 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40022000 	.word	0x40022000

08000668 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_InitTick+0x54>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_InitTick+0x58>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000682:	fbb2 f3f3 	udiv	r3, r2, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f917 	bl	80008ba <HAL_SYSTICK_Config>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e00e      	b.n	80006b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b0f      	cmp	r3, #15
 800069a:	d80a      	bhi.n	80006b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069c:	2200      	movs	r2, #0
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f000 f8ed 	bl	8000882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <HAL_InitTick+0x5c>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e000      	b.n	80006b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20000004 	.word	0x20000004

080006c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_IncTick+0x20>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_IncTick+0x24>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <HAL_IncTick+0x24>)
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000008 	.word	0x20000008
 80006ec:	200000cc 	.word	0x200000cc

080006f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <HAL_GetTick+0x14>)
 80006f6:	681b      	ldr	r3, [r3, #0]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	200000cc 	.word	0x200000cc

08000708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073a:	4a04      	ldr	r2, [pc, #16]	; (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	60d3      	str	r3, [r2, #12]
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <__NVIC_GetPriorityGrouping+0x18>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	f003 0307 	and.w	r3, r3, #7
}
 800075e:	4618      	mov	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	db0a      	blt.n	8000796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	490c      	ldr	r1, [pc, #48]	; (80007b8 <__NVIC_SetPriority+0x4c>)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	0112      	lsls	r2, r2, #4
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	440b      	add	r3, r1
 8000790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000794:	e00a      	b.n	80007ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4908      	ldr	r1, [pc, #32]	; (80007bc <__NVIC_SetPriority+0x50>)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	3b04      	subs	r3, #4
 80007a4:	0112      	lsls	r2, r2, #4
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	440b      	add	r3, r1
 80007aa:	761a      	strb	r2, [r3, #24]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000e100 	.word	0xe000e100
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	f1c3 0307 	rsb	r3, r3, #7
 80007da:	2b04      	cmp	r3, #4
 80007dc:	bf28      	it	cs
 80007de:	2304      	movcs	r3, #4
 80007e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3304      	adds	r3, #4
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	d902      	bls.n	80007f0 <NVIC_EncodePriority+0x30>
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3b03      	subs	r3, #3
 80007ee:	e000      	b.n	80007f2 <NVIC_EncodePriority+0x32>
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	43da      	mvns	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	401a      	ands	r2, r3
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000808:	f04f 31ff 	mov.w	r1, #4294967295
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	43d9      	mvns	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	4313      	orrs	r3, r2
         );
}
 800081a:	4618      	mov	r0, r3
 800081c:	3724      	adds	r7, #36	; 0x24
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000838:	d301      	bcc.n	800083e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083a:	2301      	movs	r3, #1
 800083c:	e00f      	b.n	800085e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <SysTick_Config+0x40>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000846:	210f      	movs	r1, #15
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f7ff ff8e 	bl	800076c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <SysTick_Config+0x40>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <SysTick_Config+0x40>)
 8000858:	2207      	movs	r2, #7
 800085a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	e000e010 	.word	0xe000e010

0800086c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff47 	bl	8000708 <__NVIC_SetPriorityGrouping>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000894:	f7ff ff5c 	bl	8000750 <__NVIC_GetPriorityGrouping>
 8000898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	6978      	ldr	r0, [r7, #20]
 80008a0:	f7ff ff8e 	bl	80007c0 <NVIC_EncodePriority>
 80008a4:	4602      	mov	r2, r0
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff5d 	bl	800076c <__NVIC_SetPriority>
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ffb0 	bl	8000828 <SysTick_Config>
 80008c8:	4603      	mov	r3, r0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d101      	bne.n	80008e4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e014      	b.n	800090e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	791b      	ldrb	r3, [r3, #4]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d105      	bne.n	80008fa <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fdb9 	bl	800046c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2202      	movs	r2, #2
 80008fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2201      	movs	r2, #1
 800090a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8000916:	b480      	push	{r7}
 8000918:	b087      	sub	sp, #28
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d105      	bne.n	8000940 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	3308      	adds	r3, #8
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	e004      	b.n	800094a <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	3314      	adds	r3, #20
 8000948:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	461a      	mov	r2, r3
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	371c      	adds	r7, #28
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	795b      	ldrb	r3, [r3, #5]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d101      	bne.n	8000976 <HAL_DAC_Start+0x16>
 8000972:	2302      	movs	r3, #2
 8000974:	e039      	b.n	80009ea <HAL_DAC_Start+0x8a>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2201      	movs	r2, #1
 800097a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2202      	movs	r2, #2
 8000980:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6819      	ldr	r1, [r3, #0]
 8000988:	2201      	movs	r2, #1
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	409a      	lsls	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	430a      	orrs	r2, r1
 8000994:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d10f      	bne.n	80009bc <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80009a6:	2b3c      	cmp	r3, #60	; 0x3c
 80009a8:	d118      	bne.n	80009dc <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f042 0201 	orr.w	r2, r2, #1
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	e00f      	b.n	80009dc <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80009c6:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80009ca:	d107      	bne.n	80009dc <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f042 0202 	orr.w	r2, r2, #2
 80009da:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2201      	movs	r2, #1
 80009e0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	795b      	ldrb	r3, [r3, #5]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d101      	bne.n	8000a18 <HAL_DAC_ConfigChannel+0x20>
 8000a14:	2302      	movs	r3, #2
 8000a16:	e04e      	b.n	8000ab6 <HAL_DAC_ConfigChannel+0xbe>
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2202      	movs	r2, #2
 8000a22:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <HAL_DAC_ConfigChannel+0xcc>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d112      	bne.n	8000a5c <HAL_DAC_ConfigChannel+0x64>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10f      	bne.n	8000a5c <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000a3c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	e00e      	b.n	8000a7a <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8000a5c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6819      	ldr	r1, [r3, #0]
 8000a96:	22c0      	movs	r2, #192	; 0xc0
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	400a      	ands	r2, r1
 8000aa6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	371c      	adds	r7, #28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40007400 	.word	0x40007400

08000ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad6:	e14e      	b.n	8000d76 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	2101      	movs	r1, #1
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f000 8140 	beq.w	8000d70 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d005      	beq.n	8000b08 <HAL_GPIO_Init+0x40>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d130      	bne.n	8000b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2203      	movs	r2, #3
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3e:	2201      	movs	r2, #1
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	f003 0201 	and.w	r2, r3, #1
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d017      	beq.n	8000ba6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d123      	bne.n	8000bfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	08da      	lsrs	r2, r3, #3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3208      	adds	r2, #8
 8000bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	220f      	movs	r2, #15
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	691a      	ldr	r2, [r3, #16]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f003 0307 	and.w	r3, r3, #7
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	08da      	lsrs	r2, r3, #3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3208      	adds	r2, #8
 8000bf4:	6939      	ldr	r1, [r7, #16]
 8000bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0203 	and.w	r2, r3, #3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 809a 	beq.w	8000d70 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3c:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a54      	ldr	r2, [pc, #336]	; (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c54:	4a50      	ldr	r2, [pc, #320]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c7e:	d013      	beq.n	8000ca8 <HAL_GPIO_Init+0x1e0>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a46      	ldr	r2, [pc, #280]	; (8000d9c <HAL_GPIO_Init+0x2d4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d00d      	beq.n	8000ca4 <HAL_GPIO_Init+0x1dc>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a45      	ldr	r2, [pc, #276]	; (8000da0 <HAL_GPIO_Init+0x2d8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d007      	beq.n	8000ca0 <HAL_GPIO_Init+0x1d8>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <HAL_GPIO_Init+0x2dc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d101      	bne.n	8000c9c <HAL_GPIO_Init+0x1d4>
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e006      	b.n	8000caa <HAL_GPIO_Init+0x1e2>
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	e004      	b.n	8000caa <HAL_GPIO_Init+0x1e2>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e002      	b.n	8000caa <HAL_GPIO_Init+0x1e2>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <HAL_GPIO_Init+0x1e2>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	f002 0203 	and.w	r2, r2, #3
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	4093      	lsls	r3, r2
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cba:	4937      	ldr	r1, [pc, #220]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc8:	4b37      	ldr	r3, [pc, #220]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cec:	4a2e      	ldr	r2, [pc, #184]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d16:	4a24      	ldr	r2, [pc, #144]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f47f aea9 	bne.w	8000ad8 <HAL_GPIO_Init+0x10>
  }
}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	371c      	adds	r7, #28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	48000400 	.word	0x48000400
 8000da0:	48000800 	.word	0x48000800
 8000da4:	48000c00 	.word	0x48000c00
 8000da8:	40010400 	.word	0x40010400

08000dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
 8000db8:	4613      	mov	r3, r2
 8000dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f001 b823 	b.w	8001e48 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 817d 	beq.w	8001112 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e18:	4bbc      	ldr	r3, [pc, #752]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 030c 	and.w	r3, r3, #12
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d00c      	beq.n	8000e3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e24:	4bb9      	ldr	r3, [pc, #740]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 030c 	and.w	r3, r3, #12
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d15c      	bne.n	8000eea <HAL_RCC_OscConfig+0x10e>
 8000e30:	4bb6      	ldr	r3, [pc, #728]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3c:	d155      	bne.n	8000eea <HAL_RCC_OscConfig+0x10e>
 8000e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e42:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e4a:	fa93 f3a3 	rbit	r3, r3
 8000e4e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e56:	fab3 f383 	clz	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	095b      	lsrs	r3, r3, #5
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d102      	bne.n	8000e70 <HAL_RCC_OscConfig+0x94>
 8000e6a:	4ba8      	ldr	r3, [pc, #672]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	e015      	b.n	8000e9c <HAL_RCC_OscConfig+0xc0>
 8000e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e74:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e78:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e7c:	fa93 f3a3 	rbit	r3, r3
 8000e80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e88:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e8c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e90:	fa93 f3a3 	rbit	r3, r3
 8000e94:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e98:	4b9c      	ldr	r3, [pc, #624]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ea0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ea4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ea8:	fa92 f2a2 	rbit	r2, r2
 8000eac:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000eb0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000eb4:	fab2 f282 	clz	r2, r2
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	f042 0220 	orr.w	r2, r2, #32
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	f002 021f 	and.w	r2, r2, #31
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 811f 	beq.w	8001110 <HAL_RCC_OscConfig+0x334>
 8000ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8116 	bne.w	8001110 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f000 bfaf 	b.w	8001e48 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efa:	d106      	bne.n	8000f0a <HAL_RCC_OscConfig+0x12e>
 8000efc:	4b83      	ldr	r3, [pc, #524]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a82      	ldr	r2, [pc, #520]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e036      	b.n	8000f78 <HAL_RCC_OscConfig+0x19c>
 8000f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10c      	bne.n	8000f34 <HAL_RCC_OscConfig+0x158>
 8000f1a:	4b7c      	ldr	r3, [pc, #496]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a7b      	ldr	r2, [pc, #492]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	4b79      	ldr	r3, [pc, #484]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a78      	ldr	r2, [pc, #480]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e021      	b.n	8000f78 <HAL_RCC_OscConfig+0x19c>
 8000f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x184>
 8000f46:	4b71      	ldr	r3, [pc, #452]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a70      	ldr	r2, [pc, #448]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b6e      	ldr	r3, [pc, #440]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a6d      	ldr	r2, [pc, #436]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e00b      	b.n	8000f78 <HAL_RCC_OscConfig+0x19c>
 8000f60:	4b6a      	ldr	r3, [pc, #424]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a69      	ldr	r2, [pc, #420]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b67      	ldr	r3, [pc, #412]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a66      	ldr	r2, [pc, #408]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f76:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f78:	4b64      	ldr	r3, [pc, #400]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	f023 020f 	bic.w	r2, r3, #15
 8000f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	495f      	ldr	r1, [pc, #380]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d059      	beq.n	8001056 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fba5 	bl	80006f0 <HAL_GetTick>
 8000fa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	e00a      	b.n	8000fc2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fba0 	bl	80006f0 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b64      	cmp	r3, #100	; 0x64
 8000fba:	d902      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	f000 bf43 	b.w	8001e48 <HAL_RCC_OscConfig+0x106c>
 8000fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fd6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	fab3 f383 	clz	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	095b      	lsrs	r3, r3, #5
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d102      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x218>
 8000fee:	4b47      	ldr	r3, [pc, #284]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	e015      	b.n	8001020 <HAL_RCC_OscConfig+0x244>
 8000ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001000:	fa93 f3a3 	rbit	r3, r3
 8001004:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001010:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <HAL_RCC_OscConfig+0x330>)
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001024:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001028:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800102c:	fa92 f2a2 	rbit	r2, r2
 8001030:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001034:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001038:	fab2 f282 	clz	r2, r2
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	f042 0220 	orr.w	r2, r2, #32
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	f002 021f 	and.w	r2, r2, #31
 8001048:	2101      	movs	r1, #1
 800104a:	fa01 f202 	lsl.w	r2, r1, r2
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0ab      	beq.n	8000fac <HAL_RCC_OscConfig+0x1d0>
 8001054:	e05d      	b.n	8001112 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fb4b 	bl	80006f0 <HAL_GetTick>
 800105a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105e:	e00a      	b.n	8001076 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fb46 	bl	80006f0 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b64      	cmp	r3, #100	; 0x64
 800106e:	d902      	bls.n	8001076 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	f000 bee9 	b.w	8001e48 <HAL_RCC_OscConfig+0x106c>
 8001076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800108a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	fab3 f383 	clz	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	095b      	lsrs	r3, r3, #5
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d102      	bne.n	80010a8 <HAL_RCC_OscConfig+0x2cc>
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_RCC_OscConfig+0x330>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	e015      	b.n	80010d4 <HAL_RCC_OscConfig+0x2f8>
 80010a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_RCC_OscConfig+0x330>)
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010d8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010dc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010e0:	fa92 f2a2 	rbit	r2, r2
 80010e4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010ec:	fab2 f282 	clz	r2, r2
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	f042 0220 	orr.w	r2, r2, #32
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	f002 021f 	and.w	r2, r2, #31
 80010fc:	2101      	movs	r1, #1
 80010fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001102:	4013      	ands	r3, r2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1ab      	bne.n	8001060 <HAL_RCC_OscConfig+0x284>
 8001108:	e003      	b.n	8001112 <HAL_RCC_OscConfig+0x336>
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 817d 	beq.w	8001422 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001128:	4ba6      	ldr	r3, [pc, #664]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 030c 	and.w	r3, r3, #12
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00b      	beq.n	800114c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001134:	4ba3      	ldr	r3, [pc, #652]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b08      	cmp	r3, #8
 800113e:	d172      	bne.n	8001226 <HAL_RCC_OscConfig+0x44a>
 8001140:	4ba0      	ldr	r3, [pc, #640]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d16c      	bne.n	8001226 <HAL_RCC_OscConfig+0x44a>
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800115e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	fab3 f383 	clz	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	095b      	lsrs	r3, r3, #5
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d102      	bne.n	800117c <HAL_RCC_OscConfig+0x3a0>
 8001176:	4b93      	ldr	r3, [pc, #588]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	e013      	b.n	80011a4 <HAL_RCC_OscConfig+0x3c8>
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001182:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001194:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001198:	fa93 f3a3 	rbit	r3, r3
 800119c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011a0:	4b88      	ldr	r3, [pc, #544]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	2202      	movs	r2, #2
 80011a6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011ae:	fa92 f2a2 	rbit	r2, r2
 80011b2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011b6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011ba:	fab2 f282 	clz	r2, r2
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	f042 0220 	orr.w	r2, r2, #32
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	f002 021f 	and.w	r2, r2, #31
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f202 	lsl.w	r2, r1, r2
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00a      	beq.n	80011ec <HAL_RCC_OscConfig+0x410>
 80011d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d002      	beq.n	80011ec <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f000 be2e 	b.w	8001e48 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b75      	ldr	r3, [pc, #468]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	21f8      	movs	r1, #248	; 0xf8
 8001202:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800120a:	fa91 f1a1 	rbit	r1, r1
 800120e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001212:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001216:	fab1 f181 	clz	r1, r1
 800121a:	b2c9      	uxtb	r1, r1
 800121c:	408b      	lsls	r3, r1
 800121e:	4969      	ldr	r1, [pc, #420]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001224:	e0fd      	b.n	8001422 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800122a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 8088 	beq.w	8001348 <HAL_RCC_OscConfig+0x56c>
 8001238:	2301      	movs	r3, #1
 800123a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800124a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800124e:	fab3 f383 	clz	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001258:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	461a      	mov	r2, r3
 8001260:	2301      	movs	r3, #1
 8001262:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fa44 	bl	80006f0 <HAL_GetTick>
 8001268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e00a      	b.n	8001284 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fa3f 	bl	80006f0 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d902      	bls.n	8001284 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	f000 bde2 	b.w	8001e48 <HAL_RCC_OscConfig+0x106c>
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001296:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	095b      	lsrs	r3, r3, #5
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d102      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4d8>
 80012ae:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	e013      	b.n	80012dc <HAL_RCC_OscConfig+0x500>
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012d0:	fa93 f3a3 	rbit	r3, r3
 80012d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012d8:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	2202      	movs	r2, #2
 80012de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012e6:	fa92 f2a2 	rbit	r2, r2
 80012ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012f2:	fab2 f282 	clz	r2, r2
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	f042 0220 	orr.w	r2, r2, #32
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	f002 021f 	and.w	r2, r2, #31
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0af      	beq.n	800126e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	21f8      	movs	r1, #248	; 0xf8
 8001324:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800132c:	fa91 f1a1 	rbit	r1, r1
 8001330:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001334:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001338:	fab1 f181 	clz	r1, r1
 800133c:	b2c9      	uxtb	r1, r1
 800133e:	408b      	lsls	r3, r1
 8001340:	4920      	ldr	r1, [pc, #128]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
 8001346:	e06c      	b.n	8001422 <HAL_RCC_OscConfig+0x646>
 8001348:	2301      	movs	r3, #1
 800134a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800135a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135e:	fab3 f383 	clz	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001368:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	461a      	mov	r2, r3
 8001370:	2300      	movs	r3, #0
 8001372:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff f9bc 	bl	80006f0 <HAL_GetTick>
 8001378:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137c:	e00a      	b.n	8001394 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff f9b7 	bl	80006f0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d902      	bls.n	8001394 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	f000 bd5a 	b.w	8001e48 <HAL_RCC_OscConfig+0x106c>
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	fab3 f383 	clz	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	095b      	lsrs	r3, r3, #5
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d104      	bne.n	80013c8 <HAL_RCC_OscConfig+0x5ec>
 80013be:	4b01      	ldr	r3, [pc, #4]	; (80013c4 <HAL_RCC_OscConfig+0x5e8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	e015      	b.n	80013f0 <HAL_RCC_OscConfig+0x614>
 80013c4:	40021000 	.word	0x40021000
 80013c8:	2302      	movs	r3, #2
 80013ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013d2:	fa93 f3a3 	rbit	r3, r3
 80013d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013e4:	fa93 f3a3 	rbit	r3, r3
 80013e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013ec:	4bc8      	ldr	r3, [pc, #800]	; (8001710 <HAL_RCC_OscConfig+0x934>)
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	2202      	movs	r2, #2
 80013f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013fa:	fa92 f2a2 	rbit	r2, r2
 80013fe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001402:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001406:	fab2 f282 	clz	r2, r2
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	f042 0220 	orr.w	r2, r2, #32
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	f002 021f 	and.w	r2, r2, #31
 8001416:	2101      	movs	r1, #1
 8001418:	fa01 f202 	lsl.w	r2, r1, r2
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ad      	bne.n	800137e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001426:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8110 	beq.w	8001658 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d079      	beq.n	800153c <HAL_RCC_OscConfig+0x760>
 8001448:	2301      	movs	r3, #1
 800144a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800145a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4bab      	ldr	r3, [pc, #684]	; (8001714 <HAL_RCC_OscConfig+0x938>)
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	461a      	mov	r2, r3
 800146e:	2301      	movs	r3, #1
 8001470:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff f93d 	bl	80006f0 <HAL_GetTick>
 8001476:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	e00a      	b.n	8001492 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff f938 	bl	80006f0 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d902      	bls.n	8001492 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	f000 bcdb 	b.w	8001e48 <HAL_RCC_OscConfig+0x106c>
 8001492:	2302      	movs	r3, #2
 8001494:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001498:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800149c:	fa93 f3a3 	rbit	r3, r3
 80014a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014ac:	2202      	movs	r2, #2
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f2a3 	rbit	r2, r3
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014d0:	2202      	movs	r2, #2
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	fa93 f2a3 	rbit	r2, r3
 80014e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ec:	4b88      	ldr	r3, [pc, #544]	; (8001710 <HAL_RCC_OscConfig+0x934>)
 80014ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014f8:	2102      	movs	r1, #2
 80014fa:	6019      	str	r1, [r3, #0]
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fa93 f1a3 	rbit	r1, r3
 800150a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001512:	6019      	str	r1, [r3, #0]
  return result;
 8001514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001518:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0a0      	beq.n	800147c <HAL_RCC_OscConfig+0x6a0>
 800153a:	e08d      	b.n	8001658 <HAL_RCC_OscConfig+0x87c>
 800153c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001540:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	fa93 f2a3 	rbit	r2, r3
 8001556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800155e:	601a      	str	r2, [r3, #0]
  return result;
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001568:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156a:	fab3 f383 	clz	r3, r3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	4b68      	ldr	r3, [pc, #416]	; (8001714 <HAL_RCC_OscConfig+0x938>)
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	461a      	mov	r2, r3
 800157a:	2300      	movs	r3, #0
 800157c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff f8b7 	bl	80006f0 <HAL_GetTick>
 8001582:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001588:	f7ff f8b2 	bl	80006f0 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d902      	bls.n	800159e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	f000 bc55 	b.w	8001e48 <HAL_RCC_OscConfig+0x106c>
 800159e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015a6:	2202      	movs	r2, #2
 80015a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	fa93 f2a3 	rbit	r2, r3
 80015b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015ca:	2202      	movs	r2, #2
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	fa93 f2a3 	rbit	r2, r3
 80015dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015ee:	2202      	movs	r2, #2
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fa93 f2a3 	rbit	r2, r3
 8001600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001604:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001608:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <HAL_RCC_OscConfig+0x934>)
 800160c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800160e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001612:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001616:	2102      	movs	r1, #2
 8001618:	6019      	str	r1, [r3, #0]
 800161a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	fa93 f1a3 	rbit	r1, r3
 8001628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001630:	6019      	str	r1, [r3, #0]
  return result;
 8001632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001636:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	2101      	movs	r1, #1
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d197      	bne.n	8001588 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 81a1 	beq.w	80019b0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_RCC_OscConfig+0x934>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d116      	bne.n	80016ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_RCC_OscConfig+0x934>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	4a22      	ldr	r2, [pc, #136]	; (8001710 <HAL_RCC_OscConfig+0x934>)
 8001686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168a:	61d3      	str	r3, [r2, #28]
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_OscConfig+0x934>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001698:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_RCC_OscConfig+0x93c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11a      	bne.n	80016f0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_RCC_OscConfig+0x93c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_RCC_OscConfig+0x93c>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c6:	f7ff f813 	bl	80006f0 <HAL_GetTick>
 80016ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	e009      	b.n	80016e4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d0:	f7ff f80e 	bl	80006f0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	; 0x64
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e3b1      	b.n	8001e48 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_RCC_OscConfig+0x93c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ef      	beq.n	80016d0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d10d      	bne.n	800171c <HAL_RCC_OscConfig+0x940>
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_RCC_OscConfig+0x934>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a02      	ldr	r2, [pc, #8]	; (8001710 <HAL_RCC_OscConfig+0x934>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	e03c      	b.n	8001788 <HAL_RCC_OscConfig+0x9ac>
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	10908120 	.word	0x10908120
 8001718:	40007000 	.word	0x40007000
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10c      	bne.n	8001746 <HAL_RCC_OscConfig+0x96a>
 800172c:	4bc1      	ldr	r3, [pc, #772]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4ac0      	ldr	r2, [pc, #768]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	4bbe      	ldr	r3, [pc, #760]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4abd      	ldr	r2, [pc, #756]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 800173e:	f023 0304 	bic.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e020      	b.n	8001788 <HAL_RCC_OscConfig+0x9ac>
 8001746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x994>
 8001756:	4bb7      	ldr	r3, [pc, #732]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4ab6      	ldr	r2, [pc, #728]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	4bb4      	ldr	r3, [pc, #720]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4ab3      	ldr	r2, [pc, #716]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6213      	str	r3, [r2, #32]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0x9ac>
 8001770:	4bb0      	ldr	r3, [pc, #704]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4aaf      	ldr	r2, [pc, #700]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	4bad      	ldr	r3, [pc, #692]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4aac      	ldr	r2, [pc, #688]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 8001782:	f023 0304 	bic.w	r3, r3, #4
 8001786:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8081 	beq.w	800189c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7fe ffa9 	bl	80006f0 <HAL_GetTick>
 800179e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7fe ffa4 	bl	80006f0 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e345      	b.n	8001e48 <HAL_RCC_OscConfig+0x106c>
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017c4:	2202      	movs	r2, #2
 80017c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017e8:	2202      	movs	r2, #2
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fa93 f2a3 	rbit	r2, r3
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001802:	601a      	str	r2, [r3, #0]
  return result;
 8001804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001808:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800180c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180e:	fab3 f383 	clz	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	095b      	lsrs	r3, r3, #5
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d102      	bne.n	8001828 <HAL_RCC_OscConfig+0xa4c>
 8001822:	4b84      	ldr	r3, [pc, #528]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	e013      	b.n	8001850 <HAL_RCC_OscConfig+0xa74>
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001830:	2202      	movs	r2, #2
 8001832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001838:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	fa93 f2a3 	rbit	r2, r3
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	4b79      	ldr	r3, [pc, #484]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001854:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001858:	2102      	movs	r1, #2
 800185a:	6011      	str	r1, [r2, #0]
 800185c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001860:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	fa92 f1a2 	rbit	r1, r2
 800186a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800186e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001872:	6011      	str	r1, [r2, #0]
  return result;
 8001874:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001878:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	fab2 f282 	clz	r2, r2
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	f002 021f 	and.w	r2, r2, #31
 800188e:	2101      	movs	r1, #1
 8001890:	fa01 f202 	lsl.w	r2, r1, r2
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d084      	beq.n	80017a4 <HAL_RCC_OscConfig+0x9c8>
 800189a:	e07f      	b.n	800199c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7fe ff28 	bl	80006f0 <HAL_GetTick>
 80018a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7fe ff23 	bl	80006f0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e2c4      	b.n	8001e48 <HAL_RCC_OscConfig+0x106c>
 80018be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018c6:	2202      	movs	r2, #2
 80018c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018ea:	2202      	movs	r2, #2
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001904:	601a      	str	r2, [r3, #0]
  return result;
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800190e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d102      	bne.n	800192a <HAL_RCC_OscConfig+0xb4e>
 8001924:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	e013      	b.n	8001952 <HAL_RCC_OscConfig+0xb76>
 800192a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fa93 f2a3 	rbit	r2, r3
 8001944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001948:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001956:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800195a:	2102      	movs	r1, #2
 800195c:	6011      	str	r1, [r2, #0]
 800195e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001962:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	fa92 f1a2 	rbit	r1, r2
 800196c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001970:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001974:	6011      	str	r1, [r2, #0]
  return result;
 8001976:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800197a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	fab2 f282 	clz	r2, r2
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f002 021f 	and.w	r2, r2, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f202 	lsl.w	r2, r1, r2
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d184      	bne.n	80018a6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800199c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 80019aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8242 	beq.w	8001e46 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_RCC_OscConfig+0xc58>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	f000 8213 	beq.w	8001df6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	f040 8162 	bne.w	8001ca6 <HAL_RCC_OscConfig+0xeca>
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a06:	601a      	str	r2, [r3, #0]
  return result;
 8001a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	461a      	mov	r2, r3
 8001a24:	2300      	movs	r3, #0
 8001a26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7fe fe62 	bl	80006f0 <HAL_GetTick>
 8001a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a30:	e00c      	b.n	8001a4c <HAL_RCC_OscConfig+0xc70>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7fe fe5a 	bl	80006f0 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e1fd      	b.n	8001e48 <HAL_RCC_OscConfig+0x106c>
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a70:	601a      	str	r2, [r3, #0]
  return result;
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d102      	bne.n	8001a96 <HAL_RCC_OscConfig+0xcba>
 8001a90:	4bb0      	ldr	r3, [pc, #704]	; (8001d54 <HAL_RCC_OscConfig+0xf78>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	e027      	b.n	8001ae6 <HAL_RCC_OscConfig+0xd0a>
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	4b9c      	ldr	r3, [pc, #624]	; (8001d54 <HAL_RCC_OscConfig+0xf78>)
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aea:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001aee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001af2:	6011      	str	r1, [r2, #0]
 8001af4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	fa92 f1a2 	rbit	r1, r2
 8001b02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b06:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b0a:	6011      	str	r1, [r2, #0]
  return result;
 8001b0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b10:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	fab2 f282 	clz	r2, r2
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	f042 0220 	orr.w	r2, r2, #32
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f002 021f 	and.w	r2, r2, #31
 8001b26:	2101      	movs	r1, #1
 8001b28:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d182      	bne.n	8001a38 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b32:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0xf78>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	430b      	orrs	r3, r1
 8001b54:	497f      	ldr	r1, [pc, #508]	; (8001d54 <HAL_RCC_OscConfig+0xf78>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f2a3 	rbit	r2, r3
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b7e:	601a      	str	r2, [r3, #0]
  return result;
 8001b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b84:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b88:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7fe fda6 	bl	80006f0 <HAL_GetTick>
 8001ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001baa:	f7fe fda1 	bl	80006f0 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e144      	b.n	8001e48 <HAL_RCC_OscConfig+0x106c>
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fa93 f2a3 	rbit	r2, r3
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001be2:	601a      	str	r2, [r3, #0]
  return result;
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d102      	bne.n	8001c08 <HAL_RCC_OscConfig+0xe2c>
 8001c02:	4b54      	ldr	r3, [pc, #336]	; (8001d54 <HAL_RCC_OscConfig+0xf78>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	e027      	b.n	8001c58 <HAL_RCC_OscConfig+0xe7c>
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fa93 f2a3 	rbit	r2, r3
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <HAL_RCC_OscConfig+0xf78>)
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c64:	6011      	str	r1, [r2, #0]
 8001c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	fa92 f1a2 	rbit	r1, r2
 8001c74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c78:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c7c:	6011      	str	r1, [r2, #0]
  return result;
 8001c7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c82:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	fab2 f282 	clz	r2, r2
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	f042 0220 	orr.w	r2, r2, #32
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f002 021f 	and.w	r2, r2, #31
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d082      	beq.n	8001baa <HAL_RCC_OscConfig+0xdce>
 8001ca4:	e0cf      	b.n	8001e46 <HAL_RCC_OscConfig+0x106a>
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	fa93 f2a3 	rbit	r2, r3
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cca:	601a      	str	r2, [r3, #0]
  return result;
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cd4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2300      	movs	r3, #0
 8001cea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe fd00 	bl	80006f0 <HAL_GetTick>
 8001cf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	e009      	b.n	8001d0a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7fe fcfb 	bl	80006f0 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e09e      	b.n	8001e48 <HAL_RCC_OscConfig+0x106c>
 8001d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	fa93 f2a3 	rbit	r2, r3
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d2e:	601a      	str	r2, [r3, #0]
  return result;
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	095b      	lsrs	r3, r3, #5
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d104      	bne.n	8001d58 <HAL_RCC_OscConfig+0xf7c>
 8001d4e:	4b01      	ldr	r3, [pc, #4]	; (8001d54 <HAL_RCC_OscConfig+0xf78>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	e029      	b.n	8001da8 <HAL_RCC_OscConfig+0xfcc>
 8001d54:	40021000 	.word	0x40021000
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	fa93 f2a3 	rbit	r2, r3
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_RCC_OscConfig+0x1078>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dac:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001db0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001db4:	6011      	str	r1, [r2, #0]
 8001db6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dba:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fa92 f1a2 	rbit	r1, r2
 8001dc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dcc:	6011      	str	r1, [r2, #0]
  return result;
 8001dce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	fab2 f282 	clz	r2, r2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f042 0220 	orr.w	r2, r2, #32
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f002 021f 	and.w	r2, r2, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d180      	bne.n	8001cf6 <HAL_RCC_OscConfig+0xf1a>
 8001df4:	e027      	b.n	8001e46 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e01e      	b.n	8001e48 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_RCC_OscConfig+0x1078>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d10b      	bne.n	8001e42 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b09e      	sub	sp, #120	; 0x78
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e162      	b.n	8002136 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b90      	ldr	r3, [pc, #576]	; (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d910      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b8d      	ldr	r3, [pc, #564]	; (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	498b      	ldr	r1, [pc, #556]	; (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b89      	ldr	r3, [pc, #548]	; (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e14a      	b.n	8002136 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b82      	ldr	r3, [pc, #520]	; (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	497f      	ldr	r1, [pc, #508]	; (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80dc 	beq.w	8002084 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d13c      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xf6>
 8001ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_ClockConfig+0xa6>
 8001ef8:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	e00f      	b.n	8001f1e <HAL_RCC_ClockConfig+0xc6>
 8001efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f10:	663b      	str	r3, [r7, #96]	; 0x60
 8001f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f22:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f26:	fa92 f2a2 	rbit	r2, r2
 8001f2a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f2e:	fab2 f282 	clz	r2, r2
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	f042 0220 	orr.w	r2, r2, #32
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f002 021f 	and.w	r2, r2, #31
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d17b      	bne.n	8002042 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0f3      	b.n	8002136 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d13c      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x178>
 8001f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x128>
 8001f7a:	4b4f      	ldr	r3, [pc, #316]	; (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	e00f      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
 8001f80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f92:	643b      	str	r3, [r7, #64]	; 0x40
 8001f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f9c:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fa8:	fa92 f2a2 	rbit	r2, r2
 8001fac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb0:	fab2 f282 	clz	r2, r2
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f042 0220 	orr.w	r2, r2, #32
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f002 021f 	and.w	r2, r2, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d13a      	bne.n	8002042 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0b2      	b.n	8002136 <HAL_RCC_ClockConfig+0x2de>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d102      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x1a0>
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	e00d      	b.n	8002014 <HAL_RCC_ClockConfig+0x1bc>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	2302      	movs	r3, #2
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2202      	movs	r2, #2
 8002016:	61ba      	str	r2, [r7, #24]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	fa92 f2a2 	rbit	r2, r2
 800201e:	617a      	str	r2, [r7, #20]
  return result;
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	fab2 f282 	clz	r2, r2
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	f042 0220 	orr.w	r2, r2, #32
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f002 021f 	and.w	r2, r2, #31
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e079      	b.n	8002136 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	491a      	ldr	r1, [pc, #104]	; (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002054:	f7fe fb4c 	bl	80006f0 <HAL_GetTick>
 8002058:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7fe fb48 	bl	80006f0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e061      	b.n	8002136 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_ClockConfig+0x260>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d214      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4906      	ldr	r1, [pc, #24]	; (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e040      	b.n	8002136 <HAL_RCC_ClockConfig+0x2de>
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_ClockConfig+0x2e8>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	491a      	ldr	r1, [pc, #104]	; (8002140 <HAL_RCC_ClockConfig+0x2e8>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_RCC_ClockConfig+0x2e8>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4912      	ldr	r1, [pc, #72]	; (8002140 <HAL_RCC_ClockConfig+0x2e8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020fa:	f000 f829 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80020fe:	4601      	mov	r1, r0
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_RCC_ClockConfig+0x2e8>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002108:	22f0      	movs	r2, #240	; 0xf0
 800210a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	fa92 f2a2 	rbit	r2, r2
 8002112:	60fa      	str	r2, [r7, #12]
  return result;
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	fab2 f282 	clz	r2, r2
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	40d3      	lsrs	r3, r2
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x2ec>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	fa21 f303 	lsr.w	r3, r1, r3
 8002126:	4a08      	ldr	r2, [pc, #32]	; (8002148 <HAL_RCC_ClockConfig+0x2f0>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_RCC_ClockConfig+0x2f4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fa9a 	bl	8000668 <HAL_InitTick>
  
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3778      	adds	r7, #120	; 0x78
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	08002a68 	.word	0x08002a68
 8002148:	20000000 	.word	0x20000000
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b08b      	sub	sp, #44	; 0x2c
 8002154:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_RCC_GetSysClockFreq+0xc0>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x30>
 800217a:	2b08      	cmp	r3, #8
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x36>
 800217e:	e03c      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002182:	623b      	str	r3, [r7, #32]
      break;
 8002184:	e03c      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800218c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002190:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	fa92 f2a2 	rbit	r2, r2
 8002198:	607a      	str	r2, [r7, #4]
  return result;
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	fab2 f282 	clz	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	40d3      	lsrs	r3, r2
 80021a4:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	220f      	movs	r2, #15
 80021b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	fa92 f2a2 	rbit	r2, r2
 80021bc:	60fa      	str	r2, [r7, #12]
  return result;
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	fab2 f282 	clz	r2, r2
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	40d3      	lsrs	r3, r2
 80021c8:	4a14      	ldr	r2, [pc, #80]	; (800221c <HAL_RCC_GetSysClockFreq+0xcc>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021d8:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
 80021e8:	e004      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	623b      	str	r3, [r7, #32]
      break;
 80021f8:	e002      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021fc:	623b      	str	r3, [r7, #32]
      break;
 80021fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002200:	6a3b      	ldr	r3, [r7, #32]
}
 8002202:	4618      	mov	r0, r3
 8002204:	372c      	adds	r7, #44	; 0x2c
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	007a1200 	.word	0x007a1200
 8002218:	08002a80 	.word	0x08002a80
 800221c:	08002a90 	.word	0x08002a90
 8002220:	003d0900 	.word	0x003d0900

08002224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_RCC_GetHCLKFreq+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002242:	f7ff ffef 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002246:	4601      	mov	r1, r0
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002250:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002254:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	fa92 f2a2 	rbit	r2, r2
 800225c:	603a      	str	r2, [r7, #0]
  return result;
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	fab2 f282 	clz	r2, r2
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	40d3      	lsrs	r3, r2
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <HAL_RCC_GetPCLK1Freq+0x40>)
 800226a:	5cd3      	ldrb	r3, [r2, r3]
 800226c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	08002a78 	.word	0x08002a78

08002280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002286:	f7ff ffcd 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 800228a:	4601      	mov	r1, r0
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002294:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002298:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	fa92 f2a2 	rbit	r2, r2
 80022a0:	603a      	str	r2, [r7, #0]
  return result;
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	fab2 f282 	clz	r2, r2
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	40d3      	lsrs	r3, r2
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	08002a78 	.word	0x08002a78

080022c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e040      	b.n	8002358 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe f8fe 	bl	80004e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0201 	bic.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f82c 	bl	8002360 <UART_SetConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e022      	b.n	8002358 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f956 	bl	80025cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800232e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800233e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f9dd 	bl	8002710 <UART_CheckIdleState>
 8002356:	4603      	mov	r3, r0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4b8a      	ldr	r3, [pc, #552]	; (80025b4 <UART_SetConfig+0x254>)
 800238c:	4013      	ands	r3, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	6979      	ldr	r1, [r7, #20]
 8002394:	430b      	orrs	r3, r1
 8002396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a78      	ldr	r2, [pc, #480]	; (80025b8 <UART_SetConfig+0x258>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d120      	bne.n	800241e <UART_SetConfig+0xbe>
 80023dc:	4b77      	ldr	r3, [pc, #476]	; (80025bc <UART_SetConfig+0x25c>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d817      	bhi.n	8002418 <UART_SetConfig+0xb8>
 80023e8:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <UART_SetConfig+0x90>)
 80023ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ee:	bf00      	nop
 80023f0:	08002401 	.word	0x08002401
 80023f4:	0800240d 	.word	0x0800240d
 80023f8:	08002413 	.word	0x08002413
 80023fc:	08002407 	.word	0x08002407
 8002400:	2300      	movs	r3, #0
 8002402:	77fb      	strb	r3, [r7, #31]
 8002404:	e01d      	b.n	8002442 <UART_SetConfig+0xe2>
 8002406:	2302      	movs	r3, #2
 8002408:	77fb      	strb	r3, [r7, #31]
 800240a:	e01a      	b.n	8002442 <UART_SetConfig+0xe2>
 800240c:	2304      	movs	r3, #4
 800240e:	77fb      	strb	r3, [r7, #31]
 8002410:	e017      	b.n	8002442 <UART_SetConfig+0xe2>
 8002412:	2308      	movs	r3, #8
 8002414:	77fb      	strb	r3, [r7, #31]
 8002416:	e014      	b.n	8002442 <UART_SetConfig+0xe2>
 8002418:	2310      	movs	r3, #16
 800241a:	77fb      	strb	r3, [r7, #31]
 800241c:	e011      	b.n	8002442 <UART_SetConfig+0xe2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a67      	ldr	r2, [pc, #412]	; (80025c0 <UART_SetConfig+0x260>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d102      	bne.n	800242e <UART_SetConfig+0xce>
 8002428:	2300      	movs	r3, #0
 800242a:	77fb      	strb	r3, [r7, #31]
 800242c:	e009      	b.n	8002442 <UART_SetConfig+0xe2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a64      	ldr	r2, [pc, #400]	; (80025c4 <UART_SetConfig+0x264>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d102      	bne.n	800243e <UART_SetConfig+0xde>
 8002438:	2300      	movs	r3, #0
 800243a:	77fb      	strb	r3, [r7, #31]
 800243c:	e001      	b.n	8002442 <UART_SetConfig+0xe2>
 800243e:	2310      	movs	r3, #16
 8002440:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800244a:	d15a      	bne.n	8002502 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800244c:	7ffb      	ldrb	r3, [r7, #31]
 800244e:	2b08      	cmp	r3, #8
 8002450:	d827      	bhi.n	80024a2 <UART_SetConfig+0x142>
 8002452:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <UART_SetConfig+0xf8>)
 8002454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002458:	0800247d 	.word	0x0800247d
 800245c:	08002485 	.word	0x08002485
 8002460:	0800248d 	.word	0x0800248d
 8002464:	080024a3 	.word	0x080024a3
 8002468:	08002493 	.word	0x08002493
 800246c:	080024a3 	.word	0x080024a3
 8002470:	080024a3 	.word	0x080024a3
 8002474:	080024a3 	.word	0x080024a3
 8002478:	0800249b 	.word	0x0800249b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800247c:	f7ff fede 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8002480:	61b8      	str	r0, [r7, #24]
        break;
 8002482:	e013      	b.n	80024ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002484:	f7ff fefc 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 8002488:	61b8      	str	r0, [r7, #24]
        break;
 800248a:	e00f      	b.n	80024ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800248c:	4b4e      	ldr	r3, [pc, #312]	; (80025c8 <UART_SetConfig+0x268>)
 800248e:	61bb      	str	r3, [r7, #24]
        break;
 8002490:	e00c      	b.n	80024ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002492:	f7ff fe5d 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8002496:	61b8      	str	r0, [r7, #24]
        break;
 8002498:	e008      	b.n	80024ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800249a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800249e:	61bb      	str	r3, [r7, #24]
        break;
 80024a0:	e004      	b.n	80024ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	77bb      	strb	r3, [r7, #30]
        break;
 80024aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d074      	beq.n	800259c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	005a      	lsls	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	441a      	add	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2b0f      	cmp	r3, #15
 80024cc:	d916      	bls.n	80024fc <UART_SetConfig+0x19c>
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d212      	bcs.n	80024fc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f023 030f 	bic.w	r3, r3, #15
 80024de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	89fb      	ldrh	r3, [r7, #14]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	89fa      	ldrh	r2, [r7, #14]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	e04f      	b.n	800259c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	77bb      	strb	r3, [r7, #30]
 8002500:	e04c      	b.n	800259c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002502:	7ffb      	ldrb	r3, [r7, #31]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d828      	bhi.n	800255a <UART_SetConfig+0x1fa>
 8002508:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <UART_SetConfig+0x1b0>)
 800250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250e:	bf00      	nop
 8002510:	08002535 	.word	0x08002535
 8002514:	0800253d 	.word	0x0800253d
 8002518:	08002545 	.word	0x08002545
 800251c:	0800255b 	.word	0x0800255b
 8002520:	0800254b 	.word	0x0800254b
 8002524:	0800255b 	.word	0x0800255b
 8002528:	0800255b 	.word	0x0800255b
 800252c:	0800255b 	.word	0x0800255b
 8002530:	08002553 	.word	0x08002553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002534:	f7ff fe82 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8002538:	61b8      	str	r0, [r7, #24]
        break;
 800253a:	e013      	b.n	8002564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800253c:	f7ff fea0 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 8002540:	61b8      	str	r0, [r7, #24]
        break;
 8002542:	e00f      	b.n	8002564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002544:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <UART_SetConfig+0x268>)
 8002546:	61bb      	str	r3, [r7, #24]
        break;
 8002548:	e00c      	b.n	8002564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800254a:	f7ff fe01 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 800254e:	61b8      	str	r0, [r7, #24]
        break;
 8002550:	e008      	b.n	8002564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002556:	61bb      	str	r3, [r7, #24]
        break;
 8002558:	e004      	b.n	8002564 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	77bb      	strb	r3, [r7, #30]
        break;
 8002562:	bf00      	nop
    }

    if (pclk != 0U)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d018      	beq.n	800259c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	085a      	lsrs	r2, r3, #1
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	441a      	add	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d909      	bls.n	8002598 <UART_SetConfig+0x238>
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258a:	d205      	bcs.n	8002598 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	b29a      	uxth	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	e001      	b.n	800259c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80025a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3720      	adds	r7, #32
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	efff69f3 	.word	0xefff69f3
 80025b8:	40013800 	.word	0x40013800
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40004400 	.word	0x40004400
 80025c4:	40004800 	.word	0x40004800
 80025c8:	007a1200 	.word	0x007a1200

080025cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01a      	beq.n	80026e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ca:	d10a      	bne.n	80026e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
  }
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b098      	sub	sp, #96	; 0x60
 8002714:	af02      	add	r7, sp, #8
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002720:	f7fd ffe6 	bl	80006f0 <HAL_GetTick>
 8002724:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b08      	cmp	r3, #8
 8002732:	d12e      	bne.n	8002792 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273c:	2200      	movs	r2, #0
 800273e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f88c 	bl	8002860 <UART_WaitOnFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d021      	beq.n	8002792 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	e853 3f00 	ldrex	r3, [r3]
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800275c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002762:	653b      	str	r3, [r7, #80]	; 0x50
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800276c:	647b      	str	r3, [r7, #68]	; 0x44
 800276e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002770:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002772:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002774:	e841 2300 	strex	r3, r2, [r1]
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800277a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1e6      	bne.n	800274e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e062      	b.n	8002858 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b04      	cmp	r3, #4
 800279e:	d149      	bne.n	8002834 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	2200      	movs	r2, #0
 80027aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f856 	bl	8002860 <UART_WaitOnFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d03c      	beq.n	8002834 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	623b      	str	r3, [r7, #32]
   return(result);
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
 80027da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e0:	e841 2300 	strex	r3, r2, [r1]
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e6      	bne.n	80027ba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3308      	adds	r3, #8
 80027f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	e853 3f00 	ldrex	r3, [r3]
 80027fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	64bb      	str	r3, [r7, #72]	; 0x48
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3308      	adds	r3, #8
 800280a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800280c:	61fa      	str	r2, [r7, #28]
 800280e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002810:	69b9      	ldr	r1, [r7, #24]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	e841 2300 	strex	r3, r2, [r1]
 8002818:	617b      	str	r3, [r7, #20]
   return(result);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e5      	bne.n	80027ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e011      	b.n	8002858 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2220      	movs	r2, #32
 800283e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3758      	adds	r7, #88	; 0x58
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002870:	e049      	b.n	8002906 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d045      	beq.n	8002906 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287a:	f7fd ff39 	bl	80006f0 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	429a      	cmp	r2, r3
 8002888:	d302      	bcc.n	8002890 <UART_WaitOnFlagUntilTimeout+0x30>
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e048      	b.n	8002926 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d031      	beq.n	8002906 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d110      	bne.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2208      	movs	r2, #8
 80028b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f838 	bl	800292e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2208      	movs	r2, #8
 80028c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e029      	b.n	8002926 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e0:	d111      	bne.n	8002906 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f81e 	bl	800292e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e00f      	b.n	8002926 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	429a      	cmp	r2, r3
 8002914:	bf0c      	ite	eq
 8002916:	2301      	moveq	r3, #1
 8002918:	2300      	movne	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	429a      	cmp	r2, r3
 8002922:	d0a6      	beq.n	8002872 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800292e:	b480      	push	{r7}
 8002930:	b095      	sub	sp, #84	; 0x54
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293e:	e853 3f00 	ldrex	r3, [r3]
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002954:	643b      	str	r3, [r7, #64]	; 0x40
 8002956:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002958:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800295a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800295c:	e841 2300 	strex	r3, r2, [r1]
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e6      	bne.n	8002936 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3308      	adds	r3, #8
 800296e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	e853 3f00 	ldrex	r3, [r3]
 8002976:	61fb      	str	r3, [r7, #28]
   return(result);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3308      	adds	r3, #8
 8002986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002988:	62fa      	str	r2, [r7, #44]	; 0x2c
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800298e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002990:	e841 2300 	strex	r3, r2, [r1]
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e5      	bne.n	8002968 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d118      	bne.n	80029d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	e853 3f00 	ldrex	r3, [r3]
 80029b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f023 0310 	bic.w	r3, r3, #16
 80029b8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c6:	6979      	ldr	r1, [r7, #20]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	e841 2300 	strex	r3, r2, [r1]
 80029ce:	613b      	str	r3, [r7, #16]
   return(result);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1e6      	bne.n	80029a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80029ea:	bf00      	nop
 80029ec:	3754      	adds	r7, #84	; 0x54
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <__libc_init_array>:
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	4d0d      	ldr	r5, [pc, #52]	; (8002a30 <__libc_init_array+0x38>)
 80029fc:	4c0d      	ldr	r4, [pc, #52]	; (8002a34 <__libc_init_array+0x3c>)
 80029fe:	1b64      	subs	r4, r4, r5
 8002a00:	10a4      	asrs	r4, r4, #2
 8002a02:	2600      	movs	r6, #0
 8002a04:	42a6      	cmp	r6, r4
 8002a06:	d109      	bne.n	8002a1c <__libc_init_array+0x24>
 8002a08:	4d0b      	ldr	r5, [pc, #44]	; (8002a38 <__libc_init_array+0x40>)
 8002a0a:	4c0c      	ldr	r4, [pc, #48]	; (8002a3c <__libc_init_array+0x44>)
 8002a0c:	f000 f820 	bl	8002a50 <_init>
 8002a10:	1b64      	subs	r4, r4, r5
 8002a12:	10a4      	asrs	r4, r4, #2
 8002a14:	2600      	movs	r6, #0
 8002a16:	42a6      	cmp	r6, r4
 8002a18:	d105      	bne.n	8002a26 <__libc_init_array+0x2e>
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
 8002a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a20:	4798      	blx	r3
 8002a22:	3601      	adds	r6, #1
 8002a24:	e7ee      	b.n	8002a04 <__libc_init_array+0xc>
 8002a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2a:	4798      	blx	r3
 8002a2c:	3601      	adds	r6, #1
 8002a2e:	e7f2      	b.n	8002a16 <__libc_init_array+0x1e>
 8002a30:	08002aa0 	.word	0x08002aa0
 8002a34:	08002aa0 	.word	0x08002aa0
 8002a38:	08002aa0 	.word	0x08002aa0
 8002a3c:	08002aa4 	.word	0x08002aa4

08002a40 <memset>:
 8002a40:	4402      	add	r2, r0
 8002a42:	4603      	mov	r3, r0
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d100      	bne.n	8002a4a <memset+0xa>
 8002a48:	4770      	bx	lr
 8002a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a4e:	e7f9      	b.n	8002a44 <memset+0x4>

08002a50 <_init>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	bf00      	nop
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr

08002a5c <_fini>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	bf00      	nop
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr
