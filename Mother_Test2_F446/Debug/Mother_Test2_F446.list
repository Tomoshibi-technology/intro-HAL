
Mother_Test2_F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08005084  08005084  00015084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005370  08005370  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005378  08005378  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000007c  080053fc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  080053fc  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9ef  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8d  00000000  00000000  0002da9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002f728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  00030240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255b3  00000000  00000000  00030cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2a1  00000000  00000000  0005626b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d064d  00000000  00000000  0006450c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134b59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003730  00000000  00000000  00134bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800506c 	.word	0x0800506c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	0800506c 	.word	0x0800506c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4619      	mov	r1, r3
 8000dae:	2007      	movs	r0, #7
 8000db0:	f000 fa02 	bl	80011b8 <bno055_writeData>
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	203d      	movs	r0, #61	; 0x3d
 8000dcc:	f000 f9f4 	bl	80011b8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d103      	bne.n	8000dde <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000dd6:	2013      	movs	r0, #19
 8000dd8:	f000 f9e2 	bl	80011a0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ddc:	e002      	b.n	8000de4 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000dde:	2007      	movs	r0, #7
 8000de0:	f000 f9de 	bl	80011a0 <bno055_delay>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff ffe3 	bl	8000dbc <bno055_setOperationMode>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000dfe:	200c      	movs	r0, #12
 8000e00:	f7ff ffdc 	bl	8000dbc <bno055_setOperationMode>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	203f      	movs	r0, #63	; 0x3f
 8000e10:	f000 f9d2 	bl	80011b8 <bno055_writeData>
  bno055_delay(800);
 8000e14:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000e18:	f000 f9c2 	bl	80011a0 <bno055_delay>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  bno055_reset();
 8000e26:	f7ff ffef 	bl	8000e08 <bno055_reset>

  uint8_t id = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	2201      	movs	r2, #1
 8000e32:	4619      	mov	r1, r3
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 faab 	bl	8001390 <bno055_readData>
  if (id != BNO055_ID) {
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2ba0      	cmp	r3, #160	; 0xa0
 8000e3e:	d004      	beq.n	8000e4a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	4619      	mov	r1, r3
 8000e44:	4809      	ldr	r0, [pc, #36]	; (8000e6c <bno055_setup+0x4c>)
 8000e46:	f003 f90d 	bl	8004064 <iprintf>
  }
  bno055_setPage(0);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff ffa8 	bl	8000da0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000e50:	2100      	movs	r1, #0
 8000e52:	203f      	movs	r0, #63	; 0x3f
 8000e54:	f000 f9b0 	bl	80011b8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000e58:	f7ff ffc8 	bl	8000dec <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000e5c:	200a      	movs	r0, #10
 8000e5e:	f000 f99f 	bl	80011a0 <bno055_delay>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08005084 	.word	0x08005084

08000e70 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000e70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e74:	b09e      	sub	sp, #120	; 0x78
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff ff8e 	bl	8000da0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e88:	2b20      	cmp	r3, #32
 8000e8a:	d108      	bne.n	8000e9e <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000e8c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e94:	2208      	movs	r2, #8
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fa7a 	bl	8001390 <bno055_readData>
 8000e9c:	e007      	b.n	8000eae <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000e9e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea6:	2206      	movs	r2, #6
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fa71 	bl	8001390 <bno055_readData>

  double scale = 1;
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	4b8b      	ldr	r3, [pc, #556]	; (80010e0 <bno055_getVector+0x270>)
 8000eb4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ebc:	2b0e      	cmp	r3, #14
 8000ebe:	d109      	bne.n	8000ed4 <bno055_getVector+0x64>
    scale = magScale;
 8000ec0:	4b88      	ldr	r3, [pc, #544]	; (80010e4 <bno055_getVector+0x274>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fb35 	bl	8000534 <__aeabi_ui2d>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000ed2:	e03e      	b.n	8000f52 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d007      	beq.n	8000eec <bno055_getVector+0x7c>
 8000edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ee0:	2b28      	cmp	r3, #40	; 0x28
 8000ee2:	d003      	beq.n	8000eec <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8000eea:	d109      	bne.n	8000f00 <bno055_getVector+0x90>
    scale = accelScale;
 8000eec:	4b7e      	ldr	r3, [pc, #504]	; (80010e8 <bno055_getVector+0x278>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fb1f 	bl	8000534 <__aeabi_ui2d>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000efe:	e028      	b.n	8000f52 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f04:	2b14      	cmp	r3, #20
 8000f06:	d109      	bne.n	8000f1c <bno055_getVector+0xac>
    scale = angularRateScale;
 8000f08:	4b78      	ldr	r3, [pc, #480]	; (80010ec <bno055_getVector+0x27c>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fb11 	bl	8000534 <__aeabi_ui2d>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000f1a:	e01a      	b.n	8000f52 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f20:	2b1a      	cmp	r3, #26
 8000f22:	d109      	bne.n	8000f38 <bno055_getVector+0xc8>
    scale = eulerScale;
 8000f24:	4b72      	ldr	r3, [pc, #456]	; (80010f0 <bno055_getVector+0x280>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fb03 	bl	8000534 <__aeabi_ui2d>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000f36:	e00c      	b.n	8000f52 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f3c:	2b20      	cmp	r3, #32
 8000f3e:	d108      	bne.n	8000f52 <bno055_getVector+0xe2>
    scale = quaScale;
 8000f40:	4b6c      	ldr	r3, [pc, #432]	; (80010f4 <bno055_getVector+0x284>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff faf5 	bl	8000534 <__aeabi_ui2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f56:	2220      	movs	r2, #32
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 f87a 	bl	8004054 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f64:	2b20      	cmp	r3, #32
 8000f66:	d150      	bne.n	800100a <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000f68:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff faea 	bl	8000554 <__aeabi_i2d>
 8000f80:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f84:	f7ff fc7a 	bl	800087c <__aeabi_ddiv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000f90:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fad6 	bl	8000554 <__aeabi_i2d>
 8000fa8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000fac:	f7ff fc66 	bl	800087c <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000fb8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fac2 	bl	8000554 <__aeabi_i2d>
 8000fd0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000fd4:	f7ff fc52 	bl	800087c <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000fe0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff faae 	bl	8000554 <__aeabi_i2d>
 8000ff8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000ffc:	f7ff fc3e 	bl	800087c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001008:	e03b      	b.n	8001082 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800100a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa99 	bl	8000554 <__aeabi_i2d>
 8001022:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001026:	f7ff fc29 	bl	800087c <__aeabi_ddiv>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001032:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa85 	bl	8000554 <__aeabi_i2d>
 800104a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800104e:	f7ff fc15 	bl	800087c <__aeabi_ddiv>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800105a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21b      	sxth	r3, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa71 	bl	8000554 <__aeabi_i2d>
 8001072:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001076:	f7ff fc01 	bl	800087c <__aeabi_ddiv>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001082:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001086:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800108a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001096:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800109a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800109e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80010a2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80010a6:	ec49 8b14 	vmov	d4, r8, r9
 80010aa:	ec45 4b15 	vmov	d5, r4, r5
 80010ae:	ec41 0b16 	vmov	d6, r0, r1
 80010b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80010b6:	eeb0 0a44 	vmov.f32	s0, s8
 80010ba:	eef0 0a64 	vmov.f32	s1, s9
 80010be:	eeb0 1a45 	vmov.f32	s2, s10
 80010c2:	eef0 1a65 	vmov.f32	s3, s11
 80010c6:	eeb0 2a46 	vmov.f32	s4, s12
 80010ca:	eef0 2a66 	vmov.f32	s5, s13
 80010ce:	eeb0 3a47 	vmov.f32	s6, s14
 80010d2:	eef0 3a67 	vmov.f32	s7, s15
 80010d6:	3778      	adds	r7, #120	; 0x78
 80010d8:	46bd      	mov	sp, r7
 80010da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010de:	bf00      	nop
 80010e0:	3ff00000 	.word	0x3ff00000
 80010e4:	20000006 	.word	0x20000006
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000002 	.word	0x20000002
 80010f0:	20000004 	.word	0x20000004
 80010f4:	20000008 	.word	0x20000008

080010f8 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 80010f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010fc:	b090      	sub	sp, #64	; 0x40
 80010fe:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8001100:	2020      	movs	r0, #32
 8001102:	f7ff feb5 	bl	8000e70 <bno055_getVector>
 8001106:	eeb0 4a40 	vmov.f32	s8, s0
 800110a:	eef0 4a60 	vmov.f32	s9, s1
 800110e:	eeb0 5a41 	vmov.f32	s10, s2
 8001112:	eef0 5a61 	vmov.f32	s11, s3
 8001116:	eeb0 6a42 	vmov.f32	s12, s4
 800111a:	eef0 6a62 	vmov.f32	s13, s5
 800111e:	eeb0 7a43 	vmov.f32	s14, s6
 8001122:	eef0 7a63 	vmov.f32	s15, s7
 8001126:	ed87 4b08 	vstr	d4, [r7, #32]
 800112a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800112e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001132:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001136:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800113a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800113e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001142:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001146:	ec49 8b14 	vmov	d4, r8, r9
 800114a:	ec45 4b15 	vmov	d5, r4, r5
 800114e:	ec41 0b16 	vmov	d6, r0, r1
 8001152:	ec43 2b17 	vmov	d7, r2, r3
}
 8001156:	eeb0 0a44 	vmov.f32	s0, s8
 800115a:	eef0 0a64 	vmov.f32	s1, s9
 800115e:	eeb0 1a45 	vmov.f32	s2, s10
 8001162:	eef0 1a65 	vmov.f32	s3, s11
 8001166:	eeb0 2a46 	vmov.f32	s4, s12
 800116a:	eef0 2a66 	vmov.f32	s5, s13
 800116e:	eeb0 3a47 	vmov.f32	s6, s14
 8001172:	eef0 3a67 	vmov.f32	s7, s15
 8001176:	3740      	adds	r7, #64	; 0x40
 8001178:	46bd      	mov	sp, r7
 800117a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001180 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <bno055_assignI2C+0x1c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000098 	.word	0x20000098

080011a0 <bno055_delay>:

void bno055_delay(int time) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fc9c 	bl	8001ae8 <HAL_Delay>
#endif
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	733b      	strb	r3, [r7, #12]
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80011d0:	4b5a      	ldr	r3, [pc, #360]	; (800133c <bno055_writeData+0x184>)
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	f107 020c 	add.w	r2, r7, #12
 80011d8:	230a      	movs	r3, #10
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2302      	movs	r3, #2
 80011de:	2150      	movs	r1, #80	; 0x50
 80011e0:	f001 f87e 	bl	80022e0 <HAL_I2C_Master_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80a0 	beq.w	8001330 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d103      	bne.n	80011fe <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80011f6:	4852      	ldr	r0, [pc, #328]	; (8001340 <bno055_writeData+0x188>)
 80011f8:	f002 ffba 	bl	8004170 <puts>
 80011fc:	e012      	b.n	8001224 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	2b03      	cmp	r3, #3
 8001202:	d103      	bne.n	800120c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001204:	484f      	ldr	r0, [pc, #316]	; (8001344 <bno055_writeData+0x18c>)
 8001206:	f002 ffb3 	bl	8004170 <puts>
 800120a:	e00b      	b.n	8001224 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d103      	bne.n	800121a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001212:	484d      	ldr	r0, [pc, #308]	; (8001348 <bno055_writeData+0x190>)
 8001214:	f002 ffac 	bl	8004170 <puts>
 8001218:	e004      	b.n	8001224 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800121a:	7dfb      	ldrb	r3, [r7, #23]
 800121c:	4619      	mov	r1, r3
 800121e:	484b      	ldr	r0, [pc, #300]	; (800134c <bno055_writeData+0x194>)
 8001220:	f002 ff20 	bl	8004064 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001224:	4b45      	ldr	r3, [pc, #276]	; (800133c <bno055_writeData+0x184>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fb8b 	bl	8002944 <HAL_I2C_GetError>
 800122e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d07e      	beq.n	8001334 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d103      	bne.n	8001244 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 800123c:	4844      	ldr	r0, [pc, #272]	; (8001350 <bno055_writeData+0x198>)
 800123e:	f002 ff97 	bl	8004170 <puts>
 8001242:	e021      	b.n	8001288 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d103      	bne.n	8001252 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800124a:	4842      	ldr	r0, [pc, #264]	; (8001354 <bno055_writeData+0x19c>)
 800124c:	f002 ff90 	bl	8004170 <puts>
 8001250:	e01a      	b.n	8001288 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	2b04      	cmp	r3, #4
 8001256:	d103      	bne.n	8001260 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001258:	483f      	ldr	r0, [pc, #252]	; (8001358 <bno055_writeData+0x1a0>)
 800125a:	f002 ff89 	bl	8004170 <puts>
 800125e:	e013      	b.n	8001288 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2b08      	cmp	r3, #8
 8001264:	d103      	bne.n	800126e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001266:	483d      	ldr	r0, [pc, #244]	; (800135c <bno055_writeData+0x1a4>)
 8001268:	f002 ff82 	bl	8004170 <puts>
 800126c:	e00c      	b.n	8001288 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	2b10      	cmp	r3, #16
 8001272:	d103      	bne.n	800127c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001274:	483a      	ldr	r0, [pc, #232]	; (8001360 <bno055_writeData+0x1a8>)
 8001276:	f002 ff7b 	bl	8004170 <puts>
 800127a:	e005      	b.n	8001288 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	2b20      	cmp	r3, #32
 8001280:	d102      	bne.n	8001288 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001282:	4838      	ldr	r0, [pc, #224]	; (8001364 <bno055_writeData+0x1ac>)
 8001284:	f002 ff74 	bl	8004170 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <bno055_writeData+0x184>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fb4b 	bl	8002928 <HAL_I2C_GetState>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d103      	bne.n	80012a4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 800129c:	4832      	ldr	r0, [pc, #200]	; (8001368 <bno055_writeData+0x1b0>)
 800129e:	f002 ff67 	bl	8004170 <puts>
 80012a2:	e048      	b.n	8001336 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b20      	cmp	r3, #32
 80012a8:	d103      	bne.n	80012b2 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80012aa:	482f      	ldr	r0, [pc, #188]	; (8001368 <bno055_writeData+0x1b0>)
 80012ac:	f002 ff60 	bl	8004170 <puts>
 80012b0:	e041      	b.n	8001336 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	2b24      	cmp	r3, #36	; 0x24
 80012b6:	d103      	bne.n	80012c0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80012b8:	482c      	ldr	r0, [pc, #176]	; (800136c <bno055_writeData+0x1b4>)
 80012ba:	f002 ff59 	bl	8004170 <puts>
 80012be:	e03a      	b.n	8001336 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b21      	cmp	r3, #33	; 0x21
 80012c4:	d103      	bne.n	80012ce <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80012c6:	482a      	ldr	r0, [pc, #168]	; (8001370 <bno055_writeData+0x1b8>)
 80012c8:	f002 ff52 	bl	8004170 <puts>
 80012cc:	e033      	b.n	8001336 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b22      	cmp	r3, #34	; 0x22
 80012d2:	d103      	bne.n	80012dc <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80012d4:	4827      	ldr	r0, [pc, #156]	; (8001374 <bno055_writeData+0x1bc>)
 80012d6:	f002 ff4b 	bl	8004170 <puts>
 80012da:	e02c      	b.n	8001336 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b28      	cmp	r3, #40	; 0x28
 80012e0:	d103      	bne.n	80012ea <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80012e2:	4825      	ldr	r0, [pc, #148]	; (8001378 <bno055_writeData+0x1c0>)
 80012e4:	f002 ff44 	bl	8004170 <puts>
 80012e8:	e025      	b.n	8001336 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2b29      	cmp	r3, #41	; 0x29
 80012ee:	d103      	bne.n	80012f8 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80012f0:	4822      	ldr	r0, [pc, #136]	; (800137c <bno055_writeData+0x1c4>)
 80012f2:	f002 ff3d 	bl	8004170 <puts>
 80012f6:	e01e      	b.n	8001336 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b2a      	cmp	r3, #42	; 0x2a
 80012fc:	d103      	bne.n	8001306 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80012fe:	4820      	ldr	r0, [pc, #128]	; (8001380 <bno055_writeData+0x1c8>)
 8001300:	f002 ff36 	bl	8004170 <puts>
 8001304:	e017      	b.n	8001336 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	2b60      	cmp	r3, #96	; 0x60
 800130a:	d103      	bne.n	8001314 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 800130c:	481d      	ldr	r0, [pc, #116]	; (8001384 <bno055_writeData+0x1cc>)
 800130e:	f002 ff2f 	bl	8004170 <puts>
 8001312:	e010      	b.n	8001336 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2ba0      	cmp	r3, #160	; 0xa0
 8001318:	d103      	bne.n	8001322 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800131a:	481b      	ldr	r0, [pc, #108]	; (8001388 <bno055_writeData+0x1d0>)
 800131c:	f002 ff28 	bl	8004170 <puts>
 8001320:	e009      	b.n	8001336 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2be0      	cmp	r3, #224	; 0xe0
 8001326:	d106      	bne.n	8001336 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001328:	4818      	ldr	r0, [pc, #96]	; (800138c <bno055_writeData+0x1d4>)
 800132a:	f002 ff21 	bl	8004170 <puts>
 800132e:	e002      	b.n	8001336 <bno055_writeData+0x17e>
    return;
 8001330:	bf00      	nop
 8001332:	e000      	b.n	8001336 <bno055_writeData+0x17e>
    return;
 8001334:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000098 	.word	0x20000098
 8001340:	080050c0 	.word	0x080050c0
 8001344:	080050e4 	.word	0x080050e4
 8001348:	0800510c 	.word	0x0800510c
 800134c:	08005130 	.word	0x08005130
 8001350:	08005148 	.word	0x08005148
 8001354:	0800515c 	.word	0x0800515c
 8001358:	08005170 	.word	0x08005170
 800135c:	08005184 	.word	0x08005184
 8001360:	08005198 	.word	0x08005198
 8001364:	080051ac 	.word	0x080051ac
 8001368:	080051c4 	.word	0x080051c4
 800136c:	080051dc 	.word	0x080051dc
 8001370:	080051f0 	.word	0x080051f0
 8001374:	08005208 	.word	0x08005208
 8001378:	08005220 	.word	0x08005220
 800137c:	08005238 	.word	0x08005238
 8001380:	08005258 	.word	0x08005258
 8001384:	08005278 	.word	0x08005278
 8001388:	08005290 	.word	0x08005290
 800138c:	080052a8 	.word	0x080052a8

08001390 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af02      	add	r7, sp, #8
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <bno055_readData+0x40>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	1dfa      	adds	r2, r7, #7
 80013a6:	2364      	movs	r3, #100	; 0x64
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2150      	movs	r1, #80	; 0x50
 80013ae:	f000 ff97 	bl	80022e0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <bno055_readData+0x40>)
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2264      	movs	r2, #100	; 0x64
 80013bc:	9200      	str	r2, [sp, #0]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	2150      	movs	r1, #80	; 0x50
 80013c2:	f001 f88b 	bl	80024dc <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000098 	.word	0x20000098

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f000 fb13 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f839 	bl	8001454 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f000 f903 	bl	80015ec <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80013e6:	f000 f89f 	bl	8001528 <_ZL12MX_I2C1_Initv>
  MX_USART6_UART_Init();
 80013ea:	f000 f8d1 	bl	8001590 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 80013ee:	4817      	ldr	r0, [pc, #92]	; (800144c <main+0x78>)
 80013f0:	f7ff fec6 	bl	8001180 <bno055_assignI2C>
  bno055_setup();
 80013f4:	f7ff fd14 	bl	8000e20 <bno055_setup>
  bno055_setOperationModeNDOF();
 80013f8:	f7ff fcff 	bl	8000dfa <bno055_setOperationModeNDOF>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bno055_vector_t v = bno055_getVectorQuaternion();
 80013fc:	f7ff fe7c 	bl	80010f8 <bno055_getVectorQuaternion>
 8001400:	eeb0 4a40 	vmov.f32	s8, s0
 8001404:	eef0 4a60 	vmov.f32	s9, s1
 8001408:	eeb0 5a41 	vmov.f32	s10, s2
 800140c:	eef0 5a61 	vmov.f32	s11, s3
 8001410:	eeb0 6a42 	vmov.f32	s12, s4
 8001414:	eef0 6a62 	vmov.f32	s13, s5
 8001418:	eeb0 7a43 	vmov.f32	s14, s6
 800141c:	eef0 7a63 	vmov.f32	s15, s7
 8001420:	ed87 4b00 	vstr	d4, [r7]
 8001424:	ed87 5b02 	vstr	d5, [r7, #8]
 8001428:	ed87 6b04 	vstr	d6, [r7, #16]
 800142c:	ed87 7b06 	vstr	d7, [r7, #24]
	  rotate = v.w;
 8001430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fb08 	bl	8000a4c <__aeabi_d2iz>
 800143c:	4603      	mov	r3, r0
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <main+0x7c>)
 8001440:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 8001442:	200a      	movs	r0, #10
 8001444:	f000 fb50 	bl	8001ae8 <HAL_Delay>
  }
 8001448:	e7d8      	b.n	80013fc <main+0x28>
 800144a:	bf00      	nop
 800144c:	2000009c 	.word	0x2000009c
 8001450:	20000134 	.word	0x20000134

08001454 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	; 0x50
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	2234      	movs	r2, #52	; 0x34
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f002 fdf6 	bl	8004054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <_Z18SystemClock_Configv+0xcc>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <_Z18SystemClock_Configv+0xcc>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
 8001488:	4b25      	ldr	r3, [pc, #148]	; (8001520 <_Z18SystemClock_Configv+0xcc>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001494:	2300      	movs	r3, #0
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <_Z18SystemClock_Configv+0xd0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014a0:	4a20      	ldr	r2, [pc, #128]	; (8001524 <_Z18SystemClock_Configv+0xd0>)
 80014a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <_Z18SystemClock_Configv+0xd0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014bc:	2310      	movs	r3, #16
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 f839 	bl	8003540 <HAL_RCC_OscConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 80014de:	f000 f8c9 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e2:	230f      	movs	r3, #15
 80014e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fd5b 	bl	8002fb8 <HAL_RCC_ClockConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf14      	ite	ne
 8001508:	2301      	movne	r3, #1
 800150a:	2300      	moveq	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001512:	f000 f8af 	bl	8001674 <Error_Handler>
  }
}
 8001516:	bf00      	nop
 8001518:	3750      	adds	r7, #80	; 0x50
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	40007000 	.word	0x40007000

08001528 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_ZL12MX_I2C1_Initv+0x5c>)
 800152e:	4a16      	ldr	r2, [pc, #88]	; (8001588 <_ZL12MX_I2C1_Initv+0x60>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <_ZL12MX_I2C1_Initv+0x5c>)
 8001534:	4a15      	ldr	r2, [pc, #84]	; (800158c <_ZL12MX_I2C1_Initv+0x64>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <_ZL12MX_I2C1_Initv+0x5c>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <_ZL12MX_I2C1_Initv+0x5c>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <_ZL12MX_I2C1_Initv+0x5c>)
 8001546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <_ZL12MX_I2C1_Initv+0x5c>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <_ZL12MX_I2C1_Initv+0x5c>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <_ZL12MX_I2C1_Initv+0x5c>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <_ZL12MX_I2C1_Initv+0x5c>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001564:	4807      	ldr	r0, [pc, #28]	; (8001584 <_ZL12MX_I2C1_Initv+0x5c>)
 8001566:	f000 fd77 	bl	8002058 <HAL_I2C_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf14      	ite	ne
 8001570:	2301      	movne	r3, #1
 8001572:	2300      	moveq	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800157a:	f000 f87b 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000009c 	.word	0x2000009c
 8001588:	40005400 	.word	0x40005400
 800158c:	000186a0 	.word	0x000186a0

08001590 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001598:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80015c8:	f002 fa58 	bl	8003a7c <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bf14      	ite	ne
 80015d2:	2301      	movne	r3, #1
 80015d4:	2300      	moveq	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 80015dc:	f000 f84a 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200000f0 	.word	0x200000f0
 80015e8:	40011400 	.word	0x40011400

080015ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <_ZL12MX_GPIO_Initv+0x80>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a18      	ldr	r2, [pc, #96]	; (800166c <_ZL12MX_GPIO_Initv+0x80>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <_ZL12MX_GPIO_Initv+0x80>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <_ZL12MX_GPIO_Initv+0x80>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a11      	ldr	r2, [pc, #68]	; (800166c <_ZL12MX_GPIO_Initv+0x80>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <_ZL12MX_GPIO_Initv+0x80>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <_ZL12MX_GPIO_Initv+0x84>)
 8001642:	f000 fcef 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	4619      	mov	r1, r3
 800165e:	4804      	ldr	r0, [pc, #16]	; (8001670 <_ZL12MX_GPIO_Initv+0x84>)
 8001660:	f000 fb4c 	bl	8001cfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	e7fe      	b.n	800167c <Error_Handler+0x8>
	...

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_MspInit+0x4c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x4c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x4c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x4c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a19      	ldr	r2, [pc, #100]	; (8001754 <HAL_I2C_MspInit+0x84>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12c      	bne.n	800174c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_I2C_MspInit+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <HAL_I2C_MspInit+0x88>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800170e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001714:	2312      	movs	r3, #18
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001720:	2304      	movs	r3, #4
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <HAL_I2C_MspInit+0x8c>)
 800172c:	f000 fae6 	bl	8001cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_I2C_MspInit+0x88>)
 800173a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800173e:	6413      	str	r3, [r2, #64]	; 0x40
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40005400 	.word	0x40005400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020400 	.word	0x40020400

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_UART_MspInit+0x84>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12b      	bne.n	80017da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_UART_MspInit+0x88>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0x88>)
 800178c:	f043 0320 	orr.w	r3, r3, #32
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_UART_MspInit+0x88>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_UART_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_UART_MspInit+0x88>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_UART_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ba:	23c0      	movs	r3, #192	; 0xc0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017ca:	2308      	movs	r3, #8
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_UART_MspInit+0x8c>)
 80017d6:	f000 fa91 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40011400 	.word	0x40011400
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020800 	.word	0x40020800

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183c:	f000 f934 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e00a      	b.n	800186c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001856:	f3af 8000 	nop.w
 800185a:	4601      	mov	r1, r0
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	b2ca      	uxtb	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbf0      	blt.n	8001856 <_read+0x12>
  }

  return len;
 8001874:	687b      	ldr	r3, [r7, #4]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e009      	b.n	80018a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbf1      	blt.n	8001890 <_write+0x12>
  }
  return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_close>:

int _close(int file)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018de:	605a      	str	r2, [r3, #4]
  return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_isatty>:

int _isatty(int file)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f002 fb56 	bl	8004000 <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20020000 	.word	0x20020000
 8001980:	00000400 	.word	0x00000400
 8001984:	20000138 	.word	0x20000138
 8001988:	20000150 	.word	0x20000150

0800198c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019cc:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019da:	f7ff ffd7 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f002 fb15 	bl	800400c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff fcf7 	bl	80013d4 <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80019f4:	08005380 	.word	0x08005380
  ldr r2, =_sbss
 80019f8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80019fc:	20000150 	.word	0x20000150

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_Init+0x40>)
 8001a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_Init+0x40>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x40>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f931 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	200f      	movs	r0, #15
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fe22 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f93b 	bl	8001ce2 <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 f911 	bl	8001caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000000c 	.word	0x2000000c
 8001aa0:	20000014 	.word	0x20000014
 8001aa4:	20000010 	.word	0x20000010

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000014 	.word	0x20000014
 8001acc:	2000013c 	.word	0x2000013c

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	2000013c 	.word	0x2000013c

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000014 	.word	0x20000014

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff47 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff5c 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffb0 	bl	8001c50 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e165      	b.n	8001fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 8154 	bne.w	8001fde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d005      	beq.n	8001d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d130      	bne.n	8001db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0201 	and.w	r2, r3, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d017      	beq.n	8001dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d123      	bne.n	8001e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3208      	adds	r2, #8
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80ae 	beq.w	8001fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a5c      	ldr	r2, [pc, #368]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b5a      	ldr	r3, [pc, #360]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9e:	4a58      	ldr	r2, [pc, #352]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4f      	ldr	r2, [pc, #316]	; (8002004 <HAL_GPIO_Init+0x308>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d025      	beq.n	8001f16 <HAL_GPIO_Init+0x21a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4e      	ldr	r2, [pc, #312]	; (8002008 <HAL_GPIO_Init+0x30c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01f      	beq.n	8001f12 <HAL_GPIO_Init+0x216>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4d      	ldr	r2, [pc, #308]	; (800200c <HAL_GPIO_Init+0x310>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d019      	beq.n	8001f0e <HAL_GPIO_Init+0x212>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4c      	ldr	r2, [pc, #304]	; (8002010 <HAL_GPIO_Init+0x314>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_GPIO_Init+0x20e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4b      	ldr	r2, [pc, #300]	; (8002014 <HAL_GPIO_Init+0x318>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00d      	beq.n	8001f06 <HAL_GPIO_Init+0x20a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4a      	ldr	r2, [pc, #296]	; (8002018 <HAL_GPIO_Init+0x31c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <HAL_GPIO_Init+0x206>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a49      	ldr	r2, [pc, #292]	; (800201c <HAL_GPIO_Init+0x320>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_GPIO_Init+0x202>
 8001efa:	2306      	movs	r3, #6
 8001efc:	e00c      	b.n	8001f18 <HAL_GPIO_Init+0x21c>
 8001efe:	2307      	movs	r3, #7
 8001f00:	e00a      	b.n	8001f18 <HAL_GPIO_Init+0x21c>
 8001f02:	2305      	movs	r3, #5
 8001f04:	e008      	b.n	8001f18 <HAL_GPIO_Init+0x21c>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x21c>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e004      	b.n	8001f18 <HAL_GPIO_Init+0x21c>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_Init+0x21c>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x21c>
 8001f16:	2300      	movs	r3, #0
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	f002 0203 	and.w	r2, r2, #3
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4093      	lsls	r3, r2
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f28:	4935      	ldr	r1, [pc, #212]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f36:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5a:	4a31      	ldr	r2, [pc, #196]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f60:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f84:	4a26      	ldr	r2, [pc, #152]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f8a:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fae:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd8:	4a11      	ldr	r2, [pc, #68]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	f67f ae96 	bls.w	8001d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40013800 	.word	0x40013800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400
 800200c:	40020800 	.word	0x40020800
 8002010:	40020c00 	.word	0x40020c00
 8002014:	40021000 	.word	0x40021000
 8002018:	40021400 	.word	0x40021400
 800201c:	40021800 	.word	0x40021800
 8002020:	40013c00 	.word	0x40013c00

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e12b      	b.n	80022c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff fb26 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	; 0x24
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020bc:	f001 f86e 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 80020c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a81      	ldr	r2, [pc, #516]	; (80022cc <HAL_I2C_Init+0x274>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d807      	bhi.n	80020dc <HAL_I2C_Init+0x84>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a80      	ldr	r2, [pc, #512]	; (80022d0 <HAL_I2C_Init+0x278>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	bf94      	ite	ls
 80020d4:	2301      	movls	r3, #1
 80020d6:	2300      	movhi	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e006      	b.n	80020ea <HAL_I2C_Init+0x92>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4a7d      	ldr	r2, [pc, #500]	; (80022d4 <HAL_I2C_Init+0x27c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	bf94      	ite	ls
 80020e4:	2301      	movls	r3, #1
 80020e6:	2300      	movhi	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0e7      	b.n	80022c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a78      	ldr	r2, [pc, #480]	; (80022d8 <HAL_I2C_Init+0x280>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	0c9b      	lsrs	r3, r3, #18
 80020fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	430a      	orrs	r2, r1
 8002110:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a6a      	ldr	r2, [pc, #424]	; (80022cc <HAL_I2C_Init+0x274>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d802      	bhi.n	800212c <HAL_I2C_Init+0xd4>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	e009      	b.n	8002140 <HAL_I2C_Init+0xe8>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	4a69      	ldr	r2, [pc, #420]	; (80022dc <HAL_I2C_Init+0x284>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	3301      	adds	r3, #1
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	430b      	orrs	r3, r1
 8002146:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002152:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	495c      	ldr	r1, [pc, #368]	; (80022cc <HAL_I2C_Init+0x274>)
 800215c:	428b      	cmp	r3, r1
 800215e:	d819      	bhi.n	8002194 <HAL_I2C_Init+0x13c>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e59      	subs	r1, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fbb1 f3f3 	udiv	r3, r1, r3
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002174:	400b      	ands	r3, r1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_I2C_Init+0x138>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e59      	subs	r1, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fbb1 f3f3 	udiv	r3, r1, r3
 8002188:	3301      	adds	r3, #1
 800218a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218e:	e051      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 8002190:	2304      	movs	r3, #4
 8002192:	e04f      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d111      	bne.n	80021c0 <HAL_I2C_Init+0x168>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1e58      	subs	r0, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	e012      	b.n	80021e6 <HAL_I2C_Init+0x18e>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1e58      	subs	r0, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	0099      	lsls	r1, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Init+0x196>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e022      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10e      	bne.n	8002214 <HAL_I2C_Init+0x1bc>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1e58      	subs	r0, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	440b      	add	r3, r1
 8002204:	fbb0 f3f3 	udiv	r3, r0, r3
 8002208:	3301      	adds	r3, #1
 800220a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002212:	e00f      	b.n	8002234 <HAL_I2C_Init+0x1dc>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e58      	subs	r0, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	0099      	lsls	r1, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	fbb0 f3f3 	udiv	r3, r0, r3
 800222a:	3301      	adds	r3, #1
 800222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	6809      	ldr	r1, [r1, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002262:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6911      	ldr	r1, [r2, #16]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	4311      	orrs	r1, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	430b      	orrs	r3, r1
 8002276:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2220      	movs	r2, #32
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	000186a0 	.word	0x000186a0
 80022d0:	001e847f 	.word	0x001e847f
 80022d4:	003d08ff 	.word	0x003d08ff
 80022d8:	431bde83 	.word	0x431bde83
 80022dc:	10624dd3 	.word	0x10624dd3

080022e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	461a      	mov	r2, r3
 80022ec:	460b      	mov	r3, r1
 80022ee:	817b      	strh	r3, [r7, #10]
 80022f0:	4613      	mov	r3, r2
 80022f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff fbec 	bl	8001ad0 <HAL_GetTick>
 80022f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b20      	cmp	r3, #32
 8002304:	f040 80e0 	bne.w	80024c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2319      	movs	r3, #25
 800230e:	2201      	movs	r2, #1
 8002310:	4970      	ldr	r1, [pc, #448]	; (80024d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fc72 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
 8002320:	e0d3      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_I2C_Master_Transmit+0x50>
 800232c:	2302      	movs	r3, #2
 800232e:	e0cc      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d007      	beq.n	8002356 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002364:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2221      	movs	r2, #33	; 0x21
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2210      	movs	r2, #16
 8002372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	893a      	ldrh	r2, [r7, #8]
 8002386:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4a50      	ldr	r2, [pc, #320]	; (80024d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002396:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002398:	8979      	ldrh	r1, [r7, #10]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fadc 	bl	800295c <I2C_MasterRequestWrite>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e08d      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023c4:	e066      	b.n	8002494 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	6a39      	ldr	r1, [r7, #32]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fcec 	bl	8002da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00d      	beq.n	80023f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d107      	bne.n	80023ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e06b      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b04      	cmp	r3, #4
 800242e:	d11b      	bne.n	8002468 <HAL_I2C_Master_Transmit+0x188>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	2b00      	cmp	r3, #0
 8002436:	d017      	beq.n	8002468 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	6a39      	ldr	r1, [r7, #32]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fcdc 	bl	8002e2a <I2C_WaitOnBTFFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2b04      	cmp	r3, #4
 800247e:	d107      	bne.n	8002490 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e01a      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	d194      	bne.n	80023c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e000      	b.n	80024ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
  }
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	00100002 	.word	0x00100002
 80024d8:	ffff0000 	.word	0xffff0000

080024dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	; 0x30
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	461a      	mov	r2, r3
 80024e8:	460b      	mov	r3, r1
 80024ea:	817b      	strh	r3, [r7, #10]
 80024ec:	4613      	mov	r3, r2
 80024ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff faee 	bl	8001ad0 <HAL_GetTick>
 80024f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b20      	cmp	r3, #32
 8002500:	f040 820b 	bne.w	800291a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2319      	movs	r3, #25
 800250a:	2201      	movs	r2, #1
 800250c:	497c      	ldr	r1, [pc, #496]	; (8002700 <HAL_I2C_Master_Receive+0x224>)
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fb74 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
 800251c:	e1fe      	b.n	800291c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_I2C_Master_Receive+0x50>
 8002528:	2302      	movs	r3, #2
 800252a:	e1f7      	b.n	800291c <HAL_I2C_Master_Receive+0x440>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b01      	cmp	r3, #1
 8002540:	d007      	beq.n	8002552 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002560:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2222      	movs	r2, #34	; 0x22
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2210      	movs	r2, #16
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	893a      	ldrh	r2, [r7, #8]
 8002582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4a5c      	ldr	r2, [pc, #368]	; (8002704 <HAL_I2C_Master_Receive+0x228>)
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002594:	8979      	ldrh	r1, [r7, #10]
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fa60 	bl	8002a60 <I2C_MasterRequestRead>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e1b8      	b.n	800291c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d113      	bne.n	80025da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	623b      	str	r3, [r7, #32]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	623b      	str	r3, [r7, #32]
 80025c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e18c      	b.n	80028f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d11b      	bne.n	800261a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e16c      	b.n	80028f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	2b02      	cmp	r3, #2
 8002620:	d11b      	bne.n	800265a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002630:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002640:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	e14c      	b.n	80028f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002668:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002680:	e138      	b.n	80028f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	2b03      	cmp	r3, #3
 8002688:	f200 80f1 	bhi.w	800286e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	2b01      	cmp	r3, #1
 8002692:	d123      	bne.n	80026dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002696:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fc07 	bl	8002eac <I2C_WaitOnRXNEFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e139      	b.n	800291c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026da:	e10b      	b.n	80028f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d14e      	bne.n	8002782 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	2200      	movs	r2, #0
 80026ec:	4906      	ldr	r1, [pc, #24]	; (8002708 <HAL_I2C_Master_Receive+0x22c>)
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fa84 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e10e      	b.n	800291c <HAL_I2C_Master_Receive+0x440>
 80026fe:	bf00      	nop
 8002700:	00100002 	.word	0x00100002
 8002704:	ffff0000 	.word	0xffff0000
 8002708:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002780:	e0b8      	b.n	80028f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	2200      	movs	r2, #0
 800278a:	4966      	ldr	r1, [pc, #408]	; (8002924 <HAL_I2C_Master_Receive+0x448>)
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fa35 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0bf      	b.n	800291c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e4:	2200      	movs	r2, #0
 80027e6:	494f      	ldr	r1, [pc, #316]	; (8002924 <HAL_I2C_Master_Receive+0x448>)
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fa07 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e091      	b.n	800291c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800286c:	e042      	b.n	80028f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fb1a 	bl	8002eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e04c      	b.n	800291c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d118      	bne.n	80028f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f47f aec2 	bne.w	8002682 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3728      	adds	r7, #40	; 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	00010004 	.word	0x00010004

08002928 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002936:	b2db      	uxtb	r3, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	460b      	mov	r3, r1
 800296a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d006      	beq.n	8002986 <I2C_MasterRequestWrite+0x2a>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d003      	beq.n	8002986 <I2C_MasterRequestWrite+0x2a>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002984:	d108      	bne.n	8002998 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e00b      	b.n	80029b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	2b12      	cmp	r3, #18
 800299e:	d107      	bne.n	80029b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f91d 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00d      	beq.n	80029e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d6:	d103      	bne.n	80029e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e035      	b.n	8002a50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ec:	d108      	bne.n	8002a00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029fc:	611a      	str	r2, [r3, #16]
 80029fe:	e01b      	b.n	8002a38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a00:	897b      	ldrh	r3, [r7, #10]
 8002a02:	11db      	asrs	r3, r3, #7
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f003 0306 	and.w	r3, r3, #6
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f063 030f 	orn	r3, r3, #15
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	490e      	ldr	r1, [pc, #56]	; (8002a58 <I2C_MasterRequestWrite+0xfc>)
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f943 	bl	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e010      	b.n	8002a50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a2e:	897b      	ldrh	r3, [r7, #10]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4907      	ldr	r1, [pc, #28]	; (8002a5c <I2C_MasterRequestWrite+0x100>)
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f933 	bl	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	00010008 	.word	0x00010008
 8002a5c:	00010002 	.word	0x00010002

08002a60 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a84:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d006      	beq.n	8002a9a <I2C_MasterRequestRead+0x3a>
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d003      	beq.n	8002a9a <I2C_MasterRequestRead+0x3a>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a98:	d108      	bne.n	8002aac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e00b      	b.n	8002ac4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	2b11      	cmp	r3, #17
 8002ab2:	d107      	bne.n	8002ac4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f893 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d103      	bne.n	8002af4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e079      	b.n	8002bec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b00:	d108      	bne.n	8002b14 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b02:	897b      	ldrh	r3, [r7, #10]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	611a      	str	r2, [r3, #16]
 8002b12:	e05f      	b.n	8002bd4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b14:	897b      	ldrh	r3, [r7, #10]
 8002b16:	11db      	asrs	r3, r3, #7
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 0306 	and.w	r3, r3, #6
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f063 030f 	orn	r3, r3, #15
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4930      	ldr	r1, [pc, #192]	; (8002bf4 <I2C_MasterRequestRead+0x194>)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f8b9 	bl	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e054      	b.n	8002bec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4929      	ldr	r1, [pc, #164]	; (8002bf8 <I2C_MasterRequestRead+0x198>)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f8a9 	bl	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e044      	b.n	8002bec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f831 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00d      	beq.n	8002bbc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bae:	d103      	bne.n	8002bb8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e017      	b.n	8002bec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002bbc:	897b      	ldrh	r3, [r7, #10]
 8002bbe:	11db      	asrs	r3, r3, #7
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f003 0306 	and.w	r3, r3, #6
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f063 030e 	orn	r3, r3, #14
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4907      	ldr	r1, [pc, #28]	; (8002bf8 <I2C_MasterRequestRead+0x198>)
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f865 	bl	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	00010008 	.word	0x00010008
 8002bf8:	00010002 	.word	0x00010002

08002bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c0c:	e025      	b.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d021      	beq.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c16:	f7fe ff5b 	bl	8001ad0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d302      	bcc.n	8002c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d116      	bne.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f043 0220 	orr.w	r2, r3, #32
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e023      	b.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d10d      	bne.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bf0c      	ite	eq
 8002c76:	2301      	moveq	r3, #1
 8002c78:	2300      	movne	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	e00c      	b.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d0b6      	beq.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cb8:	e051      	b.n	8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc8:	d123      	bne.n	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ce2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e046      	b.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d021      	beq.n	8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7fe fed9 	bl	8001ad0 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d302      	bcc.n	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d116      	bne.n	8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f043 0220 	orr.w	r2, r3, #32
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e020      	b.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d10c      	bne.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4013      	ands	r3, r2
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	e00b      	b.n	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d18d      	bne.n	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db4:	e02d      	b.n	8002e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f8ce 	bl	8002f58 <I2C_IsAcknowledgeFailed>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e02d      	b.n	8002e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d021      	beq.n	8002e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7fe fe7f 	bl	8001ad0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d116      	bne.n	8002e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f043 0220 	orr.w	r2, r3, #32
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e007      	b.n	8002e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1c:	2b80      	cmp	r3, #128	; 0x80
 8002e1e:	d1ca      	bne.n	8002db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e36:	e02d      	b.n	8002e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f88d 	bl	8002f58 <I2C_IsAcknowledgeFailed>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e02d      	b.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d021      	beq.n	8002e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e50:	f7fe fe3e 	bl	8001ad0 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d302      	bcc.n	8002e66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d116      	bne.n	8002e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e007      	b.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d1ca      	bne.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb8:	e042      	b.n	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b10      	cmp	r3, #16
 8002ec6:	d119      	bne.n	8002efc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0210 	mvn.w	r2, #16
 8002ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e029      	b.n	8002f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efc:	f7fe fde8 	bl	8001ad0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d302      	bcc.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d116      	bne.n	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e007      	b.n	8002f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b40      	cmp	r3, #64	; 0x40
 8002f4c:	d1b5      	bne.n	8002eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6e:	d11b      	bne.n	8002fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	f043 0204 	orr.w	r2, r3, #4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0cc      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b68      	ldr	r3, [pc, #416]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d90c      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b65      	ldr	r3, [pc, #404]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b63      	ldr	r3, [pc, #396]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0b8      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d020      	beq.n	8003042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a58      	ldr	r2, [pc, #352]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a52      	ldr	r2, [pc, #328]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800302e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003030:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	494d      	ldr	r1, [pc, #308]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d044      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d119      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e07f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d003      	beq.n	8003076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	2b03      	cmp	r3, #3
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003076:	4b3f      	ldr	r3, [pc, #252]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e06f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003086:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e067      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f023 0203 	bic.w	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4934      	ldr	r1, [pc, #208]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a8:	f7fe fd12 	bl	8001ad0 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b0:	f7fe fd0e 	bl	8001ad0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e04f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 020c 	and.w	r2, r3, #12
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d1eb      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d20c      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e032      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4916      	ldr	r1, [pc, #88]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	490e      	ldr	r1, [pc, #56]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800313e:	f000 f855 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8003142:	4602      	mov	r2, r0
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	490a      	ldr	r1, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	5ccb      	ldrb	r3, [r1, r3]
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	4a09      	ldr	r2, [pc, #36]	; (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fc72 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023c00 	.word	0x40023c00
 8003174:	40023800 	.word	0x40023800
 8003178:	080052c0 	.word	0x080052c0
 800317c:	2000000c 	.word	0x2000000c
 8003180:	20000010 	.word	0x20000010

08003184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_RCC_GetHCLKFreq+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	2000000c 	.word	0x2000000c

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031a0:	f7ff fff0 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0a9b      	lsrs	r3, r3, #10
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40023800 	.word	0x40023800
 80031c0:	080052d0 	.word	0x080052d0

080031c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031c8:	f7ff ffdc 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	0b5b      	lsrs	r3, r3, #13
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4903      	ldr	r1, [pc, #12]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	080052d0 	.word	0x080052d0

080031ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f0:	b0a6      	sub	sp, #152	; 0x98
 80031f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003212:	4bc8      	ldr	r3, [pc, #800]	; (8003534 <HAL_RCC_GetSysClockFreq+0x348>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b0c      	cmp	r3, #12
 800321c:	f200 817e 	bhi.w	800351c <HAL_RCC_GetSysClockFreq+0x330>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800325d 	.word	0x0800325d
 800322c:	0800351d 	.word	0x0800351d
 8003230:	0800351d 	.word	0x0800351d
 8003234:	0800351d 	.word	0x0800351d
 8003238:	08003265 	.word	0x08003265
 800323c:	0800351d 	.word	0x0800351d
 8003240:	0800351d 	.word	0x0800351d
 8003244:	0800351d 	.word	0x0800351d
 8003248:	0800326d 	.word	0x0800326d
 800324c:	0800351d 	.word	0x0800351d
 8003250:	0800351d 	.word	0x0800351d
 8003254:	0800351d 	.word	0x0800351d
 8003258:	080033d7 	.word	0x080033d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800325c:	4bb6      	ldr	r3, [pc, #728]	; (8003538 <HAL_RCC_GetSysClockFreq+0x34c>)
 800325e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003262:	e15f      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003264:	4bb5      	ldr	r3, [pc, #724]	; (800353c <HAL_RCC_GetSysClockFreq+0x350>)
 8003266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800326a:	e15b      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800326c:	4bb1      	ldr	r3, [pc, #708]	; (8003534 <HAL_RCC_GetSysClockFreq+0x348>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003278:	4bae      	ldr	r3, [pc, #696]	; (8003534 <HAL_RCC_GetSysClockFreq+0x348>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d031      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003284:	4bab      	ldr	r3, [pc, #684]	; (8003534 <HAL_RCC_GetSysClockFreq+0x348>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	2200      	movs	r2, #0
 800328c:	66bb      	str	r3, [r7, #104]	; 0x68
 800328e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003296:	663b      	str	r3, [r7, #96]	; 0x60
 8003298:	2300      	movs	r3, #0
 800329a:	667b      	str	r3, [r7, #100]	; 0x64
 800329c:	4ba7      	ldr	r3, [pc, #668]	; (800353c <HAL_RCC_GetSysClockFreq+0x350>)
 800329e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80032a2:	462a      	mov	r2, r5
 80032a4:	fb03 f202 	mul.w	r2, r3, r2
 80032a8:	2300      	movs	r3, #0
 80032aa:	4621      	mov	r1, r4
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	4aa2      	ldr	r2, [pc, #648]	; (800353c <HAL_RCC_GetSysClockFreq+0x350>)
 80032b4:	4621      	mov	r1, r4
 80032b6:	fba1 1202 	umull	r1, r2, r1, r2
 80032ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032bc:	460a      	mov	r2, r1
 80032be:	67ba      	str	r2, [r7, #120]	; 0x78
 80032c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032c2:	4413      	add	r3, r2
 80032c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ca:	2200      	movs	r2, #0
 80032cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80032ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80032d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032d8:	f7fd fbe0 	bl	8000a9c <__aeabi_uldivmod>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4613      	mov	r3, r2
 80032e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032e6:	e064      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e8:	4b92      	ldr	r3, [pc, #584]	; (8003534 <HAL_RCC_GetSysClockFreq+0x348>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	099b      	lsrs	r3, r3, #6
 80032ee:	2200      	movs	r2, #0
 80032f0:	653b      	str	r3, [r7, #80]	; 0x50
 80032f2:	657a      	str	r2, [r7, #84]	; 0x54
 80032f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80032fc:	2300      	movs	r3, #0
 80032fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003300:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003304:	4622      	mov	r2, r4
 8003306:	462b      	mov	r3, r5
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	0159      	lsls	r1, r3, #5
 8003312:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003316:	0150      	lsls	r0, r2, #5
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4621      	mov	r1, r4
 800331e:	1a51      	subs	r1, r2, r1
 8003320:	6139      	str	r1, [r7, #16]
 8003322:	4629      	mov	r1, r5
 8003324:	eb63 0301 	sbc.w	r3, r3, r1
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003336:	4659      	mov	r1, fp
 8003338:	018b      	lsls	r3, r1, #6
 800333a:	4651      	mov	r1, sl
 800333c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003340:	4651      	mov	r1, sl
 8003342:	018a      	lsls	r2, r1, #6
 8003344:	4651      	mov	r1, sl
 8003346:	ebb2 0801 	subs.w	r8, r2, r1
 800334a:	4659      	mov	r1, fp
 800334c:	eb63 0901 	sbc.w	r9, r3, r1
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800335c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003360:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003364:	4690      	mov	r8, r2
 8003366:	4699      	mov	r9, r3
 8003368:	4623      	mov	r3, r4
 800336a:	eb18 0303 	adds.w	r3, r8, r3
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	462b      	mov	r3, r5
 8003372:	eb49 0303 	adc.w	r3, r9, r3
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003384:	4629      	mov	r1, r5
 8003386:	028b      	lsls	r3, r1, #10
 8003388:	4621      	mov	r1, r4
 800338a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800338e:	4621      	mov	r1, r4
 8003390:	028a      	lsls	r2, r1, #10
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339a:	2200      	movs	r2, #0
 800339c:	643b      	str	r3, [r7, #64]	; 0x40
 800339e:	647a      	str	r2, [r7, #68]	; 0x44
 80033a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033a4:	f7fd fb7a 	bl	8000a9c <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b2:	4b60      	ldr	r3, [pc, #384]	; (8003534 <HAL_RCC_GetSysClockFreq+0x348>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	0c1b      	lsrs	r3, r3, #16
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	3301      	adds	r3, #1
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80033c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80033d4:	e0a6      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d6:	4b57      	ldr	r3, [pc, #348]	; (8003534 <HAL_RCC_GetSysClockFreq+0x348>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e2:	4b54      	ldr	r3, [pc, #336]	; (8003534 <HAL_RCC_GetSysClockFreq+0x348>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d02a      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ee:	4b51      	ldr	r3, [pc, #324]	; (8003534 <HAL_RCC_GetSysClockFreq+0x348>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	2200      	movs	r2, #0
 80033f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003400:	2100      	movs	r1, #0
 8003402:	4b4e      	ldr	r3, [pc, #312]	; (800353c <HAL_RCC_GetSysClockFreq+0x350>)
 8003404:	fb03 f201 	mul.w	r2, r3, r1
 8003408:	2300      	movs	r3, #0
 800340a:	fb00 f303 	mul.w	r3, r0, r3
 800340e:	4413      	add	r3, r2
 8003410:	4a4a      	ldr	r2, [pc, #296]	; (800353c <HAL_RCC_GetSysClockFreq+0x350>)
 8003412:	fba0 1202 	umull	r1, r2, r0, r2
 8003416:	677a      	str	r2, [r7, #116]	; 0x74
 8003418:	460a      	mov	r2, r1
 800341a:	673a      	str	r2, [r7, #112]	; 0x70
 800341c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800341e:	4413      	add	r3, r2
 8003420:	677b      	str	r3, [r7, #116]	; 0x74
 8003422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003426:	2200      	movs	r2, #0
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
 800342a:	637a      	str	r2, [r7, #52]	; 0x34
 800342c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003430:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003434:	f7fd fb32 	bl	8000a9c <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4613      	mov	r3, r2
 800343e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003442:	e05b      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003444:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <HAL_RCC_GetSysClockFreq+0x348>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	2200      	movs	r2, #0
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
 800344e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	2300      	movs	r3, #0
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
 800345c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003460:	4642      	mov	r2, r8
 8003462:	464b      	mov	r3, r9
 8003464:	f04f 0000 	mov.w	r0, #0
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	0159      	lsls	r1, r3, #5
 800346e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003472:	0150      	lsls	r0, r2, #5
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4641      	mov	r1, r8
 800347a:	ebb2 0a01 	subs.w	sl, r2, r1
 800347e:	4649      	mov	r1, r9
 8003480:	eb63 0b01 	sbc.w	fp, r3, r1
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003490:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003494:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003498:	ebb2 040a 	subs.w	r4, r2, sl
 800349c:	eb63 050b 	sbc.w	r5, r3, fp
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	00eb      	lsls	r3, r5, #3
 80034aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ae:	00e2      	lsls	r2, r4, #3
 80034b0:	4614      	mov	r4, r2
 80034b2:	461d      	mov	r5, r3
 80034b4:	4643      	mov	r3, r8
 80034b6:	18e3      	adds	r3, r4, r3
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	464b      	mov	r3, r9
 80034bc:	eb45 0303 	adc.w	r3, r5, r3
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ce:	4629      	mov	r1, r5
 80034d0:	028b      	lsls	r3, r1, #10
 80034d2:	4621      	mov	r1, r4
 80034d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d8:	4621      	mov	r1, r4
 80034da:	028a      	lsls	r2, r1, #10
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034e4:	2200      	movs	r2, #0
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	61fa      	str	r2, [r7, #28]
 80034ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ee:	f7fd fad5 	bl	8000a9c <__aeabi_uldivmod>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4613      	mov	r3, r2
 80034f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034fc:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_RCC_GetSysClockFreq+0x348>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	0f1b      	lsrs	r3, r3, #28
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800350a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800350e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003512:	fbb2 f3f3 	udiv	r3, r2, r3
 8003516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800351a:	e003      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_RCC_GetSysClockFreq+0x34c>)
 800351e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003522:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003524:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003528:	4618      	mov	r0, r3
 800352a:	3798      	adds	r7, #152	; 0x98
 800352c:	46bd      	mov	sp, r7
 800352e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
 8003538:	00f42400 	.word	0x00f42400
 800353c:	017d7840 	.word	0x017d7840

08003540 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e28d      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8083 	beq.w	8003666 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003560:	4b94      	ldr	r3, [pc, #592]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b04      	cmp	r3, #4
 800356a:	d019      	beq.n	80035a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800356c:	4b91      	ldr	r3, [pc, #580]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003574:	2b08      	cmp	r3, #8
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003578:	4b8e      	ldr	r3, [pc, #568]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003584:	d00c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4b8b      	ldr	r3, [pc, #556]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800358e:	2b0c      	cmp	r3, #12
 8003590:	d112      	bne.n	80035b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4b88      	ldr	r3, [pc, #544]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359e:	d10b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	4b84      	ldr	r3, [pc, #528]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05b      	beq.n	8003664 <HAL_RCC_OscConfig+0x124>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d157      	bne.n	8003664 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e25a      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x90>
 80035c2:	4b7c      	ldr	r3, [pc, #496]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a7b      	ldr	r2, [pc, #492]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e01d      	b.n	800360c <HAL_RCC_OscConfig+0xcc>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0xb4>
 80035da:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a75      	ldr	r2, [pc, #468]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b73      	ldr	r3, [pc, #460]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a72      	ldr	r2, [pc, #456]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0xcc>
 80035f4:	4b6f      	ldr	r3, [pc, #444]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6e      	ldr	r2, [pc, #440]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b6c      	ldr	r3, [pc, #432]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a6b      	ldr	r2, [pc, #428]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe fa5c 	bl	8001ad0 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361c:	f7fe fa58 	bl	8001ad0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e21f      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0xdc>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe fa48 	bl	8001ad0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7fe fa44 	bl	8001ad0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e20b      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	4b57      	ldr	r3, [pc, #348]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x104>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d06f      	beq.n	8003752 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003672:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b00      	cmp	r3, #0
 800367c:	d017      	beq.n	80036ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800367e:	4b4d      	ldr	r3, [pc, #308]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d105      	bne.n	8003696 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800368a:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	d11c      	bne.n	80036dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b44      	ldr	r3, [pc, #272]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d116      	bne.n	80036dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_RCC_OscConfig+0x186>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e1d3      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c6:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4937      	ldr	r1, [pc, #220]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	e03a      	b.n	8003752 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e4:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <HAL_RCC_OscConfig+0x278>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fe f9f1 	bl	8001ad0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f2:	f7fe f9ed 	bl	8001ad0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1b4      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003704:	4b2b      	ldr	r3, [pc, #172]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4925      	ldr	r1, [pc, #148]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003720:	4313      	orrs	r3, r2
 8003722:	600b      	str	r3, [r1, #0]
 8003724:	e015      	b.n	8003752 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_RCC_OscConfig+0x278>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe f9d0 	bl	8001ad0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003734:	f7fe f9cc 	bl	8001ad0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e193      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003746:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d036      	beq.n	80037cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fe f9b0 	bl	8001ad0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003774:	f7fe f9ac 	bl	8001ad0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e173      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x234>
 8003792:	e01b      	b.n	80037cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379a:	f7fe f999 	bl	8001ad0 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	e00e      	b.n	80037c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a2:	f7fe f995 	bl	8001ad0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d907      	bls.n	80037c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e15c      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
 80037b4:	40023800 	.word	0x40023800
 80037b8:	42470000 	.word	0x42470000
 80037bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c0:	4b8a      	ldr	r3, [pc, #552]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 80037c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ea      	bne.n	80037a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8097 	beq.w	8003908 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037de:	4b83      	ldr	r3, [pc, #524]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	4b7f      	ldr	r3, [pc, #508]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a7e      	ldr	r2, [pc, #504]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 80037f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	4b7c      	ldr	r3, [pc, #496]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003806:	2301      	movs	r3, #1
 8003808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b79      	ldr	r3, [pc, #484]	; (80039f0 <HAL_RCC_OscConfig+0x4b0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d118      	bne.n	8003848 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003816:	4b76      	ldr	r3, [pc, #472]	; (80039f0 <HAL_RCC_OscConfig+0x4b0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a75      	ldr	r2, [pc, #468]	; (80039f0 <HAL_RCC_OscConfig+0x4b0>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003822:	f7fe f955 	bl	8001ad0 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382a:	f7fe f951 	bl	8001ad0 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e118      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	4b6c      	ldr	r3, [pc, #432]	; (80039f0 <HAL_RCC_OscConfig+0x4b0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x31e>
 8003850:	4b66      	ldr	r3, [pc, #408]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4a65      	ldr	r2, [pc, #404]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6713      	str	r3, [r2, #112]	; 0x70
 800385c:	e01c      	b.n	8003898 <HAL_RCC_OscConfig+0x358>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b05      	cmp	r3, #5
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x340>
 8003866:	4b61      	ldr	r3, [pc, #388]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a60      	ldr	r2, [pc, #384]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	6713      	str	r3, [r2, #112]	; 0x70
 8003872:	4b5e      	ldr	r3, [pc, #376]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a5d      	ldr	r2, [pc, #372]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
 800387e:	e00b      	b.n	8003898 <HAL_RCC_OscConfig+0x358>
 8003880:	4b5a      	ldr	r3, [pc, #360]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	4a59      	ldr	r2, [pc, #356]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	6713      	str	r3, [r2, #112]	; 0x70
 800388c:	4b57      	ldr	r3, [pc, #348]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a56      	ldr	r2, [pc, #344]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003892:	f023 0304 	bic.w	r3, r3, #4
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fe f916 	bl	8001ad0 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	e00a      	b.n	80038be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a8:	f7fe f912 	bl	8001ad0 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e0d7      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038be:	4b4b      	ldr	r3, [pc, #300]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0ee      	beq.n	80038a8 <HAL_RCC_OscConfig+0x368>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fe f900 	bl	8001ad0 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d4:	f7fe f8fc 	bl	8001ad0 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0c1      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ea:	4b40      	ldr	r3, [pc, #256]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ee      	bne.n	80038d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d105      	bne.n	8003908 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fc:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	4a3a      	ldr	r2, [pc, #232]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003906:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80ad 	beq.w	8003a6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b08      	cmp	r3, #8
 800391c:	d060      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d145      	bne.n	80039b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <HAL_RCC_OscConfig+0x4b4>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fe f8d0 	bl	8001ad0 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe f8cc 	bl	8001ad0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e093      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	019b      	lsls	r3, r3, #6
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	3b01      	subs	r3, #1
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	061b      	lsls	r3, r3, #24
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	071b      	lsls	r3, r3, #28
 800397e:	491b      	ldr	r1, [pc, #108]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x4b4>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe f8a1 	bl	8001ad0 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe f89d 	bl	8001ad0 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e064      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x452>
 80039b0:	e05c      	b.n	8003a6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCC_OscConfig+0x4b4>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe f88a 	bl	8001ad0 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fe f886 	bl	8001ad0 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e04d      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x480>
 80039de:	e045      	b.n	8003a6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e040      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40007000 	.word	0x40007000
 80039f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039f8:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <HAL_RCC_OscConfig+0x538>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d030      	beq.n	8003a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d129      	bne.n	8003a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d122      	bne.n	8003a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a28:	4013      	ands	r3, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d119      	bne.n	8003a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	3b01      	subs	r3, #1
 8003a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d10f      	bne.n	8003a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800

08003a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e03f      	b.n	8003b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd fe5c 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f829 	bl	8003b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b1c:	b0c0      	sub	sp, #256	; 0x100
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	68d9      	ldr	r1, [r3, #12]
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	ea40 0301 	orr.w	r3, r0, r1
 8003b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b70:	f021 010c 	bic.w	r1, r1, #12
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b92:	6999      	ldr	r1, [r3, #24]
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	ea40 0301 	orr.w	r3, r0, r1
 8003b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b8f      	ldr	r3, [pc, #572]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d005      	beq.n	8003bb8 <UART_SetConfig+0xa0>
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b8d      	ldr	r3, [pc, #564]	; (8003de8 <UART_SetConfig+0x2d0>)
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d104      	bne.n	8003bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7ff fb04 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 8003bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bc0:	e003      	b.n	8003bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bc2:	f7ff faeb 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd4:	f040 810c 	bne.w	8003df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003be2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bea:	4622      	mov	r2, r4
 8003bec:	462b      	mov	r3, r5
 8003bee:	1891      	adds	r1, r2, r2
 8003bf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bf2:	415b      	adcs	r3, r3
 8003bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	eb12 0801 	adds.w	r8, r2, r1
 8003c00:	4629      	mov	r1, r5
 8003c02:	eb43 0901 	adc.w	r9, r3, r1
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c1a:	4690      	mov	r8, r2
 8003c1c:	4699      	mov	r9, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	eb18 0303 	adds.w	r3, r8, r3
 8003c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c28:	462b      	mov	r3, r5
 8003c2a:	eb49 0303 	adc.w	r3, r9, r3
 8003c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c46:	460b      	mov	r3, r1
 8003c48:	18db      	adds	r3, r3, r3
 8003c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	eb42 0303 	adc.w	r3, r2, r3
 8003c52:	657b      	str	r3, [r7, #84]	; 0x54
 8003c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c5c:	f7fc ff1e 	bl	8000a9c <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4b61      	ldr	r3, [pc, #388]	; (8003dec <UART_SetConfig+0x2d4>)
 8003c66:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	011c      	lsls	r4, r3, #4
 8003c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c80:	4642      	mov	r2, r8
 8003c82:	464b      	mov	r3, r9
 8003c84:	1891      	adds	r1, r2, r2
 8003c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c90:	4641      	mov	r1, r8
 8003c92:	eb12 0a01 	adds.w	sl, r2, r1
 8003c96:	4649      	mov	r1, r9
 8003c98:	eb43 0b01 	adc.w	fp, r3, r1
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb0:	4692      	mov	sl, r2
 8003cb2:	469b      	mov	fp, r3
 8003cb4:	4643      	mov	r3, r8
 8003cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8003cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	18db      	adds	r3, r3, r3
 8003ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cf2:	f7fc fed3 	bl	8000a9c <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <UART_SetConfig+0x2d4>)
 8003cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2264      	movs	r2, #100	; 0x64
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	1acb      	subs	r3, r1, r3
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d12:	4b36      	ldr	r3, [pc, #216]	; (8003dec <UART_SetConfig+0x2d4>)
 8003d14:	fba3 2302 	umull	r2, r3, r3, r2
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d20:	441c      	add	r4, r3
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d44:	4641      	mov	r1, r8
 8003d46:	1851      	adds	r1, r2, r1
 8003d48:	6339      	str	r1, [r7, #48]	; 0x30
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	414b      	adcs	r3, r1
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	00cb      	lsls	r3, r1, #3
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d66:	4651      	mov	r1, sl
 8003d68:	00ca      	lsls	r2, r1, #3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4642      	mov	r2, r8
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d78:	464b      	mov	r3, r9
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d98:	460b      	mov	r3, r1
 8003d9a:	18db      	adds	r3, r3, r3
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	4613      	mov	r3, r2
 8003da0:	eb42 0303 	adc.w	r3, r2, r3
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dae:	f7fc fe75 	bl	8000a9c <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <UART_SetConfig+0x2d4>)
 8003db8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	2164      	movs	r1, #100	; 0x64
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	3332      	adds	r3, #50	; 0x32
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <UART_SetConfig+0x2d4>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	f003 0207 	and.w	r2, r3, #7
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4422      	add	r2, r4
 8003dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003de0:	e105      	b.n	8003fee <UART_SetConfig+0x4d6>
 8003de2:	bf00      	nop
 8003de4:	40011000 	.word	0x40011000
 8003de8:	40011400 	.word	0x40011400
 8003dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e02:	4642      	mov	r2, r8
 8003e04:	464b      	mov	r3, r9
 8003e06:	1891      	adds	r1, r2, r2
 8003e08:	6239      	str	r1, [r7, #32]
 8003e0a:	415b      	adcs	r3, r3
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e12:	4641      	mov	r1, r8
 8003e14:	1854      	adds	r4, r2, r1
 8003e16:	4649      	mov	r1, r9
 8003e18:	eb43 0501 	adc.w	r5, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	00eb      	lsls	r3, r5, #3
 8003e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e2a:	00e2      	lsls	r2, r4, #3
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	461d      	mov	r5, r3
 8003e30:	4643      	mov	r3, r8
 8003e32:	18e3      	adds	r3, r4, r3
 8003e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e38:	464b      	mov	r3, r9
 8003e3a:	eb45 0303 	adc.w	r3, r5, r3
 8003e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e5e:	4629      	mov	r1, r5
 8003e60:	008b      	lsls	r3, r1, #2
 8003e62:	4621      	mov	r1, r4
 8003e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e68:	4621      	mov	r1, r4
 8003e6a:	008a      	lsls	r2, r1, #2
 8003e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e70:	f7fc fe14 	bl	8000a9c <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4b60      	ldr	r3, [pc, #384]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	011c      	lsls	r4, r3, #4
 8003e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e94:	4642      	mov	r2, r8
 8003e96:	464b      	mov	r3, r9
 8003e98:	1891      	adds	r1, r2, r2
 8003e9a:	61b9      	str	r1, [r7, #24]
 8003e9c:	415b      	adcs	r3, r3
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	1851      	adds	r1, r2, r1
 8003ea8:	6139      	str	r1, [r7, #16]
 8003eaa:	4649      	mov	r1, r9
 8003eac:	414b      	adcs	r3, r1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ebc:	4659      	mov	r1, fp
 8003ebe:	00cb      	lsls	r3, r1, #3
 8003ec0:	4651      	mov	r1, sl
 8003ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec6:	4651      	mov	r1, sl
 8003ec8:	00ca      	lsls	r2, r1, #3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ed8:	464b      	mov	r3, r9
 8003eda:	460a      	mov	r2, r1
 8003edc:	eb42 0303 	adc.w	r3, r2, r3
 8003ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003efc:	4649      	mov	r1, r9
 8003efe:	008b      	lsls	r3, r1, #2
 8003f00:	4641      	mov	r1, r8
 8003f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f06:	4641      	mov	r1, r8
 8003f08:	008a      	lsls	r2, r1, #2
 8003f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f0e:	f7fc fdc5 	bl	8000a9c <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4b39      	ldr	r3, [pc, #228]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003f18:	fba3 1302 	umull	r1, r3, r3, r2
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	2164      	movs	r1, #100	; 0x64
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	3332      	adds	r3, #50	; 0x32
 8003f2a:	4a34      	ldr	r2, [pc, #208]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f36:	441c      	add	r4, r3
 8003f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f40:	677a      	str	r2, [r7, #116]	; 0x74
 8003f42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f46:	4642      	mov	r2, r8
 8003f48:	464b      	mov	r3, r9
 8003f4a:	1891      	adds	r1, r2, r2
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	415b      	adcs	r3, r3
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f56:	4641      	mov	r1, r8
 8003f58:	1851      	adds	r1, r2, r1
 8003f5a:	6039      	str	r1, [r7, #0]
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	414b      	adcs	r3, r1
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f6e:	4659      	mov	r1, fp
 8003f70:	00cb      	lsls	r3, r1, #3
 8003f72:	4651      	mov	r1, sl
 8003f74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f78:	4651      	mov	r1, sl
 8003f7a:	00ca      	lsls	r2, r1, #3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4603      	mov	r3, r0
 8003f82:	4642      	mov	r2, r8
 8003f84:	189b      	adds	r3, r3, r2
 8003f86:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f88:	464b      	mov	r3, r9
 8003f8a:	460a      	mov	r2, r1
 8003f8c:	eb42 0303 	adc.w	r3, r2, r3
 8003f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f9c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003faa:	4649      	mov	r1, r9
 8003fac:	008b      	lsls	r3, r1, #2
 8003fae:	4641      	mov	r1, r8
 8003fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	008a      	lsls	r2, r1, #2
 8003fb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fbc:	f7fc fd6e 	bl	8000a9c <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	2164      	movs	r1, #100	; 0x64
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	3332      	adds	r3, #50	; 0x32
 8003fd8:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	f003 020f 	and.w	r2, r3, #15
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4422      	add	r2, r4
 8003fec:	609a      	str	r2, [r3, #8]
}
 8003fee:	bf00      	nop
 8003ff0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffa:	bf00      	nop
 8003ffc:	51eb851f 	.word	0x51eb851f

08004000 <__errno>:
 8004000:	4b01      	ldr	r3, [pc, #4]	; (8004008 <__errno+0x8>)
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000018 	.word	0x20000018

0800400c <__libc_init_array>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	4d0d      	ldr	r5, [pc, #52]	; (8004044 <__libc_init_array+0x38>)
 8004010:	4c0d      	ldr	r4, [pc, #52]	; (8004048 <__libc_init_array+0x3c>)
 8004012:	1b64      	subs	r4, r4, r5
 8004014:	10a4      	asrs	r4, r4, #2
 8004016:	2600      	movs	r6, #0
 8004018:	42a6      	cmp	r6, r4
 800401a:	d109      	bne.n	8004030 <__libc_init_array+0x24>
 800401c:	4d0b      	ldr	r5, [pc, #44]	; (800404c <__libc_init_array+0x40>)
 800401e:	4c0c      	ldr	r4, [pc, #48]	; (8004050 <__libc_init_array+0x44>)
 8004020:	f001 f824 	bl	800506c <_init>
 8004024:	1b64      	subs	r4, r4, r5
 8004026:	10a4      	asrs	r4, r4, #2
 8004028:	2600      	movs	r6, #0
 800402a:	42a6      	cmp	r6, r4
 800402c:	d105      	bne.n	800403a <__libc_init_array+0x2e>
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	f855 3b04 	ldr.w	r3, [r5], #4
 8004034:	4798      	blx	r3
 8004036:	3601      	adds	r6, #1
 8004038:	e7ee      	b.n	8004018 <__libc_init_array+0xc>
 800403a:	f855 3b04 	ldr.w	r3, [r5], #4
 800403e:	4798      	blx	r3
 8004040:	3601      	adds	r6, #1
 8004042:	e7f2      	b.n	800402a <__libc_init_array+0x1e>
 8004044:	08005378 	.word	0x08005378
 8004048:	08005378 	.word	0x08005378
 800404c:	08005378 	.word	0x08005378
 8004050:	0800537c 	.word	0x0800537c

08004054 <memset>:
 8004054:	4402      	add	r2, r0
 8004056:	4603      	mov	r3, r0
 8004058:	4293      	cmp	r3, r2
 800405a:	d100      	bne.n	800405e <memset+0xa>
 800405c:	4770      	bx	lr
 800405e:	f803 1b01 	strb.w	r1, [r3], #1
 8004062:	e7f9      	b.n	8004058 <memset+0x4>

08004064 <iprintf>:
 8004064:	b40f      	push	{r0, r1, r2, r3}
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <iprintf+0x2c>)
 8004068:	b513      	push	{r0, r1, r4, lr}
 800406a:	681c      	ldr	r4, [r3, #0]
 800406c:	b124      	cbz	r4, 8004078 <iprintf+0x14>
 800406e:	69a3      	ldr	r3, [r4, #24]
 8004070:	b913      	cbnz	r3, 8004078 <iprintf+0x14>
 8004072:	4620      	mov	r0, r4
 8004074:	f000 fa5e 	bl	8004534 <__sinit>
 8004078:	ab05      	add	r3, sp, #20
 800407a:	9a04      	ldr	r2, [sp, #16]
 800407c:	68a1      	ldr	r1, [r4, #8]
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	4620      	mov	r0, r4
 8004082:	f000 fc67 	bl	8004954 <_vfiprintf_r>
 8004086:	b002      	add	sp, #8
 8004088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800408c:	b004      	add	sp, #16
 800408e:	4770      	bx	lr
 8004090:	20000018 	.word	0x20000018

08004094 <_puts_r>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	460e      	mov	r6, r1
 8004098:	4605      	mov	r5, r0
 800409a:	b118      	cbz	r0, 80040a4 <_puts_r+0x10>
 800409c:	6983      	ldr	r3, [r0, #24]
 800409e:	b90b      	cbnz	r3, 80040a4 <_puts_r+0x10>
 80040a0:	f000 fa48 	bl	8004534 <__sinit>
 80040a4:	69ab      	ldr	r3, [r5, #24]
 80040a6:	68ac      	ldr	r4, [r5, #8]
 80040a8:	b913      	cbnz	r3, 80040b0 <_puts_r+0x1c>
 80040aa:	4628      	mov	r0, r5
 80040ac:	f000 fa42 	bl	8004534 <__sinit>
 80040b0:	4b2c      	ldr	r3, [pc, #176]	; (8004164 <_puts_r+0xd0>)
 80040b2:	429c      	cmp	r4, r3
 80040b4:	d120      	bne.n	80040f8 <_puts_r+0x64>
 80040b6:	686c      	ldr	r4, [r5, #4]
 80040b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040ba:	07db      	lsls	r3, r3, #31
 80040bc:	d405      	bmi.n	80040ca <_puts_r+0x36>
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	0598      	lsls	r0, r3, #22
 80040c2:	d402      	bmi.n	80040ca <_puts_r+0x36>
 80040c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040c6:	f000 fad3 	bl	8004670 <__retarget_lock_acquire_recursive>
 80040ca:	89a3      	ldrh	r3, [r4, #12]
 80040cc:	0719      	lsls	r1, r3, #28
 80040ce:	d51d      	bpl.n	800410c <_puts_r+0x78>
 80040d0:	6923      	ldr	r3, [r4, #16]
 80040d2:	b1db      	cbz	r3, 800410c <_puts_r+0x78>
 80040d4:	3e01      	subs	r6, #1
 80040d6:	68a3      	ldr	r3, [r4, #8]
 80040d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040dc:	3b01      	subs	r3, #1
 80040de:	60a3      	str	r3, [r4, #8]
 80040e0:	bb39      	cbnz	r1, 8004132 <_puts_r+0x9e>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	da38      	bge.n	8004158 <_puts_r+0xc4>
 80040e6:	4622      	mov	r2, r4
 80040e8:	210a      	movs	r1, #10
 80040ea:	4628      	mov	r0, r5
 80040ec:	f000 f848 	bl	8004180 <__swbuf_r>
 80040f0:	3001      	adds	r0, #1
 80040f2:	d011      	beq.n	8004118 <_puts_r+0x84>
 80040f4:	250a      	movs	r5, #10
 80040f6:	e011      	b.n	800411c <_puts_r+0x88>
 80040f8:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <_puts_r+0xd4>)
 80040fa:	429c      	cmp	r4, r3
 80040fc:	d101      	bne.n	8004102 <_puts_r+0x6e>
 80040fe:	68ac      	ldr	r4, [r5, #8]
 8004100:	e7da      	b.n	80040b8 <_puts_r+0x24>
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <_puts_r+0xd8>)
 8004104:	429c      	cmp	r4, r3
 8004106:	bf08      	it	eq
 8004108:	68ec      	ldreq	r4, [r5, #12]
 800410a:	e7d5      	b.n	80040b8 <_puts_r+0x24>
 800410c:	4621      	mov	r1, r4
 800410e:	4628      	mov	r0, r5
 8004110:	f000 f888 	bl	8004224 <__swsetup_r>
 8004114:	2800      	cmp	r0, #0
 8004116:	d0dd      	beq.n	80040d4 <_puts_r+0x40>
 8004118:	f04f 35ff 	mov.w	r5, #4294967295
 800411c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800411e:	07da      	lsls	r2, r3, #31
 8004120:	d405      	bmi.n	800412e <_puts_r+0x9a>
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	059b      	lsls	r3, r3, #22
 8004126:	d402      	bmi.n	800412e <_puts_r+0x9a>
 8004128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800412a:	f000 faa2 	bl	8004672 <__retarget_lock_release_recursive>
 800412e:	4628      	mov	r0, r5
 8004130:	bd70      	pop	{r4, r5, r6, pc}
 8004132:	2b00      	cmp	r3, #0
 8004134:	da04      	bge.n	8004140 <_puts_r+0xac>
 8004136:	69a2      	ldr	r2, [r4, #24]
 8004138:	429a      	cmp	r2, r3
 800413a:	dc06      	bgt.n	800414a <_puts_r+0xb6>
 800413c:	290a      	cmp	r1, #10
 800413e:	d004      	beq.n	800414a <_puts_r+0xb6>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	6022      	str	r2, [r4, #0]
 8004146:	7019      	strb	r1, [r3, #0]
 8004148:	e7c5      	b.n	80040d6 <_puts_r+0x42>
 800414a:	4622      	mov	r2, r4
 800414c:	4628      	mov	r0, r5
 800414e:	f000 f817 	bl	8004180 <__swbuf_r>
 8004152:	3001      	adds	r0, #1
 8004154:	d1bf      	bne.n	80040d6 <_puts_r+0x42>
 8004156:	e7df      	b.n	8004118 <_puts_r+0x84>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	250a      	movs	r5, #10
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	6022      	str	r2, [r4, #0]
 8004160:	701d      	strb	r5, [r3, #0]
 8004162:	e7db      	b.n	800411c <_puts_r+0x88>
 8004164:	080052fc 	.word	0x080052fc
 8004168:	0800531c 	.word	0x0800531c
 800416c:	080052dc 	.word	0x080052dc

08004170 <puts>:
 8004170:	4b02      	ldr	r3, [pc, #8]	; (800417c <puts+0xc>)
 8004172:	4601      	mov	r1, r0
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	f7ff bf8d 	b.w	8004094 <_puts_r>
 800417a:	bf00      	nop
 800417c:	20000018 	.word	0x20000018

08004180 <__swbuf_r>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	460e      	mov	r6, r1
 8004184:	4614      	mov	r4, r2
 8004186:	4605      	mov	r5, r0
 8004188:	b118      	cbz	r0, 8004192 <__swbuf_r+0x12>
 800418a:	6983      	ldr	r3, [r0, #24]
 800418c:	b90b      	cbnz	r3, 8004192 <__swbuf_r+0x12>
 800418e:	f000 f9d1 	bl	8004534 <__sinit>
 8004192:	4b21      	ldr	r3, [pc, #132]	; (8004218 <__swbuf_r+0x98>)
 8004194:	429c      	cmp	r4, r3
 8004196:	d12b      	bne.n	80041f0 <__swbuf_r+0x70>
 8004198:	686c      	ldr	r4, [r5, #4]
 800419a:	69a3      	ldr	r3, [r4, #24]
 800419c:	60a3      	str	r3, [r4, #8]
 800419e:	89a3      	ldrh	r3, [r4, #12]
 80041a0:	071a      	lsls	r2, r3, #28
 80041a2:	d52f      	bpl.n	8004204 <__swbuf_r+0x84>
 80041a4:	6923      	ldr	r3, [r4, #16]
 80041a6:	b36b      	cbz	r3, 8004204 <__swbuf_r+0x84>
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	6820      	ldr	r0, [r4, #0]
 80041ac:	1ac0      	subs	r0, r0, r3
 80041ae:	6963      	ldr	r3, [r4, #20]
 80041b0:	b2f6      	uxtb	r6, r6
 80041b2:	4283      	cmp	r3, r0
 80041b4:	4637      	mov	r7, r6
 80041b6:	dc04      	bgt.n	80041c2 <__swbuf_r+0x42>
 80041b8:	4621      	mov	r1, r4
 80041ba:	4628      	mov	r0, r5
 80041bc:	f000 f926 	bl	800440c <_fflush_r>
 80041c0:	bb30      	cbnz	r0, 8004210 <__swbuf_r+0x90>
 80041c2:	68a3      	ldr	r3, [r4, #8]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	60a3      	str	r3, [r4, #8]
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	6022      	str	r2, [r4, #0]
 80041ce:	701e      	strb	r6, [r3, #0]
 80041d0:	6963      	ldr	r3, [r4, #20]
 80041d2:	3001      	adds	r0, #1
 80041d4:	4283      	cmp	r3, r0
 80041d6:	d004      	beq.n	80041e2 <__swbuf_r+0x62>
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	07db      	lsls	r3, r3, #31
 80041dc:	d506      	bpl.n	80041ec <__swbuf_r+0x6c>
 80041de:	2e0a      	cmp	r6, #10
 80041e0:	d104      	bne.n	80041ec <__swbuf_r+0x6c>
 80041e2:	4621      	mov	r1, r4
 80041e4:	4628      	mov	r0, r5
 80041e6:	f000 f911 	bl	800440c <_fflush_r>
 80041ea:	b988      	cbnz	r0, 8004210 <__swbuf_r+0x90>
 80041ec:	4638      	mov	r0, r7
 80041ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <__swbuf_r+0x9c>)
 80041f2:	429c      	cmp	r4, r3
 80041f4:	d101      	bne.n	80041fa <__swbuf_r+0x7a>
 80041f6:	68ac      	ldr	r4, [r5, #8]
 80041f8:	e7cf      	b.n	800419a <__swbuf_r+0x1a>
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <__swbuf_r+0xa0>)
 80041fc:	429c      	cmp	r4, r3
 80041fe:	bf08      	it	eq
 8004200:	68ec      	ldreq	r4, [r5, #12]
 8004202:	e7ca      	b.n	800419a <__swbuf_r+0x1a>
 8004204:	4621      	mov	r1, r4
 8004206:	4628      	mov	r0, r5
 8004208:	f000 f80c 	bl	8004224 <__swsetup_r>
 800420c:	2800      	cmp	r0, #0
 800420e:	d0cb      	beq.n	80041a8 <__swbuf_r+0x28>
 8004210:	f04f 37ff 	mov.w	r7, #4294967295
 8004214:	e7ea      	b.n	80041ec <__swbuf_r+0x6c>
 8004216:	bf00      	nop
 8004218:	080052fc 	.word	0x080052fc
 800421c:	0800531c 	.word	0x0800531c
 8004220:	080052dc 	.word	0x080052dc

08004224 <__swsetup_r>:
 8004224:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <__swsetup_r+0xcc>)
 8004226:	b570      	push	{r4, r5, r6, lr}
 8004228:	681d      	ldr	r5, [r3, #0]
 800422a:	4606      	mov	r6, r0
 800422c:	460c      	mov	r4, r1
 800422e:	b125      	cbz	r5, 800423a <__swsetup_r+0x16>
 8004230:	69ab      	ldr	r3, [r5, #24]
 8004232:	b913      	cbnz	r3, 800423a <__swsetup_r+0x16>
 8004234:	4628      	mov	r0, r5
 8004236:	f000 f97d 	bl	8004534 <__sinit>
 800423a:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <__swsetup_r+0xd0>)
 800423c:	429c      	cmp	r4, r3
 800423e:	d10f      	bne.n	8004260 <__swsetup_r+0x3c>
 8004240:	686c      	ldr	r4, [r5, #4]
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004248:	0719      	lsls	r1, r3, #28
 800424a:	d42c      	bmi.n	80042a6 <__swsetup_r+0x82>
 800424c:	06dd      	lsls	r5, r3, #27
 800424e:	d411      	bmi.n	8004274 <__swsetup_r+0x50>
 8004250:	2309      	movs	r3, #9
 8004252:	6033      	str	r3, [r6, #0]
 8004254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	f04f 30ff 	mov.w	r0, #4294967295
 800425e:	e03e      	b.n	80042de <__swsetup_r+0xba>
 8004260:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <__swsetup_r+0xd4>)
 8004262:	429c      	cmp	r4, r3
 8004264:	d101      	bne.n	800426a <__swsetup_r+0x46>
 8004266:	68ac      	ldr	r4, [r5, #8]
 8004268:	e7eb      	b.n	8004242 <__swsetup_r+0x1e>
 800426a:	4b24      	ldr	r3, [pc, #144]	; (80042fc <__swsetup_r+0xd8>)
 800426c:	429c      	cmp	r4, r3
 800426e:	bf08      	it	eq
 8004270:	68ec      	ldreq	r4, [r5, #12]
 8004272:	e7e6      	b.n	8004242 <__swsetup_r+0x1e>
 8004274:	0758      	lsls	r0, r3, #29
 8004276:	d512      	bpl.n	800429e <__swsetup_r+0x7a>
 8004278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800427a:	b141      	cbz	r1, 800428e <__swsetup_r+0x6a>
 800427c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004280:	4299      	cmp	r1, r3
 8004282:	d002      	beq.n	800428a <__swsetup_r+0x66>
 8004284:	4630      	mov	r0, r6
 8004286:	f000 fa5b 	bl	8004740 <_free_r>
 800428a:	2300      	movs	r3, #0
 800428c:	6363      	str	r3, [r4, #52]	; 0x34
 800428e:	89a3      	ldrh	r3, [r4, #12]
 8004290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004294:	81a3      	strh	r3, [r4, #12]
 8004296:	2300      	movs	r3, #0
 8004298:	6063      	str	r3, [r4, #4]
 800429a:	6923      	ldr	r3, [r4, #16]
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	f043 0308 	orr.w	r3, r3, #8
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	b94b      	cbnz	r3, 80042be <__swsetup_r+0x9a>
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b4:	d003      	beq.n	80042be <__swsetup_r+0x9a>
 80042b6:	4621      	mov	r1, r4
 80042b8:	4630      	mov	r0, r6
 80042ba:	f000 fa01 	bl	80046c0 <__smakebuf_r>
 80042be:	89a0      	ldrh	r0, [r4, #12]
 80042c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042c4:	f010 0301 	ands.w	r3, r0, #1
 80042c8:	d00a      	beq.n	80042e0 <__swsetup_r+0xbc>
 80042ca:	2300      	movs	r3, #0
 80042cc:	60a3      	str	r3, [r4, #8]
 80042ce:	6963      	ldr	r3, [r4, #20]
 80042d0:	425b      	negs	r3, r3
 80042d2:	61a3      	str	r3, [r4, #24]
 80042d4:	6923      	ldr	r3, [r4, #16]
 80042d6:	b943      	cbnz	r3, 80042ea <__swsetup_r+0xc6>
 80042d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042dc:	d1ba      	bne.n	8004254 <__swsetup_r+0x30>
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	0781      	lsls	r1, r0, #30
 80042e2:	bf58      	it	pl
 80042e4:	6963      	ldrpl	r3, [r4, #20]
 80042e6:	60a3      	str	r3, [r4, #8]
 80042e8:	e7f4      	b.n	80042d4 <__swsetup_r+0xb0>
 80042ea:	2000      	movs	r0, #0
 80042ec:	e7f7      	b.n	80042de <__swsetup_r+0xba>
 80042ee:	bf00      	nop
 80042f0:	20000018 	.word	0x20000018
 80042f4:	080052fc 	.word	0x080052fc
 80042f8:	0800531c 	.word	0x0800531c
 80042fc:	080052dc 	.word	0x080052dc

08004300 <__sflush_r>:
 8004300:	898a      	ldrh	r2, [r1, #12]
 8004302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004306:	4605      	mov	r5, r0
 8004308:	0710      	lsls	r0, r2, #28
 800430a:	460c      	mov	r4, r1
 800430c:	d458      	bmi.n	80043c0 <__sflush_r+0xc0>
 800430e:	684b      	ldr	r3, [r1, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	dc05      	bgt.n	8004320 <__sflush_r+0x20>
 8004314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	dc02      	bgt.n	8004320 <__sflush_r+0x20>
 800431a:	2000      	movs	r0, #0
 800431c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004322:	2e00      	cmp	r6, #0
 8004324:	d0f9      	beq.n	800431a <__sflush_r+0x1a>
 8004326:	2300      	movs	r3, #0
 8004328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800432c:	682f      	ldr	r7, [r5, #0]
 800432e:	602b      	str	r3, [r5, #0]
 8004330:	d032      	beq.n	8004398 <__sflush_r+0x98>
 8004332:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	075a      	lsls	r2, r3, #29
 8004338:	d505      	bpl.n	8004346 <__sflush_r+0x46>
 800433a:	6863      	ldr	r3, [r4, #4]
 800433c:	1ac0      	subs	r0, r0, r3
 800433e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004340:	b10b      	cbz	r3, 8004346 <__sflush_r+0x46>
 8004342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004344:	1ac0      	subs	r0, r0, r3
 8004346:	2300      	movs	r3, #0
 8004348:	4602      	mov	r2, r0
 800434a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800434c:	6a21      	ldr	r1, [r4, #32]
 800434e:	4628      	mov	r0, r5
 8004350:	47b0      	blx	r6
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	d106      	bne.n	8004366 <__sflush_r+0x66>
 8004358:	6829      	ldr	r1, [r5, #0]
 800435a:	291d      	cmp	r1, #29
 800435c:	d82c      	bhi.n	80043b8 <__sflush_r+0xb8>
 800435e:	4a2a      	ldr	r2, [pc, #168]	; (8004408 <__sflush_r+0x108>)
 8004360:	40ca      	lsrs	r2, r1
 8004362:	07d6      	lsls	r6, r2, #31
 8004364:	d528      	bpl.n	80043b8 <__sflush_r+0xb8>
 8004366:	2200      	movs	r2, #0
 8004368:	6062      	str	r2, [r4, #4]
 800436a:	04d9      	lsls	r1, r3, #19
 800436c:	6922      	ldr	r2, [r4, #16]
 800436e:	6022      	str	r2, [r4, #0]
 8004370:	d504      	bpl.n	800437c <__sflush_r+0x7c>
 8004372:	1c42      	adds	r2, r0, #1
 8004374:	d101      	bne.n	800437a <__sflush_r+0x7a>
 8004376:	682b      	ldr	r3, [r5, #0]
 8004378:	b903      	cbnz	r3, 800437c <__sflush_r+0x7c>
 800437a:	6560      	str	r0, [r4, #84]	; 0x54
 800437c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800437e:	602f      	str	r7, [r5, #0]
 8004380:	2900      	cmp	r1, #0
 8004382:	d0ca      	beq.n	800431a <__sflush_r+0x1a>
 8004384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004388:	4299      	cmp	r1, r3
 800438a:	d002      	beq.n	8004392 <__sflush_r+0x92>
 800438c:	4628      	mov	r0, r5
 800438e:	f000 f9d7 	bl	8004740 <_free_r>
 8004392:	2000      	movs	r0, #0
 8004394:	6360      	str	r0, [r4, #52]	; 0x34
 8004396:	e7c1      	b.n	800431c <__sflush_r+0x1c>
 8004398:	6a21      	ldr	r1, [r4, #32]
 800439a:	2301      	movs	r3, #1
 800439c:	4628      	mov	r0, r5
 800439e:	47b0      	blx	r6
 80043a0:	1c41      	adds	r1, r0, #1
 80043a2:	d1c7      	bne.n	8004334 <__sflush_r+0x34>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0c4      	beq.n	8004334 <__sflush_r+0x34>
 80043aa:	2b1d      	cmp	r3, #29
 80043ac:	d001      	beq.n	80043b2 <__sflush_r+0xb2>
 80043ae:	2b16      	cmp	r3, #22
 80043b0:	d101      	bne.n	80043b6 <__sflush_r+0xb6>
 80043b2:	602f      	str	r7, [r5, #0]
 80043b4:	e7b1      	b.n	800431a <__sflush_r+0x1a>
 80043b6:	89a3      	ldrh	r3, [r4, #12]
 80043b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043bc:	81a3      	strh	r3, [r4, #12]
 80043be:	e7ad      	b.n	800431c <__sflush_r+0x1c>
 80043c0:	690f      	ldr	r7, [r1, #16]
 80043c2:	2f00      	cmp	r7, #0
 80043c4:	d0a9      	beq.n	800431a <__sflush_r+0x1a>
 80043c6:	0793      	lsls	r3, r2, #30
 80043c8:	680e      	ldr	r6, [r1, #0]
 80043ca:	bf08      	it	eq
 80043cc:	694b      	ldreq	r3, [r1, #20]
 80043ce:	600f      	str	r7, [r1, #0]
 80043d0:	bf18      	it	ne
 80043d2:	2300      	movne	r3, #0
 80043d4:	eba6 0807 	sub.w	r8, r6, r7
 80043d8:	608b      	str	r3, [r1, #8]
 80043da:	f1b8 0f00 	cmp.w	r8, #0
 80043de:	dd9c      	ble.n	800431a <__sflush_r+0x1a>
 80043e0:	6a21      	ldr	r1, [r4, #32]
 80043e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043e4:	4643      	mov	r3, r8
 80043e6:	463a      	mov	r2, r7
 80043e8:	4628      	mov	r0, r5
 80043ea:	47b0      	blx	r6
 80043ec:	2800      	cmp	r0, #0
 80043ee:	dc06      	bgt.n	80043fe <__sflush_r+0xfe>
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	e78e      	b.n	800431c <__sflush_r+0x1c>
 80043fe:	4407      	add	r7, r0
 8004400:	eba8 0800 	sub.w	r8, r8, r0
 8004404:	e7e9      	b.n	80043da <__sflush_r+0xda>
 8004406:	bf00      	nop
 8004408:	20400001 	.word	0x20400001

0800440c <_fflush_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	690b      	ldr	r3, [r1, #16]
 8004410:	4605      	mov	r5, r0
 8004412:	460c      	mov	r4, r1
 8004414:	b913      	cbnz	r3, 800441c <_fflush_r+0x10>
 8004416:	2500      	movs	r5, #0
 8004418:	4628      	mov	r0, r5
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	b118      	cbz	r0, 8004426 <_fflush_r+0x1a>
 800441e:	6983      	ldr	r3, [r0, #24]
 8004420:	b90b      	cbnz	r3, 8004426 <_fflush_r+0x1a>
 8004422:	f000 f887 	bl	8004534 <__sinit>
 8004426:	4b14      	ldr	r3, [pc, #80]	; (8004478 <_fflush_r+0x6c>)
 8004428:	429c      	cmp	r4, r3
 800442a:	d11b      	bne.n	8004464 <_fflush_r+0x58>
 800442c:	686c      	ldr	r4, [r5, #4]
 800442e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0ef      	beq.n	8004416 <_fflush_r+0xa>
 8004436:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004438:	07d0      	lsls	r0, r2, #31
 800443a:	d404      	bmi.n	8004446 <_fflush_r+0x3a>
 800443c:	0599      	lsls	r1, r3, #22
 800443e:	d402      	bmi.n	8004446 <_fflush_r+0x3a>
 8004440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004442:	f000 f915 	bl	8004670 <__retarget_lock_acquire_recursive>
 8004446:	4628      	mov	r0, r5
 8004448:	4621      	mov	r1, r4
 800444a:	f7ff ff59 	bl	8004300 <__sflush_r>
 800444e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004450:	07da      	lsls	r2, r3, #31
 8004452:	4605      	mov	r5, r0
 8004454:	d4e0      	bmi.n	8004418 <_fflush_r+0xc>
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	059b      	lsls	r3, r3, #22
 800445a:	d4dd      	bmi.n	8004418 <_fflush_r+0xc>
 800445c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800445e:	f000 f908 	bl	8004672 <__retarget_lock_release_recursive>
 8004462:	e7d9      	b.n	8004418 <_fflush_r+0xc>
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <_fflush_r+0x70>)
 8004466:	429c      	cmp	r4, r3
 8004468:	d101      	bne.n	800446e <_fflush_r+0x62>
 800446a:	68ac      	ldr	r4, [r5, #8]
 800446c:	e7df      	b.n	800442e <_fflush_r+0x22>
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <_fflush_r+0x74>)
 8004470:	429c      	cmp	r4, r3
 8004472:	bf08      	it	eq
 8004474:	68ec      	ldreq	r4, [r5, #12]
 8004476:	e7da      	b.n	800442e <_fflush_r+0x22>
 8004478:	080052fc 	.word	0x080052fc
 800447c:	0800531c 	.word	0x0800531c
 8004480:	080052dc 	.word	0x080052dc

08004484 <std>:
 8004484:	2300      	movs	r3, #0
 8004486:	b510      	push	{r4, lr}
 8004488:	4604      	mov	r4, r0
 800448a:	e9c0 3300 	strd	r3, r3, [r0]
 800448e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004492:	6083      	str	r3, [r0, #8]
 8004494:	8181      	strh	r1, [r0, #12]
 8004496:	6643      	str	r3, [r0, #100]	; 0x64
 8004498:	81c2      	strh	r2, [r0, #14]
 800449a:	6183      	str	r3, [r0, #24]
 800449c:	4619      	mov	r1, r3
 800449e:	2208      	movs	r2, #8
 80044a0:	305c      	adds	r0, #92	; 0x5c
 80044a2:	f7ff fdd7 	bl	8004054 <memset>
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <std+0x38>)
 80044a8:	6263      	str	r3, [r4, #36]	; 0x24
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <std+0x3c>)
 80044ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <std+0x40>)
 80044b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <std+0x44>)
 80044b4:	6224      	str	r4, [r4, #32]
 80044b6:	6323      	str	r3, [r4, #48]	; 0x30
 80044b8:	bd10      	pop	{r4, pc}
 80044ba:	bf00      	nop
 80044bc:	08004efd 	.word	0x08004efd
 80044c0:	08004f1f 	.word	0x08004f1f
 80044c4:	08004f57 	.word	0x08004f57
 80044c8:	08004f7b 	.word	0x08004f7b

080044cc <_cleanup_r>:
 80044cc:	4901      	ldr	r1, [pc, #4]	; (80044d4 <_cleanup_r+0x8>)
 80044ce:	f000 b8af 	b.w	8004630 <_fwalk_reent>
 80044d2:	bf00      	nop
 80044d4:	0800440d 	.word	0x0800440d

080044d8 <__sfmoreglue>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	2268      	movs	r2, #104	; 0x68
 80044dc:	1e4d      	subs	r5, r1, #1
 80044de:	4355      	muls	r5, r2
 80044e0:	460e      	mov	r6, r1
 80044e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044e6:	f000 f997 	bl	8004818 <_malloc_r>
 80044ea:	4604      	mov	r4, r0
 80044ec:	b140      	cbz	r0, 8004500 <__sfmoreglue+0x28>
 80044ee:	2100      	movs	r1, #0
 80044f0:	e9c0 1600 	strd	r1, r6, [r0]
 80044f4:	300c      	adds	r0, #12
 80044f6:	60a0      	str	r0, [r4, #8]
 80044f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044fc:	f7ff fdaa 	bl	8004054 <memset>
 8004500:	4620      	mov	r0, r4
 8004502:	bd70      	pop	{r4, r5, r6, pc}

08004504 <__sfp_lock_acquire>:
 8004504:	4801      	ldr	r0, [pc, #4]	; (800450c <__sfp_lock_acquire+0x8>)
 8004506:	f000 b8b3 	b.w	8004670 <__retarget_lock_acquire_recursive>
 800450a:	bf00      	nop
 800450c:	20000141 	.word	0x20000141

08004510 <__sfp_lock_release>:
 8004510:	4801      	ldr	r0, [pc, #4]	; (8004518 <__sfp_lock_release+0x8>)
 8004512:	f000 b8ae 	b.w	8004672 <__retarget_lock_release_recursive>
 8004516:	bf00      	nop
 8004518:	20000141 	.word	0x20000141

0800451c <__sinit_lock_acquire>:
 800451c:	4801      	ldr	r0, [pc, #4]	; (8004524 <__sinit_lock_acquire+0x8>)
 800451e:	f000 b8a7 	b.w	8004670 <__retarget_lock_acquire_recursive>
 8004522:	bf00      	nop
 8004524:	20000142 	.word	0x20000142

08004528 <__sinit_lock_release>:
 8004528:	4801      	ldr	r0, [pc, #4]	; (8004530 <__sinit_lock_release+0x8>)
 800452a:	f000 b8a2 	b.w	8004672 <__retarget_lock_release_recursive>
 800452e:	bf00      	nop
 8004530:	20000142 	.word	0x20000142

08004534 <__sinit>:
 8004534:	b510      	push	{r4, lr}
 8004536:	4604      	mov	r4, r0
 8004538:	f7ff fff0 	bl	800451c <__sinit_lock_acquire>
 800453c:	69a3      	ldr	r3, [r4, #24]
 800453e:	b11b      	cbz	r3, 8004548 <__sinit+0x14>
 8004540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004544:	f7ff bff0 	b.w	8004528 <__sinit_lock_release>
 8004548:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800454c:	6523      	str	r3, [r4, #80]	; 0x50
 800454e:	4b13      	ldr	r3, [pc, #76]	; (800459c <__sinit+0x68>)
 8004550:	4a13      	ldr	r2, [pc, #76]	; (80045a0 <__sinit+0x6c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	62a2      	str	r2, [r4, #40]	; 0x28
 8004556:	42a3      	cmp	r3, r4
 8004558:	bf04      	itt	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	61a3      	streq	r3, [r4, #24]
 800455e:	4620      	mov	r0, r4
 8004560:	f000 f820 	bl	80045a4 <__sfp>
 8004564:	6060      	str	r0, [r4, #4]
 8004566:	4620      	mov	r0, r4
 8004568:	f000 f81c 	bl	80045a4 <__sfp>
 800456c:	60a0      	str	r0, [r4, #8]
 800456e:	4620      	mov	r0, r4
 8004570:	f000 f818 	bl	80045a4 <__sfp>
 8004574:	2200      	movs	r2, #0
 8004576:	60e0      	str	r0, [r4, #12]
 8004578:	2104      	movs	r1, #4
 800457a:	6860      	ldr	r0, [r4, #4]
 800457c:	f7ff ff82 	bl	8004484 <std>
 8004580:	68a0      	ldr	r0, [r4, #8]
 8004582:	2201      	movs	r2, #1
 8004584:	2109      	movs	r1, #9
 8004586:	f7ff ff7d 	bl	8004484 <std>
 800458a:	68e0      	ldr	r0, [r4, #12]
 800458c:	2202      	movs	r2, #2
 800458e:	2112      	movs	r1, #18
 8004590:	f7ff ff78 	bl	8004484 <std>
 8004594:	2301      	movs	r3, #1
 8004596:	61a3      	str	r3, [r4, #24]
 8004598:	e7d2      	b.n	8004540 <__sinit+0xc>
 800459a:	bf00      	nop
 800459c:	080052d8 	.word	0x080052d8
 80045a0:	080044cd 	.word	0x080044cd

080045a4 <__sfp>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	4607      	mov	r7, r0
 80045a8:	f7ff ffac 	bl	8004504 <__sfp_lock_acquire>
 80045ac:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <__sfp+0x84>)
 80045ae:	681e      	ldr	r6, [r3, #0]
 80045b0:	69b3      	ldr	r3, [r6, #24]
 80045b2:	b913      	cbnz	r3, 80045ba <__sfp+0x16>
 80045b4:	4630      	mov	r0, r6
 80045b6:	f7ff ffbd 	bl	8004534 <__sinit>
 80045ba:	3648      	adds	r6, #72	; 0x48
 80045bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	d503      	bpl.n	80045cc <__sfp+0x28>
 80045c4:	6833      	ldr	r3, [r6, #0]
 80045c6:	b30b      	cbz	r3, 800460c <__sfp+0x68>
 80045c8:	6836      	ldr	r6, [r6, #0]
 80045ca:	e7f7      	b.n	80045bc <__sfp+0x18>
 80045cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045d0:	b9d5      	cbnz	r5, 8004608 <__sfp+0x64>
 80045d2:	4b16      	ldr	r3, [pc, #88]	; (800462c <__sfp+0x88>)
 80045d4:	60e3      	str	r3, [r4, #12]
 80045d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045da:	6665      	str	r5, [r4, #100]	; 0x64
 80045dc:	f000 f847 	bl	800466e <__retarget_lock_init_recursive>
 80045e0:	f7ff ff96 	bl	8004510 <__sfp_lock_release>
 80045e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045ec:	6025      	str	r5, [r4, #0]
 80045ee:	61a5      	str	r5, [r4, #24]
 80045f0:	2208      	movs	r2, #8
 80045f2:	4629      	mov	r1, r5
 80045f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045f8:	f7ff fd2c 	bl	8004054 <memset>
 80045fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004600:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004604:	4620      	mov	r0, r4
 8004606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004608:	3468      	adds	r4, #104	; 0x68
 800460a:	e7d9      	b.n	80045c0 <__sfp+0x1c>
 800460c:	2104      	movs	r1, #4
 800460e:	4638      	mov	r0, r7
 8004610:	f7ff ff62 	bl	80044d8 <__sfmoreglue>
 8004614:	4604      	mov	r4, r0
 8004616:	6030      	str	r0, [r6, #0]
 8004618:	2800      	cmp	r0, #0
 800461a:	d1d5      	bne.n	80045c8 <__sfp+0x24>
 800461c:	f7ff ff78 	bl	8004510 <__sfp_lock_release>
 8004620:	230c      	movs	r3, #12
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	e7ee      	b.n	8004604 <__sfp+0x60>
 8004626:	bf00      	nop
 8004628:	080052d8 	.word	0x080052d8
 800462c:	ffff0001 	.word	0xffff0001

08004630 <_fwalk_reent>:
 8004630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004634:	4606      	mov	r6, r0
 8004636:	4688      	mov	r8, r1
 8004638:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800463c:	2700      	movs	r7, #0
 800463e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004642:	f1b9 0901 	subs.w	r9, r9, #1
 8004646:	d505      	bpl.n	8004654 <_fwalk_reent+0x24>
 8004648:	6824      	ldr	r4, [r4, #0]
 800464a:	2c00      	cmp	r4, #0
 800464c:	d1f7      	bne.n	800463e <_fwalk_reent+0xe>
 800464e:	4638      	mov	r0, r7
 8004650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004654:	89ab      	ldrh	r3, [r5, #12]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d907      	bls.n	800466a <_fwalk_reent+0x3a>
 800465a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800465e:	3301      	adds	r3, #1
 8004660:	d003      	beq.n	800466a <_fwalk_reent+0x3a>
 8004662:	4629      	mov	r1, r5
 8004664:	4630      	mov	r0, r6
 8004666:	47c0      	blx	r8
 8004668:	4307      	orrs	r7, r0
 800466a:	3568      	adds	r5, #104	; 0x68
 800466c:	e7e9      	b.n	8004642 <_fwalk_reent+0x12>

0800466e <__retarget_lock_init_recursive>:
 800466e:	4770      	bx	lr

08004670 <__retarget_lock_acquire_recursive>:
 8004670:	4770      	bx	lr

08004672 <__retarget_lock_release_recursive>:
 8004672:	4770      	bx	lr

08004674 <__swhatbuf_r>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	460e      	mov	r6, r1
 8004678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800467c:	2900      	cmp	r1, #0
 800467e:	b096      	sub	sp, #88	; 0x58
 8004680:	4614      	mov	r4, r2
 8004682:	461d      	mov	r5, r3
 8004684:	da08      	bge.n	8004698 <__swhatbuf_r+0x24>
 8004686:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	602a      	str	r2, [r5, #0]
 800468e:	061a      	lsls	r2, r3, #24
 8004690:	d410      	bmi.n	80046b4 <__swhatbuf_r+0x40>
 8004692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004696:	e00e      	b.n	80046b6 <__swhatbuf_r+0x42>
 8004698:	466a      	mov	r2, sp
 800469a:	f000 fc95 	bl	8004fc8 <_fstat_r>
 800469e:	2800      	cmp	r0, #0
 80046a0:	dbf1      	blt.n	8004686 <__swhatbuf_r+0x12>
 80046a2:	9a01      	ldr	r2, [sp, #4]
 80046a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046ac:	425a      	negs	r2, r3
 80046ae:	415a      	adcs	r2, r3
 80046b0:	602a      	str	r2, [r5, #0]
 80046b2:	e7ee      	b.n	8004692 <__swhatbuf_r+0x1e>
 80046b4:	2340      	movs	r3, #64	; 0x40
 80046b6:	2000      	movs	r0, #0
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	b016      	add	sp, #88	; 0x58
 80046bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080046c0 <__smakebuf_r>:
 80046c0:	898b      	ldrh	r3, [r1, #12]
 80046c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046c4:	079d      	lsls	r5, r3, #30
 80046c6:	4606      	mov	r6, r0
 80046c8:	460c      	mov	r4, r1
 80046ca:	d507      	bpl.n	80046dc <__smakebuf_r+0x1c>
 80046cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	6123      	str	r3, [r4, #16]
 80046d4:	2301      	movs	r3, #1
 80046d6:	6163      	str	r3, [r4, #20]
 80046d8:	b002      	add	sp, #8
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	ab01      	add	r3, sp, #4
 80046de:	466a      	mov	r2, sp
 80046e0:	f7ff ffc8 	bl	8004674 <__swhatbuf_r>
 80046e4:	9900      	ldr	r1, [sp, #0]
 80046e6:	4605      	mov	r5, r0
 80046e8:	4630      	mov	r0, r6
 80046ea:	f000 f895 	bl	8004818 <_malloc_r>
 80046ee:	b948      	cbnz	r0, 8004704 <__smakebuf_r+0x44>
 80046f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f4:	059a      	lsls	r2, r3, #22
 80046f6:	d4ef      	bmi.n	80046d8 <__smakebuf_r+0x18>
 80046f8:	f023 0303 	bic.w	r3, r3, #3
 80046fc:	f043 0302 	orr.w	r3, r3, #2
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	e7e3      	b.n	80046cc <__smakebuf_r+0xc>
 8004704:	4b0d      	ldr	r3, [pc, #52]	; (800473c <__smakebuf_r+0x7c>)
 8004706:	62b3      	str	r3, [r6, #40]	; 0x28
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	6020      	str	r0, [r4, #0]
 800470c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004710:	81a3      	strh	r3, [r4, #12]
 8004712:	9b00      	ldr	r3, [sp, #0]
 8004714:	6163      	str	r3, [r4, #20]
 8004716:	9b01      	ldr	r3, [sp, #4]
 8004718:	6120      	str	r0, [r4, #16]
 800471a:	b15b      	cbz	r3, 8004734 <__smakebuf_r+0x74>
 800471c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004720:	4630      	mov	r0, r6
 8004722:	f000 fc63 	bl	8004fec <_isatty_r>
 8004726:	b128      	cbz	r0, 8004734 <__smakebuf_r+0x74>
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	f023 0303 	bic.w	r3, r3, #3
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	81a3      	strh	r3, [r4, #12]
 8004734:	89a0      	ldrh	r0, [r4, #12]
 8004736:	4305      	orrs	r5, r0
 8004738:	81a5      	strh	r5, [r4, #12]
 800473a:	e7cd      	b.n	80046d8 <__smakebuf_r+0x18>
 800473c:	080044cd 	.word	0x080044cd

08004740 <_free_r>:
 8004740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004742:	2900      	cmp	r1, #0
 8004744:	d044      	beq.n	80047d0 <_free_r+0x90>
 8004746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800474a:	9001      	str	r0, [sp, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f1a1 0404 	sub.w	r4, r1, #4
 8004752:	bfb8      	it	lt
 8004754:	18e4      	addlt	r4, r4, r3
 8004756:	f000 fc6b 	bl	8005030 <__malloc_lock>
 800475a:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <_free_r+0x94>)
 800475c:	9801      	ldr	r0, [sp, #4]
 800475e:	6813      	ldr	r3, [r2, #0]
 8004760:	b933      	cbnz	r3, 8004770 <_free_r+0x30>
 8004762:	6063      	str	r3, [r4, #4]
 8004764:	6014      	str	r4, [r2, #0]
 8004766:	b003      	add	sp, #12
 8004768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800476c:	f000 bc66 	b.w	800503c <__malloc_unlock>
 8004770:	42a3      	cmp	r3, r4
 8004772:	d908      	bls.n	8004786 <_free_r+0x46>
 8004774:	6825      	ldr	r5, [r4, #0]
 8004776:	1961      	adds	r1, r4, r5
 8004778:	428b      	cmp	r3, r1
 800477a:	bf01      	itttt	eq
 800477c:	6819      	ldreq	r1, [r3, #0]
 800477e:	685b      	ldreq	r3, [r3, #4]
 8004780:	1949      	addeq	r1, r1, r5
 8004782:	6021      	streq	r1, [r4, #0]
 8004784:	e7ed      	b.n	8004762 <_free_r+0x22>
 8004786:	461a      	mov	r2, r3
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	b10b      	cbz	r3, 8004790 <_free_r+0x50>
 800478c:	42a3      	cmp	r3, r4
 800478e:	d9fa      	bls.n	8004786 <_free_r+0x46>
 8004790:	6811      	ldr	r1, [r2, #0]
 8004792:	1855      	adds	r5, r2, r1
 8004794:	42a5      	cmp	r5, r4
 8004796:	d10b      	bne.n	80047b0 <_free_r+0x70>
 8004798:	6824      	ldr	r4, [r4, #0]
 800479a:	4421      	add	r1, r4
 800479c:	1854      	adds	r4, r2, r1
 800479e:	42a3      	cmp	r3, r4
 80047a0:	6011      	str	r1, [r2, #0]
 80047a2:	d1e0      	bne.n	8004766 <_free_r+0x26>
 80047a4:	681c      	ldr	r4, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	6053      	str	r3, [r2, #4]
 80047aa:	4421      	add	r1, r4
 80047ac:	6011      	str	r1, [r2, #0]
 80047ae:	e7da      	b.n	8004766 <_free_r+0x26>
 80047b0:	d902      	bls.n	80047b8 <_free_r+0x78>
 80047b2:	230c      	movs	r3, #12
 80047b4:	6003      	str	r3, [r0, #0]
 80047b6:	e7d6      	b.n	8004766 <_free_r+0x26>
 80047b8:	6825      	ldr	r5, [r4, #0]
 80047ba:	1961      	adds	r1, r4, r5
 80047bc:	428b      	cmp	r3, r1
 80047be:	bf04      	itt	eq
 80047c0:	6819      	ldreq	r1, [r3, #0]
 80047c2:	685b      	ldreq	r3, [r3, #4]
 80047c4:	6063      	str	r3, [r4, #4]
 80047c6:	bf04      	itt	eq
 80047c8:	1949      	addeq	r1, r1, r5
 80047ca:	6021      	streq	r1, [r4, #0]
 80047cc:	6054      	str	r4, [r2, #4]
 80047ce:	e7ca      	b.n	8004766 <_free_r+0x26>
 80047d0:	b003      	add	sp, #12
 80047d2:	bd30      	pop	{r4, r5, pc}
 80047d4:	20000144 	.word	0x20000144

080047d8 <sbrk_aligned>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4e0e      	ldr	r6, [pc, #56]	; (8004814 <sbrk_aligned+0x3c>)
 80047dc:	460c      	mov	r4, r1
 80047de:	6831      	ldr	r1, [r6, #0]
 80047e0:	4605      	mov	r5, r0
 80047e2:	b911      	cbnz	r1, 80047ea <sbrk_aligned+0x12>
 80047e4:	f000 fb7a 	bl	8004edc <_sbrk_r>
 80047e8:	6030      	str	r0, [r6, #0]
 80047ea:	4621      	mov	r1, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 fb75 	bl	8004edc <_sbrk_r>
 80047f2:	1c43      	adds	r3, r0, #1
 80047f4:	d00a      	beq.n	800480c <sbrk_aligned+0x34>
 80047f6:	1cc4      	adds	r4, r0, #3
 80047f8:	f024 0403 	bic.w	r4, r4, #3
 80047fc:	42a0      	cmp	r0, r4
 80047fe:	d007      	beq.n	8004810 <sbrk_aligned+0x38>
 8004800:	1a21      	subs	r1, r4, r0
 8004802:	4628      	mov	r0, r5
 8004804:	f000 fb6a 	bl	8004edc <_sbrk_r>
 8004808:	3001      	adds	r0, #1
 800480a:	d101      	bne.n	8004810 <sbrk_aligned+0x38>
 800480c:	f04f 34ff 	mov.w	r4, #4294967295
 8004810:	4620      	mov	r0, r4
 8004812:	bd70      	pop	{r4, r5, r6, pc}
 8004814:	20000148 	.word	0x20000148

08004818 <_malloc_r>:
 8004818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800481c:	1ccd      	adds	r5, r1, #3
 800481e:	f025 0503 	bic.w	r5, r5, #3
 8004822:	3508      	adds	r5, #8
 8004824:	2d0c      	cmp	r5, #12
 8004826:	bf38      	it	cc
 8004828:	250c      	movcc	r5, #12
 800482a:	2d00      	cmp	r5, #0
 800482c:	4607      	mov	r7, r0
 800482e:	db01      	blt.n	8004834 <_malloc_r+0x1c>
 8004830:	42a9      	cmp	r1, r5
 8004832:	d905      	bls.n	8004840 <_malloc_r+0x28>
 8004834:	230c      	movs	r3, #12
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	2600      	movs	r6, #0
 800483a:	4630      	mov	r0, r6
 800483c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004840:	4e2e      	ldr	r6, [pc, #184]	; (80048fc <_malloc_r+0xe4>)
 8004842:	f000 fbf5 	bl	8005030 <__malloc_lock>
 8004846:	6833      	ldr	r3, [r6, #0]
 8004848:	461c      	mov	r4, r3
 800484a:	bb34      	cbnz	r4, 800489a <_malloc_r+0x82>
 800484c:	4629      	mov	r1, r5
 800484e:	4638      	mov	r0, r7
 8004850:	f7ff ffc2 	bl	80047d8 <sbrk_aligned>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	4604      	mov	r4, r0
 8004858:	d14d      	bne.n	80048f6 <_malloc_r+0xde>
 800485a:	6834      	ldr	r4, [r6, #0]
 800485c:	4626      	mov	r6, r4
 800485e:	2e00      	cmp	r6, #0
 8004860:	d140      	bne.n	80048e4 <_malloc_r+0xcc>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	4631      	mov	r1, r6
 8004866:	4638      	mov	r0, r7
 8004868:	eb04 0803 	add.w	r8, r4, r3
 800486c:	f000 fb36 	bl	8004edc <_sbrk_r>
 8004870:	4580      	cmp	r8, r0
 8004872:	d13a      	bne.n	80048ea <_malloc_r+0xd2>
 8004874:	6821      	ldr	r1, [r4, #0]
 8004876:	3503      	adds	r5, #3
 8004878:	1a6d      	subs	r5, r5, r1
 800487a:	f025 0503 	bic.w	r5, r5, #3
 800487e:	3508      	adds	r5, #8
 8004880:	2d0c      	cmp	r5, #12
 8004882:	bf38      	it	cc
 8004884:	250c      	movcc	r5, #12
 8004886:	4629      	mov	r1, r5
 8004888:	4638      	mov	r0, r7
 800488a:	f7ff ffa5 	bl	80047d8 <sbrk_aligned>
 800488e:	3001      	adds	r0, #1
 8004890:	d02b      	beq.n	80048ea <_malloc_r+0xd2>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	442b      	add	r3, r5
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	e00e      	b.n	80048b8 <_malloc_r+0xa0>
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	1b52      	subs	r2, r2, r5
 800489e:	d41e      	bmi.n	80048de <_malloc_r+0xc6>
 80048a0:	2a0b      	cmp	r2, #11
 80048a2:	d916      	bls.n	80048d2 <_malloc_r+0xba>
 80048a4:	1961      	adds	r1, r4, r5
 80048a6:	42a3      	cmp	r3, r4
 80048a8:	6025      	str	r5, [r4, #0]
 80048aa:	bf18      	it	ne
 80048ac:	6059      	strne	r1, [r3, #4]
 80048ae:	6863      	ldr	r3, [r4, #4]
 80048b0:	bf08      	it	eq
 80048b2:	6031      	streq	r1, [r6, #0]
 80048b4:	5162      	str	r2, [r4, r5]
 80048b6:	604b      	str	r3, [r1, #4]
 80048b8:	4638      	mov	r0, r7
 80048ba:	f104 060b 	add.w	r6, r4, #11
 80048be:	f000 fbbd 	bl	800503c <__malloc_unlock>
 80048c2:	f026 0607 	bic.w	r6, r6, #7
 80048c6:	1d23      	adds	r3, r4, #4
 80048c8:	1af2      	subs	r2, r6, r3
 80048ca:	d0b6      	beq.n	800483a <_malloc_r+0x22>
 80048cc:	1b9b      	subs	r3, r3, r6
 80048ce:	50a3      	str	r3, [r4, r2]
 80048d0:	e7b3      	b.n	800483a <_malloc_r+0x22>
 80048d2:	6862      	ldr	r2, [r4, #4]
 80048d4:	42a3      	cmp	r3, r4
 80048d6:	bf0c      	ite	eq
 80048d8:	6032      	streq	r2, [r6, #0]
 80048da:	605a      	strne	r2, [r3, #4]
 80048dc:	e7ec      	b.n	80048b8 <_malloc_r+0xa0>
 80048de:	4623      	mov	r3, r4
 80048e0:	6864      	ldr	r4, [r4, #4]
 80048e2:	e7b2      	b.n	800484a <_malloc_r+0x32>
 80048e4:	4634      	mov	r4, r6
 80048e6:	6876      	ldr	r6, [r6, #4]
 80048e8:	e7b9      	b.n	800485e <_malloc_r+0x46>
 80048ea:	230c      	movs	r3, #12
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	4638      	mov	r0, r7
 80048f0:	f000 fba4 	bl	800503c <__malloc_unlock>
 80048f4:	e7a1      	b.n	800483a <_malloc_r+0x22>
 80048f6:	6025      	str	r5, [r4, #0]
 80048f8:	e7de      	b.n	80048b8 <_malloc_r+0xa0>
 80048fa:	bf00      	nop
 80048fc:	20000144 	.word	0x20000144

08004900 <__sfputc_r>:
 8004900:	6893      	ldr	r3, [r2, #8]
 8004902:	3b01      	subs	r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	b410      	push	{r4}
 8004908:	6093      	str	r3, [r2, #8]
 800490a:	da08      	bge.n	800491e <__sfputc_r+0x1e>
 800490c:	6994      	ldr	r4, [r2, #24]
 800490e:	42a3      	cmp	r3, r4
 8004910:	db01      	blt.n	8004916 <__sfputc_r+0x16>
 8004912:	290a      	cmp	r1, #10
 8004914:	d103      	bne.n	800491e <__sfputc_r+0x1e>
 8004916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800491a:	f7ff bc31 	b.w	8004180 <__swbuf_r>
 800491e:	6813      	ldr	r3, [r2, #0]
 8004920:	1c58      	adds	r0, r3, #1
 8004922:	6010      	str	r0, [r2, #0]
 8004924:	7019      	strb	r1, [r3, #0]
 8004926:	4608      	mov	r0, r1
 8004928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800492c:	4770      	bx	lr

0800492e <__sfputs_r>:
 800492e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004930:	4606      	mov	r6, r0
 8004932:	460f      	mov	r7, r1
 8004934:	4614      	mov	r4, r2
 8004936:	18d5      	adds	r5, r2, r3
 8004938:	42ac      	cmp	r4, r5
 800493a:	d101      	bne.n	8004940 <__sfputs_r+0x12>
 800493c:	2000      	movs	r0, #0
 800493e:	e007      	b.n	8004950 <__sfputs_r+0x22>
 8004940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004944:	463a      	mov	r2, r7
 8004946:	4630      	mov	r0, r6
 8004948:	f7ff ffda 	bl	8004900 <__sfputc_r>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d1f3      	bne.n	8004938 <__sfputs_r+0xa>
 8004950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004954 <_vfiprintf_r>:
 8004954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004958:	460d      	mov	r5, r1
 800495a:	b09d      	sub	sp, #116	; 0x74
 800495c:	4614      	mov	r4, r2
 800495e:	4698      	mov	r8, r3
 8004960:	4606      	mov	r6, r0
 8004962:	b118      	cbz	r0, 800496c <_vfiprintf_r+0x18>
 8004964:	6983      	ldr	r3, [r0, #24]
 8004966:	b90b      	cbnz	r3, 800496c <_vfiprintf_r+0x18>
 8004968:	f7ff fde4 	bl	8004534 <__sinit>
 800496c:	4b89      	ldr	r3, [pc, #548]	; (8004b94 <_vfiprintf_r+0x240>)
 800496e:	429d      	cmp	r5, r3
 8004970:	d11b      	bne.n	80049aa <_vfiprintf_r+0x56>
 8004972:	6875      	ldr	r5, [r6, #4]
 8004974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004976:	07d9      	lsls	r1, r3, #31
 8004978:	d405      	bmi.n	8004986 <_vfiprintf_r+0x32>
 800497a:	89ab      	ldrh	r3, [r5, #12]
 800497c:	059a      	lsls	r2, r3, #22
 800497e:	d402      	bmi.n	8004986 <_vfiprintf_r+0x32>
 8004980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004982:	f7ff fe75 	bl	8004670 <__retarget_lock_acquire_recursive>
 8004986:	89ab      	ldrh	r3, [r5, #12]
 8004988:	071b      	lsls	r3, r3, #28
 800498a:	d501      	bpl.n	8004990 <_vfiprintf_r+0x3c>
 800498c:	692b      	ldr	r3, [r5, #16]
 800498e:	b9eb      	cbnz	r3, 80049cc <_vfiprintf_r+0x78>
 8004990:	4629      	mov	r1, r5
 8004992:	4630      	mov	r0, r6
 8004994:	f7ff fc46 	bl	8004224 <__swsetup_r>
 8004998:	b1c0      	cbz	r0, 80049cc <_vfiprintf_r+0x78>
 800499a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800499c:	07dc      	lsls	r4, r3, #31
 800499e:	d50e      	bpl.n	80049be <_vfiprintf_r+0x6a>
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	b01d      	add	sp, #116	; 0x74
 80049a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049aa:	4b7b      	ldr	r3, [pc, #492]	; (8004b98 <_vfiprintf_r+0x244>)
 80049ac:	429d      	cmp	r5, r3
 80049ae:	d101      	bne.n	80049b4 <_vfiprintf_r+0x60>
 80049b0:	68b5      	ldr	r5, [r6, #8]
 80049b2:	e7df      	b.n	8004974 <_vfiprintf_r+0x20>
 80049b4:	4b79      	ldr	r3, [pc, #484]	; (8004b9c <_vfiprintf_r+0x248>)
 80049b6:	429d      	cmp	r5, r3
 80049b8:	bf08      	it	eq
 80049ba:	68f5      	ldreq	r5, [r6, #12]
 80049bc:	e7da      	b.n	8004974 <_vfiprintf_r+0x20>
 80049be:	89ab      	ldrh	r3, [r5, #12]
 80049c0:	0598      	lsls	r0, r3, #22
 80049c2:	d4ed      	bmi.n	80049a0 <_vfiprintf_r+0x4c>
 80049c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049c6:	f7ff fe54 	bl	8004672 <__retarget_lock_release_recursive>
 80049ca:	e7e9      	b.n	80049a0 <_vfiprintf_r+0x4c>
 80049cc:	2300      	movs	r3, #0
 80049ce:	9309      	str	r3, [sp, #36]	; 0x24
 80049d0:	2320      	movs	r3, #32
 80049d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80049da:	2330      	movs	r3, #48	; 0x30
 80049dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ba0 <_vfiprintf_r+0x24c>
 80049e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049e4:	f04f 0901 	mov.w	r9, #1
 80049e8:	4623      	mov	r3, r4
 80049ea:	469a      	mov	sl, r3
 80049ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f0:	b10a      	cbz	r2, 80049f6 <_vfiprintf_r+0xa2>
 80049f2:	2a25      	cmp	r2, #37	; 0x25
 80049f4:	d1f9      	bne.n	80049ea <_vfiprintf_r+0x96>
 80049f6:	ebba 0b04 	subs.w	fp, sl, r4
 80049fa:	d00b      	beq.n	8004a14 <_vfiprintf_r+0xc0>
 80049fc:	465b      	mov	r3, fp
 80049fe:	4622      	mov	r2, r4
 8004a00:	4629      	mov	r1, r5
 8004a02:	4630      	mov	r0, r6
 8004a04:	f7ff ff93 	bl	800492e <__sfputs_r>
 8004a08:	3001      	adds	r0, #1
 8004a0a:	f000 80aa 	beq.w	8004b62 <_vfiprintf_r+0x20e>
 8004a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a10:	445a      	add	r2, fp
 8004a12:	9209      	str	r2, [sp, #36]	; 0x24
 8004a14:	f89a 3000 	ldrb.w	r3, [sl]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80a2 	beq.w	8004b62 <_vfiprintf_r+0x20e>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f04f 32ff 	mov.w	r2, #4294967295
 8004a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a28:	f10a 0a01 	add.w	sl, sl, #1
 8004a2c:	9304      	str	r3, [sp, #16]
 8004a2e:	9307      	str	r3, [sp, #28]
 8004a30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a34:	931a      	str	r3, [sp, #104]	; 0x68
 8004a36:	4654      	mov	r4, sl
 8004a38:	2205      	movs	r2, #5
 8004a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a3e:	4858      	ldr	r0, [pc, #352]	; (8004ba0 <_vfiprintf_r+0x24c>)
 8004a40:	f7fb fbe6 	bl	8000210 <memchr>
 8004a44:	9a04      	ldr	r2, [sp, #16]
 8004a46:	b9d8      	cbnz	r0, 8004a80 <_vfiprintf_r+0x12c>
 8004a48:	06d1      	lsls	r1, r2, #27
 8004a4a:	bf44      	itt	mi
 8004a4c:	2320      	movmi	r3, #32
 8004a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a52:	0713      	lsls	r3, r2, #28
 8004a54:	bf44      	itt	mi
 8004a56:	232b      	movmi	r3, #43	; 0x2b
 8004a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a60:	2b2a      	cmp	r3, #42	; 0x2a
 8004a62:	d015      	beq.n	8004a90 <_vfiprintf_r+0x13c>
 8004a64:	9a07      	ldr	r2, [sp, #28]
 8004a66:	4654      	mov	r4, sl
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f04f 0c0a 	mov.w	ip, #10
 8004a6e:	4621      	mov	r1, r4
 8004a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a74:	3b30      	subs	r3, #48	; 0x30
 8004a76:	2b09      	cmp	r3, #9
 8004a78:	d94e      	bls.n	8004b18 <_vfiprintf_r+0x1c4>
 8004a7a:	b1b0      	cbz	r0, 8004aaa <_vfiprintf_r+0x156>
 8004a7c:	9207      	str	r2, [sp, #28]
 8004a7e:	e014      	b.n	8004aaa <_vfiprintf_r+0x156>
 8004a80:	eba0 0308 	sub.w	r3, r0, r8
 8004a84:	fa09 f303 	lsl.w	r3, r9, r3
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	9304      	str	r3, [sp, #16]
 8004a8c:	46a2      	mov	sl, r4
 8004a8e:	e7d2      	b.n	8004a36 <_vfiprintf_r+0xe2>
 8004a90:	9b03      	ldr	r3, [sp, #12]
 8004a92:	1d19      	adds	r1, r3, #4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	9103      	str	r1, [sp, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bfbb      	ittet	lt
 8004a9c:	425b      	neglt	r3, r3
 8004a9e:	f042 0202 	orrlt.w	r2, r2, #2
 8004aa2:	9307      	strge	r3, [sp, #28]
 8004aa4:	9307      	strlt	r3, [sp, #28]
 8004aa6:	bfb8      	it	lt
 8004aa8:	9204      	strlt	r2, [sp, #16]
 8004aaa:	7823      	ldrb	r3, [r4, #0]
 8004aac:	2b2e      	cmp	r3, #46	; 0x2e
 8004aae:	d10c      	bne.n	8004aca <_vfiprintf_r+0x176>
 8004ab0:	7863      	ldrb	r3, [r4, #1]
 8004ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab4:	d135      	bne.n	8004b22 <_vfiprintf_r+0x1ce>
 8004ab6:	9b03      	ldr	r3, [sp, #12]
 8004ab8:	1d1a      	adds	r2, r3, #4
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	9203      	str	r2, [sp, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bfb8      	it	lt
 8004ac2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ac6:	3402      	adds	r4, #2
 8004ac8:	9305      	str	r3, [sp, #20]
 8004aca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004bb0 <_vfiprintf_r+0x25c>
 8004ace:	7821      	ldrb	r1, [r4, #0]
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	4650      	mov	r0, sl
 8004ad4:	f7fb fb9c 	bl	8000210 <memchr>
 8004ad8:	b140      	cbz	r0, 8004aec <_vfiprintf_r+0x198>
 8004ada:	2340      	movs	r3, #64	; 0x40
 8004adc:	eba0 000a 	sub.w	r0, r0, sl
 8004ae0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ae4:	9b04      	ldr	r3, [sp, #16]
 8004ae6:	4303      	orrs	r3, r0
 8004ae8:	3401      	adds	r4, #1
 8004aea:	9304      	str	r3, [sp, #16]
 8004aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af0:	482c      	ldr	r0, [pc, #176]	; (8004ba4 <_vfiprintf_r+0x250>)
 8004af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004af6:	2206      	movs	r2, #6
 8004af8:	f7fb fb8a 	bl	8000210 <memchr>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d03f      	beq.n	8004b80 <_vfiprintf_r+0x22c>
 8004b00:	4b29      	ldr	r3, [pc, #164]	; (8004ba8 <_vfiprintf_r+0x254>)
 8004b02:	bb1b      	cbnz	r3, 8004b4c <_vfiprintf_r+0x1f8>
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	3307      	adds	r3, #7
 8004b08:	f023 0307 	bic.w	r3, r3, #7
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	9303      	str	r3, [sp, #12]
 8004b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b12:	443b      	add	r3, r7
 8004b14:	9309      	str	r3, [sp, #36]	; 0x24
 8004b16:	e767      	b.n	80049e8 <_vfiprintf_r+0x94>
 8004b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	2001      	movs	r0, #1
 8004b20:	e7a5      	b.n	8004a6e <_vfiprintf_r+0x11a>
 8004b22:	2300      	movs	r3, #0
 8004b24:	3401      	adds	r4, #1
 8004b26:	9305      	str	r3, [sp, #20]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f04f 0c0a 	mov.w	ip, #10
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b34:	3a30      	subs	r2, #48	; 0x30
 8004b36:	2a09      	cmp	r2, #9
 8004b38:	d903      	bls.n	8004b42 <_vfiprintf_r+0x1ee>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0c5      	beq.n	8004aca <_vfiprintf_r+0x176>
 8004b3e:	9105      	str	r1, [sp, #20]
 8004b40:	e7c3      	b.n	8004aca <_vfiprintf_r+0x176>
 8004b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b46:	4604      	mov	r4, r0
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e7f0      	b.n	8004b2e <_vfiprintf_r+0x1da>
 8004b4c:	ab03      	add	r3, sp, #12
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	462a      	mov	r2, r5
 8004b52:	4b16      	ldr	r3, [pc, #88]	; (8004bac <_vfiprintf_r+0x258>)
 8004b54:	a904      	add	r1, sp, #16
 8004b56:	4630      	mov	r0, r6
 8004b58:	f3af 8000 	nop.w
 8004b5c:	4607      	mov	r7, r0
 8004b5e:	1c78      	adds	r0, r7, #1
 8004b60:	d1d6      	bne.n	8004b10 <_vfiprintf_r+0x1bc>
 8004b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b64:	07d9      	lsls	r1, r3, #31
 8004b66:	d405      	bmi.n	8004b74 <_vfiprintf_r+0x220>
 8004b68:	89ab      	ldrh	r3, [r5, #12]
 8004b6a:	059a      	lsls	r2, r3, #22
 8004b6c:	d402      	bmi.n	8004b74 <_vfiprintf_r+0x220>
 8004b6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b70:	f7ff fd7f 	bl	8004672 <__retarget_lock_release_recursive>
 8004b74:	89ab      	ldrh	r3, [r5, #12]
 8004b76:	065b      	lsls	r3, r3, #25
 8004b78:	f53f af12 	bmi.w	80049a0 <_vfiprintf_r+0x4c>
 8004b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b7e:	e711      	b.n	80049a4 <_vfiprintf_r+0x50>
 8004b80:	ab03      	add	r3, sp, #12
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	462a      	mov	r2, r5
 8004b86:	4b09      	ldr	r3, [pc, #36]	; (8004bac <_vfiprintf_r+0x258>)
 8004b88:	a904      	add	r1, sp, #16
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f000 f880 	bl	8004c90 <_printf_i>
 8004b90:	e7e4      	b.n	8004b5c <_vfiprintf_r+0x208>
 8004b92:	bf00      	nop
 8004b94:	080052fc 	.word	0x080052fc
 8004b98:	0800531c 	.word	0x0800531c
 8004b9c:	080052dc 	.word	0x080052dc
 8004ba0:	0800533c 	.word	0x0800533c
 8004ba4:	08005346 	.word	0x08005346
 8004ba8:	00000000 	.word	0x00000000
 8004bac:	0800492f 	.word	0x0800492f
 8004bb0:	08005342 	.word	0x08005342

08004bb4 <_printf_common>:
 8004bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb8:	4616      	mov	r6, r2
 8004bba:	4699      	mov	r9, r3
 8004bbc:	688a      	ldr	r2, [r1, #8]
 8004bbe:	690b      	ldr	r3, [r1, #16]
 8004bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	bfb8      	it	lt
 8004bc8:	4613      	movlt	r3, r2
 8004bca:	6033      	str	r3, [r6, #0]
 8004bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bd0:	4607      	mov	r7, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	b10a      	cbz	r2, 8004bda <_printf_common+0x26>
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	6033      	str	r3, [r6, #0]
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	0699      	lsls	r1, r3, #26
 8004bde:	bf42      	ittt	mi
 8004be0:	6833      	ldrmi	r3, [r6, #0]
 8004be2:	3302      	addmi	r3, #2
 8004be4:	6033      	strmi	r3, [r6, #0]
 8004be6:	6825      	ldr	r5, [r4, #0]
 8004be8:	f015 0506 	ands.w	r5, r5, #6
 8004bec:	d106      	bne.n	8004bfc <_printf_common+0x48>
 8004bee:	f104 0a19 	add.w	sl, r4, #25
 8004bf2:	68e3      	ldr	r3, [r4, #12]
 8004bf4:	6832      	ldr	r2, [r6, #0]
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	42ab      	cmp	r3, r5
 8004bfa:	dc26      	bgt.n	8004c4a <_printf_common+0x96>
 8004bfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c00:	1e13      	subs	r3, r2, #0
 8004c02:	6822      	ldr	r2, [r4, #0]
 8004c04:	bf18      	it	ne
 8004c06:	2301      	movne	r3, #1
 8004c08:	0692      	lsls	r2, r2, #26
 8004c0a:	d42b      	bmi.n	8004c64 <_printf_common+0xb0>
 8004c0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c10:	4649      	mov	r1, r9
 8004c12:	4638      	mov	r0, r7
 8004c14:	47c0      	blx	r8
 8004c16:	3001      	adds	r0, #1
 8004c18:	d01e      	beq.n	8004c58 <_printf_common+0xa4>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	68e5      	ldr	r5, [r4, #12]
 8004c1e:	6832      	ldr	r2, [r6, #0]
 8004c20:	f003 0306 	and.w	r3, r3, #6
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	bf08      	it	eq
 8004c28:	1aad      	subeq	r5, r5, r2
 8004c2a:	68a3      	ldr	r3, [r4, #8]
 8004c2c:	6922      	ldr	r2, [r4, #16]
 8004c2e:	bf0c      	ite	eq
 8004c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c34:	2500      	movne	r5, #0
 8004c36:	4293      	cmp	r3, r2
 8004c38:	bfc4      	itt	gt
 8004c3a:	1a9b      	subgt	r3, r3, r2
 8004c3c:	18ed      	addgt	r5, r5, r3
 8004c3e:	2600      	movs	r6, #0
 8004c40:	341a      	adds	r4, #26
 8004c42:	42b5      	cmp	r5, r6
 8004c44:	d11a      	bne.n	8004c7c <_printf_common+0xc8>
 8004c46:	2000      	movs	r0, #0
 8004c48:	e008      	b.n	8004c5c <_printf_common+0xa8>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	4652      	mov	r2, sl
 8004c4e:	4649      	mov	r1, r9
 8004c50:	4638      	mov	r0, r7
 8004c52:	47c0      	blx	r8
 8004c54:	3001      	adds	r0, #1
 8004c56:	d103      	bne.n	8004c60 <_printf_common+0xac>
 8004c58:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c60:	3501      	adds	r5, #1
 8004c62:	e7c6      	b.n	8004bf2 <_printf_common+0x3e>
 8004c64:	18e1      	adds	r1, r4, r3
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	2030      	movs	r0, #48	; 0x30
 8004c6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c6e:	4422      	add	r2, r4
 8004c70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c78:	3302      	adds	r3, #2
 8004c7a:	e7c7      	b.n	8004c0c <_printf_common+0x58>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	4622      	mov	r2, r4
 8004c80:	4649      	mov	r1, r9
 8004c82:	4638      	mov	r0, r7
 8004c84:	47c0      	blx	r8
 8004c86:	3001      	adds	r0, #1
 8004c88:	d0e6      	beq.n	8004c58 <_printf_common+0xa4>
 8004c8a:	3601      	adds	r6, #1
 8004c8c:	e7d9      	b.n	8004c42 <_printf_common+0x8e>
	...

08004c90 <_printf_i>:
 8004c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c94:	7e0f      	ldrb	r7, [r1, #24]
 8004c96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c98:	2f78      	cmp	r7, #120	; 0x78
 8004c9a:	4691      	mov	r9, r2
 8004c9c:	4680      	mov	r8, r0
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	469a      	mov	sl, r3
 8004ca2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ca6:	d807      	bhi.n	8004cb8 <_printf_i+0x28>
 8004ca8:	2f62      	cmp	r7, #98	; 0x62
 8004caa:	d80a      	bhi.n	8004cc2 <_printf_i+0x32>
 8004cac:	2f00      	cmp	r7, #0
 8004cae:	f000 80d8 	beq.w	8004e62 <_printf_i+0x1d2>
 8004cb2:	2f58      	cmp	r7, #88	; 0x58
 8004cb4:	f000 80a3 	beq.w	8004dfe <_printf_i+0x16e>
 8004cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cc0:	e03a      	b.n	8004d38 <_printf_i+0xa8>
 8004cc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cc6:	2b15      	cmp	r3, #21
 8004cc8:	d8f6      	bhi.n	8004cb8 <_printf_i+0x28>
 8004cca:	a101      	add	r1, pc, #4	; (adr r1, 8004cd0 <_printf_i+0x40>)
 8004ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cd0:	08004d29 	.word	0x08004d29
 8004cd4:	08004d3d 	.word	0x08004d3d
 8004cd8:	08004cb9 	.word	0x08004cb9
 8004cdc:	08004cb9 	.word	0x08004cb9
 8004ce0:	08004cb9 	.word	0x08004cb9
 8004ce4:	08004cb9 	.word	0x08004cb9
 8004ce8:	08004d3d 	.word	0x08004d3d
 8004cec:	08004cb9 	.word	0x08004cb9
 8004cf0:	08004cb9 	.word	0x08004cb9
 8004cf4:	08004cb9 	.word	0x08004cb9
 8004cf8:	08004cb9 	.word	0x08004cb9
 8004cfc:	08004e49 	.word	0x08004e49
 8004d00:	08004d6d 	.word	0x08004d6d
 8004d04:	08004e2b 	.word	0x08004e2b
 8004d08:	08004cb9 	.word	0x08004cb9
 8004d0c:	08004cb9 	.word	0x08004cb9
 8004d10:	08004e6b 	.word	0x08004e6b
 8004d14:	08004cb9 	.word	0x08004cb9
 8004d18:	08004d6d 	.word	0x08004d6d
 8004d1c:	08004cb9 	.word	0x08004cb9
 8004d20:	08004cb9 	.word	0x08004cb9
 8004d24:	08004e33 	.word	0x08004e33
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	1d1a      	adds	r2, r3, #4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	602a      	str	r2, [r5, #0]
 8004d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0a3      	b.n	8004e84 <_printf_i+0x1f4>
 8004d3c:	6820      	ldr	r0, [r4, #0]
 8004d3e:	6829      	ldr	r1, [r5, #0]
 8004d40:	0606      	lsls	r6, r0, #24
 8004d42:	f101 0304 	add.w	r3, r1, #4
 8004d46:	d50a      	bpl.n	8004d5e <_printf_i+0xce>
 8004d48:	680e      	ldr	r6, [r1, #0]
 8004d4a:	602b      	str	r3, [r5, #0]
 8004d4c:	2e00      	cmp	r6, #0
 8004d4e:	da03      	bge.n	8004d58 <_printf_i+0xc8>
 8004d50:	232d      	movs	r3, #45	; 0x2d
 8004d52:	4276      	negs	r6, r6
 8004d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d58:	485e      	ldr	r0, [pc, #376]	; (8004ed4 <_printf_i+0x244>)
 8004d5a:	230a      	movs	r3, #10
 8004d5c:	e019      	b.n	8004d92 <_printf_i+0x102>
 8004d5e:	680e      	ldr	r6, [r1, #0]
 8004d60:	602b      	str	r3, [r5, #0]
 8004d62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d66:	bf18      	it	ne
 8004d68:	b236      	sxthne	r6, r6
 8004d6a:	e7ef      	b.n	8004d4c <_printf_i+0xbc>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	6820      	ldr	r0, [r4, #0]
 8004d70:	1d19      	adds	r1, r3, #4
 8004d72:	6029      	str	r1, [r5, #0]
 8004d74:	0601      	lsls	r1, r0, #24
 8004d76:	d501      	bpl.n	8004d7c <_printf_i+0xec>
 8004d78:	681e      	ldr	r6, [r3, #0]
 8004d7a:	e002      	b.n	8004d82 <_printf_i+0xf2>
 8004d7c:	0646      	lsls	r6, r0, #25
 8004d7e:	d5fb      	bpl.n	8004d78 <_printf_i+0xe8>
 8004d80:	881e      	ldrh	r6, [r3, #0]
 8004d82:	4854      	ldr	r0, [pc, #336]	; (8004ed4 <_printf_i+0x244>)
 8004d84:	2f6f      	cmp	r7, #111	; 0x6f
 8004d86:	bf0c      	ite	eq
 8004d88:	2308      	moveq	r3, #8
 8004d8a:	230a      	movne	r3, #10
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d92:	6865      	ldr	r5, [r4, #4]
 8004d94:	60a5      	str	r5, [r4, #8]
 8004d96:	2d00      	cmp	r5, #0
 8004d98:	bfa2      	ittt	ge
 8004d9a:	6821      	ldrge	r1, [r4, #0]
 8004d9c:	f021 0104 	bicge.w	r1, r1, #4
 8004da0:	6021      	strge	r1, [r4, #0]
 8004da2:	b90e      	cbnz	r6, 8004da8 <_printf_i+0x118>
 8004da4:	2d00      	cmp	r5, #0
 8004da6:	d04d      	beq.n	8004e44 <_printf_i+0x1b4>
 8004da8:	4615      	mov	r5, r2
 8004daa:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dae:	fb03 6711 	mls	r7, r3, r1, r6
 8004db2:	5dc7      	ldrb	r7, [r0, r7]
 8004db4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004db8:	4637      	mov	r7, r6
 8004dba:	42bb      	cmp	r3, r7
 8004dbc:	460e      	mov	r6, r1
 8004dbe:	d9f4      	bls.n	8004daa <_printf_i+0x11a>
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d10b      	bne.n	8004ddc <_printf_i+0x14c>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	07de      	lsls	r6, r3, #31
 8004dc8:	d508      	bpl.n	8004ddc <_printf_i+0x14c>
 8004dca:	6923      	ldr	r3, [r4, #16]
 8004dcc:	6861      	ldr	r1, [r4, #4]
 8004dce:	4299      	cmp	r1, r3
 8004dd0:	bfde      	ittt	le
 8004dd2:	2330      	movle	r3, #48	; 0x30
 8004dd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ddc:	1b52      	subs	r2, r2, r5
 8004dde:	6122      	str	r2, [r4, #16]
 8004de0:	f8cd a000 	str.w	sl, [sp]
 8004de4:	464b      	mov	r3, r9
 8004de6:	aa03      	add	r2, sp, #12
 8004de8:	4621      	mov	r1, r4
 8004dea:	4640      	mov	r0, r8
 8004dec:	f7ff fee2 	bl	8004bb4 <_printf_common>
 8004df0:	3001      	adds	r0, #1
 8004df2:	d14c      	bne.n	8004e8e <_printf_i+0x1fe>
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	b004      	add	sp, #16
 8004dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfe:	4835      	ldr	r0, [pc, #212]	; (8004ed4 <_printf_i+0x244>)
 8004e00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e04:	6829      	ldr	r1, [r5, #0]
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e0c:	6029      	str	r1, [r5, #0]
 8004e0e:	061d      	lsls	r5, r3, #24
 8004e10:	d514      	bpl.n	8004e3c <_printf_i+0x1ac>
 8004e12:	07df      	lsls	r7, r3, #31
 8004e14:	bf44      	itt	mi
 8004e16:	f043 0320 	orrmi.w	r3, r3, #32
 8004e1a:	6023      	strmi	r3, [r4, #0]
 8004e1c:	b91e      	cbnz	r6, 8004e26 <_printf_i+0x196>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	f023 0320 	bic.w	r3, r3, #32
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	2310      	movs	r3, #16
 8004e28:	e7b0      	b.n	8004d8c <_printf_i+0xfc>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	f043 0320 	orr.w	r3, r3, #32
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	2378      	movs	r3, #120	; 0x78
 8004e34:	4828      	ldr	r0, [pc, #160]	; (8004ed8 <_printf_i+0x248>)
 8004e36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e3a:	e7e3      	b.n	8004e04 <_printf_i+0x174>
 8004e3c:	0659      	lsls	r1, r3, #25
 8004e3e:	bf48      	it	mi
 8004e40:	b2b6      	uxthmi	r6, r6
 8004e42:	e7e6      	b.n	8004e12 <_printf_i+0x182>
 8004e44:	4615      	mov	r5, r2
 8004e46:	e7bb      	b.n	8004dc0 <_printf_i+0x130>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	6826      	ldr	r6, [r4, #0]
 8004e4c:	6961      	ldr	r1, [r4, #20]
 8004e4e:	1d18      	adds	r0, r3, #4
 8004e50:	6028      	str	r0, [r5, #0]
 8004e52:	0635      	lsls	r5, r6, #24
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	d501      	bpl.n	8004e5c <_printf_i+0x1cc>
 8004e58:	6019      	str	r1, [r3, #0]
 8004e5a:	e002      	b.n	8004e62 <_printf_i+0x1d2>
 8004e5c:	0670      	lsls	r0, r6, #25
 8004e5e:	d5fb      	bpl.n	8004e58 <_printf_i+0x1c8>
 8004e60:	8019      	strh	r1, [r3, #0]
 8004e62:	2300      	movs	r3, #0
 8004e64:	6123      	str	r3, [r4, #16]
 8004e66:	4615      	mov	r5, r2
 8004e68:	e7ba      	b.n	8004de0 <_printf_i+0x150>
 8004e6a:	682b      	ldr	r3, [r5, #0]
 8004e6c:	1d1a      	adds	r2, r3, #4
 8004e6e:	602a      	str	r2, [r5, #0]
 8004e70:	681d      	ldr	r5, [r3, #0]
 8004e72:	6862      	ldr	r2, [r4, #4]
 8004e74:	2100      	movs	r1, #0
 8004e76:	4628      	mov	r0, r5
 8004e78:	f7fb f9ca 	bl	8000210 <memchr>
 8004e7c:	b108      	cbz	r0, 8004e82 <_printf_i+0x1f2>
 8004e7e:	1b40      	subs	r0, r0, r5
 8004e80:	6060      	str	r0, [r4, #4]
 8004e82:	6863      	ldr	r3, [r4, #4]
 8004e84:	6123      	str	r3, [r4, #16]
 8004e86:	2300      	movs	r3, #0
 8004e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e8c:	e7a8      	b.n	8004de0 <_printf_i+0x150>
 8004e8e:	6923      	ldr	r3, [r4, #16]
 8004e90:	462a      	mov	r2, r5
 8004e92:	4649      	mov	r1, r9
 8004e94:	4640      	mov	r0, r8
 8004e96:	47d0      	blx	sl
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d0ab      	beq.n	8004df4 <_printf_i+0x164>
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	079b      	lsls	r3, r3, #30
 8004ea0:	d413      	bmi.n	8004eca <_printf_i+0x23a>
 8004ea2:	68e0      	ldr	r0, [r4, #12]
 8004ea4:	9b03      	ldr	r3, [sp, #12]
 8004ea6:	4298      	cmp	r0, r3
 8004ea8:	bfb8      	it	lt
 8004eaa:	4618      	movlt	r0, r3
 8004eac:	e7a4      	b.n	8004df8 <_printf_i+0x168>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4632      	mov	r2, r6
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	47d0      	blx	sl
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d09b      	beq.n	8004df4 <_printf_i+0x164>
 8004ebc:	3501      	adds	r5, #1
 8004ebe:	68e3      	ldr	r3, [r4, #12]
 8004ec0:	9903      	ldr	r1, [sp, #12]
 8004ec2:	1a5b      	subs	r3, r3, r1
 8004ec4:	42ab      	cmp	r3, r5
 8004ec6:	dcf2      	bgt.n	8004eae <_printf_i+0x21e>
 8004ec8:	e7eb      	b.n	8004ea2 <_printf_i+0x212>
 8004eca:	2500      	movs	r5, #0
 8004ecc:	f104 0619 	add.w	r6, r4, #25
 8004ed0:	e7f5      	b.n	8004ebe <_printf_i+0x22e>
 8004ed2:	bf00      	nop
 8004ed4:	0800534d 	.word	0x0800534d
 8004ed8:	0800535e 	.word	0x0800535e

08004edc <_sbrk_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4d06      	ldr	r5, [pc, #24]	; (8004ef8 <_sbrk_r+0x1c>)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	f7fc fd1a 	bl	8001920 <_sbrk>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_sbrk_r+0x1a>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_sbrk_r+0x1a>
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	2000014c 	.word	0x2000014c

08004efc <__sread>:
 8004efc:	b510      	push	{r4, lr}
 8004efe:	460c      	mov	r4, r1
 8004f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f04:	f000 f8a0 	bl	8005048 <_read_r>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	bfab      	itete	ge
 8004f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f10:	181b      	addge	r3, r3, r0
 8004f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f16:	bfac      	ite	ge
 8004f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f1a:	81a3      	strhlt	r3, [r4, #12]
 8004f1c:	bd10      	pop	{r4, pc}

08004f1e <__swrite>:
 8004f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f22:	461f      	mov	r7, r3
 8004f24:	898b      	ldrh	r3, [r1, #12]
 8004f26:	05db      	lsls	r3, r3, #23
 8004f28:	4605      	mov	r5, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	d505      	bpl.n	8004f3c <__swrite+0x1e>
 8004f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f34:	2302      	movs	r3, #2
 8004f36:	2200      	movs	r2, #0
 8004f38:	f000 f868 	bl	800500c <_lseek_r>
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f46:	81a3      	strh	r3, [r4, #12]
 8004f48:	4632      	mov	r2, r6
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f52:	f000 b817 	b.w	8004f84 <_write_r>

08004f56 <__sseek>:
 8004f56:	b510      	push	{r4, lr}
 8004f58:	460c      	mov	r4, r1
 8004f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f5e:	f000 f855 	bl	800500c <_lseek_r>
 8004f62:	1c43      	adds	r3, r0, #1
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	bf15      	itete	ne
 8004f68:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f72:	81a3      	strheq	r3, [r4, #12]
 8004f74:	bf18      	it	ne
 8004f76:	81a3      	strhne	r3, [r4, #12]
 8004f78:	bd10      	pop	{r4, pc}

08004f7a <__sclose>:
 8004f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7e:	f000 b813 	b.w	8004fa8 <_close_r>
	...

08004f84 <_write_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d07      	ldr	r5, [pc, #28]	; (8004fa4 <_write_r+0x20>)
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4608      	mov	r0, r1
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	602a      	str	r2, [r5, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f7fc fc73 	bl	800187e <_write>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_write_r+0x1e>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_write_r+0x1e>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	2000014c 	.word	0x2000014c

08004fa8 <_close_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d06      	ldr	r5, [pc, #24]	; (8004fc4 <_close_r+0x1c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	f7fc fc7f 	bl	80018b6 <_close>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_close_r+0x1a>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_close_r+0x1a>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	2000014c 	.word	0x2000014c

08004fc8 <_fstat_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4d07      	ldr	r5, [pc, #28]	; (8004fe8 <_fstat_r+0x20>)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	602b      	str	r3, [r5, #0]
 8004fd6:	f7fc fc7a 	bl	80018ce <_fstat>
 8004fda:	1c43      	adds	r3, r0, #1
 8004fdc:	d102      	bne.n	8004fe4 <_fstat_r+0x1c>
 8004fde:	682b      	ldr	r3, [r5, #0]
 8004fe0:	b103      	cbz	r3, 8004fe4 <_fstat_r+0x1c>
 8004fe2:	6023      	str	r3, [r4, #0]
 8004fe4:	bd38      	pop	{r3, r4, r5, pc}
 8004fe6:	bf00      	nop
 8004fe8:	2000014c 	.word	0x2000014c

08004fec <_isatty_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4d06      	ldr	r5, [pc, #24]	; (8005008 <_isatty_r+0x1c>)
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	602b      	str	r3, [r5, #0]
 8004ff8:	f7fc fc79 	bl	80018ee <_isatty>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d102      	bne.n	8005006 <_isatty_r+0x1a>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	b103      	cbz	r3, 8005006 <_isatty_r+0x1a>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	bd38      	pop	{r3, r4, r5, pc}
 8005008:	2000014c 	.word	0x2000014c

0800500c <_lseek_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4d07      	ldr	r5, [pc, #28]	; (800502c <_lseek_r+0x20>)
 8005010:	4604      	mov	r4, r0
 8005012:	4608      	mov	r0, r1
 8005014:	4611      	mov	r1, r2
 8005016:	2200      	movs	r2, #0
 8005018:	602a      	str	r2, [r5, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	f7fc fc72 	bl	8001904 <_lseek>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d102      	bne.n	800502a <_lseek_r+0x1e>
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	b103      	cbz	r3, 800502a <_lseek_r+0x1e>
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	bd38      	pop	{r3, r4, r5, pc}
 800502c:	2000014c 	.word	0x2000014c

08005030 <__malloc_lock>:
 8005030:	4801      	ldr	r0, [pc, #4]	; (8005038 <__malloc_lock+0x8>)
 8005032:	f7ff bb1d 	b.w	8004670 <__retarget_lock_acquire_recursive>
 8005036:	bf00      	nop
 8005038:	20000140 	.word	0x20000140

0800503c <__malloc_unlock>:
 800503c:	4801      	ldr	r0, [pc, #4]	; (8005044 <__malloc_unlock+0x8>)
 800503e:	f7ff bb18 	b.w	8004672 <__retarget_lock_release_recursive>
 8005042:	bf00      	nop
 8005044:	20000140 	.word	0x20000140

08005048 <_read_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4d07      	ldr	r5, [pc, #28]	; (8005068 <_read_r+0x20>)
 800504c:	4604      	mov	r4, r0
 800504e:	4608      	mov	r0, r1
 8005050:	4611      	mov	r1, r2
 8005052:	2200      	movs	r2, #0
 8005054:	602a      	str	r2, [r5, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	f7fc fbf4 	bl	8001844 <_read>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_read_r+0x1e>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_read_r+0x1e>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	2000014c 	.word	0x2000014c

0800506c <_init>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	bf00      	nop
 8005070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005072:	bc08      	pop	{r3}
 8005074:	469e      	mov	lr, r3
 8005076:	4770      	bx	lr

08005078 <_fini>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr
