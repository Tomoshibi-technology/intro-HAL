
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037ac  080037ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080037ac  080037ac  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037ac  080037ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080037b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000108  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be1e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001849  00000000  00000000  0002be5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  0002d6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a8  00000000  00000000  0002dfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a890  00000000  00000000  0002e890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd6d  00000000  00000000  00049120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b9eb  00000000  00000000  00055e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f1878  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025c4  00000000  00000000  000f18c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800375c 	.word	0x0800375c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800375c 	.word	0x0800375c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fadf 	bl	8000790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f8d3 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f993 	bl	8000500 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f961 	bl	80004a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001de:	f000 f91f 	bl	8000420 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 1000);
 80001e2:	4b5f      	ldr	r3, [pc, #380]	; (8000360 <main+0x198>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	b299      	uxth	r1, r3
 80001e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2301      	movs	r3, #1
 80001f0:	4a5c      	ldr	r2, [pc, #368]	; (8000364 <main+0x19c>)
 80001f2:	485d      	ldr	r0, [pc, #372]	; (8000368 <main+0x1a0>)
 80001f4:	f000 fe3e 	bl	8000e74 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, &rcvBuf, 2, 1000);
 80001f8:	4b59      	ldr	r3, [pc, #356]	; (8000360 <main+0x198>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	b299      	uxth	r1, r3
 80001fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000202:	9300      	str	r3, [sp, #0]
 8000204:	2302      	movs	r3, #2
 8000206:	4a59      	ldr	r2, [pc, #356]	; (800036c <main+0x1a4>)
 8000208:	4857      	ldr	r0, [pc, #348]	; (8000368 <main+0x1a0>)
 800020a:	f000 ff27 	bl	800105c <HAL_I2C_Master_Receive>
	Angle = rcvBuf[0]*256 + rcvBuf[1];
 800020e:	4b57      	ldr	r3, [pc, #348]	; (800036c <main+0x1a4>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	b29b      	uxth	r3, r3
 8000214:	021b      	lsls	r3, r3, #8
 8000216:	b29a      	uxth	r2, r3
 8000218:	4b54      	ldr	r3, [pc, #336]	; (800036c <main+0x1a4>)
 800021a:	785b      	ldrb	r3, [r3, #1]
 800021c:	b29b      	uxth	r3, r3
 800021e:	4413      	add	r3, r2
 8000220:	b29a      	uxth	r2, r3
 8000222:	4b53      	ldr	r3, [pc, #332]	; (8000370 <main+0x1a8>)
 8000224:	801a      	strh	r2, [r3, #0]
	HAL_Delay(20);
 8000226:	2014      	movs	r0, #20
 8000228:	f000 fb18 	bl	800085c <HAL_Delay>
	if(Angle-pAngle>0 && abs(Angle-pAngle)<4000){
 800022c:	4b50      	ldr	r3, [pc, #320]	; (8000370 <main+0x1a8>)
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	461a      	mov	r2, r3
 8000232:	4b50      	ldr	r3, [pc, #320]	; (8000374 <main+0x1ac>)
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	2b00      	cmp	r3, #0
 800023a:	dd1d      	ble.n	8000278 <main+0xb0>
 800023c:	4b4c      	ldr	r3, [pc, #304]	; (8000370 <main+0x1a8>)
 800023e:	881b      	ldrh	r3, [r3, #0]
 8000240:	461a      	mov	r2, r3
 8000242:	4b4c      	ldr	r3, [pc, #304]	; (8000374 <main+0x1ac>)
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	1ad3      	subs	r3, r2, r3
 8000248:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 800024c:	dd14      	ble.n	8000278 <main+0xb0>
 800024e:	4b48      	ldr	r3, [pc, #288]	; (8000370 <main+0x1a8>)
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	461a      	mov	r2, r3
 8000254:	4b47      	ldr	r3, [pc, #284]	; (8000374 <main+0x1ac>)
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	1ad3      	subs	r3, r2, r3
 800025a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800025e:	da0b      	bge.n	8000278 <main+0xb0>
		adAngle = adAngle + (Angle-pAngle);
 8000260:	4b43      	ldr	r3, [pc, #268]	; (8000370 <main+0x1a8>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	461a      	mov	r2, r3
 8000266:	4b43      	ldr	r3, [pc, #268]	; (8000374 <main+0x1ac>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	1ad2      	subs	r2, r2, r3
 800026c:	4b42      	ldr	r3, [pc, #264]	; (8000378 <main+0x1b0>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4413      	add	r3, r2
 8000272:	4a41      	ldr	r2, [pc, #260]	; (8000378 <main+0x1b0>)
 8000274:	6013      	str	r3, [r2, #0]
 8000276:	e06e      	b.n	8000356 <main+0x18e>
	}else if(Angle-pAngle<0 && abs(Angle-pAngle)<4000){
 8000278:	4b3d      	ldr	r3, [pc, #244]	; (8000370 <main+0x1a8>)
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	461a      	mov	r2, r3
 800027e:	4b3d      	ldr	r3, [pc, #244]	; (8000374 <main+0x1ac>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	1ad3      	subs	r3, r2, r3
 8000284:	2b00      	cmp	r3, #0
 8000286:	da1d      	bge.n	80002c4 <main+0xfc>
 8000288:	4b39      	ldr	r3, [pc, #228]	; (8000370 <main+0x1a8>)
 800028a:	881b      	ldrh	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b39      	ldr	r3, [pc, #228]	; (8000374 <main+0x1ac>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	1ad3      	subs	r3, r2, r3
 8000294:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 8000298:	dd14      	ble.n	80002c4 <main+0xfc>
 800029a:	4b35      	ldr	r3, [pc, #212]	; (8000370 <main+0x1a8>)
 800029c:	881b      	ldrh	r3, [r3, #0]
 800029e:	461a      	mov	r2, r3
 80002a0:	4b34      	ldr	r3, [pc, #208]	; (8000374 <main+0x1ac>)
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	1ad3      	subs	r3, r2, r3
 80002a6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80002aa:	da0b      	bge.n	80002c4 <main+0xfc>
		adAngle = adAngle + (Angle-pAngle);
 80002ac:	4b30      	ldr	r3, [pc, #192]	; (8000370 <main+0x1a8>)
 80002ae:	881b      	ldrh	r3, [r3, #0]
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b30      	ldr	r3, [pc, #192]	; (8000374 <main+0x1ac>)
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	1ad2      	subs	r2, r2, r3
 80002b8:	4b2f      	ldr	r3, [pc, #188]	; (8000378 <main+0x1b0>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4413      	add	r3, r2
 80002be:	4a2e      	ldr	r2, [pc, #184]	; (8000378 <main+0x1b0>)
 80002c0:	6013      	str	r3, [r2, #0]
 80002c2:	e048      	b.n	8000356 <main+0x18e>
	}else if(Angle-pAngle>0 && abs(Angle-pAngle)>4000){
 80002c4:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <main+0x1a8>)
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b2a      	ldr	r3, [pc, #168]	; (8000374 <main+0x1ac>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	1ad3      	subs	r3, r2, r3
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	dd19      	ble.n	8000308 <main+0x140>
 80002d4:	4b26      	ldr	r3, [pc, #152]	; (8000370 <main+0x1a8>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	461a      	mov	r2, r3
 80002da:	4b26      	ldr	r3, [pc, #152]	; (8000374 <main+0x1ac>)
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	bfb8      	it	lt
 80002e4:	425b      	neglt	r3, r3
 80002e6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80002ea:	dd0d      	ble.n	8000308 <main+0x140>
		adAngle = adAngle - ((4095-Angle)+pAngle);
 80002ec:	4b22      	ldr	r3, [pc, #136]	; (8000378 <main+0x1b0>)
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <main+0x1a8>)
 80002f2:	881b      	ldrh	r3, [r3, #0]
 80002f4:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80002f8:	330f      	adds	r3, #15
 80002fa:	491e      	ldr	r1, [pc, #120]	; (8000374 <main+0x1ac>)
 80002fc:	8809      	ldrh	r1, [r1, #0]
 80002fe:	440b      	add	r3, r1
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <main+0x1b0>)
 8000304:	6013      	str	r3, [r2, #0]
 8000306:	e026      	b.n	8000356 <main+0x18e>
	}else if(Angle-pAngle<0 && abs(Angle-pAngle)>4000){
 8000308:	4b19      	ldr	r3, [pc, #100]	; (8000370 <main+0x1a8>)
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b19      	ldr	r3, [pc, #100]	; (8000374 <main+0x1ac>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	1ad3      	subs	r3, r2, r3
 8000314:	2b00      	cmp	r3, #0
 8000316:	da1a      	bge.n	800034e <main+0x186>
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <main+0x1a8>)
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	461a      	mov	r2, r3
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <main+0x1ac>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	2b00      	cmp	r3, #0
 8000326:	bfb8      	it	lt
 8000328:	425b      	neglt	r3, r3
 800032a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800032e:	dd0e      	ble.n	800034e <main+0x186>
		adAngle = adAngle + Angle + (4095-pAngle);
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <main+0x1a8>)
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	461a      	mov	r2, r3
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <main+0x1b0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	441a      	add	r2, r3
 800033c:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <main+0x1ac>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000344:	330f      	adds	r3, #15
 8000346:	4413      	add	r3, r2
 8000348:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <main+0x1b0>)
 800034a:	6013      	str	r3, [r2, #0]
 800034c:	e003      	b.n	8000356 <main+0x18e>
	}else{
		adAngle = adAngle;
 800034e:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <main+0x1b0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a09      	ldr	r2, [pc, #36]	; (8000378 <main+0x1b0>)
 8000354:	6013      	str	r3, [r2, #0]
	}


	pAngle = Angle;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <main+0x1a8>)
 8000358:	881a      	ldrh	r2, [r3, #0]
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <main+0x1ac>)
 800035c:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 1000);
 800035e:	e740      	b.n	80001e2 <main+0x1a>
 8000360:	20000000 	.word	0x20000000
 8000364:	20000001 	.word	0x20000001
 8000368:	2000002c 	.word	0x2000002c
 800036c:	20000108 	.word	0x20000108
 8000370:	20000110 	.word	0x20000110
 8000374:	20000112 	.word	0x20000112
 8000378:	2000010c 	.word	0x2000010c

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b096      	sub	sp, #88	; 0x58
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000386:	2228      	movs	r2, #40	; 0x28
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f003 f9de 	bl	800374c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	f107 031c 	add.w	r3, r7, #28
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]
 80003ae:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b0:	2302      	movs	r3, #2
 80003b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b4:	2301      	movs	r3, #1
 80003b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b8:	2310      	movs	r3, #16
 80003ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003bc:	2300      	movs	r3, #0
 80003be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 fa69 	bl	800189c <HAL_RCC_OscConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003d0:	f000 f8c6 	bl	8000560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	230f      	movs	r3, #15
 80003d6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d8:	2300      	movs	r3, #0
 80003da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e8:	f107 031c 	add.w	r3, r7, #28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 fa92 	bl	8002918 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003fa:	f000 f8b1 	bl	8000560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003fe:	2320      	movs	r3, #32
 8000400:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4618      	mov	r0, r3
 800040a:	f002 fcbb 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000414:	f000 f8a4 	bl	8000560 <Error_Handler>
  }
}
 8000418:	bf00      	nop
 800041a:	3758      	adds	r7, #88	; 0x58
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_I2C1_Init+0x74>)
 8000426:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <MX_I2C1_Init+0x78>)
 8000428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <MX_I2C1_Init+0x74>)
 800042c:	4a1b      	ldr	r2, [pc, #108]	; (800049c <MX_I2C1_Init+0x7c>)
 800042e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_I2C1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <MX_I2C1_Init+0x74>)
 8000438:	2201      	movs	r2, #1
 800043a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <MX_I2C1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_I2C1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_I2C1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800045a:	480e      	ldr	r0, [pc, #56]	; (8000494 <MX_I2C1_Init+0x74>)
 800045c:	f000 fc7a 	bl	8000d54 <HAL_I2C_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000466:	f000 f87b 	bl	8000560 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800046a:	2100      	movs	r1, #0
 800046c:	4809      	ldr	r0, [pc, #36]	; (8000494 <MX_I2C1_Init+0x74>)
 800046e:	f001 f97d 	bl	800176c <HAL_I2CEx_ConfigAnalogFilter>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000478:	f000 f872 	bl	8000560 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800047c:	2100      	movs	r1, #0
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_I2C1_Init+0x74>)
 8000480:	f001 f9bf 	bl	8001802 <HAL_I2CEx_ConfigDigitalFilter>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800048a:	f000 f869 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	2000002c 	.word	0x2000002c
 8000498:	40005400 	.word	0x40005400
 800049c:	2000090e 	.word	0x2000090e

080004a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <MX_USART2_UART_Init+0x5c>)
 80004a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004c6:	220c      	movs	r2, #12
 80004c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_USART2_UART_Init+0x58>)
 80004e4:	f002 fd74 	bl	8002fd0 <HAL_UART_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ee:	f000 f837 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000080 	.word	0x20000080
 80004fc:	40004400 	.word	0x40004400

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_GPIO_Init+0x5c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a14      	ldr	r2, [pc, #80]	; (800055c <MX_GPIO_Init+0x5c>)
 800050c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_GPIO_Init+0x5c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_GPIO_Init+0x5c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <MX_GPIO_Init+0x5c>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_GPIO_Init+0x5c>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_GPIO_Init+0x5c>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <MX_GPIO_Init+0x5c>)
 800053c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_GPIO_Init+0x5c>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000

08000560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000568:	e7fe      	b.n	8000568 <Error_Handler+0x8>
	...

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <HAL_MspInit+0x44>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <HAL_MspInit+0x44>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <HAL_MspInit+0x44>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <HAL_MspInit+0x44>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <HAL_MspInit+0x44>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_MspInit+0x44>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000

080005b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <HAL_I2C_MspInit+0x7c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d127      	bne.n	8000626 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_I2C_MspInit+0x80>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <HAL_I2C_MspInit+0x80>)
 80005dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <HAL_I2C_MspInit+0x80>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005ee:	23c0      	movs	r3, #192	; 0xc0
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f2:	2312      	movs	r3, #18
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fa:	2303      	movs	r3, #3
 80005fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005fe:	2304      	movs	r3, #4
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <HAL_I2C_MspInit+0x84>)
 800060a:	f000 fa31 	bl	8000a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_I2C_MspInit+0x80>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <HAL_I2C_MspInit+0x80>)
 8000614:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_I2C_MspInit+0x80>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000626:	bf00      	nop
 8000628:	3728      	adds	r7, #40	; 0x28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40005400 	.word	0x40005400
 8000634:	40021000 	.word	0x40021000
 8000638:	48000400 	.word	0x48000400

0800063c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a18      	ldr	r2, [pc, #96]	; (80006bc <HAL_UART_MspInit+0x80>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d129      	bne.n	80006b2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <HAL_UART_MspInit+0x84>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <HAL_UART_MspInit+0x84>)
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_UART_MspInit+0x84>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_UART_MspInit+0x84>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <HAL_UART_MspInit+0x84>)
 800067c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000680:	6153      	str	r3, [r2, #20]
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_UART_MspInit+0x84>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800068e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006a0:	2307      	movs	r3, #7
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ae:	f000 f9df 	bl	8000a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	; 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40004400 	.word	0x40004400
 80006c0:	40021000 	.word	0x40021000

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <NMI_Handler+0x4>

080006ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <HardFault_Handler+0x4>

080006d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <MemManage_Handler+0x4>

080006d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <BusFault_Handler+0x4>

080006dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <UsageFault_Handler+0x4>

080006e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000710:	f000 f884 	bl	800081c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <SystemInit+0x20>)
 800071e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <SystemInit+0x20>)
 8000724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800073c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000774 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000740:	f7ff ffea 	bl	8000718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <LoopForever+0x6>)
  ldr r1, =_edata
 8000746:	490d      	ldr	r1, [pc, #52]	; (800077c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <LoopForever+0xe>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800075c:	4c0a      	ldr	r4, [pc, #40]	; (8000788 <LoopForever+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076a:	f002 ffcb 	bl	8003704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800076e:	f7ff fd2b 	bl	80001c8 <main>

08000772 <LoopForever>:

LoopForever:
    b LoopForever
 8000772:	e7fe      	b.n	8000772 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000774:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000780:	080037b4 	.word	0x080037b4
  ldr r2, =_sbss
 8000784:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000788:	20000118 	.word	0x20000118

0800078c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC1_2_IRQHandler>
	...

08000790 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_Init+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_Init+0x28>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f931 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 f808 	bl	80007bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ac:	f7ff fede 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40022000 	.word	0x40022000

080007bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_InitTick+0x54>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_InitTick+0x58>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f93b 	bl	8000a56 <HAL_SYSTICK_Config>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00e      	b.n	8000808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	d80a      	bhi.n	8000806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f0:	2200      	movs	r2, #0
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f000 f911 	bl	8000a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <HAL_InitTick+0x5c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000802:	2300      	movs	r3, #0
 8000804:	e000      	b.n	8000808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000004 	.word	0x20000004
 8000814:	2000000c 	.word	0x2000000c
 8000818:	20000008 	.word	0x20000008

0800081c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_IncTick+0x20>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_IncTick+0x24>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4413      	add	r3, r2
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_IncTick+0x24>)
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20000114 	.word	0x20000114

08000844 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;  
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <HAL_GetTick+0x14>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000114 	.word	0x20000114

0800085c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000864:	f7ff ffee 	bl	8000844 <HAL_GetTick>
 8000868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000874:	d005      	beq.n	8000882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_Delay+0x44>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	4413      	add	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000882:	bf00      	nop
 8000884:	f7ff ffde 	bl	8000844 <HAL_GetTick>
 8000888:	4602      	mov	r2, r0
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	429a      	cmp	r2, r3
 8000892:	d8f7      	bhi.n	8000884 <HAL_Delay+0x28>
  {
  }
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000000c 	.word	0x2000000c

080008a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	; (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	; (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	; 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d4:	d301      	bcc.n	80009da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00f      	b.n	80009fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <SysTick_Config+0x40>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e2:	210f      	movs	r1, #15
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f7ff ff8e 	bl	8000908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SysTick_Config+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SysTick_Config+0x40>)
 80009f4:	2207      	movs	r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff47 	bl	80008a4 <__NVIC_SetPriorityGrouping>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff5c 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff8e 	bl	800095c <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5d 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffb0 	bl	80009c4 <SysTick_Config>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7e:	e14e      	b.n	8000d1e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	2101      	movs	r1, #1
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 8140 	beq.w	8000d18 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d005      	beq.n	8000ab0 <HAL_GPIO_Init+0x40>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d130      	bne.n	8000b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	f003 0201 	and.w	r2, r3, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d017      	beq.n	8000b4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	2203      	movs	r2, #3
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d123      	bne.n	8000ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	08da      	lsrs	r2, r3, #3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3208      	adds	r2, #8
 8000b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	220f      	movs	r2, #15
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	691a      	ldr	r2, [r3, #16]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	08da      	lsrs	r2, r3, #3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	6939      	ldr	r1, [r7, #16]
 8000b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0203 	and.w	r2, r3, #3
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 809a 	beq.w	8000d18 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be4:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <HAL_GPIO_Init+0x2cc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a54      	ldr	r2, [pc, #336]	; (8000d3c <HAL_GPIO_Init+0x2cc>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <HAL_GPIO_Init+0x2cc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bfc:	4a50      	ldr	r2, [pc, #320]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c26:	d013      	beq.n	8000c50 <HAL_GPIO_Init+0x1e0>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a46      	ldr	r2, [pc, #280]	; (8000d44 <HAL_GPIO_Init+0x2d4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d00d      	beq.n	8000c4c <HAL_GPIO_Init+0x1dc>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a45      	ldr	r2, [pc, #276]	; (8000d48 <HAL_GPIO_Init+0x2d8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d007      	beq.n	8000c48 <HAL_GPIO_Init+0x1d8>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a44      	ldr	r2, [pc, #272]	; (8000d4c <HAL_GPIO_Init+0x2dc>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d101      	bne.n	8000c44 <HAL_GPIO_Init+0x1d4>
 8000c40:	2303      	movs	r3, #3
 8000c42:	e006      	b.n	8000c52 <HAL_GPIO_Init+0x1e2>
 8000c44:	2305      	movs	r3, #5
 8000c46:	e004      	b.n	8000c52 <HAL_GPIO_Init+0x1e2>
 8000c48:	2302      	movs	r3, #2
 8000c4a:	e002      	b.n	8000c52 <HAL_GPIO_Init+0x1e2>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <HAL_GPIO_Init+0x1e2>
 8000c50:	2300      	movs	r3, #0
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	f002 0203 	and.w	r2, r2, #3
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	4093      	lsls	r3, r2
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c62:	4937      	ldr	r1, [pc, #220]	; (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	3302      	adds	r3, #2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c70:	4b37      	ldr	r3, [pc, #220]	; (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c94:	4a2e      	ldr	r2, [pc, #184]	; (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c9a:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cbe:	4a24      	ldr	r2, [pc, #144]	; (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ce8:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	fa22 f303 	lsr.w	r3, r2, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f47f aea9 	bne.w	8000a80 <HAL_GPIO_Init+0x10>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	371c      	adds	r7, #28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	48000400 	.word	0x48000400
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	48000c00 	.word	0x48000c00
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e081      	b.n	8000e6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d106      	bne.n	8000d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fc1a 	bl	80005b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2224      	movs	r2, #36	; 0x24
 8000d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 0201 	bic.w	r2, r2, #1
 8000d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000da4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000db4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d107      	bne.n	8000dce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	e006      	b.n	8000ddc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000dda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d104      	bne.n	8000dee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69d9      	ldr	r1, [r3, #28]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a1a      	ldr	r2, [r3, #32]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2220      	movs	r2, #32
 8000e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	460b      	mov	r3, r1
 8000e82:	817b      	strh	r3, [r7, #10]
 8000e84:	4613      	mov	r3, r2
 8000e86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b20      	cmp	r3, #32
 8000e92:	f040 80da 	bne.w	800104a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d101      	bne.n	8000ea4 <HAL_I2C_Master_Transmit+0x30>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e0d3      	b.n	800104c <HAL_I2C_Master_Transmit+0x1d8>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000eac:	f7ff fcca 	bl	8000844 <HAL_GetTick>
 8000eb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2319      	movs	r3, #25
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f000 f9e6 	bl	8001290 <I2C_WaitOnFlagUntilTimeout>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e0be      	b.n	800104c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2221      	movs	r2, #33	; 0x21
 8000ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2210      	movs	r2, #16
 8000eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	893a      	ldrh	r2, [r7, #8]
 8000eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	2bff      	cmp	r3, #255	; 0xff
 8000efe:	d90e      	bls.n	8000f1e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	22ff      	movs	r2, #255	; 0xff
 8000f04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	8979      	ldrh	r1, [r7, #10]
 8000f0e:	4b51      	ldr	r3, [pc, #324]	; (8001054 <HAL_I2C_Master_Transmit+0x1e0>)
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f000 fbf6 	bl	8001708 <I2C_TransferConfig>
 8000f1c:	e06c      	b.n	8000ff8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	8979      	ldrh	r1, [r7, #10]
 8000f30:	4b48      	ldr	r3, [pc, #288]	; (8001054 <HAL_I2C_Master_Transmit+0x1e0>)
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f000 fbe5 	bl	8001708 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000f3e:	e05b      	b.n	8000ff8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	6a39      	ldr	r1, [r7, #32]
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 f9f2 	bl	800132e <I2C_WaitOnTXISFlagUntilTimeout>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e07b      	b.n	800104c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	3b01      	subs	r3, #1
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d034      	beq.n	8000ff8 <HAL_I2C_Master_Transmit+0x184>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d130      	bne.n	8000ff8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 f975 	bl	8001290 <I2C_WaitOnFlagUntilTimeout>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e04d      	b.n	800104c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	2bff      	cmp	r3, #255	; 0xff
 8000fb8:	d90e      	bls.n	8000fd8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	22ff      	movs	r2, #255	; 0xff
 8000fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	8979      	ldrh	r1, [r7, #10]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 fb99 	bl	8001708 <I2C_TransferConfig>
 8000fd6:	e00f      	b.n	8000ff8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	8979      	ldrh	r1, [r7, #10]
 8000fea:	2300      	movs	r3, #0
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f000 fb88 	bl	8001708 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d19e      	bne.n	8000f40 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	6a39      	ldr	r1, [r7, #32]
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 f9d8 	bl	80013bc <I2C_WaitOnSTOPFlagUntilTimeout>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e01a      	b.n	800104c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2220      	movs	r2, #32
 800101c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6859      	ldr	r1, [r3, #4]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_I2C_Master_Transmit+0x1e4>)
 800102a:	400b      	ands	r3, r1
 800102c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2220      	movs	r2, #32
 8001032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800104a:	2302      	movs	r3, #2
  }
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	80002000 	.word	0x80002000
 8001058:	fe00e800 	.word	0xfe00e800

0800105c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af02      	add	r7, sp, #8
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	461a      	mov	r2, r3
 8001068:	460b      	mov	r3, r1
 800106a:	817b      	strh	r3, [r7, #10]
 800106c:	4613      	mov	r3, r2
 800106e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b20      	cmp	r3, #32
 800107a:	f040 80db 	bne.w	8001234 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <HAL_I2C_Master_Receive+0x30>
 8001088:	2302      	movs	r3, #2
 800108a:	e0d4      	b.n	8001236 <HAL_I2C_Master_Receive+0x1da>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001094:	f7ff fbd6 	bl	8000844 <HAL_GetTick>
 8001098:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2319      	movs	r3, #25
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 f8f2 	bl	8001290 <I2C_WaitOnFlagUntilTimeout>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e0bf      	b.n	8001236 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2222      	movs	r2, #34	; 0x22
 80010ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2210      	movs	r2, #16
 80010c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2200      	movs	r2, #0
 80010ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	893a      	ldrh	r2, [r7, #8]
 80010d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	2bff      	cmp	r3, #255	; 0xff
 80010e6:	d90e      	bls.n	8001106 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	22ff      	movs	r2, #255	; 0xff
 80010ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	8979      	ldrh	r1, [r7, #10]
 80010f6:	4b52      	ldr	r3, [pc, #328]	; (8001240 <HAL_I2C_Master_Receive+0x1e4>)
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 fb02 	bl	8001708 <I2C_TransferConfig>
 8001104:	e06d      	b.n	80011e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800110a:	b29a      	uxth	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001114:	b2da      	uxtb	r2, r3
 8001116:	8979      	ldrh	r1, [r7, #10]
 8001118:	4b49      	ldr	r3, [pc, #292]	; (8001240 <HAL_I2C_Master_Receive+0x1e4>)
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 faf1 	bl	8001708 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001126:	e05c      	b.n	80011e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	6a39      	ldr	r1, [r7, #32]
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 f989 	bl	8001444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e07c      	b.n	8001236 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001158:	3b01      	subs	r3, #1
 800115a:	b29a      	uxth	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001164:	b29b      	uxth	r3, r3
 8001166:	3b01      	subs	r3, #1
 8001168:	b29a      	uxth	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001172:	b29b      	uxth	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d034      	beq.n	80011e2 <HAL_I2C_Master_Receive+0x186>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117c:	2b00      	cmp	r3, #0
 800117e:	d130      	bne.n	80011e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	2200      	movs	r2, #0
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 f880 	bl	8001290 <I2C_WaitOnFlagUntilTimeout>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e04d      	b.n	8001236 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119e:	b29b      	uxth	r3, r3
 80011a0:	2bff      	cmp	r3, #255	; 0xff
 80011a2:	d90e      	bls.n	80011c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	22ff      	movs	r2, #255	; 0xff
 80011a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	8979      	ldrh	r1, [r7, #10]
 80011b2:	2300      	movs	r3, #0
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 faa4 	bl	8001708 <I2C_TransferConfig>
 80011c0:	e00f      	b.n	80011e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	8979      	ldrh	r1, [r7, #10]
 80011d4:	2300      	movs	r3, #0
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f000 fa93 	bl	8001708 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d19d      	bne.n	8001128 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	6a39      	ldr	r1, [r7, #32]
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 f8e3 	bl	80013bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e01a      	b.n	8001236 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2220      	movs	r2, #32
 8001206:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6859      	ldr	r1, [r3, #4]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_I2C_Master_Receive+0x1e8>)
 8001214:	400b      	ands	r3, r1
 8001216:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2220      	movs	r2, #32
 800121c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	e000      	b.n	8001236 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001234:	2302      	movs	r3, #2
  }
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	80002400 	.word	0x80002400
 8001244:	fe00e800 	.word	0xfe00e800

08001248 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b02      	cmp	r3, #2
 800125c:	d103      	bne.n	8001266 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b01      	cmp	r3, #1
 8001272:	d007      	beq.n	8001284 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	619a      	str	r2, [r3, #24]
  }
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	4613      	mov	r3, r2
 800129e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012a0:	e031      	b.n	8001306 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d02d      	beq.n	8001306 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012aa:	f7ff facb 	bl	8000844 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d302      	bcc.n	80012c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d122      	bne.n	8001306 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	4013      	ands	r3, r2
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d113      	bne.n	8001306 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f043 0220 	orr.w	r2, r3, #32
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2220      	movs	r2, #32
 80012ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4013      	ands	r3, r2
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	429a      	cmp	r2, r3
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	429a      	cmp	r2, r3
 8001322:	d0be      	beq.n	80012a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800133a:	e033      	b.n	80013a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	68b9      	ldr	r1, [r7, #8]
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 f901 	bl	8001548 <I2C_IsErrorOccurred>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e031      	b.n	80013b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001356:	d025      	beq.n	80013a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001358:	f7ff fa74 	bl	8000844 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	429a      	cmp	r2, r3
 8001366:	d302      	bcc.n	800136e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d11a      	bne.n	80013a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b02      	cmp	r3, #2
 800137a:	d013      	beq.n	80013a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	f043 0220 	orr.w	r2, r3, #32
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2220      	movs	r2, #32
 800138c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e007      	b.n	80013b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d1c4      	bne.n	800133c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013c8:	e02f      	b.n	800142a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f8ba 	bl	8001548 <I2C_IsErrorOccurred>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e02d      	b.n	800143a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013de:	f7ff fa31 	bl	8000844 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d302      	bcc.n	80013f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d11a      	bne.n	800142a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	2b20      	cmp	r3, #32
 8001400:	d013      	beq.n	800142a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f043 0220 	orr.w	r2, r3, #32
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2220      	movs	r2, #32
 8001412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e007      	b.n	800143a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	2b20      	cmp	r3, #32
 8001436:	d1c8      	bne.n	80013ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001450:	e06b      	b.n	800152a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f876 	bl	8001548 <I2C_IsErrorOccurred>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e069      	b.n	800153a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0320 	and.w	r3, r3, #32
 8001470:	2b20      	cmp	r3, #32
 8001472:	d138      	bne.n	80014e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b04      	cmp	r3, #4
 8001480:	d105      	bne.n	800148e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e055      	b.n	800153a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	2b10      	cmp	r3, #16
 800149a:	d107      	bne.n	80014ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2210      	movs	r2, #16
 80014a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2204      	movs	r2, #4
 80014a8:	645a      	str	r2, [r3, #68]	; 0x44
 80014aa:	e002      	b.n	80014b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2220      	movs	r2, #32
 80014b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6859      	ldr	r1, [r3, #4]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80014c6:	400b      	ands	r3, r1
 80014c8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2220      	movs	r2, #32
 80014ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e029      	b.n	800153a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014e6:	f7ff f9ad 	bl	8000844 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d302      	bcc.n	80014fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d116      	bne.n	800152a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b04      	cmp	r3, #4
 8001508:	d00f      	beq.n	800152a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f043 0220 	orr.w	r2, r3, #32
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2220      	movs	r2, #32
 800151a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e007      	b.n	800153a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b04      	cmp	r3, #4
 8001536:	d18c      	bne.n	8001452 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	fe00e800 	.word	0xfe00e800

08001548 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2b00      	cmp	r3, #0
 8001572:	d068      	beq.n	8001646 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2210      	movs	r2, #16
 800157a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800157c:	e049      	b.n	8001612 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d045      	beq.n	8001612 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001586:	f7ff f95d 	bl	8000844 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	429a      	cmp	r2, r3
 8001594:	d302      	bcc.n	800159c <I2C_IsErrorOccurred+0x54>
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d13a      	bne.n	8001612 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80015ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015be:	d121      	bne.n	8001604 <I2C_IsErrorOccurred+0xbc>
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015c6:	d01d      	beq.n	8001604 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80015c8:	7cfb      	ldrb	r3, [r7, #19]
 80015ca:	2b20      	cmp	r3, #32
 80015cc:	d01a      	beq.n	8001604 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80015de:	f7ff f931 	bl	8000844 <HAL_GetTick>
 80015e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015e4:	e00e      	b.n	8001604 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80015e6:	f7ff f92d 	bl	8000844 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b19      	cmp	r3, #25
 80015f2:	d907      	bls.n	8001604 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	f043 0320 	orr.w	r3, r3, #32
 80015fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001602:	e006      	b.n	8001612 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 0320 	and.w	r3, r3, #32
 800160e:	2b20      	cmp	r3, #32
 8001610:	d1e9      	bne.n	80015e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b20      	cmp	r3, #32
 800161e:	d003      	beq.n	8001628 <I2C_IsErrorOccurred+0xe0>
 8001620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0aa      	beq.n	800157e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800162c:	2b00      	cmp	r3, #0
 800162e:	d103      	bne.n	8001638 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2220      	movs	r2, #32
 8001636:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00b      	beq.n	8001670 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001668:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800168a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00b      	beq.n	80016b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80016b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01c      	beq.n	80016f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fdc3 	bl	8001248 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <I2C_IsErrorOccurred+0x1bc>)
 80016ce:	400b      	ands	r3, r1
 80016d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	431a      	orrs	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2220      	movs	r2, #32
 80016e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80016f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	fe00e800 	.word	0xfe00e800

08001708 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	817b      	strh	r3, [r7, #10]
 8001716:	4613      	mov	r3, r2
 8001718:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800171a:	897b      	ldrh	r3, [r7, #10]
 800171c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001720:	7a7b      	ldrb	r3, [r7, #9]
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001728:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	4313      	orrs	r3, r2
 8001732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001736:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	0d5b      	lsrs	r3, r3, #21
 8001742:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <I2C_TransferConfig+0x60>)
 8001748:	430b      	orrs	r3, r1
 800174a:	43db      	mvns	r3, r3
 800174c:	ea02 0103 	and.w	r1, r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	430a      	orrs	r2, r1
 8001758:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800175a:	bf00      	nop
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	03ff63ff 	.word	0x03ff63ff

0800176c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b20      	cmp	r3, #32
 8001780:	d138      	bne.n	80017f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800178c:	2302      	movs	r3, #2
 800178e:	e032      	b.n	80017f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2224      	movs	r2, #36	; 0x24
 800179c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2220      	movs	r2, #32
 80017e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	e000      	b.n	80017f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017f4:	2302      	movs	r3, #2
  }
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b20      	cmp	r3, #32
 8001816:	d139      	bne.n	800188c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001822:	2302      	movs	r3, #2
 8001824:	e033      	b.n	800188e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2224      	movs	r2, #36	; 0x24
 8001832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001854:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 0201 	orr.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2220      	movs	r2, #32
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	e000      	b.n	800188e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800188c:	2302      	movs	r3, #2
  }
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	f001 b823 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 817d 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018d8:	4bbc      	ldr	r3, [pc, #752]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d00c      	beq.n	80018fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e4:	4bb9      	ldr	r3, [pc, #740]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d15c      	bne.n	80019aa <HAL_RCC_OscConfig+0x10e>
 80018f0:	4bb6      	ldr	r3, [pc, #728]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fc:	d155      	bne.n	80019aa <HAL_RCC_OscConfig+0x10e>
 80018fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001902:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001912:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	095b      	lsrs	r3, r3, #5
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d102      	bne.n	8001930 <HAL_RCC_OscConfig+0x94>
 800192a:	4ba8      	ldr	r3, [pc, #672]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	e015      	b.n	800195c <HAL_RCC_OscConfig+0xc0>
 8001930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001934:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001948:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800194c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001958:	4b9c      	ldr	r3, [pc, #624]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001960:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001964:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001968:	fa92 f2a2 	rbit	r2, r2
 800196c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001970:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001974:	fab2 f282 	clz	r2, r2
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	f002 021f 	and.w	r2, r2, #31
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f202 	lsl.w	r2, r1, r2
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 811f 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x334>
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 8116 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f000 bfaf 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x12e>
 80019bc:	4b83      	ldr	r3, [pc, #524]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a82      	ldr	r2, [pc, #520]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e036      	b.n	8001a38 <HAL_RCC_OscConfig+0x19c>
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x158>
 80019da:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7b      	ldr	r2, [pc, #492]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b79      	ldr	r3, [pc, #484]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a78      	ldr	r2, [pc, #480]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e021      	b.n	8001a38 <HAL_RCC_OscConfig+0x19c>
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x184>
 8001a06:	4b71      	ldr	r3, [pc, #452]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a70      	ldr	r2, [pc, #448]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b6e      	ldr	r3, [pc, #440]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6d      	ldr	r2, [pc, #436]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0x19c>
 8001a20:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a69      	ldr	r2, [pc, #420]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a66      	ldr	r2, [pc, #408]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a38:	4b64      	ldr	r3, [pc, #400]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	f023 020f 	bic.w	r2, r3, #15
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	495f      	ldr	r1, [pc, #380]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d059      	beq.n	8001b16 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7fe feef 	bl	8000844 <HAL_GetTick>
 8001a66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7fe feea 	bl	8000844 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	; 0x64
 8001a7a:	d902      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	f000 bf43 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 8001a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a86:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	095b      	lsrs	r3, r3, #5
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d102      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x218>
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	e015      	b.n	8001ae0 <HAL_RCC_OscConfig+0x244>
 8001ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001acc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ad0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001adc:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ae4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ae8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001aec:	fa92 f2a2 	rbit	r2, r2
 8001af0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001af4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001af8:	fab2 f282 	clz	r2, r2
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f042 0220 	orr.w	r2, r2, #32
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f002 021f 	and.w	r2, r2, #31
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ab      	beq.n	8001a6c <HAL_RCC_OscConfig+0x1d0>
 8001b14:	e05d      	b.n	8001bd2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7fe fe95 	bl	8000844 <HAL_GetTick>
 8001b1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7fe fe90 	bl	8000844 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b64      	cmp	r3, #100	; 0x64
 8001b2e:	d902      	bls.n	8001b36 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	f000 bee9 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 8001b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2cc>
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	e015      	b.n	8001b94 <HAL_RCC_OscConfig+0x2f8>
 8001b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b6c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b80:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b84:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b98:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b9c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ba0:	fa92 f2a2 	rbit	r2, r2
 8001ba4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001ba8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ab      	bne.n	8001b20 <HAL_RCC_OscConfig+0x284>
 8001bc8:	e003      	b.n	8001bd2 <HAL_RCC_OscConfig+0x336>
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 817d 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001be8:	4ba6      	ldr	r3, [pc, #664]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00b      	beq.n	8001c0c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bf4:	4ba3      	ldr	r3, [pc, #652]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d172      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x44a>
 8001c00:	4ba0      	ldr	r3, [pc, #640]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d16c      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x44a>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c1e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	095b      	lsrs	r3, r3, #5
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <HAL_RCC_OscConfig+0x3a0>
 8001c36:	4b93      	ldr	r3, [pc, #588]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	e013      	b.n	8001c64 <HAL_RCC_OscConfig+0x3c8>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c4e:	2302      	movs	r3, #2
 8001c50:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c54:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c60:	4b88      	ldr	r3, [pc, #544]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	2202      	movs	r2, #2
 8001c66:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c6a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c6e:	fa92 f2a2 	rbit	r2, r2
 8001c72:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c76:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f042 0220 	orr.w	r2, r2, #32
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f002 021f 	and.w	r2, r2, #31
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00a      	beq.n	8001cac <HAL_RCC_OscConfig+0x410>
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d002      	beq.n	8001cac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f000 be2e 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b75      	ldr	r3, [pc, #468]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	21f8      	movs	r1, #248	; 0xf8
 8001cc2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001cca:	fa91 f1a1 	rbit	r1, r1
 8001cce:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001cd2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cd6:	fab1 f181 	clz	r1, r1
 8001cda:	b2c9      	uxtb	r1, r1
 8001cdc:	408b      	lsls	r3, r1
 8001cde:	4969      	ldr	r1, [pc, #420]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce4:	e0fd      	b.n	8001ee2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8088 	beq.w	8001e08 <HAL_RCC_OscConfig+0x56c>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2301      	movs	r3, #1
 8001d22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7fe fd8e 	bl	8000844 <HAL_GetTick>
 8001d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7fe fd89 	bl	8000844 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d902      	bls.n	8001d44 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	f000 bde2 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d56:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d102      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4d8>
 8001d6e:	4b45      	ldr	r3, [pc, #276]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e013      	b.n	8001d9c <HAL_RCC_OscConfig+0x500>
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d86:	2302      	movs	r3, #2
 8001d88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d98:	4b3a      	ldr	r3, [pc, #232]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001da2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001da6:	fa92 f2a2 	rbit	r2, r2
 8001daa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001dae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001db2:	fab2 f282 	clz	r2, r2
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f042 0220 	orr.w	r2, r2, #32
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	f002 021f 	and.w	r2, r2, #31
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0af      	beq.n	8001d2e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	21f8      	movs	r1, #248	; 0xf8
 8001de4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001dec:	fa91 f1a1 	rbit	r1, r1
 8001df0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001df4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001df8:	fab1 f181 	clz	r1, r1
 8001dfc:	b2c9      	uxtb	r1, r1
 8001dfe:	408b      	lsls	r3, r1
 8001e00:	4920      	ldr	r1, [pc, #128]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
 8001e06:	e06c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x646>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2300      	movs	r3, #0
 8001e32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7fe fd06 	bl	8000844 <HAL_GetTick>
 8001e38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7fe fd01 	bl	8000844 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d902      	bls.n	8001e54 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f000 bd5a 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d104      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5ec>
 8001e7e:	4b01      	ldr	r3, [pc, #4]	; (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	e015      	b.n	8001eb0 <HAL_RCC_OscConfig+0x614>
 8001e84:	40021000 	.word	0x40021000
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ea0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001eac:	4bc8      	ldr	r3, [pc, #800]	; (80021d0 <HAL_RCC_OscConfig+0x934>)
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001eb6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001eba:	fa92 f2a2 	rbit	r2, r2
 8001ebe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ec2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ec6:	fab2 f282 	clz	r2, r2
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f042 0220 	orr.w	r2, r2, #32
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f002 021f 	and.w	r2, r2, #31
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1ad      	bne.n	8001e3e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8110 	beq.w	8002118 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d079      	beq.n	8001ffc <HAL_RCC_OscConfig+0x760>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	4bab      	ldr	r3, [pc, #684]	; (80021d4 <HAL_RCC_OscConfig+0x938>)
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2301      	movs	r3, #1
 8001f30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7fe fc87 	bl	8000844 <HAL_GetTick>
 8001f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7fe fc82 	bl	8000844 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d902      	bls.n	8001f52 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	f000 bcdb 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 8001f52:	2302      	movs	r3, #2
 8001f54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	fa93 f2a3 	rbit	r2, r3
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f90:	2202      	movs	r2, #2
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001faa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fac:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <HAL_RCC_OscConfig+0x934>)
 8001fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fb8:	2102      	movs	r1, #2
 8001fba:	6019      	str	r1, [r3, #0]
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f1a3 	rbit	r1, r3
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fd2:	6019      	str	r1, [r3, #0]
  return result;
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0a0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x6a0>
 8001ffa:	e08d      	b.n	8002118 <HAL_RCC_OscConfig+0x87c>
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fa93 f2a3 	rbit	r2, r3
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800201e:	601a      	str	r2, [r3, #0]
  return result;
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002028:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	4b68      	ldr	r3, [pc, #416]	; (80021d4 <HAL_RCC_OscConfig+0x938>)
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	461a      	mov	r2, r3
 800203a:	2300      	movs	r3, #0
 800203c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7fe fc01 	bl	8000844 <HAL_GetTick>
 8002042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002048:	f7fe fbfc 	bl	8000844 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d902      	bls.n	800205e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	f000 bc55 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002066:	2202      	movs	r2, #2
 8002068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800208a:	2202      	movs	r2, #2
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f2a3 	rbit	r2, r3
 800209c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020ae:	2202      	movs	r2, #2
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	fa93 f2a3 	rbit	r2, r3
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_OscConfig+0x934>)
 80020cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020d6:	2102      	movs	r1, #2
 80020d8:	6019      	str	r1, [r3, #0]
 80020da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	fa93 f1a3 	rbit	r1, r3
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020f0:	6019      	str	r1, [r3, #0]
  return result;
 80020f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2101      	movs	r1, #1
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d197      	bne.n	8002048 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 81a1 	beq.w	8002470 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <HAL_RCC_OscConfig+0x934>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d116      	bne.n	800216e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <HAL_RCC_OscConfig+0x934>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_RCC_OscConfig+0x934>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	61d3      	str	r3, [r2, #28]
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_RCC_OscConfig+0x934>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002162:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002166:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_RCC_OscConfig+0x93c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11a      	bne.n	80021b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_RCC_OscConfig+0x93c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <HAL_RCC_OscConfig+0x93c>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002184:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002186:	f7fe fb5d 	bl	8000844 <HAL_GetTick>
 800218a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218e:	e009      	b.n	80021a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002190:	f7fe fb58 	bl	8000844 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b64      	cmp	r3, #100	; 0x64
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e3b1      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_RCC_OscConfig+0x93c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ef      	beq.n	8002190 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10d      	bne.n	80021dc <HAL_RCC_OscConfig+0x940>
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_RCC_OscConfig+0x934>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a02      	ldr	r2, [pc, #8]	; (80021d0 <HAL_RCC_OscConfig+0x934>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e03c      	b.n	8002248 <HAL_RCC_OscConfig+0x9ac>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	10908120 	.word	0x10908120
 80021d8:	40007000 	.word	0x40007000
 80021dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10c      	bne.n	8002206 <HAL_RCC_OscConfig+0x96a>
 80021ec:	4bc1      	ldr	r3, [pc, #772]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4ac0      	ldr	r2, [pc, #768]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	4bbe      	ldr	r3, [pc, #760]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4abd      	ldr	r2, [pc, #756]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80021fe:	f023 0304 	bic.w	r3, r3, #4
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e020      	b.n	8002248 <HAL_RCC_OscConfig+0x9ac>
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b05      	cmp	r3, #5
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x994>
 8002216:	4bb7      	ldr	r3, [pc, #732]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4ab6      	ldr	r2, [pc, #728]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6213      	str	r3, [r2, #32]
 8002222:	4bb4      	ldr	r3, [pc, #720]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4ab3      	ldr	r2, [pc, #716]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6213      	str	r3, [r2, #32]
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0x9ac>
 8002230:	4bb0      	ldr	r3, [pc, #704]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4aaf      	ldr	r2, [pc, #700]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002236:	f023 0301 	bic.w	r3, r3, #1
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	4bad      	ldr	r3, [pc, #692]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4aac      	ldr	r2, [pc, #688]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002242:	f023 0304 	bic.w	r3, r3, #4
 8002246:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8081 	beq.w	800235c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7fe faf3 	bl	8000844 <HAL_GetTick>
 800225e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002264:	f7fe faee 	bl	8000844 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e345      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002284:	2202      	movs	r2, #2
 8002286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022a8:	2202      	movs	r2, #2
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022c2:	601a      	str	r2, [r3, #0]
  return result;
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_OscConfig+0xa4c>
 80022e2:	4b84      	ldr	r3, [pc, #528]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	e013      	b.n	8002310 <HAL_RCC_OscConfig+0xa74>
 80022e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022f0:	2202      	movs	r2, #2
 80022f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	4b79      	ldr	r3, [pc, #484]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002314:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002318:	2102      	movs	r1, #2
 800231a:	6011      	str	r1, [r2, #0]
 800231c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002320:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	fa92 f1a2 	rbit	r1, r2
 800232a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800232e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002332:	6011      	str	r1, [r2, #0]
  return result;
 8002334:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002338:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	fab2 f282 	clz	r2, r2
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	f002 021f 	and.w	r2, r2, #31
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f202 	lsl.w	r2, r1, r2
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d084      	beq.n	8002264 <HAL_RCC_OscConfig+0x9c8>
 800235a:	e07f      	b.n	800245c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235c:	f7fe fa72 	bl	8000844 <HAL_GetTick>
 8002360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	e00b      	b.n	800237e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7fe fa6d 	bl	8000844 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e2c4      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002386:	2202      	movs	r2, #2
 8002388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	fa93 f2a3 	rbit	r2, r3
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023aa:	2202      	movs	r2, #2
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fa93 f2a3 	rbit	r2, r3
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023c4:	601a      	str	r2, [r3, #0]
  return result;
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f043 0302 	orr.w	r3, r3, #2
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d102      	bne.n	80023ea <HAL_RCC_OscConfig+0xb4e>
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	e013      	b.n	8002412 <HAL_RCC_OscConfig+0xb76>
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023f2:	2202      	movs	r2, #2
 80023f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	fa93 f2a3 	rbit	r2, r3
 8002404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002408:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002416:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800241a:	2102      	movs	r1, #2
 800241c:	6011      	str	r1, [r2, #0]
 800241e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002422:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	fa92 f1a2 	rbit	r1, r2
 800242c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002430:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002434:	6011      	str	r1, [r2, #0]
  return result;
 8002436:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800243a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f002 021f 	and.w	r2, r2, #31
 8002450:	2101      	movs	r1, #1
 8002452:	fa01 f202 	lsl.w	r2, r1, r2
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d184      	bne.n	8002366 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800245c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8242 	beq.w	8002906 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002482:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b08      	cmp	r3, #8
 800248c:	f000 8213 	beq.w	80028b6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b02      	cmp	r3, #2
 800249e:	f040 8162 	bne.w	8002766 <HAL_RCC_OscConfig+0xeca>
 80024a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80024aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	fa93 f2a3 	rbit	r2, r3
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024c6:	601a      	str	r2, [r3, #0]
  return result;
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	461a      	mov	r2, r3
 80024e4:	2300      	movs	r3, #0
 80024e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe f9ac 	bl	8000844 <HAL_GetTick>
 80024ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f0:	e00c      	b.n	800250c <HAL_RCC_OscConfig+0xc70>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe f9a4 	bl	8000844 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e1fd      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002530:	601a      	str	r2, [r3, #0]
  return result;
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800253a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d102      	bne.n	8002556 <HAL_RCC_OscConfig+0xcba>
 8002550:	4bb0      	ldr	r3, [pc, #704]	; (8002814 <HAL_RCC_OscConfig+0xf78>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	e027      	b.n	80025a6 <HAL_RCC_OscConfig+0xd0a>
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800255e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	fa93 f2a3 	rbit	r2, r3
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	fa93 f2a3 	rbit	r2, r3
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	4b9c      	ldr	r3, [pc, #624]	; (8002814 <HAL_RCC_OscConfig+0xf78>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025aa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80025ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025b2:	6011      	str	r1, [r2, #0]
 80025b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	fa92 f1a2 	rbit	r1, r2
 80025c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025ca:	6011      	str	r1, [r2, #0]
  return result;
 80025cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	fab2 f282 	clz	r2, r2
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	f042 0220 	orr.w	r2, r2, #32
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	f002 021f 	and.w	r2, r2, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d182      	bne.n	80024f8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f2:	4b88      	ldr	r3, [pc, #544]	; (8002814 <HAL_RCC_OscConfig+0xf78>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	430b      	orrs	r3, r1
 8002614:	497f      	ldr	r1, [pc, #508]	; (8002814 <HAL_RCC_OscConfig+0xf78>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002622:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800263e:	601a      	str	r2, [r3, #0]
  return result;
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002648:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	461a      	mov	r2, r3
 800265c:	2301      	movs	r3, #1
 800265e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe f8f0 	bl	8000844 <HAL_GetTick>
 8002664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002668:	e009      	b.n	800267e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7fe f8eb 	bl	8000844 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e144      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800268a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002690:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	fa93 f2a3 	rbit	r2, r3
 800269a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026a2:	601a      	str	r2, [r3, #0]
  return result;
 80026a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d102      	bne.n	80026c8 <HAL_RCC_OscConfig+0xe2c>
 80026c2:	4b54      	ldr	r3, [pc, #336]	; (8002814 <HAL_RCC_OscConfig+0xf78>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	e027      	b.n	8002718 <HAL_RCC_OscConfig+0xe7c>
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	4b3f      	ldr	r3, [pc, #252]	; (8002814 <HAL_RCC_OscConfig+0xf78>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800271c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002720:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002724:	6011      	str	r1, [r2, #0]
 8002726:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800272a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	fa92 f1a2 	rbit	r1, r2
 8002734:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002738:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800273c:	6011      	str	r1, [r2, #0]
  return result;
 800273e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002742:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	fab2 f282 	clz	r2, r2
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f042 0220 	orr.w	r2, r2, #32
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f002 021f 	and.w	r2, r2, #31
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f202 	lsl.w	r2, r1, r2
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d082      	beq.n	800266a <HAL_RCC_OscConfig+0xdce>
 8002764:	e0cf      	b.n	8002906 <HAL_RCC_OscConfig+0x106a>
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800276e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800278a:	601a      	str	r2, [r3, #0]
  return result;
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002794:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	461a      	mov	r2, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe f84a 	bl	8000844 <HAL_GetTick>
 80027b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b4:	e009      	b.n	80027ca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b6:	f7fe f845 	bl	8000844 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e09e      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	fa93 f2a3 	rbit	r2, r3
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027ee:	601a      	str	r2, [r3, #0]
  return result;
 80027f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d104      	bne.n	8002818 <HAL_RCC_OscConfig+0xf7c>
 800280e:	4b01      	ldr	r3, [pc, #4]	; (8002814 <HAL_RCC_OscConfig+0xf78>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	e029      	b.n	8002868 <HAL_RCC_OscConfig+0xfcc>
 8002814:	40021000 	.word	0x40021000
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002846:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <HAL_RCC_OscConfig+0x1078>)
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002870:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002874:	6011      	str	r1, [r2, #0]
 8002876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	fa92 f1a2 	rbit	r1, r2
 8002884:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002888:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800288c:	6011      	str	r1, [r2, #0]
  return result;
 800288e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002892:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	fab2 f282 	clz	r2, r2
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f042 0220 	orr.w	r2, r2, #32
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f002 021f 	and.w	r2, r2, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f202 	lsl.w	r2, r1, r2
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d180      	bne.n	80027b6 <HAL_RCC_OscConfig+0xf1a>
 80028b4:	e027      	b.n	8002906 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e01e      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_RCC_OscConfig+0x1078>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028d6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d10b      	bne.n	8002902 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000

08002918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b09e      	sub	sp, #120	; 0x78
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e162      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b90      	ldr	r3, [pc, #576]	; (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d910      	bls.n	8002960 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b8d      	ldr	r3, [pc, #564]	; (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	498b      	ldr	r1, [pc, #556]	; (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b89      	ldr	r3, [pc, #548]	; (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e14a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b82      	ldr	r3, [pc, #520]	; (8002b78 <HAL_RCC_ClockConfig+0x260>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	497f      	ldr	r1, [pc, #508]	; (8002b78 <HAL_RCC_ClockConfig+0x260>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80dc 	beq.w	8002b44 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d13c      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xf6>
 8002994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002998:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <HAL_RCC_ClockConfig+0xa6>
 80029b8:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <HAL_RCC_ClockConfig+0x260>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	e00f      	b.n	80029de <HAL_RCC_ClockConfig+0xc6>
 80029be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	667b      	str	r3, [r7, #100]	; 0x64
 80029cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d0:	663b      	str	r3, [r7, #96]	; 0x60
 80029d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029da:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <HAL_RCC_ClockConfig+0x260>)
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80029e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029e6:	fa92 f2a2 	rbit	r2, r2
 80029ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029ee:	fab2 f282 	clz	r2, r2
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f042 0220 	orr.w	r2, r2, #32
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	f002 021f 	and.w	r2, r2, #31
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d17b      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0f3      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d13c      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x178>
 8002a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d102      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x128>
 8002a3a:	4b4f      	ldr	r3, [pc, #316]	; (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	e00f      	b.n	8002a60 <HAL_RCC_ClockConfig+0x148>
 8002a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40
 8002a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a5c:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a64:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a68:	fa92 f2a2 	rbit	r2, r2
 8002a6c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a70:	fab2 f282 	clz	r2, r2
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	f042 0220 	orr.w	r2, r2, #32
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	f002 021f 	and.w	r2, r2, #31
 8002a80:	2101      	movs	r1, #1
 8002a82:	fa01 f202 	lsl.w	r2, r1, r2
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d13a      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0b2      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
 8002a90:	2302      	movs	r3, #2
 8002a92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x1a0>
 8002ab2:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	e00d      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x1bc>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	623b      	str	r3, [r7, #32]
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	61ba      	str	r2, [r7, #24]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	fa92 f2a2 	rbit	r2, r2
 8002ade:	617a      	str	r2, [r7, #20]
  return result;
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f042 0220 	orr.w	r2, r2, #32
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f002 021f 	and.w	r2, r2, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e079      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	491a      	ldr	r1, [pc, #104]	; (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b14:	f7fd fe96 	bl	8000844 <HAL_GetTick>
 8002b18:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1c:	f7fd fe92 	bl	8000844 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e061      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 020c 	and.w	r2, r3, #12
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d1eb      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d214      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 0207 	bic.w	r2, r3, #7
 8002b5a:	4906      	ldr	r1, [pc, #24]	; (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e040      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
 8002b74:	40022000 	.word	0x40022000
 8002b78:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b88:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_RCC_ClockConfig+0x2e8>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	491a      	ldr	r1, [pc, #104]	; (8002c00 <HAL_RCC_ClockConfig+0x2e8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_RCC_ClockConfig+0x2e8>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4912      	ldr	r1, [pc, #72]	; (8002c00 <HAL_RCC_ClockConfig+0x2e8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bba:	f000 f829 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_RCC_ClockConfig+0x2e8>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc8:	22f0      	movs	r2, #240	; 0xf0
 8002bca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	fa92 f2a2 	rbit	r2, r2
 8002bd2:	60fa      	str	r2, [r7, #12]
  return result;
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	fab2 f282 	clz	r2, r2
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	40d3      	lsrs	r3, r2
 8002bde:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <HAL_RCC_ClockConfig+0x2ec>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	fa21 f303 	lsr.w	r3, r1, r3
 8002be6:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <HAL_RCC_ClockConfig+0x2f0>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_RCC_ClockConfig+0x2f4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fde4 	bl	80007bc <HAL_InitTick>
  
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3778      	adds	r7, #120	; 0x78
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08003774 	.word	0x08003774
 8002c08:	20000004 	.word	0x20000004
 8002c0c:	20000008 	.word	0x20000008

08002c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b08b      	sub	sp, #44	; 0x2c
 8002c14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c2a:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x30>
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x36>
 8002c3e:	e03c      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c40:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c42:	623b      	str	r3, [r7, #32]
      break;
 8002c44:	e03c      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c50:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	fa92 f2a2 	rbit	r2, r2
 8002c58:	607a      	str	r2, [r7, #4]
  return result;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	fab2 f282 	clz	r2, r2
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	40d3      	lsrs	r3, r2
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c6a:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	220f      	movs	r2, #15
 8002c74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	fa92 f2a2 	rbit	r2, r2
 8002c7c:	60fa      	str	r2, [r7, #12]
  return result;
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	fab2 f282 	clz	r2, r2
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	40d3      	lsrs	r3, r2
 8002c88:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c98:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca8:	e004      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	623b      	str	r3, [r7, #32]
      break;
 8002cb8:	e002      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cbc:	623b      	str	r3, [r7, #32]
      break;
 8002cbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	372c      	adds	r7, #44	; 0x2c
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	007a1200 	.word	0x007a1200
 8002cd8:	0800378c 	.word	0x0800378c
 8002cdc:	0800379c 	.word	0x0800379c
 8002ce0:	003d0900 	.word	0x003d0900

08002ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000004 	.word	0x20000004

08002cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d02:	f7ff ffef 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d06:	4601      	mov	r1, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	fa92 f2a2 	rbit	r2, r2
 8002d1c:	603a      	str	r2, [r7, #0]
  return result;
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	fab2 f282 	clz	r2, r2
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	40d3      	lsrs	r3, r2
 8002d28:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08003784 	.word	0x08003784

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d46:	f7ff ffcd 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d4a:	4601      	mov	r1, r0
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	fa92 f2a2 	rbit	r2, r2
 8002d60:	603a      	str	r2, [r7, #0]
  return result;
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	fab2 f282 	clz	r2, r2
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	40d3      	lsrs	r3, r2
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d6e:	5cd3      	ldrb	r3, [r2, r3]
 8002d70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	08003784 	.word	0x08003784

08002d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b092      	sub	sp, #72	; 0x48
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80cd 	beq.w	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da8:	4b86      	ldr	r3, [pc, #536]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10e      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db4:	4b83      	ldr	r3, [pc, #524]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	4a82      	ldr	r2, [pc, #520]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	61d3      	str	r3, [r2, #28]
 8002dc0:	4b80      	ldr	r3, [pc, #512]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd2:	4b7d      	ldr	r3, [pc, #500]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d118      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dde:	4b7a      	ldr	r3, [pc, #488]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a79      	ldr	r2, [pc, #484]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dea:	f7fd fd2b 	bl	8000844 <HAL_GetTick>
 8002dee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	e008      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df2:	f7fd fd27 	bl	8000844 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b64      	cmp	r3, #100	; 0x64
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0db      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e04:	4b70      	ldr	r3, [pc, #448]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e10:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d07d      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d076      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e2e:	4b65      	ldr	r3, [pc, #404]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4b5e      	ldr	r3, [pc, #376]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	461a      	mov	r2, r3
 8002e58:	2301      	movs	r3, #1
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b55      	ldr	r3, [pc, #340]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e80:	4a50      	ldr	r2, [pc, #320]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e84:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d045      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fd fcd8 	bl	8000844 <HAL_GetTick>
 8002e94:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fd fcd4 	bl	8000844 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e086      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eba:	2302      	movs	r3, #2
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	61fb      	str	r3, [r7, #28]
  return result;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f043 0302 	orr.w	r3, r3, #2
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d102      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002edc:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	e007      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	613a      	str	r2, [r7, #16]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	fa92 f2a2 	rbit	r2, r2
 8002efc:	60fa      	str	r2, [r7, #12]
  return result;
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	fab2 f282 	clz	r2, r2
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	f002 021f 	and.w	r2, r2, #31
 8002f10:	2101      	movs	r1, #1
 8002f12:	fa01 f202 	lsl.w	r2, r1, r2
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0bd      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f1c:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4926      	ldr	r1, [pc, #152]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d105      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f40:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f023 0203 	bic.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	491a      	ldr	r1, [pc, #104]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f6c:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	f023 0210 	bic.w	r2, r3, #16
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4912      	ldr	r1, [pc, #72]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	490b      	ldr	r1, [pc, #44]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	4903      	ldr	r1, [pc, #12]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3748      	adds	r7, #72	; 0x48
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	10908100 	.word	0x10908100

08002fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e040      	b.n	8003064 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fb22 	bl	800063c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	; 0x24
 8002ffc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f82c 	bl	800306c <UART_SetConfig>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e022      	b.n	8003064 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f956 	bl	80032d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800303a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800304a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f9dd 	bl	800341c <UART_CheckIdleState>
 8003062:	4603      	mov	r3, r0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b8a      	ldr	r3, [pc, #552]	; (80032c0 <UART_SetConfig+0x254>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a78      	ldr	r2, [pc, #480]	; (80032c4 <UART_SetConfig+0x258>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d120      	bne.n	800312a <UART_SetConfig+0xbe>
 80030e8:	4b77      	ldr	r3, [pc, #476]	; (80032c8 <UART_SetConfig+0x25c>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d817      	bhi.n	8003124 <UART_SetConfig+0xb8>
 80030f4:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <UART_SetConfig+0x90>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	08003119 	.word	0x08003119
 8003104:	0800311f 	.word	0x0800311f
 8003108:	08003113 	.word	0x08003113
 800310c:	2300      	movs	r3, #0
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e01d      	b.n	800314e <UART_SetConfig+0xe2>
 8003112:	2302      	movs	r3, #2
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e01a      	b.n	800314e <UART_SetConfig+0xe2>
 8003118:	2304      	movs	r3, #4
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e017      	b.n	800314e <UART_SetConfig+0xe2>
 800311e:	2308      	movs	r3, #8
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	e014      	b.n	800314e <UART_SetConfig+0xe2>
 8003124:	2310      	movs	r3, #16
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e011      	b.n	800314e <UART_SetConfig+0xe2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a67      	ldr	r2, [pc, #412]	; (80032cc <UART_SetConfig+0x260>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d102      	bne.n	800313a <UART_SetConfig+0xce>
 8003134:	2300      	movs	r3, #0
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e009      	b.n	800314e <UART_SetConfig+0xe2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a64      	ldr	r2, [pc, #400]	; (80032d0 <UART_SetConfig+0x264>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d102      	bne.n	800314a <UART_SetConfig+0xde>
 8003144:	2300      	movs	r3, #0
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e001      	b.n	800314e <UART_SetConfig+0xe2>
 800314a:	2310      	movs	r3, #16
 800314c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003156:	d15a      	bne.n	800320e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003158:	7ffb      	ldrb	r3, [r7, #31]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d827      	bhi.n	80031ae <UART_SetConfig+0x142>
 800315e:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <UART_SetConfig+0xf8>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003189 	.word	0x08003189
 8003168:	08003191 	.word	0x08003191
 800316c:	08003199 	.word	0x08003199
 8003170:	080031af 	.word	0x080031af
 8003174:	0800319f 	.word	0x0800319f
 8003178:	080031af 	.word	0x080031af
 800317c:	080031af 	.word	0x080031af
 8003180:	080031af 	.word	0x080031af
 8003184:	080031a7 	.word	0x080031a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003188:	f7ff fdb8 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 800318c:	61b8      	str	r0, [r7, #24]
        break;
 800318e:	e013      	b.n	80031b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003190:	f7ff fdd6 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8003194:	61b8      	str	r0, [r7, #24]
        break;
 8003196:	e00f      	b.n	80031b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003198:	4b4e      	ldr	r3, [pc, #312]	; (80032d4 <UART_SetConfig+0x268>)
 800319a:	61bb      	str	r3, [r7, #24]
        break;
 800319c:	e00c      	b.n	80031b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319e:	f7ff fd37 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 80031a2:	61b8      	str	r0, [r7, #24]
        break;
 80031a4:	e008      	b.n	80031b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031aa:	61bb      	str	r3, [r7, #24]
        break;
 80031ac:	e004      	b.n	80031b8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	77bb      	strb	r3, [r7, #30]
        break;
 80031b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d074      	beq.n	80032a8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	005a      	lsls	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	441a      	add	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b0f      	cmp	r3, #15
 80031d8:	d916      	bls.n	8003208 <UART_SetConfig+0x19c>
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	d212      	bcs.n	8003208 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f023 030f 	bic.w	r3, r3, #15
 80031ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	89fb      	ldrh	r3, [r7, #14]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	89fa      	ldrh	r2, [r7, #14]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	e04f      	b.n	80032a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	77bb      	strb	r3, [r7, #30]
 800320c:	e04c      	b.n	80032a8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800320e:	7ffb      	ldrb	r3, [r7, #31]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d828      	bhi.n	8003266 <UART_SetConfig+0x1fa>
 8003214:	a201      	add	r2, pc, #4	; (adr r2, 800321c <UART_SetConfig+0x1b0>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	08003241 	.word	0x08003241
 8003220:	08003249 	.word	0x08003249
 8003224:	08003251 	.word	0x08003251
 8003228:	08003267 	.word	0x08003267
 800322c:	08003257 	.word	0x08003257
 8003230:	08003267 	.word	0x08003267
 8003234:	08003267 	.word	0x08003267
 8003238:	08003267 	.word	0x08003267
 800323c:	0800325f 	.word	0x0800325f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003240:	f7ff fd5c 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8003244:	61b8      	str	r0, [r7, #24]
        break;
 8003246:	e013      	b.n	8003270 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003248:	f7ff fd7a 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 800324c:	61b8      	str	r0, [r7, #24]
        break;
 800324e:	e00f      	b.n	8003270 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <UART_SetConfig+0x268>)
 8003252:	61bb      	str	r3, [r7, #24]
        break;
 8003254:	e00c      	b.n	8003270 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003256:	f7ff fcdb 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 800325a:	61b8      	str	r0, [r7, #24]
        break;
 800325c:	e008      	b.n	8003270 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003262:	61bb      	str	r3, [r7, #24]
        break;
 8003264:	e004      	b.n	8003270 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	77bb      	strb	r3, [r7, #30]
        break;
 800326e:	bf00      	nop
    }

    if (pclk != 0U)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d018      	beq.n	80032a8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	085a      	lsrs	r2, r3, #1
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	441a      	add	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d909      	bls.n	80032a4 <UART_SetConfig+0x238>
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003296:	d205      	bcs.n	80032a4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	b29a      	uxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	e001      	b.n	80032a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	efff69f3 	.word	0xefff69f3
 80032c4:	40013800 	.word	0x40013800
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40004400 	.word	0x40004400
 80032d0:	40004800 	.word	0x40004800
 80032d4:	007a1200 	.word	0x007a1200

080032d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01a      	beq.n	80033ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d6:	d10a      	bne.n	80033ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
  }
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b098      	sub	sp, #96	; 0x60
 8003420:	af02      	add	r7, sp, #8
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800342c:	f7fd fa0a 	bl	8000844 <HAL_GetTick>
 8003430:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b08      	cmp	r3, #8
 800343e:	d12e      	bne.n	800349e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f88c 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d021      	beq.n	800349e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346e:	653b      	str	r3, [r7, #80]	; 0x50
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003478:	647b      	str	r3, [r7, #68]	; 0x44
 800347a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800347e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e6      	bne.n	800345a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e062      	b.n	8003564 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d149      	bne.n	8003540 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b4:	2200      	movs	r2, #0
 80034b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f856 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d03c      	beq.n	8003540 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	623b      	str	r3, [r7, #32]
   return(result);
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e4:	633b      	str	r3, [r7, #48]	; 0x30
 80034e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e6      	bne.n	80034c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3308      	adds	r3, #8
 80034fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	60fb      	str	r3, [r7, #12]
   return(result);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003518:	61fa      	str	r2, [r7, #28]
 800351a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	69b9      	ldr	r1, [r7, #24]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	e841 2300 	strex	r3, r2, [r1]
 8003524:	617b      	str	r3, [r7, #20]
   return(result);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e5      	bne.n	80034f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e011      	b.n	8003564 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3758      	adds	r7, #88	; 0x58
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357c:	e049      	b.n	8003612 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d045      	beq.n	8003612 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fd f95d 	bl	8000844 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <UART_WaitOnFlagUntilTimeout+0x30>
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e048      	b.n	8003632 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d031      	beq.n	8003612 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d110      	bne.n	80035de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2208      	movs	r2, #8
 80035c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f838 	bl	800363a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2208      	movs	r2, #8
 80035ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e029      	b.n	8003632 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ec:	d111      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f81e 	bl	800363a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e00f      	b.n	8003632 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	429a      	cmp	r2, r3
 800362e:	d0a6      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800363a:	b480      	push	{r7}
 800363c:	b095      	sub	sp, #84	; 0x54
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003660:	643b      	str	r3, [r7, #64]	; 0x40
 8003662:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e6      	bne.n	8003642 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3308      	adds	r3, #8
 800367a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	61fb      	str	r3, [r7, #28]
   return(result);
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	64bb      	str	r3, [r7, #72]	; 0x48
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3308      	adds	r3, #8
 8003692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003694:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e5      	bne.n	8003674 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d118      	bne.n	80036e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f023 0310 	bic.w	r3, r3, #16
 80036c4:	647b      	str	r3, [r7, #68]	; 0x44
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6979      	ldr	r1, [r7, #20]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	613b      	str	r3, [r7, #16]
   return(result);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e6      	bne.n	80036b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036f6:	bf00      	nop
 80036f8:	3754      	adds	r7, #84	; 0x54
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
	...

08003704 <__libc_init_array>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4d0d      	ldr	r5, [pc, #52]	; (800373c <__libc_init_array+0x38>)
 8003708:	4c0d      	ldr	r4, [pc, #52]	; (8003740 <__libc_init_array+0x3c>)
 800370a:	1b64      	subs	r4, r4, r5
 800370c:	10a4      	asrs	r4, r4, #2
 800370e:	2600      	movs	r6, #0
 8003710:	42a6      	cmp	r6, r4
 8003712:	d109      	bne.n	8003728 <__libc_init_array+0x24>
 8003714:	4d0b      	ldr	r5, [pc, #44]	; (8003744 <__libc_init_array+0x40>)
 8003716:	4c0c      	ldr	r4, [pc, #48]	; (8003748 <__libc_init_array+0x44>)
 8003718:	f000 f820 	bl	800375c <_init>
 800371c:	1b64      	subs	r4, r4, r5
 800371e:	10a4      	asrs	r4, r4, #2
 8003720:	2600      	movs	r6, #0
 8003722:	42a6      	cmp	r6, r4
 8003724:	d105      	bne.n	8003732 <__libc_init_array+0x2e>
 8003726:	bd70      	pop	{r4, r5, r6, pc}
 8003728:	f855 3b04 	ldr.w	r3, [r5], #4
 800372c:	4798      	blx	r3
 800372e:	3601      	adds	r6, #1
 8003730:	e7ee      	b.n	8003710 <__libc_init_array+0xc>
 8003732:	f855 3b04 	ldr.w	r3, [r5], #4
 8003736:	4798      	blx	r3
 8003738:	3601      	adds	r6, #1
 800373a:	e7f2      	b.n	8003722 <__libc_init_array+0x1e>
 800373c:	080037ac 	.word	0x080037ac
 8003740:	080037ac 	.word	0x080037ac
 8003744:	080037ac 	.word	0x080037ac
 8003748:	080037b0 	.word	0x080037b0

0800374c <memset>:
 800374c:	4402      	add	r2, r0
 800374e:	4603      	mov	r3, r0
 8003750:	4293      	cmp	r3, r2
 8003752:	d100      	bne.n	8003756 <memset+0xa>
 8003754:	4770      	bx	lr
 8003756:	f803 1b01 	strb.w	r1, [r3], #1
 800375a:	e7f9      	b.n	8003750 <memset+0x4>

0800375c <_init>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	bf00      	nop
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr

08003768 <_fini>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr
