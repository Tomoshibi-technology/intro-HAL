
Panel_Test_G0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e60  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fac  08002fac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fac  08002fac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fac  08002fac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08002fc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002fc0  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e1b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001967  00000000  00000000  00029e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f05  00000000  00000000  0002cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9dc  00000000  00000000  00040b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008088d  00000000  00000000  0004c511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccd9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025ec  00000000  00000000  000ccdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002f00 	.word	0x08002f00

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002f00 	.word	0x08002f00

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa6e 	bl	80006fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f83e 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f920 	bl	8000468 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f900 	bl	800042c <MX_DMA_Init>
  MX_TIM3_Init();
 800022c:	f000 f880 	bl	8000330 <MX_TIM3_Init>
//  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);

//  for(int i=RST;i<RST+(LEDs*24);i++){
//	  Buf[i] = 16;
//  }
  for(i = 0 ; i < RST + 24 * LEDs ; i ++  ){
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <main+0x78>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e019      	b.n	800026c <main+0x54>
	  if(i<RST){
 8000238:	4b15      	ldr	r3, [pc, #84]	; (8000290 <main+0x78>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b31      	cmp	r3, #49	; 0x31
 800023e:	d806      	bhi.n	800024e <main+0x36>
		  Buf[i]=0;
 8000240:	4b13      	ldr	r3, [pc, #76]	; (8000290 <main+0x78>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	001a      	movs	r2, r3
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <main+0x7c>)
 8000248:	2100      	movs	r1, #0
 800024a:	5499      	strb	r1, [r3, r2]
 800024c:	e005      	b.n	800025a <main+0x42>
	  }else{
		  Buf[i]=19;
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <main+0x78>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	001a      	movs	r2, r3
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <main+0x7c>)
 8000256:	2113      	movs	r1, #19
 8000258:	5499      	strb	r1, [r3, r2]
	  }
	  HAL_Delay(10);
 800025a:	200a      	movs	r0, #10
 800025c:	f000 fad4 	bl	8000808 <HAL_Delay>
  for(i = 0 ; i < RST + 24 * LEDs ; i ++  ){
 8000260:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <main+0x78>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	b2da      	uxtb	r2, r3
 8000268:	4b09      	ldr	r3, [pc, #36]	; (8000290 <main+0x78>)
 800026a:	701a      	strb	r2, [r3, #0]
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <main+0x78>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2ba9      	cmp	r3, #169	; 0xa9
 8000272:	d9e1      	bls.n	8000238 <main+0x20>
  }
//
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t*)Buf, RST + (24*LEDs));
 8000274:	4a07      	ldr	r2, [pc, #28]	; (8000294 <main+0x7c>)
 8000276:	4808      	ldr	r0, [pc, #32]	; (8000298 <main+0x80>)
 8000278:	23aa      	movs	r3, #170	; 0xaa
 800027a:	2104      	movs	r1, #4
 800027c:	f001 fd2c 	bl	8001cd8 <HAL_TIM_PWM_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <main+0x84>)
 8000282:	2201      	movs	r2, #1
 8000284:	2104      	movs	r1, #4
 8000286:	0018      	movs	r0, r3
 8000288:	f000 ff76 	bl	8001178 <HAL_GPIO_WritePin>
 800028c:	e7f8      	b.n	8000280 <main+0x68>
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	2000017a 	.word	0x2000017a
 8000294:	200000d0 	.word	0x200000d0
 8000298:	20000028 	.word	0x20000028
 800029c:	50000400 	.word	0x50000400

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b093      	sub	sp, #76	; 0x4c
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	2414      	movs	r4, #20
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	0018      	movs	r0, r3
 80002ac:	2334      	movs	r3, #52	; 0x34
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f002 fe1d 	bl	8002ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	0018      	movs	r0, r3
 80002ba:	2310      	movs	r3, #16
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f002 fe16 	bl	8002ef0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 ff73 	bl	80011b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	2202      	movs	r2, #2
 80002d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	2280      	movs	r2, #128	; 0x80
 80002d8:	0052      	lsls	r2, r2, #1
 80002da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2240      	movs	r2, #64	; 0x40
 80002e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	0018      	movs	r0, r3
 80002f2:	f000 ff9f 	bl	8001234 <HAL_RCC_OscConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002fa:	f000 f8f9 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2207      	movs	r2, #7
 8000302:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2100      	movs	r1, #0
 800031a:	0018      	movs	r0, r3
 800031c:	f001 fa9a 	bl	8001854 <HAL_RCC_ClockConfig>
 8000320:	1e03      	subs	r3, r0, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000324:	f000 f8e4 	bl	80004f0 <Error_Handler>
  }
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b013      	add	sp, #76	; 0x4c
 800032e:	bd90      	pop	{r4, r7, pc}

08000330 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08e      	sub	sp, #56	; 0x38
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000336:	2328      	movs	r3, #40	; 0x28
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2310      	movs	r3, #16
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f002 fdd5 	bl	8002ef0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000346:	231c      	movs	r3, #28
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	0018      	movs	r0, r3
 800034c:	230c      	movs	r3, #12
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f002 fdcd 	bl	8002ef0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000356:	003b      	movs	r3, r7
 8000358:	0018      	movs	r0, r3
 800035a:	231c      	movs	r3, #28
 800035c:	001a      	movs	r2, r3
 800035e:	2100      	movs	r1, #0
 8000360:	f002 fdc6 	bl	8002ef0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000364:	4b2f      	ldr	r3, [pc, #188]	; (8000424 <MX_TIM3_Init+0xf4>)
 8000366:	4a30      	ldr	r2, [pc, #192]	; (8000428 <MX_TIM3_Init+0xf8>)
 8000368:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800036a:	4b2e      	ldr	r3, [pc, #184]	; (8000424 <MX_TIM3_Init+0xf4>)
 800036c:	2200      	movs	r2, #0
 800036e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	4b2c      	ldr	r3, [pc, #176]	; (8000424 <MX_TIM3_Init+0xf4>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20-1;
 8000376:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <MX_TIM3_Init+0xf4>)
 8000378:	2213      	movs	r2, #19
 800037a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037c:	4b29      	ldr	r3, [pc, #164]	; (8000424 <MX_TIM3_Init+0xf4>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000382:	4b28      	ldr	r3, [pc, #160]	; (8000424 <MX_TIM3_Init+0xf4>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000388:	4b26      	ldr	r3, [pc, #152]	; (8000424 <MX_TIM3_Init+0xf4>)
 800038a:	0018      	movs	r0, r3
 800038c:	f001 fbec 	bl	8001b68 <HAL_TIM_Base_Init>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000394:	f000 f8ac 	bl	80004f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000398:	2128      	movs	r1, #40	; 0x28
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	0152      	lsls	r2, r2, #5
 80003a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003a2:	187a      	adds	r2, r7, r1
 80003a4:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <MX_TIM3_Init+0xf4>)
 80003a6:	0011      	movs	r1, r2
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 ff83 	bl	80022b4 <HAL_TIM_ConfigClockSource>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80003b2:	f000 f89d 	bl	80004f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003b6:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_TIM3_Init+0xf4>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 fc2d 	bl	8001c18 <HAL_TIM_PWM_Init>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80003c2:	f000 f895 	bl	80004f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c6:	211c      	movs	r1, #28
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003d4:	187a      	adds	r2, r7, r1
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <MX_TIM3_Init+0xf4>)
 80003d8:	0011      	movs	r1, r2
 80003da:	0018      	movs	r0, r3
 80003dc:	f002 fd02 	bl	8002de4 <HAL_TIMEx_MasterConfigSynchronization>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80003e4:	f000 f884 	bl	80004f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003e8:	003b      	movs	r3, r7
 80003ea:	2260      	movs	r2, #96	; 0x60
 80003ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003ee:	003b      	movs	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f4:	003b      	movs	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80003fa:	003b      	movs	r3, r7
 80003fc:	2204      	movs	r2, #4
 80003fe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000400:	0039      	movs	r1, r7
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_TIM3_Init+0xf4>)
 8000404:	2204      	movs	r2, #4
 8000406:	0018      	movs	r0, r3
 8000408:	f001 fe54 	bl	80020b4 <HAL_TIM_PWM_ConfigChannel>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000410:	f000 f86e 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000414:	4b03      	ldr	r3, [pc, #12]	; (8000424 <MX_TIM3_Init+0xf4>)
 8000416:	0018      	movs	r0, r3
 8000418:	f000 f8e0 	bl	80005dc <HAL_TIM_MspPostInit>

}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b00e      	add	sp, #56	; 0x38
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000028 	.word	0x20000028
 8000428:	40000400 	.word	0x40000400

0800042c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_DMA_Init+0x38>)
 8000434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_DMA_Init+0x38>)
 8000438:	2101      	movs	r1, #1
 800043a:	430a      	orrs	r2, r1
 800043c:	639a      	str	r2, [r3, #56]	; 0x38
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_DMA_Init+0x38>)
 8000440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000442:	2201      	movs	r2, #1
 8000444:	4013      	ands	r3, r2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	2009      	movs	r0, #9
 8000450:	f000 faaa 	bl	80009a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000454:	2009      	movs	r0, #9
 8000456:	f000 fabc 	bl	80009d2 <HAL_NVIC_EnableIRQ>

}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	40021000 	.word	0x40021000

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b089      	sub	sp, #36	; 0x24
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	240c      	movs	r4, #12
 8000470:	193b      	adds	r3, r7, r4
 8000472:	0018      	movs	r0, r3
 8000474:	2314      	movs	r3, #20
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f002 fd39 	bl	8002ef0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <MX_GPIO_Init+0x80>)
 8000480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000482:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <MX_GPIO_Init+0x80>)
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <MX_GPIO_Init+0x80>)
 800048c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800048e:	2201      	movs	r2, #1
 8000490:	4013      	ands	r3, r2
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <MX_GPIO_Init+0x80>)
 8000498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <MX_GPIO_Init+0x80>)
 800049c:	2102      	movs	r1, #2
 800049e:	430a      	orrs	r2, r1
 80004a0:	635a      	str	r2, [r3, #52]	; 0x34
 80004a2:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_GPIO_Init+0x80>)
 80004a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a6:	2202      	movs	r2, #2
 80004a8:	4013      	ands	r3, r2
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_GPIO_Init+0x84>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	2104      	movs	r1, #4
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fe5f 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004ba:	0021      	movs	r1, r4
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2204      	movs	r2, #4
 80004c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2201      	movs	r2, #1
 80004c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2200      	movs	r2, #0
 80004d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	4a05      	ldr	r2, [pc, #20]	; (80004ec <MX_GPIO_Init+0x84>)
 80004d8:	0019      	movs	r1, r3
 80004da:	0010      	movs	r0, r2
 80004dc:	f000 fce8 	bl	8000eb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b009      	add	sp, #36	; 0x24
 80004e6:	bd90      	pop	{r4, r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	50000400 	.word	0x50000400

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <Error_Handler+0x8>
	...

080004fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <HAL_MspInit+0x44>)
 8000504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_MspInit+0x44>)
 8000508:	2101      	movs	r1, #1
 800050a:	430a      	orrs	r2, r1
 800050c:	641a      	str	r2, [r3, #64]	; 0x40
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_MspInit+0x44>)
 8000510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000512:	2201      	movs	r2, #1
 8000514:	4013      	ands	r3, r2
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_MspInit+0x44>)
 800051c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_MspInit+0x44>)
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	0549      	lsls	r1, r1, #21
 8000524:	430a      	orrs	r2, r1
 8000526:	63da      	str	r2, [r3, #60]	; 0x3c
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <HAL_MspInit+0x44>)
 800052a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	055b      	lsls	r3, r3, #21
 8000530:	4013      	ands	r3, r2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a1e      	ldr	r2, [pc, #120]	; (80005cc <HAL_TIM_Base_MspInit+0x88>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d135      	bne.n	80005c2 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <HAL_TIM_Base_MspInit+0x8c>)
 8000558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <HAL_TIM_Base_MspInit+0x8c>)
 800055c:	2102      	movs	r1, #2
 800055e:	430a      	orrs	r2, r1
 8000560:	63da      	str	r2, [r3, #60]	; 0x3c
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <HAL_TIM_Base_MspInit+0x8c>)
 8000564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000566:	2202      	movs	r2, #2
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <HAL_TIM_Base_MspInit+0x94>)
 8000572:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 8000576:	2221      	movs	r2, #33	; 0x21
 8000578:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 800057c:	2210      	movs	r2, #16
 800057e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 800059a:	2220      	movs	r2, #32
 800059c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 80005a0:	22c0      	movs	r2, #192	; 0xc0
 80005a2:	0192      	lsls	r2, r2, #6
 80005a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fa2f 	bl	8000a0c <HAL_DMA_Init>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 80005b2:	f7ff ff9d 	bl	80004f0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 80005ba:	629a      	str	r2, [r3, #40]	; 0x28
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_TIM_Base_MspInit+0x90>)
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b004      	add	sp, #16
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	40000400 	.word	0x40000400
 80005d0:	40021000 	.word	0x40021000
 80005d4:	20000074 	.word	0x20000074
 80005d8:	40020008 	.word	0x40020008

080005dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b089      	sub	sp, #36	; 0x24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	240c      	movs	r4, #12
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	0018      	movs	r0, r3
 80005ea:	2314      	movs	r3, #20
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 fc7e 	bl	8002ef0 <memset>
  if(htim->Instance==TIM3)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <HAL_TIM_MspPostInit+0x70>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d122      	bne.n	8000644 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_TIM_MspPostInit+0x74>)
 8000600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <HAL_TIM_MspPostInit+0x74>)
 8000604:	2101      	movs	r1, #1
 8000606:	430a      	orrs	r2, r1
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <HAL_TIM_MspPostInit+0x74>)
 800060c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060e:	2201      	movs	r2, #1
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000616:	0021      	movs	r1, r4
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2202      	movs	r2, #2
 8000622:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2202      	movs	r2, #2
 800062e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2201      	movs	r2, #1
 8000634:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	187a      	adds	r2, r7, r1
 8000638:	23a0      	movs	r3, #160	; 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	0011      	movs	r1, r2
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fc36 	bl	8000eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b009      	add	sp, #36	; 0x24
 800064a:	bd90      	pop	{r4, r7, pc}
 800064c:	40000400 	.word	0x40000400
 8000650:	40021000 	.word	0x40021000

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000678:	f000 f8aa 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <DMA1_Channel1_IRQHandler+0x14>)
 800068a:	0018      	movs	r0, r3
 800068c:	f000 face 	bl	8000c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	20000074 	.word	0x20000074

0800069c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006ac:	f7ff fff6 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480c      	ldr	r0, [pc, #48]	; (80006e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b2:	490d      	ldr	r1, [pc, #52]	; (80006e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b4:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <LoopForever+0xe>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c8:	4c0a      	ldr	r4, [pc, #40]	; (80006f4 <LoopForever+0x16>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006d6:	f002 fbe7 	bl	8002ea8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006da:	f7ff fd9d 	bl	8000218 <main>

080006de <LoopForever>:

LoopForever:
  b LoopForever
 80006de:	e7fe      	b.n	80006de <LoopForever>
  ldr   r0, =_estack
 80006e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006ec:	08002fb4 	.word	0x08002fb4
  ldr r2, =_sbss
 80006f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f4:	20000180 	.word	0x20000180

080006f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f8:	e7fe      	b.n	80006f8 <ADC1_IRQHandler>
	...

080006fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_Init+0x3c>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_Init+0x3c>)
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	0049      	lsls	r1, r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000716:	2003      	movs	r0, #3
 8000718:	f000 f810 	bl	800073c <HAL_InitTick>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d003      	beq.n	8000728 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e001      	b.n	800072c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000728:	f7ff fee8 	bl	80004fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
}
 8000730:	0018      	movs	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	b002      	add	sp, #8
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40022000 	.word	0x40022000

0800073c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000744:	230f      	movs	r3, #15
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <HAL_InitTick+0x88>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d02b      	beq.n	80007ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <HAL_InitTick+0x8c>)
 8000756:	681c      	ldr	r4, [r3, #0]
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <HAL_InitTick+0x88>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	0019      	movs	r1, r3
 800075e:	23fa      	movs	r3, #250	; 0xfa
 8000760:	0098      	lsls	r0, r3, #2
 8000762:	f7ff fccd 	bl	8000100 <__udivsi3>
 8000766:	0003      	movs	r3, r0
 8000768:	0019      	movs	r1, r3
 800076a:	0020      	movs	r0, r4
 800076c:	f7ff fcc8 	bl	8000100 <__udivsi3>
 8000770:	0003      	movs	r3, r0
 8000772:	0018      	movs	r0, r3
 8000774:	f000 f93d 	bl	80009f2 <HAL_SYSTICK_Config>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d112      	bne.n	80007a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d80a      	bhi.n	8000798 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	2301      	movs	r3, #1
 8000786:	425b      	negs	r3, r3
 8000788:	2200      	movs	r2, #0
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f90c 	bl	80009a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_InitTick+0x90>)
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	e00d      	b.n	80007b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000798:	230f      	movs	r3, #15
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	e008      	b.n	80007b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007a2:	230f      	movs	r3, #15
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
 80007aa:	e003      	b.n	80007b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ac:	230f      	movs	r3, #15
 80007ae:	18fb      	adds	r3, r7, r3
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007b4:	230f      	movs	r3, #15
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	781b      	ldrb	r3, [r3, #0]
}
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b005      	add	sp, #20
 80007c0:	bd90      	pop	{r4, r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x1c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	001a      	movs	r2, r3
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x20>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	18d2      	adds	r2, r2, r3
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <HAL_IncTick+0x20>)
 80007e2:	601a      	str	r2, [r3, #0]
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20000008 	.word	0x20000008
 80007f0:	2000017c 	.word	0x2000017c

080007f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <HAL_GetTick+0x10>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	2000017c 	.word	0x2000017c

08000808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000810:	f7ff fff0 	bl	80007f4 <HAL_GetTick>
 8000814:	0003      	movs	r3, r0
 8000816:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	d005      	beq.n	800082e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_Delay+0x44>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	001a      	movs	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	189b      	adds	r3, r3, r2
 800082c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	f7ff ffe0 	bl	80007f4 <HAL_GetTick>
 8000834:	0002      	movs	r2, r0
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	429a      	cmp	r2, r3
 800083e:	d8f7      	bhi.n	8000830 <HAL_Delay+0x28>
  {
  }
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b004      	add	sp, #16
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	20000008 	.word	0x20000008

08000850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	0002      	movs	r2, r0
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b7f      	cmp	r3, #127	; 0x7f
 8000862:	d809      	bhi.n	8000878 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	001a      	movs	r2, r3
 800086a:	231f      	movs	r3, #31
 800086c:	401a      	ands	r2, r3
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_EnableIRQ+0x30>)
 8000870:	2101      	movs	r1, #1
 8000872:	4091      	lsls	r1, r2
 8000874:	000a      	movs	r2, r1
 8000876:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}
 8000880:	e000e100 	.word	0xe000e100

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	0002      	movs	r2, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b7f      	cmp	r3, #127	; 0x7f
 8000898:	d828      	bhi.n	80008ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089a:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <__NVIC_SetPriority+0xd4>)
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	33c0      	adds	r3, #192	; 0xc0
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	589b      	ldr	r3, [r3, r2]
 80008aa:	1dfa      	adds	r2, r7, #7
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	0011      	movs	r1, r2
 80008b0:	2203      	movs	r2, #3
 80008b2:	400a      	ands	r2, r1
 80008b4:	00d2      	lsls	r2, r2, #3
 80008b6:	21ff      	movs	r1, #255	; 0xff
 80008b8:	4091      	lsls	r1, r2
 80008ba:	000a      	movs	r2, r1
 80008bc:	43d2      	mvns	r2, r2
 80008be:	401a      	ands	r2, r3
 80008c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	22ff      	movs	r2, #255	; 0xff
 80008c8:	401a      	ands	r2, r3
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	0018      	movs	r0, r3
 80008d0:	2303      	movs	r3, #3
 80008d2:	4003      	ands	r3, r0
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	481f      	ldr	r0, [pc, #124]	; (8000958 <__NVIC_SetPriority+0xd4>)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	089b      	lsrs	r3, r3, #2
 80008e2:	430a      	orrs	r2, r1
 80008e4:	33c0      	adds	r3, #192	; 0xc0
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ea:	e031      	b.n	8000950 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <__NVIC_SetPriority+0xd8>)
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	0019      	movs	r1, r3
 80008f4:	230f      	movs	r3, #15
 80008f6:	400b      	ands	r3, r1
 80008f8:	3b08      	subs	r3, #8
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	3306      	adds	r3, #6
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	18d3      	adds	r3, r2, r3
 8000902:	3304      	adds	r3, #4
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	1dfa      	adds	r2, r7, #7
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	0011      	movs	r1, r2
 800090c:	2203      	movs	r2, #3
 800090e:	400a      	ands	r2, r1
 8000910:	00d2      	lsls	r2, r2, #3
 8000912:	21ff      	movs	r1, #255	; 0xff
 8000914:	4091      	lsls	r1, r2
 8000916:	000a      	movs	r2, r1
 8000918:	43d2      	mvns	r2, r2
 800091a:	401a      	ands	r2, r3
 800091c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	019b      	lsls	r3, r3, #6
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	401a      	ands	r2, r3
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	0018      	movs	r0, r3
 800092c:	2303      	movs	r3, #3
 800092e:	4003      	ands	r3, r0
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <__NVIC_SetPriority+0xd8>)
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	001c      	movs	r4, r3
 800093c:	230f      	movs	r3, #15
 800093e:	4023      	ands	r3, r4
 8000940:	3b08      	subs	r3, #8
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	430a      	orrs	r2, r1
 8000946:	3306      	adds	r3, #6
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	18c3      	adds	r3, r0, r3
 800094c:	3304      	adds	r3, #4
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b003      	add	sp, #12
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	1e5a      	subs	r2, r3, #1
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	045b      	lsls	r3, r3, #17
 8000970:	429a      	cmp	r2, r3
 8000972:	d301      	bcc.n	8000978 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000974:	2301      	movs	r3, #1
 8000976:	e010      	b.n	800099a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <SysTick_Config+0x44>)
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	3a01      	subs	r2, #1
 800097e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000980:	2301      	movs	r3, #1
 8000982:	425b      	negs	r3, r3
 8000984:	2103      	movs	r1, #3
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff ff7c 	bl	8000884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <SysTick_Config+0x44>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SysTick_Config+0x44>)
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000998:	2300      	movs	r3, #0
}
 800099a:	0018      	movs	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	210f      	movs	r1, #15
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	1c02      	adds	r2, r0, #0
 80009b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	0011      	movs	r1, r2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff ff5d 	bl	8000884 <__NVIC_SetPriority>
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b004      	add	sp, #16
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	0002      	movs	r2, r0
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ff33 	bl	8000850 <__NVIC_EnableIRQ>
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff ffaf 	bl	8000960 <SysTick_Config>
 8000a02:	0003      	movs	r3, r0
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e077      	b.n	8000b0e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a3d      	ldr	r2, [pc, #244]	; (8000b18 <HAL_DMA_Init+0x10c>)
 8000a24:	4694      	mov	ip, r2
 8000a26:	4463      	add	r3, ip
 8000a28:	2114      	movs	r1, #20
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff fb68 	bl	8000100 <__udivsi3>
 8000a30:	0003      	movs	r3, r0
 8000a32:	009a      	lsls	r2, r3, #2
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2225      	movs	r2, #37	; 0x25
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4934      	ldr	r1, [pc, #208]	; (8000b1c <HAL_DMA_Init+0x110>)
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6819      	ldr	r1, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	431a      	orrs	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	431a      	orrs	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	431a      	orrs	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6a1b      	ldr	r3, [r3, #32]
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	430a      	orrs	r2, r1
 8000a84:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 f9c1 	bl	8000e10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	01db      	lsls	r3, r3, #7
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d102      	bne.n	8000aa0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa8:	213f      	movs	r1, #63	; 0x3f
 8000aaa:	400a      	ands	r2, r1
 8000aac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000ab6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d011      	beq.n	8000ae4 <HAL_DMA_Init+0xd8>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d80d      	bhi.n	8000ae4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f9cc 	bl	8000e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	e008      	b.n	8000af6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2225      	movs	r2, #37	; 0x25
 8000b00:	2101      	movs	r1, #1
 8000b02:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2224      	movs	r2, #36	; 0x24
 8000b08:	2100      	movs	r1, #0
 8000b0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	0018      	movs	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	bffdfff8 	.word	0xbffdfff8
 8000b1c:	ffff800f 	.word	0xffff800f

08000b20 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b2e:	2317      	movs	r3, #23
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2224      	movs	r2, #36	; 0x24
 8000b3a:	5c9b      	ldrb	r3, [r3, r2]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d101      	bne.n	8000b44 <HAL_DMA_Start_IT+0x24>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e06f      	b.n	8000c24 <HAL_DMA_Start_IT+0x104>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2224      	movs	r2, #36	; 0x24
 8000b48:	2101      	movs	r1, #1
 8000b4a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2225      	movs	r2, #37	; 0x25
 8000b50:	5c9b      	ldrb	r3, [r3, r2]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d157      	bne.n	8000c08 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2225      	movs	r2, #37	; 0x25
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2200      	movs	r2, #0
 8000b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2101      	movs	r1, #1
 8000b72:	438a      	bics	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	68b9      	ldr	r1, [r7, #8]
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f000 f907 	bl	8000d90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d008      	beq.n	8000b9c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	210e      	movs	r1, #14
 8000b96:	430a      	orrs	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	e00f      	b.n	8000bbc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	438a      	bics	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	210a      	movs	r1, #10
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	025b      	lsls	r3, r3, #9
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d008      	beq.n	8000bdc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d008      	beq.n	8000bf6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	0049      	lsls	r1, r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e00a      	b.n	8000c1e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2224      	movs	r2, #36	; 0x24
 8000c12:	2100      	movs	r1, #0
 8000c14:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000c16:	2317      	movs	r3, #23
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000c1e:	2317      	movs	r3, #23
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	781b      	ldrb	r3, [r3, #0]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b006      	add	sp, #24
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000c34:	4b55      	ldr	r3, [pc, #340]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	221c      	movs	r2, #28
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	0013      	movs	r3, r2
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4013      	ands	r3, r2
 8000c54:	d027      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x7a>
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	2204      	movs	r2, #4
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d023      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2220      	movs	r2, #32
 8000c66:	4013      	ands	r3, r2
 8000c68:	d107      	bne.n	8000c7a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2104      	movs	r1, #4
 8000c76:	438a      	bics	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000c7a:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000c7c:	6859      	ldr	r1, [r3, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	221c      	movs	r2, #28
 8000c84:	4013      	ands	r3, r2
 8000c86:	2204      	movs	r2, #4
 8000c88:	409a      	lsls	r2, r3
 8000c8a:	4b40      	ldr	r3, [pc, #256]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d100      	bne.n	8000c9a <HAL_DMA_IRQHandler+0x6e>
 8000c98:	e073      	b.n	8000d82 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	0010      	movs	r0, r2
 8000ca2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000ca4:	e06d      	b.n	8000d82 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	221c      	movs	r2, #28
 8000cac:	4013      	ands	r3, r2
 8000cae:	2202      	movs	r2, #2
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	d02e      	beq.n	8000d18 <HAL_DMA_IRQHandler+0xec>
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d02a      	beq.n	8000d18 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2220      	movs	r2, #32
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d10b      	bne.n	8000ce6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	210a      	movs	r1, #10
 8000cda:	438a      	bics	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2225      	movs	r2, #37	; 0x25
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000ce8:	6859      	ldr	r1, [r3, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	221c      	movs	r2, #28
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2224      	movs	r2, #36	; 0x24
 8000d00:	2100      	movs	r1, #0
 8000d02:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d03a      	beq.n	8000d82 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	0010      	movs	r0, r2
 8000d14:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000d16:	e034      	b.n	8000d82 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	221c      	movs	r2, #28
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2208      	movs	r2, #8
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d02b      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x158>
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2208      	movs	r2, #8
 8000d30:	4013      	ands	r3, r2
 8000d32:	d027      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	210e      	movs	r1, #14
 8000d40:	438a      	bics	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000d46:	6859      	ldr	r1, [r3, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	221c      	movs	r2, #28
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2201      	movs	r2, #1
 8000d52:	409a      	lsls	r2, r3
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000d56:	430a      	orrs	r2, r1
 8000d58:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2225      	movs	r2, #37	; 0x25
 8000d64:	2101      	movs	r1, #1
 8000d66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2224      	movs	r2, #36	; 0x24
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	0010      	movs	r0, r2
 8000d80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46c0      	nop			; (mov r8, r8)
}
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b004      	add	sp, #16
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40020000 	.word	0x40020000

08000d90 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000da6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000db8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <DMA_SetConfig+0x7c>)
 8000dbc:	6859      	ldr	r1, [r3, #4]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	221c      	movs	r2, #28
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <DMA_SetConfig+0x7c>)
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b10      	cmp	r3, #16
 8000dde:	d108      	bne.n	8000df2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000df0:	e007      	b.n	8000e02 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	60da      	str	r2, [r3, #12]
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b004      	add	sp, #16
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	40020000 	.word	0x40020000

08000e10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000e20:	4694      	mov	ip, r2
 8000e22:	4463      	add	r3, ip
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	001a      	movs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	001a      	movs	r2, r3
 8000e32:	23ff      	movs	r3, #255	; 0xff
 8000e34:	4013      	ands	r3, r2
 8000e36:	3b08      	subs	r3, #8
 8000e38:	2114      	movs	r1, #20
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff f960 	bl	8000100 <__udivsi3>
 8000e40:	0003      	movs	r3, r0
 8000e42:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000e48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	221f      	movs	r2, #31
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2201      	movs	r2, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b004      	add	sp, #16
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	10008200 	.word	0x10008200
 8000e64:	40020880 	.word	0x40020880

08000e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	223f      	movs	r2, #63	; 0x3f
 8000e76:	4013      	ands	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000e7e:	4694      	mov	ip, r2
 8000e80:	4463      	add	r3, ip
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	001a      	movs	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000e8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	4013      	ands	r3, r2
 8000e98:	2201      	movs	r2, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b004      	add	sp, #16
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	1000823f 	.word	0x1000823f
 8000eac:	40020940 	.word	0x40020940

08000eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebe:	e147      	b.n	8001150 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	000a      	movs	r2, r1
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <HAL_GPIO_Init+0x28>
 8000ed6:	e138      	b.n	800114a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2203      	movs	r2, #3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d005      	beq.n	8000ef0 <HAL_GPIO_Init+0x40>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d130      	bne.n	8000f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	409a      	lsls	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	409a      	lsls	r2, r3
 8000f12:	0013      	movs	r3, r2
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f26:	2201      	movs	r2, #1
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2203      	movs	r2, #3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d017      	beq.n	8000f8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2203      	movs	r2, #3
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d123      	bne.n	8000fe2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	58d3      	ldr	r3, [r2, r3]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2207      	movs	r2, #7
 8000fac:	4013      	ands	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	6939      	ldr	r1, [r7, #16]
 8000fe0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2203      	movs	r2, #3
 8001000:	401a      	ands	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	23c0      	movs	r3, #192	; 0xc0
 800101c:	029b      	lsls	r3, r3, #10
 800101e:	4013      	ands	r3, r2
 8001020:	d100      	bne.n	8001024 <HAL_GPIO_Init+0x174>
 8001022:	e092      	b.n	800114a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001024:	4a50      	ldr	r2, [pc, #320]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3318      	adds	r3, #24
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	589b      	ldr	r3, [r3, r2]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2203      	movs	r2, #3
 8001036:	4013      	ands	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	220f      	movs	r2, #15
 800103c:	409a      	lsls	r2, r3
 800103e:	0013      	movs	r3, r2
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	23a0      	movs	r3, #160	; 0xa0
 800104c:	05db      	lsls	r3, r3, #23
 800104e:	429a      	cmp	r2, r3
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x1ca>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	; (800116c <HAL_GPIO_Init+0x2bc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x1c6>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a44      	ldr	r2, [pc, #272]	; (8001170 <HAL_GPIO_Init+0x2c0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x1c2>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a43      	ldr	r2, [pc, #268]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x1be>
 800106a:	2303      	movs	r3, #3
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x1cc>
 800106e:	2305      	movs	r3, #5
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x1cc>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x1cc>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x1cc>
 800107a:	2300      	movs	r3, #0
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	2103      	movs	r1, #3
 8001080:	400a      	ands	r2, r1
 8001082:	00d2      	lsls	r2, r2, #3
 8001084:	4093      	lsls	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800108c:	4936      	ldr	r1, [pc, #216]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3318      	adds	r3, #24
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109a:	4b33      	ldr	r3, [pc, #204]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43da      	mvns	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	035b      	lsls	r3, r3, #13
 80010b2:	4013      	ands	r3, r2
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43da      	mvns	r2, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	039b      	lsls	r3, r3, #14
 80010dc:	4013      	ands	r3, r2
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010f0:	2384      	movs	r3, #132	; 0x84
 80010f2:	58d3      	ldr	r3, [r2, r3]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43da      	mvns	r2, r3
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	029b      	lsls	r3, r3, #10
 8001108:	4013      	ands	r3, r2
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001114:	4914      	ldr	r1, [pc, #80]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 8001116:	2284      	movs	r2, #132	; 0x84
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	58d3      	ldr	r3, [r2, r3]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43da      	mvns	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	025b      	lsls	r3, r3, #9
 8001136:	4013      	ands	r3, r2
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001142:	4909      	ldr	r1, [pc, #36]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	40da      	lsrs	r2, r3
 8001158:	1e13      	subs	r3, r2, #0
 800115a:	d000      	beq.n	800115e <HAL_GPIO_Init+0x2ae>
 800115c:	e6b0      	b.n	8000ec0 <HAL_GPIO_Init+0x10>
  }
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b006      	add	sp, #24
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021800 	.word	0x40021800
 800116c:	50000400 	.word	0x50000400
 8001170:	50000800 	.word	0x50000800
 8001174:	50000c00 	.word	0x50000c00

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	0008      	movs	r0, r1
 8001182:	0011      	movs	r1, r2
 8001184:	1cbb      	adds	r3, r7, #2
 8001186:	1c02      	adds	r2, r0, #0
 8001188:	801a      	strh	r2, [r3, #0]
 800118a:	1c7b      	adds	r3, r7, #1
 800118c:	1c0a      	adds	r2, r1, #0
 800118e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001190:	1c7b      	adds	r3, r7, #1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001198:	1cbb      	adds	r3, r7, #2
 800119a:	881a      	ldrh	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a0:	e003      	b.n	80011aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011a2:	1cbb      	adds	r3, r7, #2
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b002      	add	sp, #8
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a19      	ldr	r2, [pc, #100]	; (8001228 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	0019      	movs	r1, r3
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d11f      	bne.n	8001218 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	0013      	movs	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	189b      	adds	r3, r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4912      	ldr	r1, [pc, #72]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7fe ff8a 	bl	8000100 <__udivsi3>
 80011ec:	0003      	movs	r3, r0
 80011ee:	3301      	adds	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f2:	e008      	b.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e001      	b.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e009      	b.n	800121a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	401a      	ands	r2, r3
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	429a      	cmp	r2, r3
 8001216:	d0ed      	beq.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b004      	add	sp, #16
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	40007000 	.word	0x40007000
 8001228:	fffff9ff 	.word	0xfffff9ff
 800122c:	20000000 	.word	0x20000000
 8001230:	000f4240 	.word	0x000f4240

08001234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e2f3      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2201      	movs	r2, #1
 800124c:	4013      	ands	r3, r2
 800124e:	d100      	bne.n	8001252 <HAL_RCC_OscConfig+0x1e>
 8001250:	e07c      	b.n	800134c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001252:	4bc3      	ldr	r3, [pc, #780]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2238      	movs	r2, #56	; 0x38
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800125c:	4bc0      	ldr	r3, [pc, #768]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2203      	movs	r2, #3
 8001262:	4013      	ands	r3, r2
 8001264:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2b10      	cmp	r3, #16
 800126a:	d102      	bne.n	8001272 <HAL_RCC_OscConfig+0x3e>
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d002      	beq.n	8001278 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2b08      	cmp	r3, #8
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4bb9      	ldr	r3, [pc, #740]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	029b      	lsls	r3, r3, #10
 8001280:	4013      	ands	r3, r2
 8001282:	d062      	beq.n	800134a <HAL_RCC_OscConfig+0x116>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d15e      	bne.n	800134a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e2ce      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	025b      	lsls	r3, r3, #9
 8001298:	429a      	cmp	r2, r3
 800129a:	d107      	bne.n	80012ac <HAL_RCC_OscConfig+0x78>
 800129c:	4bb0      	ldr	r3, [pc, #704]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4baf      	ldr	r3, [pc, #700]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	0249      	lsls	r1, r1, #9
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e020      	b.n	80012ee <HAL_RCC_OscConfig+0xba>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	23a0      	movs	r3, #160	; 0xa0
 80012b2:	02db      	lsls	r3, r3, #11
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d10e      	bne.n	80012d6 <HAL_RCC_OscConfig+0xa2>
 80012b8:	4ba9      	ldr	r3, [pc, #676]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4ba8      	ldr	r3, [pc, #672]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	02c9      	lsls	r1, r1, #11
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	4ba6      	ldr	r3, [pc, #664]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4ba5      	ldr	r3, [pc, #660]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	2180      	movs	r1, #128	; 0x80
 80012ce:	0249      	lsls	r1, r1, #9
 80012d0:	430a      	orrs	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	e00b      	b.n	80012ee <HAL_RCC_OscConfig+0xba>
 80012d6:	4ba2      	ldr	r3, [pc, #648]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4ba1      	ldr	r3, [pc, #644]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80012dc:	49a1      	ldr	r1, [pc, #644]	; (8001564 <HAL_RCC_OscConfig+0x330>)
 80012de:	400a      	ands	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	4b9f      	ldr	r3, [pc, #636]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b9e      	ldr	r3, [pc, #632]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	499f      	ldr	r1, [pc, #636]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012ea:	400a      	ands	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d014      	beq.n	8001320 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f6:	f7ff fa7d 	bl	80007f4 <HAL_GetTick>
 80012fa:	0003      	movs	r3, r0
 80012fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fa78 	bl	80007f4 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e28d      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001312:	4b93      	ldr	r3, [pc, #588]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	029b      	lsls	r3, r3, #10
 800131a:	4013      	ands	r3, r2
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0xcc>
 800131e:	e015      	b.n	800134c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fa68 	bl	80007f4 <HAL_GetTick>
 8001324:	0003      	movs	r3, r0
 8001326:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800132a:	f7ff fa63 	bl	80007f4 <HAL_GetTick>
 800132e:	0002      	movs	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b64      	cmp	r3, #100	; 0x64
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e278      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800133c:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	029b      	lsls	r3, r3, #10
 8001344:	4013      	ands	r3, r2
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0xf6>
 8001348:	e000      	b.n	800134c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2202      	movs	r2, #2
 8001352:	4013      	ands	r3, r2
 8001354:	d100      	bne.n	8001358 <HAL_RCC_OscConfig+0x124>
 8001356:	e099      	b.n	800148c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001358:	4b81      	ldr	r3, [pc, #516]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2238      	movs	r2, #56	; 0x38
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001362:	4b7f      	ldr	r3, [pc, #508]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2203      	movs	r2, #3
 8001368:	4013      	ands	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b10      	cmp	r3, #16
 8001370:	d102      	bne.n	8001378 <HAL_RCC_OscConfig+0x144>
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d002      	beq.n	800137e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d135      	bne.n	80013ea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137e:	4b78      	ldr	r3, [pc, #480]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4013      	ands	r3, r2
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x162>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e24b      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b72      	ldr	r3, [pc, #456]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a74      	ldr	r2, [pc, #464]	; (800156c <HAL_RCC_OscConfig+0x338>)
 800139c:	4013      	ands	r3, r2
 800139e:	0019      	movs	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	021a      	lsls	r2, r3, #8
 80013a6:	4b6e      	ldr	r3, [pc, #440]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80013a8:	430a      	orrs	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d112      	bne.n	80013d8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013b2:	4b6b      	ldr	r3, [pc, #428]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6e      	ldr	r2, [pc, #440]	; (8001570 <HAL_RCC_OscConfig+0x33c>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	4b67      	ldr	r3, [pc, #412]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013c6:	4b66      	ldr	r3, [pc, #408]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	0adb      	lsrs	r3, r3, #11
 80013cc:	2207      	movs	r2, #7
 80013ce:	4013      	ands	r3, r2
 80013d0:	4a68      	ldr	r2, [pc, #416]	; (8001574 <HAL_RCC_OscConfig+0x340>)
 80013d2:	40da      	lsrs	r2, r3
 80013d4:	4b68      	ldr	r3, [pc, #416]	; (8001578 <HAL_RCC_OscConfig+0x344>)
 80013d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013d8:	4b68      	ldr	r3, [pc, #416]	; (800157c <HAL_RCC_OscConfig+0x348>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff f9ad 	bl	800073c <HAL_InitTick>
 80013e2:	1e03      	subs	r3, r0, #0
 80013e4:	d051      	beq.n	800148a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e221      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d030      	beq.n	8001454 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013f2:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a5e      	ldr	r2, [pc, #376]	; (8001570 <HAL_RCC_OscConfig+0x33c>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	0019      	movs	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	4b57      	ldr	r3, [pc, #348]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b55      	ldr	r3, [pc, #340]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0049      	lsls	r1, r1, #1
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff f9ee 	bl	80007f4 <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff f9e9 	bl	80007f4 <HAL_GetTick>
 8001422:	0002      	movs	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e1fe      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001430:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4013      	ands	r3, r2
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b48      	ldr	r3, [pc, #288]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a4a      	ldr	r2, [pc, #296]	; (800156c <HAL_RCC_OscConfig+0x338>)
 8001442:	4013      	ands	r3, r2
 8001444:	0019      	movs	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	021a      	lsls	r2, r3, #8
 800144c:	4b44      	ldr	r3, [pc, #272]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800144e:	430a      	orrs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	e01b      	b.n	800148c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001454:	4b42      	ldr	r3, [pc, #264]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800145a:	4949      	ldr	r1, [pc, #292]	; (8001580 <HAL_RCC_OscConfig+0x34c>)
 800145c:	400a      	ands	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff f9c8 	bl	80007f4 <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
 8001466:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff f9c3 	bl	80007f4 <HAL_GetTick>
 800146e:	0002      	movs	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e1d8      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4013      	ands	r3, r2
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x236>
 8001488:	e000      	b.n	800148c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800148a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2208      	movs	r2, #8
 8001492:	4013      	ands	r3, r2
 8001494:	d047      	beq.n	8001526 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001496:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2238      	movs	r2, #56	; 0x38
 800149c:	4013      	ands	r3, r2
 800149e:	2b18      	cmp	r3, #24
 80014a0:	d10a      	bne.n	80014b8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	2202      	movs	r2, #2
 80014a8:	4013      	ands	r3, r2
 80014aa:	d03c      	beq.n	8001526 <HAL_RCC_OscConfig+0x2f2>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d138      	bne.n	8001526 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e1ba      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d019      	beq.n	80014f4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80014c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	430a      	orrs	r2, r1
 80014ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff f992 	bl	80007f4 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff f98d 	bl	80007f4 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1a2      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ec:	2202      	movs	r2, #2
 80014ee:	4013      	ands	r3, r2
 80014f0:	d0f1      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2a2>
 80014f2:	e018      	b.n	8001526 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	438a      	bics	r2, r1
 80014fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff f978 	bl	80007f4 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff f973 	bl	80007f4 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e188      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800151e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001520:	2202      	movs	r2, #2
 8001522:	4013      	ands	r3, r2
 8001524:	d1f1      	bne.n	800150a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2204      	movs	r2, #4
 800152c:	4013      	ands	r3, r2
 800152e:	d100      	bne.n	8001532 <HAL_RCC_OscConfig+0x2fe>
 8001530:	e0c6      	b.n	80016c0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001532:	231f      	movs	r3, #31
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2238      	movs	r2, #56	; 0x38
 8001540:	4013      	ands	r3, r2
 8001542:	2b20      	cmp	r3, #32
 8001544:	d11e      	bne.n	8001584 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_OscConfig+0x32c>)
 8001548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d100      	bne.n	8001552 <HAL_RCC_OscConfig+0x31e>
 8001550:	e0b6      	b.n	80016c0 <HAL_RCC_OscConfig+0x48c>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d000      	beq.n	800155c <HAL_RCC_OscConfig+0x328>
 800155a:	e0b1      	b.n	80016c0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e166      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
 8001560:	40021000 	.word	0x40021000
 8001564:	fffeffff 	.word	0xfffeffff
 8001568:	fffbffff 	.word	0xfffbffff
 800156c:	ffff80ff 	.word	0xffff80ff
 8001570:	ffffc7ff 	.word	0xffffc7ff
 8001574:	00f42400 	.word	0x00f42400
 8001578:	20000000 	.word	0x20000000
 800157c:	20000004 	.word	0x20000004
 8001580:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001584:	4bac      	ldr	r3, [pc, #688]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 8001586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	055b      	lsls	r3, r3, #21
 800158c:	4013      	ands	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_RCC_OscConfig+0x360>
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x362>
 8001594:	2300      	movs	r3, #0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d011      	beq.n	80015be <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4ba7      	ldr	r3, [pc, #668]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800159c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800159e:	4ba6      	ldr	r3, [pc, #664]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	0549      	lsls	r1, r1, #21
 80015a4:	430a      	orrs	r2, r1
 80015a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80015a8:	4ba3      	ldr	r3, [pc, #652]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80015aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	055b      	lsls	r3, r3, #21
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015b6:	231f      	movs	r3, #31
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015be:	4b9f      	ldr	r3, [pc, #636]	; (800183c <HAL_RCC_OscConfig+0x608>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	d11a      	bne.n	8001600 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ca:	4b9c      	ldr	r3, [pc, #624]	; (800183c <HAL_RCC_OscConfig+0x608>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b9b      	ldr	r3, [pc, #620]	; (800183c <HAL_RCC_OscConfig+0x608>)
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	0049      	lsls	r1, r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015d8:	f7ff f90c 	bl	80007f4 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e2:	f7ff f907 	bl	80007f4 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e11c      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f4:	4b91      	ldr	r3, [pc, #580]	; (800183c <HAL_RCC_OscConfig+0x608>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4013      	ands	r3, r2
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x3e2>
 8001608:	4b8b      	ldr	r3, [pc, #556]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800160a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800160c:	4b8a      	ldr	r3, [pc, #552]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800160e:	2101      	movs	r1, #1
 8001610:	430a      	orrs	r2, r1
 8001612:	65da      	str	r2, [r3, #92]	; 0x5c
 8001614:	e01c      	b.n	8001650 <HAL_RCC_OscConfig+0x41c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x404>
 800161e:	4b86      	ldr	r3, [pc, #536]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 8001620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001622:	4b85      	ldr	r3, [pc, #532]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 8001624:	2104      	movs	r1, #4
 8001626:	430a      	orrs	r2, r1
 8001628:	65da      	str	r2, [r3, #92]	; 0x5c
 800162a:	4b83      	ldr	r3, [pc, #524]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800162c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800162e:	4b82      	ldr	r3, [pc, #520]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 8001630:	2101      	movs	r1, #1
 8001632:	430a      	orrs	r2, r1
 8001634:	65da      	str	r2, [r3, #92]	; 0x5c
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0x41c>
 8001638:	4b7f      	ldr	r3, [pc, #508]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800163a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800163c:	4b7e      	ldr	r3, [pc, #504]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800163e:	2101      	movs	r1, #1
 8001640:	438a      	bics	r2, r1
 8001642:	65da      	str	r2, [r3, #92]	; 0x5c
 8001644:	4b7c      	ldr	r3, [pc, #496]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 8001646:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001648:	4b7b      	ldr	r3, [pc, #492]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800164a:	2104      	movs	r1, #4
 800164c:	438a      	bics	r2, r1
 800164e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d014      	beq.n	8001682 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff f8cc 	bl	80007f4 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001660:	e009      	b.n	8001676 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff f8c7 	bl	80007f4 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	4a74      	ldr	r2, [pc, #464]	; (8001840 <HAL_RCC_OscConfig+0x60c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0db      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001676:	4b70      	ldr	r3, [pc, #448]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	2202      	movs	r2, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x42e>
 8001680:	e013      	b.n	80016aa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff f8b7 	bl	80007f4 <HAL_GetTick>
 8001686:	0003      	movs	r3, r0
 8001688:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800168a:	e009      	b.n	80016a0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff f8b2 	bl	80007f4 <HAL_GetTick>
 8001690:	0002      	movs	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	4a6a      	ldr	r2, [pc, #424]	; (8001840 <HAL_RCC_OscConfig+0x60c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e0c6      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016a0:	4b65      	ldr	r3, [pc, #404]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	2202      	movs	r2, #2
 80016a6:	4013      	ands	r3, r2
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016aa:	231f      	movs	r3, #31
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016b4:	4b60      	ldr	r3, [pc, #384]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80016b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b8:	4b5f      	ldr	r3, [pc, #380]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80016ba:	4962      	ldr	r1, [pc, #392]	; (8001844 <HAL_RCC_OscConfig+0x610>)
 80016bc:	400a      	ands	r2, r1
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d100      	bne.n	80016ca <HAL_RCC_OscConfig+0x496>
 80016c8:	e0b0      	b.n	800182c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ca:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2238      	movs	r2, #56	; 0x38
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b10      	cmp	r3, #16
 80016d4:	d100      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4a4>
 80016d6:	e078      	b.n	80017ca <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d153      	bne.n	8001788 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b55      	ldr	r3, [pc, #340]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b54      	ldr	r3, [pc, #336]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80016e6:	4958      	ldr	r1, [pc, #352]	; (8001848 <HAL_RCC_OscConfig+0x614>)
 80016e8:	400a      	ands	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff f882 	bl	80007f4 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff f87d 	bl	80007f4 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e092      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001708:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	049b      	lsls	r3, r3, #18
 8001710:	4013      	ands	r3, r2
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001714:	4b48      	ldr	r3, [pc, #288]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4a4c      	ldr	r2, [pc, #304]	; (800184c <HAL_RCC_OscConfig+0x618>)
 800171a:	4013      	ands	r3, r2
 800171c:	0019      	movs	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1a      	ldr	r2, [r3, #32]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	431a      	orrs	r2, r3
 800173c:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800173e:	430a      	orrs	r2, r1
 8001740:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	0449      	lsls	r1, r1, #17
 800174c:	430a      	orrs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001750:	4b39      	ldr	r3, [pc, #228]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	0549      	lsls	r1, r1, #21
 800175a:	430a      	orrs	r2, r1
 800175c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff f849 	bl	80007f4 <HAL_GetTick>
 8001762:	0003      	movs	r3, r0
 8001764:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff f844 	bl	80007f4 <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e059      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177a:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	049b      	lsls	r3, r3, #18
 8001782:	4013      	ands	r3, r2
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x534>
 8001786:	e051      	b.n	800182c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 800178e:	492e      	ldr	r1, [pc, #184]	; (8001848 <HAL_RCC_OscConfig+0x614>)
 8001790:	400a      	ands	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff f82e 	bl	80007f4 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff f829 	bl	80007f4 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e03e      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	049b      	lsls	r3, r3, #18
 80017b8:	4013      	ands	r3, r2
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80017c2:	4923      	ldr	r1, [pc, #140]	; (8001850 <HAL_RCC_OscConfig+0x61c>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	e030      	b.n	800182c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e02b      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_RCC_OscConfig+0x604>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2203      	movs	r2, #3
 80017e0:	401a      	ands	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d11e      	bne.n	8001828 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2270      	movs	r2, #112	; 0x70
 80017ee:	401a      	ands	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d117      	bne.n	8001828 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	23fe      	movs	r3, #254	; 0xfe
 80017fc:	01db      	lsls	r3, r3, #7
 80017fe:	401a      	ands	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d10e      	bne.n	8001828 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	23f8      	movs	r3, #248	; 0xf8
 800180e:	039b      	lsls	r3, r3, #14
 8001810:	401a      	ands	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d106      	bne.n	8001828 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	0f5b      	lsrs	r3, r3, #29
 800181e:	075a      	lsls	r2, r3, #29
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b008      	add	sp, #32
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	40021000 	.word	0x40021000
 800183c:	40007000 	.word	0x40007000
 8001840:	00001388 	.word	0x00001388
 8001844:	efffffff 	.word	0xefffffff
 8001848:	feffffff 	.word	0xfeffffff
 800184c:	1fc1808c 	.word	0x1fc1808c
 8001850:	effefffc 	.word	0xeffefffc

08001854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0e9      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2207      	movs	r2, #7
 800186e:	4013      	ands	r3, r2
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d91e      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2207      	movs	r2, #7
 800187c:	4393      	bics	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	4b70      	ldr	r3, [pc, #448]	; (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001888:	f7fe ffb4 	bl	80007f4 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001890:	e009      	b.n	80018a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001892:	f7fe ffaf 	bl	80007f4 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4a6a      	ldr	r2, [pc, #424]	; (8001a48 <HAL_RCC_ClockConfig+0x1f4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e0ca      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2207      	movs	r2, #7
 80018ac:	4013      	ands	r3, r2
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1ee      	bne.n	8001892 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d015      	beq.n	80018ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2204      	movs	r2, #4
 80018c4:	4013      	ands	r3, r2
 80018c6:	d006      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018c8:	4b60      	ldr	r3, [pc, #384]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 80018ce:	21e0      	movs	r1, #224	; 0xe0
 80018d0:	01c9      	lsls	r1, r1, #7
 80018d2:	430a      	orrs	r2, r1
 80018d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d6:	4b5d      	ldr	r3, [pc, #372]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	4a5d      	ldr	r2, [pc, #372]	; (8001a50 <HAL_RCC_ClockConfig+0x1fc>)
 80018dc:	4013      	ands	r3, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	4b59      	ldr	r3, [pc, #356]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2201      	movs	r2, #1
 80018f0:	4013      	ands	r3, r2
 80018f2:	d057      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d107      	bne.n	800190c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fc:	4b53      	ldr	r3, [pc, #332]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	029b      	lsls	r3, r3, #10
 8001904:	4013      	ands	r3, r2
 8001906:	d12b      	bne.n	8001960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e097      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d107      	bne.n	8001924 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001914:	4b4d      	ldr	r3, [pc, #308]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	049b      	lsls	r3, r3, #18
 800191c:	4013      	ands	r3, r2
 800191e:	d11f      	bne.n	8001960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e08b      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d107      	bne.n	800193c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192c:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4013      	ands	r3, r2
 8001936:	d113      	bne.n	8001960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e07f      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d106      	bne.n	8001952 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001944:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 8001946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001948:	2202      	movs	r2, #2
 800194a:	4013      	ands	r3, r2
 800194c:	d108      	bne.n	8001960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e074      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001952:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	2202      	movs	r2, #2
 8001958:	4013      	ands	r3, r2
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e06d      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001960:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2207      	movs	r2, #7
 8001966:	4393      	bics	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001974:	f7fe ff3e 	bl	80007f4 <HAL_GetTick>
 8001978:	0003      	movs	r3, r0
 800197a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197c:	e009      	b.n	8001992 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197e:	f7fe ff39 	bl	80007f4 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	4a2f      	ldr	r2, [pc, #188]	; (8001a48 <HAL_RCC_ClockConfig+0x1f4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e054      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2238      	movs	r2, #56	; 0x38
 8001998:	401a      	ands	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d1ec      	bne.n	800197e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2207      	movs	r2, #7
 80019aa:	4013      	ands	r3, r2
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d21e      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2207      	movs	r2, #7
 80019b8:	4393      	bics	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019c4:	f7fe ff16 	bl	80007f4 <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019cc:	e009      	b.n	80019e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ce:	f7fe ff11 	bl	80007f4 <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_RCC_ClockConfig+0x1f4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e02c      	b.n	8001a3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2207      	movs	r2, #7
 80019e8:	4013      	ands	r3, r2
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d1ee      	bne.n	80019ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2204      	movs	r2, #4
 80019f6:	4013      	ands	r3, r2
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <HAL_RCC_ClockConfig+0x200>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	0019      	movs	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a0e:	f000 f829 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 8001a12:	0001      	movs	r1, r0
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_RCC_ClockConfig+0x204>)
 8001a20:	0092      	lsls	r2, r2, #2
 8001a22:	58d3      	ldr	r3, [r2, r3]
 8001a24:	221f      	movs	r2, #31
 8001a26:	4013      	ands	r3, r2
 8001a28:	000a      	movs	r2, r1
 8001a2a:	40da      	lsrs	r2, r3
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_ClockConfig+0x208>)
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_ClockConfig+0x20c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7fe fe81 	bl	800073c <HAL_InitTick>
 8001a3a:	0003      	movs	r3, r0
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b004      	add	sp, #16
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40022000 	.word	0x40022000
 8001a48:	00001388 	.word	0x00001388
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	fffff0ff 	.word	0xfffff0ff
 8001a54:	ffff8fff 	.word	0xffff8fff
 8001a58:	08002f18 	.word	0x08002f18
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000004 	.word	0x20000004

08001a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2238      	movs	r2, #56	; 0x38
 8001a70:	4013      	ands	r3, r2
 8001a72:	d10f      	bne.n	8001a94 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a74:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0adb      	lsrs	r3, r3, #11
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2201      	movs	r2, #1
 8001a80:	409a      	lsls	r2, r3
 8001a82:	0013      	movs	r3, r2
 8001a84:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a86:	6839      	ldr	r1, [r7, #0]
 8001a88:	4835      	ldr	r0, [pc, #212]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a8a:	f7fe fb39 	bl	8000100 <__udivsi3>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	e05d      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a94:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2238      	movs	r2, #56	; 0x38
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aa0:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x100>)
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	e054      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2238      	movs	r2, #56	; 0x38
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d138      	bne.n	8001b24 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d10d      	bne.n	8001aec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	4824      	ldr	r0, [pc, #144]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ad4:	f7fe fb14 	bl	8000100 <__udivsi3>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	0019      	movs	r1, r3
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	227f      	movs	r2, #127	; 0x7f
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	434b      	muls	r3, r1
 8001ae8:	617b      	str	r3, [r7, #20]
        break;
 8001aea:	e00d      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	481c      	ldr	r0, [pc, #112]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001af0:	f7fe fb06 	bl	8000100 <__udivsi3>
 8001af4:	0003      	movs	r3, r0
 8001af6:	0019      	movs	r1, r3
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	227f      	movs	r2, #127	; 0x7f
 8001b00:	4013      	ands	r3, r2
 8001b02:	434b      	muls	r3, r1
 8001b04:	617b      	str	r3, [r7, #20]
        break;
 8001b06:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0f5b      	lsrs	r3, r3, #29
 8001b0e:	2207      	movs	r2, #7
 8001b10:	4013      	ands	r3, r2
 8001b12:	3301      	adds	r3, #1
 8001b14:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	6978      	ldr	r0, [r7, #20]
 8001b1a:	f7fe faf1 	bl	8000100 <__udivsi3>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	e015      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2238      	movs	r2, #56	; 0x38
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d103      	bne.n	8001b38 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2238      	movs	r2, #56	; 0x38
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b18      	cmp	r3, #24
 8001b42:	d103      	bne.n	8001b4c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b44:	23fa      	movs	r3, #250	; 0xfa
 8001b46:	01db      	lsls	r3, r3, #7
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	e001      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b50:	693b      	ldr	r3, [r7, #16]
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b006      	add	sp, #24
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	00f42400 	.word	0x00f42400
 8001b64:	007a1200 	.word	0x007a1200

08001b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e04a      	b.n	8001c10 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	223d      	movs	r2, #61	; 0x3d
 8001b7e:	5c9b      	ldrb	r3, [r3, r2]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d107      	bne.n	8001b96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	223c      	movs	r2, #60	; 0x3c
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7fe fcd7 	bl	8000544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	223d      	movs	r2, #61	; 0x3d
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	0010      	movs	r0, r2
 8001baa:	f000 fd45 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2248      	movs	r2, #72	; 0x48
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	223e      	movs	r2, #62	; 0x3e
 8001bba:	2101      	movs	r1, #1
 8001bbc:	5499      	strb	r1, [r3, r2]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	223f      	movs	r2, #63	; 0x3f
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	5499      	strb	r1, [r3, r2]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	2101      	movs	r1, #1
 8001bcc:	5499      	strb	r1, [r3, r2]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2241      	movs	r2, #65	; 0x41
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	5499      	strb	r1, [r3, r2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2242      	movs	r2, #66	; 0x42
 8001bda:	2101      	movs	r1, #1
 8001bdc:	5499      	strb	r1, [r3, r2]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2243      	movs	r2, #67	; 0x43
 8001be2:	2101      	movs	r1, #1
 8001be4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2244      	movs	r2, #68	; 0x44
 8001bea:	2101      	movs	r1, #1
 8001bec:	5499      	strb	r1, [r3, r2]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2245      	movs	r2, #69	; 0x45
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	5499      	strb	r1, [r3, r2]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2246      	movs	r2, #70	; 0x46
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	5499      	strb	r1, [r3, r2]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2247      	movs	r2, #71	; 0x47
 8001c02:	2101      	movs	r1, #1
 8001c04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	223d      	movs	r2, #61	; 0x3d
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e04a      	b.n	8001cc0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	223d      	movs	r2, #61	; 0x3d
 8001c2e:	5c9b      	ldrb	r3, [r3, r2]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d107      	bne.n	8001c46 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	223c      	movs	r2, #60	; 0x3c
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 f841 	bl	8001cc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	223d      	movs	r2, #61	; 0x3d
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3304      	adds	r3, #4
 8001c56:	0019      	movs	r1, r3
 8001c58:	0010      	movs	r0, r2
 8001c5a:	f000 fced 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2248      	movs	r2, #72	; 0x48
 8001c62:	2101      	movs	r1, #1
 8001c64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	223e      	movs	r2, #62	; 0x3e
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	5499      	strb	r1, [r3, r2]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	223f      	movs	r2, #63	; 0x3f
 8001c72:	2101      	movs	r1, #1
 8001c74:	5499      	strb	r1, [r3, r2]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2240      	movs	r2, #64	; 0x40
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	5499      	strb	r1, [r3, r2]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2241      	movs	r2, #65	; 0x41
 8001c82:	2101      	movs	r1, #1
 8001c84:	5499      	strb	r1, [r3, r2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2242      	movs	r2, #66	; 0x42
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	5499      	strb	r1, [r3, r2]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2243      	movs	r2, #67	; 0x43
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2244      	movs	r2, #68	; 0x44
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2245      	movs	r2, #69	; 0x45
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	5499      	strb	r1, [r3, r2]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2246      	movs	r2, #70	; 0x46
 8001caa:	2101      	movs	r1, #1
 8001cac:	5499      	strb	r1, [r3, r2]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2247      	movs	r2, #71	; 0x47
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	223d      	movs	r2, #61	; 0x3d
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b002      	add	sp, #8
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	1cbb      	adds	r3, r7, #2
 8001ce8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cea:	2317      	movs	r3, #23
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d108      	bne.n	8001d0a <HAL_TIM_PWM_Start_DMA+0x32>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	223e      	movs	r2, #62	; 0x3e
 8001cfc:	5c9b      	ldrb	r3, [r3, r2]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3b02      	subs	r3, #2
 8001d02:	425a      	negs	r2, r3
 8001d04:	4153      	adcs	r3, r2
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	e037      	b.n	8001d7a <HAL_TIM_PWM_Start_DMA+0xa2>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d108      	bne.n	8001d22 <HAL_TIM_PWM_Start_DMA+0x4a>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	223f      	movs	r2, #63	; 0x3f
 8001d14:	5c9b      	ldrb	r3, [r3, r2]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	3b02      	subs	r3, #2
 8001d1a:	425a      	negs	r2, r3
 8001d1c:	4153      	adcs	r3, r2
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	e02b      	b.n	8001d7a <HAL_TIM_PWM_Start_DMA+0xa2>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d108      	bne.n	8001d3a <HAL_TIM_PWM_Start_DMA+0x62>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2240      	movs	r2, #64	; 0x40
 8001d2c:	5c9b      	ldrb	r3, [r3, r2]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	3b02      	subs	r3, #2
 8001d32:	425a      	negs	r2, r3
 8001d34:	4153      	adcs	r3, r2
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	e01f      	b.n	8001d7a <HAL_TIM_PWM_Start_DMA+0xa2>
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d108      	bne.n	8001d52 <HAL_TIM_PWM_Start_DMA+0x7a>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2241      	movs	r2, #65	; 0x41
 8001d44:	5c9b      	ldrb	r3, [r3, r2]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	3b02      	subs	r3, #2
 8001d4a:	425a      	negs	r2, r3
 8001d4c:	4153      	adcs	r3, r2
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	e013      	b.n	8001d7a <HAL_TIM_PWM_Start_DMA+0xa2>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	d108      	bne.n	8001d6a <HAL_TIM_PWM_Start_DMA+0x92>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2242      	movs	r2, #66	; 0x42
 8001d5c:	5c9b      	ldrb	r3, [r3, r2]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	3b02      	subs	r3, #2
 8001d62:	425a      	negs	r2, r3
 8001d64:	4153      	adcs	r3, r2
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	e007      	b.n	8001d7a <HAL_TIM_PWM_Start_DMA+0xa2>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2243      	movs	r2, #67	; 0x43
 8001d6e:	5c9b      	ldrb	r3, [r3, r2]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	3b02      	subs	r3, #2
 8001d74:	425a      	negs	r2, r3
 8001d76:	4153      	adcs	r3, r2
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e183      	b.n	800208a <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d108      	bne.n	8001d9a <HAL_TIM_PWM_Start_DMA+0xc2>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	223e      	movs	r2, #62	; 0x3e
 8001d8c:	5c9b      	ldrb	r3, [r3, r2]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	425a      	negs	r2, r3
 8001d94:	4153      	adcs	r3, r2
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	e037      	b.n	8001e0a <HAL_TIM_PWM_Start_DMA+0x132>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d108      	bne.n	8001db2 <HAL_TIM_PWM_Start_DMA+0xda>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	223f      	movs	r2, #63	; 0x3f
 8001da4:	5c9b      	ldrb	r3, [r3, r2]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	425a      	negs	r2, r3
 8001dac:	4153      	adcs	r3, r2
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	e02b      	b.n	8001e0a <HAL_TIM_PWM_Start_DMA+0x132>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d108      	bne.n	8001dca <HAL_TIM_PWM_Start_DMA+0xf2>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	5c9b      	ldrb	r3, [r3, r2]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	425a      	negs	r2, r3
 8001dc4:	4153      	adcs	r3, r2
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	e01f      	b.n	8001e0a <HAL_TIM_PWM_Start_DMA+0x132>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b0c      	cmp	r3, #12
 8001dce:	d108      	bne.n	8001de2 <HAL_TIM_PWM_Start_DMA+0x10a>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2241      	movs	r2, #65	; 0x41
 8001dd4:	5c9b      	ldrb	r3, [r3, r2]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	425a      	negs	r2, r3
 8001ddc:	4153      	adcs	r3, r2
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	e013      	b.n	8001e0a <HAL_TIM_PWM_Start_DMA+0x132>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d108      	bne.n	8001dfa <HAL_TIM_PWM_Start_DMA+0x122>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2242      	movs	r2, #66	; 0x42
 8001dec:	5c9b      	ldrb	r3, [r3, r2]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	425a      	negs	r2, r3
 8001df4:	4153      	adcs	r3, r2
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	e007      	b.n	8001e0a <HAL_TIM_PWM_Start_DMA+0x132>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2243      	movs	r2, #67	; 0x43
 8001dfe:	5c9b      	ldrb	r3, [r3, r2]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	425a      	negs	r2, r3
 8001e06:	4153      	adcs	r3, r2
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d035      	beq.n	8001e7a <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_TIM_PWM_Start_DMA+0x144>
 8001e14:	1cbb      	adds	r3, r7, #2
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e134      	b.n	800208a <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d104      	bne.n	8001e30 <HAL_TIM_PWM_Start_DMA+0x158>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	223e      	movs	r2, #62	; 0x3e
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	5499      	strb	r1, [r3, r2]
 8001e2e:	e026      	b.n	8001e7e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d104      	bne.n	8001e40 <HAL_TIM_PWM_Start_DMA+0x168>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	223f      	movs	r2, #63	; 0x3f
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	5499      	strb	r1, [r3, r2]
 8001e3e:	e01e      	b.n	8001e7e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d104      	bne.n	8001e50 <HAL_TIM_PWM_Start_DMA+0x178>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2240      	movs	r2, #64	; 0x40
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	5499      	strb	r1, [r3, r2]
 8001e4e:	e016      	b.n	8001e7e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d104      	bne.n	8001e60 <HAL_TIM_PWM_Start_DMA+0x188>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2241      	movs	r2, #65	; 0x41
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	5499      	strb	r1, [r3, r2]
 8001e5e:	e00e      	b.n	8001e7e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d104      	bne.n	8001e70 <HAL_TIM_PWM_Start_DMA+0x198>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2242      	movs	r2, #66	; 0x42
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	5499      	strb	r1, [r3, r2]
 8001e6e:	e006      	b.n	8001e7e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2243      	movs	r2, #67	; 0x43
 8001e74:	2102      	movs	r1, #2
 8001e76:	5499      	strb	r1, [r3, r2]
 8001e78:	e001      	b.n	8001e7e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e105      	b.n	800208a <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d100      	bne.n	8001e86 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8001e84:	e080      	b.n	8001f88 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d900      	bls.n	8001e8e <HAL_TIM_PWM_Start_DMA+0x1b6>
 8001e8c:	e0a1      	b.n	8001fd2 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d054      	beq.n	8001f3e <HAL_TIM_PWM_Start_DMA+0x266>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d900      	bls.n	8001e9c <HAL_TIM_PWM_Start_DMA+0x1c4>
 8001e9a:	e09a      	b.n	8001fd2 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_PWM_Start_DMA+0x1d2>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d025      	beq.n	8001ef4 <HAL_TIM_PWM_Start_DMA+0x21c>
 8001ea8:	e093      	b.n	8001fd2 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	4a79      	ldr	r2, [pc, #484]	; (8002094 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	4a78      	ldr	r2, [pc, #480]	; (8002098 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001eb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	4a77      	ldr	r2, [pc, #476]	; (800209c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001ec0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3334      	adds	r3, #52	; 0x34
 8001ece:	001a      	movs	r2, r3
 8001ed0:	1cbb      	adds	r3, r7, #2
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	f7fe fe24 	bl	8000b20 <HAL_DMA_Start_IT>
 8001ed8:	1e03      	subs	r3, r0, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0d4      	b.n	800208a <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	0089      	lsls	r1, r1, #2
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	60da      	str	r2, [r3, #12]
      break;
 8001ef2:	e073      	b.n	8001fdc <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	4a66      	ldr	r2, [pc, #408]	; (8002094 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	4a65      	ldr	r2, [pc, #404]	; (8002098 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	4a64      	ldr	r2, [pc, #400]	; (800209c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3338      	adds	r3, #56	; 0x38
 8001f18:	001a      	movs	r2, r3
 8001f1a:	1cbb      	adds	r3, r7, #2
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f7fe fdff 	bl	8000b20 <HAL_DMA_Start_IT>
 8001f22:	1e03      	subs	r3, r0, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0af      	b.n	800208a <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	00c9      	lsls	r1, r1, #3
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]
      break;
 8001f3c:	e04e      	b.n	8001fdc <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	4a54      	ldr	r2, [pc, #336]	; (8002094 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	4a53      	ldr	r2, [pc, #332]	; (8002098 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	4a52      	ldr	r2, [pc, #328]	; (800209c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	333c      	adds	r3, #60	; 0x3c
 8001f62:	001a      	movs	r2, r3
 8001f64:	1cbb      	adds	r3, r7, #2
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	f7fe fdda 	bl	8000b20 <HAL_DMA_Start_IT>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e08a      	b.n	800208a <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	0109      	lsls	r1, r1, #4
 8001f82:	430a      	orrs	r2, r1
 8001f84:	60da      	str	r2, [r3, #12]
      break;
 8001f86:	e029      	b.n	8001fdc <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	4a41      	ldr	r2, [pc, #260]	; (8002094 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	4a40      	ldr	r2, [pc, #256]	; (8002098 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	4a3f      	ldr	r2, [pc, #252]	; (800209c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001f9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3340      	adds	r3, #64	; 0x40
 8001fac:	001a      	movs	r2, r3
 8001fae:	1cbb      	adds	r3, r7, #2
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	f7fe fdb5 	bl	8000b20 <HAL_DMA_Start_IT>
 8001fb6:	1e03      	subs	r3, r0, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e065      	b.n	800208a <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	0149      	lsls	r1, r1, #5
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	60da      	str	r2, [r3, #12]
      break;
 8001fd0:	e004      	b.n	8001fdc <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8001fd2:	2317      	movs	r3, #23
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
      break;
 8001fda:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001fdc:	2317      	movs	r3, #23
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d14e      	bne.n	8002084 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	2201      	movs	r2, #1
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 fed4 	bl	8002d9c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_TIM_PWM_Start_DMA+0x33a>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_TIM_PWM_Start_DMA+0x33a>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_TIM_PWM_Start_DMA+0x33e>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_TIM_PWM_Start_DMA+0x340>
 8002016:	2300      	movs	r3, #0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	0209      	lsls	r1, r1, #8
 800202a:	430a      	orrs	r2, r1
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d004      	beq.n	8002042 <HAL_TIM_PWM_Start_DMA+0x36a>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d116      	bne.n	8002070 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b06      	cmp	r3, #6
 8002052:	d016      	beq.n	8002082 <HAL_TIM_PWM_Start_DMA+0x3aa>
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	025b      	lsls	r3, r3, #9
 800205a:	429a      	cmp	r2, r3
 800205c:	d011      	beq.n	8002082 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206e:	e008      	b.n	8002082 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e000      	b.n	8002084 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002082:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002084:	2317      	movs	r3, #23
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	781b      	ldrb	r3, [r3, #0]
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b006      	add	sp, #24
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	08002525 	.word	0x08002525
 8002098:	080025cf 	.word	0x080025cf
 800209c:	08002491 	.word	0x08002491
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40014400 	.word	0x40014400
 80020a8:	40014800 	.word	0x40014800
 80020ac:	40000400 	.word	0x40000400
 80020b0:	00010007 	.word	0x00010007

080020b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c0:	2317      	movs	r3, #23
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	223c      	movs	r2, #60	; 0x3c
 80020cc:	5c9b      	ldrb	r3, [r3, r2]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e0e5      	b.n	80022a2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	223c      	movs	r2, #60	; 0x3c
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b14      	cmp	r3, #20
 80020e2:	d900      	bls.n	80020e6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80020e4:	e0d1      	b.n	800228a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	009a      	lsls	r2, r3, #2
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80020ec:	18d3      	adds	r3, r2, r3
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	0011      	movs	r1, r2
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 fb16 	bl	800272c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2108      	movs	r1, #8
 800210c:	430a      	orrs	r2, r1
 800210e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2104      	movs	r1, #4
 800211c:	438a      	bics	r2, r1
 800211e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6999      	ldr	r1, [r3, #24]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	619a      	str	r2, [r3, #24]
      break;
 8002132:	e0af      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	0011      	movs	r1, r2
 800213c:	0018      	movs	r0, r3
 800213e:	f000 fb75 	bl	800282c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	0109      	lsls	r1, r1, #4
 8002150:	430a      	orrs	r2, r1
 8002152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4954      	ldr	r1, [pc, #336]	; (80022b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002160:	400a      	ands	r2, r1
 8002162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6999      	ldr	r1, [r3, #24]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	021a      	lsls	r2, r3, #8
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	619a      	str	r2, [r3, #24]
      break;
 8002178:	e08c      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	0011      	movs	r1, r2
 8002182:	0018      	movs	r0, r3
 8002184:	f000 fbd0 	bl	8002928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2108      	movs	r1, #8
 8002194:	430a      	orrs	r2, r1
 8002196:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69da      	ldr	r2, [r3, #28]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2104      	movs	r1, #4
 80021a4:	438a      	bics	r2, r1
 80021a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	69d9      	ldr	r1, [r3, #28]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	61da      	str	r2, [r3, #28]
      break;
 80021ba:	e06b      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	0011      	movs	r1, r2
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 fc31 	bl	8002a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	0109      	lsls	r1, r1, #4
 80021d8:	430a      	orrs	r2, r1
 80021da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4932      	ldr	r1, [pc, #200]	; (80022b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69d9      	ldr	r1, [r3, #28]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	021a      	lsls	r2, r3, #8
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	61da      	str	r2, [r3, #28]
      break;
 8002200:	e048      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	0011      	movs	r1, r2
 800220a:	0018      	movs	r0, r3
 800220c:	f000 fc72 	bl	8002af4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2108      	movs	r1, #8
 800221c:	430a      	orrs	r2, r1
 800221e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2104      	movs	r1, #4
 800222c:	438a      	bics	r2, r1
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002242:	e027      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	0011      	movs	r1, r2
 800224c:	0018      	movs	r0, r3
 800224e:	f000 fcab 	bl	8002ba8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2180      	movs	r1, #128	; 0x80
 800225e:	0109      	lsls	r1, r1, #4
 8002260:	430a      	orrs	r2, r1
 8002262:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4910      	ldr	r1, [pc, #64]	; (80022b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002270:	400a      	ands	r2, r1
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	021a      	lsls	r2, r3, #8
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002288:	e004      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800228a:	2317      	movs	r3, #23
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
      break;
 8002292:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	223c      	movs	r2, #60	; 0x3c
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

  return status;
 800229c:	2317      	movs	r3, #23
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b006      	add	sp, #24
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	08002f58 	.word	0x08002f58
 80022b0:	fffffbff 	.word	0xfffffbff

080022b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	230f      	movs	r3, #15
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223c      	movs	r2, #60	; 0x3c
 80022ca:	5c9b      	ldrb	r3, [r3, r2]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_TIM_ConfigClockSource+0x20>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e0bc      	b.n	800244e <HAL_TIM_ConfigClockSource+0x19a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	223c      	movs	r2, #60	; 0x3c
 80022d8:	2101      	movs	r1, #1
 80022da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	223d      	movs	r2, #61	; 0x3d
 80022e0:	2102      	movs	r1, #2
 80022e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4a5a      	ldr	r2, [pc, #360]	; (8002458 <HAL_TIM_ConfigClockSource+0x1a4>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4a59      	ldr	r2, [pc, #356]	; (800245c <HAL_TIM_ConfigClockSource+0x1a8>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2280      	movs	r2, #128	; 0x80
 800230a:	0192      	lsls	r2, r2, #6
 800230c:	4293      	cmp	r3, r2
 800230e:	d040      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0xde>
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	0192      	lsls	r2, r2, #6
 8002314:	4293      	cmp	r3, r2
 8002316:	d900      	bls.n	800231a <HAL_TIM_ConfigClockSource+0x66>
 8002318:	e088      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	0152      	lsls	r2, r2, #5
 800231e:	4293      	cmp	r3, r2
 8002320:	d100      	bne.n	8002324 <HAL_TIM_ConfigClockSource+0x70>
 8002322:	e088      	b.n	8002436 <HAL_TIM_ConfigClockSource+0x182>
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	0152      	lsls	r2, r2, #5
 8002328:	4293      	cmp	r3, r2
 800232a:	d900      	bls.n	800232e <HAL_TIM_ConfigClockSource+0x7a>
 800232c:	e07e      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 800232e:	2b70      	cmp	r3, #112	; 0x70
 8002330:	d018      	beq.n	8002364 <HAL_TIM_ConfigClockSource+0xb0>
 8002332:	d900      	bls.n	8002336 <HAL_TIM_ConfigClockSource+0x82>
 8002334:	e07a      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 8002336:	2b60      	cmp	r3, #96	; 0x60
 8002338:	d04f      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x126>
 800233a:	d900      	bls.n	800233e <HAL_TIM_ConfigClockSource+0x8a>
 800233c:	e076      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 800233e:	2b50      	cmp	r3, #80	; 0x50
 8002340:	d03b      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x106>
 8002342:	d900      	bls.n	8002346 <HAL_TIM_ConfigClockSource+0x92>
 8002344:	e072      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d057      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x146>
 800234a:	d900      	bls.n	800234e <HAL_TIM_ConfigClockSource+0x9a>
 800234c:	e06e      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 800234e:	2b30      	cmp	r3, #48	; 0x30
 8002350:	d063      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x166>
 8002352:	d86b      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 8002354:	2b20      	cmp	r3, #32
 8002356:	d060      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x166>
 8002358:	d868      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x178>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d05d      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x166>
 800235e:	2b10      	cmp	r3, #16
 8002360:	d05b      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x166>
 8002362:	e063      	b.n	800242c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6899      	ldr	r1, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f000 fcf2 	bl	8002d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2277      	movs	r2, #119	; 0x77
 8002384:	4313      	orrs	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	609a      	str	r2, [r3, #8]
      break;
 8002390:	e052      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6899      	ldr	r1, [r3, #8]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f000 fcdb 	bl	8002d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	01c9      	lsls	r1, r1, #7
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]
      break;
 80023b8:	e03e      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	001a      	movs	r2, r3
 80023c8:	f000 fc4c 	bl	8002c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2150      	movs	r1, #80	; 0x50
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 fca6 	bl	8002d24 <TIM_ITRx_SetConfig>
      break;
 80023d8:	e02e      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	001a      	movs	r2, r3
 80023e8:	f000 fc6a 	bl	8002cc0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2160      	movs	r1, #96	; 0x60
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fc96 	bl	8002d24 <TIM_ITRx_SetConfig>
      break;
 80023f8:	e01e      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	001a      	movs	r2, r3
 8002408:	f000 fc2c 	bl	8002c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	0018      	movs	r0, r3
 8002414:	f000 fc86 	bl	8002d24 <TIM_ITRx_SetConfig>
      break;
 8002418:	e00e      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0019      	movs	r1, r3
 8002424:	0010      	movs	r0, r2
 8002426:	f000 fc7d 	bl	8002d24 <TIM_ITRx_SetConfig>
      break;
 800242a:	e005      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800242c:	230f      	movs	r3, #15
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
      break;
 8002434:	e000      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002436:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	223d      	movs	r2, #61	; 0x3d
 800243c:	2101      	movs	r1, #1
 800243e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	223c      	movs	r2, #60	; 0x3c
 8002444:	2100      	movs	r1, #0
 8002446:	5499      	strb	r1, [r3, r2]

  return status;
 8002448:	230f      	movs	r3, #15
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781b      	ldrb	r3, [r3, #0]
}
 800244e:	0018      	movs	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	b004      	add	sp, #16
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	ffceff88 	.word	0xffceff88
 800245c:	ffff00ff 	.word	0xffff00ff

08002460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}

08002490 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d107      	bne.n	80024b8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	223e      	movs	r2, #62	; 0x3e
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]
 80024b6:	e02a      	b.n	800250e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d107      	bne.n	80024d2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2202      	movs	r2, #2
 80024c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	223f      	movs	r2, #63	; 0x3f
 80024cc:	2101      	movs	r1, #1
 80024ce:	5499      	strb	r1, [r3, r2]
 80024d0:	e01d      	b.n	800250e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d107      	bne.n	80024ec <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2204      	movs	r2, #4
 80024e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2240      	movs	r2, #64	; 0x40
 80024e6:	2101      	movs	r1, #1
 80024e8:	5499      	strb	r1, [r3, r2]
 80024ea:	e010      	b.n	800250e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d107      	bne.n	8002506 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2208      	movs	r2, #8
 80024fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2241      	movs	r2, #65	; 0x41
 8002500:	2101      	movs	r1, #1
 8002502:	5499      	strb	r1, [r3, r2]
 8002504:	e003      	b.n	800250e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	223d      	movs	r2, #61	; 0x3d
 800250a:	2101      	movs	r1, #1
 800250c:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	0018      	movs	r0, r3
 8002512:	f7ff ffb5 	bl	8002480 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b004      	add	sp, #16
 8002522:	bd80      	pop	{r7, pc}

08002524 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	d10b      	bne.n	8002554 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d136      	bne.n	80025b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	223e      	movs	r2, #62	; 0x3e
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]
 8002552:	e031      	b.n	80025b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	d10b      	bne.n	8002576 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2202      	movs	r2, #2
 8002562:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d125      	bne.n	80025b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	223f      	movs	r2, #63	; 0x3f
 8002570:	2101      	movs	r1, #1
 8002572:	5499      	strb	r1, [r3, r2]
 8002574:	e020      	b.n	80025b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	d10b      	bne.n	8002598 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2204      	movs	r2, #4
 8002584:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d114      	bne.n	80025b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2240      	movs	r2, #64	; 0x40
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]
 8002596:	e00f      	b.n	80025b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d10a      	bne.n	80025b8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2208      	movs	r2, #8
 80025a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2241      	movs	r2, #65	; 0x41
 80025b4:	2101      	movs	r1, #1
 80025b6:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7ff ff50 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	771a      	strb	r2, [r3, #28]
}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b004      	add	sp, #16
 80025cc:	bd80      	pop	{r7, pc}

080025ce <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d103      	bne.n	80025ee <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	771a      	strb	r2, [r3, #28]
 80025ec:	e019      	b.n	8002622 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d103      	bne.n	8002600 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2202      	movs	r2, #2
 80025fc:	771a      	strb	r2, [r3, #28]
 80025fe:	e010      	b.n	8002622 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d103      	bne.n	8002612 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2204      	movs	r2, #4
 800260e:	771a      	strb	r2, [r3, #28]
 8002610:	e007      	b.n	8002622 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	d102      	bne.n	8002622 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2208      	movs	r2, #8
 8002620:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	0018      	movs	r0, r3
 8002626:	f7ff ff23 	bl	8002470 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b004      	add	sp, #16
 8002636:	bd80      	pop	{r7, pc}

08002638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a32      	ldr	r2, [pc, #200]	; (8002714 <TIM_Base_SetConfig+0xdc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <TIM_Base_SetConfig+0x20>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a31      	ldr	r2, [pc, #196]	; (8002718 <TIM_Base_SetConfig+0xe0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2270      	movs	r2, #112	; 0x70
 800265c:	4393      	bics	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a29      	ldr	r2, [pc, #164]	; (8002714 <TIM_Base_SetConfig+0xdc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00f      	beq.n	8002692 <TIM_Base_SetConfig+0x5a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <TIM_Base_SetConfig+0xe0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00b      	beq.n	8002692 <TIM_Base_SetConfig+0x5a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <TIM_Base_SetConfig+0xe4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <TIM_Base_SetConfig+0x5a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a26      	ldr	r2, [pc, #152]	; (8002720 <TIM_Base_SetConfig+0xe8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d003      	beq.n	8002692 <TIM_Base_SetConfig+0x5a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a25      	ldr	r2, [pc, #148]	; (8002724 <TIM_Base_SetConfig+0xec>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d108      	bne.n	80026a4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a24      	ldr	r2, [pc, #144]	; (8002728 <TIM_Base_SetConfig+0xf0>)
 8002696:	4013      	ands	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	4393      	bics	r3, r2
 80026aa:	001a      	movs	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a11      	ldr	r2, [pc, #68]	; (8002714 <TIM_Base_SetConfig+0xdc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <TIM_Base_SetConfig+0xaa>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a12      	ldr	r2, [pc, #72]	; (8002720 <TIM_Base_SetConfig+0xe8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d003      	beq.n	80026e2 <TIM_Base_SetConfig+0xaa>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a11      	ldr	r2, [pc, #68]	; (8002724 <TIM_Base_SetConfig+0xec>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d103      	bne.n	80026ea <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2201      	movs	r2, #1
 8002702:	4393      	bics	r3, r2
 8002704:	001a      	movs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	611a      	str	r2, [r3, #16]
  }
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40000400 	.word	0x40000400
 800271c:	40002000 	.word	0x40002000
 8002720:	40014400 	.word	0x40014400
 8002724:	40014800 	.word	0x40014800
 8002728:	fffffcff 	.word	0xfffffcff

0800272c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	2201      	movs	r2, #1
 8002742:	4393      	bics	r3, r2
 8002744:	001a      	movs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a2e      	ldr	r2, [pc, #184]	; (8002814 <TIM_OC1_SetConfig+0xe8>)
 800275a:	4013      	ands	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2203      	movs	r2, #3
 8002762:	4393      	bics	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2202      	movs	r2, #2
 8002774:	4393      	bics	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a24      	ldr	r2, [pc, #144]	; (8002818 <TIM_OC1_SetConfig+0xec>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <TIM_OC1_SetConfig+0x6e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a23      	ldr	r2, [pc, #140]	; (800281c <TIM_OC1_SetConfig+0xf0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d003      	beq.n	800279a <TIM_OC1_SetConfig+0x6e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a22      	ldr	r2, [pc, #136]	; (8002820 <TIM_OC1_SetConfig+0xf4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10c      	bne.n	80027b4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2208      	movs	r2, #8
 800279e:	4393      	bics	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2204      	movs	r2, #4
 80027b0:	4393      	bics	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a18      	ldr	r2, [pc, #96]	; (8002818 <TIM_OC1_SetConfig+0xec>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d007      	beq.n	80027cc <TIM_OC1_SetConfig+0xa0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a17      	ldr	r2, [pc, #92]	; (800281c <TIM_OC1_SetConfig+0xf0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d003      	beq.n	80027cc <TIM_OC1_SetConfig+0xa0>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a16      	ldr	r2, [pc, #88]	; (8002820 <TIM_OC1_SetConfig+0xf4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d111      	bne.n	80027f0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4a15      	ldr	r2, [pc, #84]	; (8002824 <TIM_OC1_SetConfig+0xf8>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4a14      	ldr	r2, [pc, #80]	; (8002828 <TIM_OC1_SetConfig+0xfc>)
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	621a      	str	r2, [r3, #32]
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b006      	add	sp, #24
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	fffeff8f 	.word	0xfffeff8f
 8002818:	40012c00 	.word	0x40012c00
 800281c:	40014400 	.word	0x40014400
 8002820:	40014800 	.word	0x40014800
 8002824:	fffffeff 	.word	0xfffffeff
 8002828:	fffffdff 	.word	0xfffffdff

0800282c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	2210      	movs	r2, #16
 8002842:	4393      	bics	r3, r2
 8002844:	001a      	movs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4a2c      	ldr	r2, [pc, #176]	; (800290c <TIM_OC2_SetConfig+0xe0>)
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4a2b      	ldr	r2, [pc, #172]	; (8002910 <TIM_OC2_SetConfig+0xe4>)
 8002862:	4013      	ands	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2220      	movs	r2, #32
 8002876:	4393      	bics	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a22      	ldr	r2, [pc, #136]	; (8002914 <TIM_OC2_SetConfig+0xe8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10d      	bne.n	80028aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	4393      	bics	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2240      	movs	r2, #64	; 0x40
 80028a6:	4393      	bics	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <TIM_OC2_SetConfig+0xe8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <TIM_OC2_SetConfig+0x96>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a18      	ldr	r2, [pc, #96]	; (8002918 <TIM_OC2_SetConfig+0xec>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d003      	beq.n	80028c2 <TIM_OC2_SetConfig+0x96>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a17      	ldr	r2, [pc, #92]	; (800291c <TIM_OC2_SetConfig+0xf0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d113      	bne.n	80028ea <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4a16      	ldr	r2, [pc, #88]	; (8002920 <TIM_OC2_SetConfig+0xf4>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4a15      	ldr	r2, [pc, #84]	; (8002924 <TIM_OC2_SetConfig+0xf8>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	621a      	str	r2, [r3, #32]
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b006      	add	sp, #24
 800290a:	bd80      	pop	{r7, pc}
 800290c:	feff8fff 	.word	0xfeff8fff
 8002910:	fffffcff 	.word	0xfffffcff
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40014400 	.word	0x40014400
 800291c:	40014800 	.word	0x40014800
 8002920:	fffffbff 	.word	0xfffffbff
 8002924:	fffff7ff 	.word	0xfffff7ff

08002928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4a31      	ldr	r2, [pc, #196]	; (8002a04 <TIM_OC3_SetConfig+0xdc>)
 800293e:	401a      	ands	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a2d      	ldr	r2, [pc, #180]	; (8002a08 <TIM_OC3_SetConfig+0xe0>)
 8002954:	4013      	ands	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2203      	movs	r2, #3
 800295c:	4393      	bics	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	4a27      	ldr	r2, [pc, #156]	; (8002a0c <TIM_OC3_SetConfig+0xe4>)
 800296e:	4013      	ands	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <TIM_OC3_SetConfig+0xe8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10d      	bne.n	80029a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <TIM_OC3_SetConfig+0xec>)
 800298a:	4013      	ands	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <TIM_OC3_SetConfig+0xf0>)
 800299e:	4013      	ands	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1a      	ldr	r2, [pc, #104]	; (8002a10 <TIM_OC3_SetConfig+0xe8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <TIM_OC3_SetConfig+0x92>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <TIM_OC3_SetConfig+0xf4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d003      	beq.n	80029ba <TIM_OC3_SetConfig+0x92>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <TIM_OC3_SetConfig+0xf8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d113      	bne.n	80029e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <TIM_OC3_SetConfig+0xfc>)
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <TIM_OC3_SetConfig+0x100>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	621a      	str	r2, [r3, #32]
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b006      	add	sp, #24
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	fffffeff 	.word	0xfffffeff
 8002a08:	fffeff8f 	.word	0xfffeff8f
 8002a0c:	fffffdff 	.word	0xfffffdff
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	fffff7ff 	.word	0xfffff7ff
 8002a18:	fffffbff 	.word	0xfffffbff
 8002a1c:	40014400 	.word	0x40014400
 8002a20:	40014800 	.word	0x40014800
 8002a24:	ffffefff 	.word	0xffffefff
 8002a28:	ffffdfff 	.word	0xffffdfff

08002a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4a24      	ldr	r2, [pc, #144]	; (8002ad4 <TIM_OC4_SetConfig+0xa8>)
 8002a42:	401a      	ands	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a20      	ldr	r2, [pc, #128]	; (8002ad8 <TIM_OC4_SetConfig+0xac>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <TIM_OC4_SetConfig+0xb0>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <TIM_OC4_SetConfig+0xb4>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	031b      	lsls	r3, r3, #12
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a17      	ldr	r2, [pc, #92]	; (8002ae4 <TIM_OC4_SetConfig+0xb8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d007      	beq.n	8002a9c <TIM_OC4_SetConfig+0x70>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <TIM_OC4_SetConfig+0xbc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_OC4_SetConfig+0x70>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a15      	ldr	r2, [pc, #84]	; (8002aec <TIM_OC4_SetConfig+0xc0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d109      	bne.n	8002ab0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <TIM_OC4_SetConfig+0xc4>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	019b      	lsls	r3, r3, #6
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	621a      	str	r2, [r3, #32]
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b006      	add	sp, #24
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	ffffefff 	.word	0xffffefff
 8002ad8:	feff8fff 	.word	0xfeff8fff
 8002adc:	fffffcff 	.word	0xfffffcff
 8002ae0:	ffffdfff 	.word	0xffffdfff
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40014400 	.word	0x40014400
 8002aec:	40014800 	.word	0x40014800
 8002af0:	ffffbfff 	.word	0xffffbfff

08002af4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <TIM_OC5_SetConfig+0x9c>)
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <TIM_OC5_SetConfig+0xa0>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4a19      	ldr	r2, [pc, #100]	; (8002b98 <TIM_OC5_SetConfig+0xa4>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <TIM_OC5_SetConfig+0xa8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d007      	beq.n	8002b5a <TIM_OC5_SetConfig+0x66>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <TIM_OC5_SetConfig+0xac>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d003      	beq.n	8002b5a <TIM_OC5_SetConfig+0x66>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <TIM_OC5_SetConfig+0xb0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d109      	bne.n	8002b6e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <TIM_OC5_SetConfig+0x9c>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	621a      	str	r2, [r3, #32]
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b006      	add	sp, #24
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	fffeffff 	.word	0xfffeffff
 8002b94:	fffeff8f 	.word	0xfffeff8f
 8002b98:	fffdffff 	.word	0xfffdffff
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40014400 	.word	0x40014400
 8002ba4:	40014800 	.word	0x40014800

08002ba8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <TIM_OC6_SetConfig+0xa0>)
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a1e      	ldr	r2, [pc, #120]	; (8002c4c <TIM_OC6_SetConfig+0xa4>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <TIM_OC6_SetConfig+0xa8>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	051b      	lsls	r3, r3, #20
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <TIM_OC6_SetConfig+0xac>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <TIM_OC6_SetConfig+0x68>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <TIM_OC6_SetConfig+0xb0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_OC6_SetConfig+0x68>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a14      	ldr	r2, [pc, #80]	; (8002c5c <TIM_OC6_SetConfig+0xb4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d109      	bne.n	8002c24 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <TIM_OC6_SetConfig+0xb8>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	029b      	lsls	r3, r3, #10
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	621a      	str	r2, [r3, #32]
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b006      	add	sp, #24
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	ffefffff 	.word	0xffefffff
 8002c4c:	feff8fff 	.word	0xfeff8fff
 8002c50:	ffdfffff 	.word	0xffdfffff
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40014400 	.word	0x40014400
 8002c5c:	40014800 	.word	0x40014800
 8002c60:	fffbffff 	.word	0xfffbffff

08002c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	22f0      	movs	r2, #240	; 0xf0
 8002c8e:	4393      	bics	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	220a      	movs	r2, #10
 8002ca0:	4393      	bics	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b006      	add	sp, #24
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	4393      	bics	r3, r2
 8002cda:	001a      	movs	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <TIM_TI2_ConfigInputStage+0x60>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	031b      	lsls	r3, r3, #12
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	22a0      	movs	r2, #160	; 0xa0
 8002cfc:	4393      	bics	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b006      	add	sp, #24
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	ffff0fff 	.word	0xffff0fff

08002d24 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <TIM_ITRx_SetConfig+0x34>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	2207      	movs	r2, #7
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	609a      	str	r2, [r3, #8]
}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b004      	add	sp, #16
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	ffcfff8f 	.word	0xffcfff8f

08002d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <TIM_ETR_SetConfig+0x3c>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	021a      	lsls	r2, r3, #8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	609a      	str	r2, [r3, #8]
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b006      	add	sp, #24
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	ffff00ff 	.word	0xffff00ff

08002d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	221f      	movs	r2, #31
 8002dac:	4013      	ands	r3, r2
 8002dae:	2201      	movs	r2, #1
 8002db0:	409a      	lsls	r2, r3
 8002db2:	0013      	movs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	43d2      	mvns	r2, r2
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1a      	ldr	r2, [r3, #32]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	211f      	movs	r1, #31
 8002dcc:	400b      	ands	r3, r1
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4099      	lsls	r1, r3
 8002dd2:	000b      	movs	r3, r1
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	621a      	str	r2, [r3, #32]
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b006      	add	sp, #24
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	223c      	movs	r2, #60	; 0x3c
 8002df2:	5c9b      	ldrb	r3, [r3, r2]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e04a      	b.n	8002e92 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	223c      	movs	r2, #60	; 0x3c
 8002e00:	2101      	movs	r1, #1
 8002e02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	223d      	movs	r2, #61	; 0x3d
 8002e08:	2102      	movs	r1, #2
 8002e0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1e      	ldr	r2, [pc, #120]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d108      	bne.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2270      	movs	r2, #112	; 0x70
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10c      	bne.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	4393      	bics	r3, r2
 8002e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	223d      	movs	r2, #61	; 0x3d
 8002e84:	2101      	movs	r1, #1
 8002e86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	223c      	movs	r2, #60	; 0x3c
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b004      	add	sp, #16
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	ff0fffff 	.word	0xff0fffff
 8002ea4:	40000400 	.word	0x40000400

08002ea8 <__libc_init_array>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	2600      	movs	r6, #0
 8002eac:	4d0c      	ldr	r5, [pc, #48]	; (8002ee0 <__libc_init_array+0x38>)
 8002eae:	4c0d      	ldr	r4, [pc, #52]	; (8002ee4 <__libc_init_array+0x3c>)
 8002eb0:	1b64      	subs	r4, r4, r5
 8002eb2:	10a4      	asrs	r4, r4, #2
 8002eb4:	42a6      	cmp	r6, r4
 8002eb6:	d109      	bne.n	8002ecc <__libc_init_array+0x24>
 8002eb8:	2600      	movs	r6, #0
 8002eba:	f000 f821 	bl	8002f00 <_init>
 8002ebe:	4d0a      	ldr	r5, [pc, #40]	; (8002ee8 <__libc_init_array+0x40>)
 8002ec0:	4c0a      	ldr	r4, [pc, #40]	; (8002eec <__libc_init_array+0x44>)
 8002ec2:	1b64      	subs	r4, r4, r5
 8002ec4:	10a4      	asrs	r4, r4, #2
 8002ec6:	42a6      	cmp	r6, r4
 8002ec8:	d105      	bne.n	8002ed6 <__libc_init_array+0x2e>
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	00b3      	lsls	r3, r6, #2
 8002ece:	58eb      	ldr	r3, [r5, r3]
 8002ed0:	4798      	blx	r3
 8002ed2:	3601      	adds	r6, #1
 8002ed4:	e7ee      	b.n	8002eb4 <__libc_init_array+0xc>
 8002ed6:	00b3      	lsls	r3, r6, #2
 8002ed8:	58eb      	ldr	r3, [r5, r3]
 8002eda:	4798      	blx	r3
 8002edc:	3601      	adds	r6, #1
 8002ede:	e7f2      	b.n	8002ec6 <__libc_init_array+0x1e>
 8002ee0:	08002fac 	.word	0x08002fac
 8002ee4:	08002fac 	.word	0x08002fac
 8002ee8:	08002fac 	.word	0x08002fac
 8002eec:	08002fb0 	.word	0x08002fb0

08002ef0 <memset>:
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	1882      	adds	r2, r0, r2
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d100      	bne.n	8002efa <memset+0xa>
 8002ef8:	4770      	bx	lr
 8002efa:	7019      	strb	r1, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	e7f9      	b.n	8002ef4 <memset+0x4>

08002f00 <_init>:
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f06:	bc08      	pop	{r3}
 8002f08:	469e      	mov	lr, r3
 8002f0a:	4770      	bx	lr

08002f0c <_fini>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr
