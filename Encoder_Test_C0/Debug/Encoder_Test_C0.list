
Encoder_Test_C0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000441c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080044dc  080044dc  000144dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004594  08004594  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004594  08004594  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004594  08004594  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800459c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000014  080045b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080045b0  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001196c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe7  00000000  00000000  000319a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00033990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00034898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135a2  00000000  00000000  000356e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012205  00000000  00000000  00048c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c978  00000000  00000000  0005ae8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7807  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000381c  00000000  00000000  000d7858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080044c4 	.word	0x080044c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080044c4 	.word	0x080044c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_dadd>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	000d      	movs	r5, r1
 80003fe:	0004      	movs	r4, r0
 8000400:	b5c0      	push	{r6, r7, lr}
 8000402:	001f      	movs	r7, r3
 8000404:	0011      	movs	r1, r2
 8000406:	0328      	lsls	r0, r5, #12
 8000408:	0f62      	lsrs	r2, r4, #29
 800040a:	0a40      	lsrs	r0, r0, #9
 800040c:	4310      	orrs	r0, r2
 800040e:	007a      	lsls	r2, r7, #1
 8000410:	0d52      	lsrs	r2, r2, #21
 8000412:	00e3      	lsls	r3, r4, #3
 8000414:	033c      	lsls	r4, r7, #12
 8000416:	4691      	mov	r9, r2
 8000418:	0a64      	lsrs	r4, r4, #9
 800041a:	0ffa      	lsrs	r2, r7, #31
 800041c:	0f4f      	lsrs	r7, r1, #29
 800041e:	006e      	lsls	r6, r5, #1
 8000420:	4327      	orrs	r7, r4
 8000422:	4692      	mov	sl, r2
 8000424:	46b8      	mov	r8, r7
 8000426:	0d76      	lsrs	r6, r6, #21
 8000428:	0fed      	lsrs	r5, r5, #31
 800042a:	00c9      	lsls	r1, r1, #3
 800042c:	4295      	cmp	r5, r2
 800042e:	d100      	bne.n	8000432 <__aeabi_dadd+0x3e>
 8000430:	e099      	b.n	8000566 <__aeabi_dadd+0x172>
 8000432:	464c      	mov	r4, r9
 8000434:	1b34      	subs	r4, r6, r4
 8000436:	46a4      	mov	ip, r4
 8000438:	2c00      	cmp	r4, #0
 800043a:	dc00      	bgt.n	800043e <__aeabi_dadd+0x4a>
 800043c:	e07c      	b.n	8000538 <__aeabi_dadd+0x144>
 800043e:	464a      	mov	r2, r9
 8000440:	2a00      	cmp	r2, #0
 8000442:	d100      	bne.n	8000446 <__aeabi_dadd+0x52>
 8000444:	e0b8      	b.n	80005b8 <__aeabi_dadd+0x1c4>
 8000446:	4ac5      	ldr	r2, [pc, #788]	; (800075c <__aeabi_dadd+0x368>)
 8000448:	4296      	cmp	r6, r2
 800044a:	d100      	bne.n	800044e <__aeabi_dadd+0x5a>
 800044c:	e11c      	b.n	8000688 <__aeabi_dadd+0x294>
 800044e:	2280      	movs	r2, #128	; 0x80
 8000450:	003c      	movs	r4, r7
 8000452:	0412      	lsls	r2, r2, #16
 8000454:	4314      	orrs	r4, r2
 8000456:	46a0      	mov	r8, r4
 8000458:	4662      	mov	r2, ip
 800045a:	2a38      	cmp	r2, #56	; 0x38
 800045c:	dd00      	ble.n	8000460 <__aeabi_dadd+0x6c>
 800045e:	e161      	b.n	8000724 <__aeabi_dadd+0x330>
 8000460:	2a1f      	cmp	r2, #31
 8000462:	dd00      	ble.n	8000466 <__aeabi_dadd+0x72>
 8000464:	e1cc      	b.n	8000800 <__aeabi_dadd+0x40c>
 8000466:	4664      	mov	r4, ip
 8000468:	2220      	movs	r2, #32
 800046a:	1b12      	subs	r2, r2, r4
 800046c:	4644      	mov	r4, r8
 800046e:	4094      	lsls	r4, r2
 8000470:	000f      	movs	r7, r1
 8000472:	46a1      	mov	r9, r4
 8000474:	4664      	mov	r4, ip
 8000476:	4091      	lsls	r1, r2
 8000478:	40e7      	lsrs	r7, r4
 800047a:	464c      	mov	r4, r9
 800047c:	1e4a      	subs	r2, r1, #1
 800047e:	4191      	sbcs	r1, r2
 8000480:	433c      	orrs	r4, r7
 8000482:	4642      	mov	r2, r8
 8000484:	4321      	orrs	r1, r4
 8000486:	4664      	mov	r4, ip
 8000488:	40e2      	lsrs	r2, r4
 800048a:	1a80      	subs	r0, r0, r2
 800048c:	1a5c      	subs	r4, r3, r1
 800048e:	42a3      	cmp	r3, r4
 8000490:	419b      	sbcs	r3, r3
 8000492:	425f      	negs	r7, r3
 8000494:	1bc7      	subs	r7, r0, r7
 8000496:	023b      	lsls	r3, r7, #8
 8000498:	d400      	bmi.n	800049c <__aeabi_dadd+0xa8>
 800049a:	e0d0      	b.n	800063e <__aeabi_dadd+0x24a>
 800049c:	027f      	lsls	r7, r7, #9
 800049e:	0a7f      	lsrs	r7, r7, #9
 80004a0:	2f00      	cmp	r7, #0
 80004a2:	d100      	bne.n	80004a6 <__aeabi_dadd+0xb2>
 80004a4:	e0ff      	b.n	80006a6 <__aeabi_dadd+0x2b2>
 80004a6:	0038      	movs	r0, r7
 80004a8:	f000 fdb2 	bl	8001010 <__clzsi2>
 80004ac:	0001      	movs	r1, r0
 80004ae:	3908      	subs	r1, #8
 80004b0:	2320      	movs	r3, #32
 80004b2:	0022      	movs	r2, r4
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	408f      	lsls	r7, r1
 80004b8:	40da      	lsrs	r2, r3
 80004ba:	408c      	lsls	r4, r1
 80004bc:	4317      	orrs	r7, r2
 80004be:	42b1      	cmp	r1, r6
 80004c0:	da00      	bge.n	80004c4 <__aeabi_dadd+0xd0>
 80004c2:	e0ff      	b.n	80006c4 <__aeabi_dadd+0x2d0>
 80004c4:	1b89      	subs	r1, r1, r6
 80004c6:	1c4b      	adds	r3, r1, #1
 80004c8:	2b1f      	cmp	r3, #31
 80004ca:	dd00      	ble.n	80004ce <__aeabi_dadd+0xda>
 80004cc:	e0a8      	b.n	8000620 <__aeabi_dadd+0x22c>
 80004ce:	2220      	movs	r2, #32
 80004d0:	0039      	movs	r1, r7
 80004d2:	1ad2      	subs	r2, r2, r3
 80004d4:	0020      	movs	r0, r4
 80004d6:	4094      	lsls	r4, r2
 80004d8:	4091      	lsls	r1, r2
 80004da:	40d8      	lsrs	r0, r3
 80004dc:	1e62      	subs	r2, r4, #1
 80004de:	4194      	sbcs	r4, r2
 80004e0:	40df      	lsrs	r7, r3
 80004e2:	2600      	movs	r6, #0
 80004e4:	4301      	orrs	r1, r0
 80004e6:	430c      	orrs	r4, r1
 80004e8:	0763      	lsls	r3, r4, #29
 80004ea:	d009      	beq.n	8000500 <__aeabi_dadd+0x10c>
 80004ec:	230f      	movs	r3, #15
 80004ee:	4023      	ands	r3, r4
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d005      	beq.n	8000500 <__aeabi_dadd+0x10c>
 80004f4:	1d23      	adds	r3, r4, #4
 80004f6:	42a3      	cmp	r3, r4
 80004f8:	41a4      	sbcs	r4, r4
 80004fa:	4264      	negs	r4, r4
 80004fc:	193f      	adds	r7, r7, r4
 80004fe:	001c      	movs	r4, r3
 8000500:	023b      	lsls	r3, r7, #8
 8000502:	d400      	bmi.n	8000506 <__aeabi_dadd+0x112>
 8000504:	e09e      	b.n	8000644 <__aeabi_dadd+0x250>
 8000506:	4b95      	ldr	r3, [pc, #596]	; (800075c <__aeabi_dadd+0x368>)
 8000508:	3601      	adds	r6, #1
 800050a:	429e      	cmp	r6, r3
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x11c>
 800050e:	e0b7      	b.n	8000680 <__aeabi_dadd+0x28c>
 8000510:	4a93      	ldr	r2, [pc, #588]	; (8000760 <__aeabi_dadd+0x36c>)
 8000512:	08e4      	lsrs	r4, r4, #3
 8000514:	4017      	ands	r7, r2
 8000516:	077b      	lsls	r3, r7, #29
 8000518:	0571      	lsls	r1, r6, #21
 800051a:	027f      	lsls	r7, r7, #9
 800051c:	4323      	orrs	r3, r4
 800051e:	0b3f      	lsrs	r7, r7, #12
 8000520:	0d4a      	lsrs	r2, r1, #21
 8000522:	0512      	lsls	r2, r2, #20
 8000524:	433a      	orrs	r2, r7
 8000526:	07ed      	lsls	r5, r5, #31
 8000528:	432a      	orrs	r2, r5
 800052a:	0018      	movs	r0, r3
 800052c:	0011      	movs	r1, r2
 800052e:	bce0      	pop	{r5, r6, r7}
 8000530:	46ba      	mov	sl, r7
 8000532:	46b1      	mov	r9, r6
 8000534:	46a8      	mov	r8, r5
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	2c00      	cmp	r4, #0
 800053a:	d04b      	beq.n	80005d4 <__aeabi_dadd+0x1e0>
 800053c:	464c      	mov	r4, r9
 800053e:	1ba4      	subs	r4, r4, r6
 8000540:	46a4      	mov	ip, r4
 8000542:	2e00      	cmp	r6, #0
 8000544:	d000      	beq.n	8000548 <__aeabi_dadd+0x154>
 8000546:	e123      	b.n	8000790 <__aeabi_dadd+0x39c>
 8000548:	0004      	movs	r4, r0
 800054a:	431c      	orrs	r4, r3
 800054c:	d100      	bne.n	8000550 <__aeabi_dadd+0x15c>
 800054e:	e1af      	b.n	80008b0 <__aeabi_dadd+0x4bc>
 8000550:	4662      	mov	r2, ip
 8000552:	1e54      	subs	r4, r2, #1
 8000554:	2a01      	cmp	r2, #1
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0x166>
 8000558:	e215      	b.n	8000986 <__aeabi_dadd+0x592>
 800055a:	4d80      	ldr	r5, [pc, #512]	; (800075c <__aeabi_dadd+0x368>)
 800055c:	45ac      	cmp	ip, r5
 800055e:	d100      	bne.n	8000562 <__aeabi_dadd+0x16e>
 8000560:	e1c8      	b.n	80008f4 <__aeabi_dadd+0x500>
 8000562:	46a4      	mov	ip, r4
 8000564:	e11b      	b.n	800079e <__aeabi_dadd+0x3aa>
 8000566:	464a      	mov	r2, r9
 8000568:	1ab2      	subs	r2, r6, r2
 800056a:	4694      	mov	ip, r2
 800056c:	2a00      	cmp	r2, #0
 800056e:	dc00      	bgt.n	8000572 <__aeabi_dadd+0x17e>
 8000570:	e0ac      	b.n	80006cc <__aeabi_dadd+0x2d8>
 8000572:	464a      	mov	r2, r9
 8000574:	2a00      	cmp	r2, #0
 8000576:	d043      	beq.n	8000600 <__aeabi_dadd+0x20c>
 8000578:	4a78      	ldr	r2, [pc, #480]	; (800075c <__aeabi_dadd+0x368>)
 800057a:	4296      	cmp	r6, r2
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0x18c>
 800057e:	e1af      	b.n	80008e0 <__aeabi_dadd+0x4ec>
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	003c      	movs	r4, r7
 8000584:	0412      	lsls	r2, r2, #16
 8000586:	4314      	orrs	r4, r2
 8000588:	46a0      	mov	r8, r4
 800058a:	4662      	mov	r2, ip
 800058c:	2a38      	cmp	r2, #56	; 0x38
 800058e:	dc67      	bgt.n	8000660 <__aeabi_dadd+0x26c>
 8000590:	2a1f      	cmp	r2, #31
 8000592:	dc00      	bgt.n	8000596 <__aeabi_dadd+0x1a2>
 8000594:	e15f      	b.n	8000856 <__aeabi_dadd+0x462>
 8000596:	4647      	mov	r7, r8
 8000598:	3a20      	subs	r2, #32
 800059a:	40d7      	lsrs	r7, r2
 800059c:	4662      	mov	r2, ip
 800059e:	2a20      	cmp	r2, #32
 80005a0:	d005      	beq.n	80005ae <__aeabi_dadd+0x1ba>
 80005a2:	4664      	mov	r4, ip
 80005a4:	2240      	movs	r2, #64	; 0x40
 80005a6:	1b12      	subs	r2, r2, r4
 80005a8:	4644      	mov	r4, r8
 80005aa:	4094      	lsls	r4, r2
 80005ac:	4321      	orrs	r1, r4
 80005ae:	1e4a      	subs	r2, r1, #1
 80005b0:	4191      	sbcs	r1, r2
 80005b2:	000c      	movs	r4, r1
 80005b4:	433c      	orrs	r4, r7
 80005b6:	e057      	b.n	8000668 <__aeabi_dadd+0x274>
 80005b8:	003a      	movs	r2, r7
 80005ba:	430a      	orrs	r2, r1
 80005bc:	d100      	bne.n	80005c0 <__aeabi_dadd+0x1cc>
 80005be:	e105      	b.n	80007cc <__aeabi_dadd+0x3d8>
 80005c0:	0022      	movs	r2, r4
 80005c2:	3a01      	subs	r2, #1
 80005c4:	2c01      	cmp	r4, #1
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x1d6>
 80005c8:	e182      	b.n	80008d0 <__aeabi_dadd+0x4dc>
 80005ca:	4c64      	ldr	r4, [pc, #400]	; (800075c <__aeabi_dadd+0x368>)
 80005cc:	45a4      	cmp	ip, r4
 80005ce:	d05b      	beq.n	8000688 <__aeabi_dadd+0x294>
 80005d0:	4694      	mov	ip, r2
 80005d2:	e741      	b.n	8000458 <__aeabi_dadd+0x64>
 80005d4:	4c63      	ldr	r4, [pc, #396]	; (8000764 <__aeabi_dadd+0x370>)
 80005d6:	1c77      	adds	r7, r6, #1
 80005d8:	4227      	tst	r7, r4
 80005da:	d000      	beq.n	80005de <__aeabi_dadd+0x1ea>
 80005dc:	e0c4      	b.n	8000768 <__aeabi_dadd+0x374>
 80005de:	0004      	movs	r4, r0
 80005e0:	431c      	orrs	r4, r3
 80005e2:	2e00      	cmp	r6, #0
 80005e4:	d000      	beq.n	80005e8 <__aeabi_dadd+0x1f4>
 80005e6:	e169      	b.n	80008bc <__aeabi_dadd+0x4c8>
 80005e8:	2c00      	cmp	r4, #0
 80005ea:	d100      	bne.n	80005ee <__aeabi_dadd+0x1fa>
 80005ec:	e1bf      	b.n	800096e <__aeabi_dadd+0x57a>
 80005ee:	4644      	mov	r4, r8
 80005f0:	430c      	orrs	r4, r1
 80005f2:	d000      	beq.n	80005f6 <__aeabi_dadd+0x202>
 80005f4:	e1d0      	b.n	8000998 <__aeabi_dadd+0x5a4>
 80005f6:	0742      	lsls	r2, r0, #29
 80005f8:	08db      	lsrs	r3, r3, #3
 80005fa:	4313      	orrs	r3, r2
 80005fc:	08c0      	lsrs	r0, r0, #3
 80005fe:	e029      	b.n	8000654 <__aeabi_dadd+0x260>
 8000600:	003a      	movs	r2, r7
 8000602:	430a      	orrs	r2, r1
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x214>
 8000606:	e170      	b.n	80008ea <__aeabi_dadd+0x4f6>
 8000608:	4662      	mov	r2, ip
 800060a:	4664      	mov	r4, ip
 800060c:	3a01      	subs	r2, #1
 800060e:	2c01      	cmp	r4, #1
 8000610:	d100      	bne.n	8000614 <__aeabi_dadd+0x220>
 8000612:	e0e0      	b.n	80007d6 <__aeabi_dadd+0x3e2>
 8000614:	4c51      	ldr	r4, [pc, #324]	; (800075c <__aeabi_dadd+0x368>)
 8000616:	45a4      	cmp	ip, r4
 8000618:	d100      	bne.n	800061c <__aeabi_dadd+0x228>
 800061a:	e161      	b.n	80008e0 <__aeabi_dadd+0x4ec>
 800061c:	4694      	mov	ip, r2
 800061e:	e7b4      	b.n	800058a <__aeabi_dadd+0x196>
 8000620:	003a      	movs	r2, r7
 8000622:	391f      	subs	r1, #31
 8000624:	40ca      	lsrs	r2, r1
 8000626:	0011      	movs	r1, r2
 8000628:	2b20      	cmp	r3, #32
 800062a:	d003      	beq.n	8000634 <__aeabi_dadd+0x240>
 800062c:	2240      	movs	r2, #64	; 0x40
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	409f      	lsls	r7, r3
 8000632:	433c      	orrs	r4, r7
 8000634:	1e63      	subs	r3, r4, #1
 8000636:	419c      	sbcs	r4, r3
 8000638:	2700      	movs	r7, #0
 800063a:	2600      	movs	r6, #0
 800063c:	430c      	orrs	r4, r1
 800063e:	0763      	lsls	r3, r4, #29
 8000640:	d000      	beq.n	8000644 <__aeabi_dadd+0x250>
 8000642:	e753      	b.n	80004ec <__aeabi_dadd+0xf8>
 8000644:	46b4      	mov	ip, r6
 8000646:	08e4      	lsrs	r4, r4, #3
 8000648:	077b      	lsls	r3, r7, #29
 800064a:	4323      	orrs	r3, r4
 800064c:	08f8      	lsrs	r0, r7, #3
 800064e:	4a43      	ldr	r2, [pc, #268]	; (800075c <__aeabi_dadd+0x368>)
 8000650:	4594      	cmp	ip, r2
 8000652:	d01d      	beq.n	8000690 <__aeabi_dadd+0x29c>
 8000654:	4662      	mov	r2, ip
 8000656:	0307      	lsls	r7, r0, #12
 8000658:	0552      	lsls	r2, r2, #21
 800065a:	0b3f      	lsrs	r7, r7, #12
 800065c:	0d52      	lsrs	r2, r2, #21
 800065e:	e760      	b.n	8000522 <__aeabi_dadd+0x12e>
 8000660:	4644      	mov	r4, r8
 8000662:	430c      	orrs	r4, r1
 8000664:	1e62      	subs	r2, r4, #1
 8000666:	4194      	sbcs	r4, r2
 8000668:	18e4      	adds	r4, r4, r3
 800066a:	429c      	cmp	r4, r3
 800066c:	419b      	sbcs	r3, r3
 800066e:	425f      	negs	r7, r3
 8000670:	183f      	adds	r7, r7, r0
 8000672:	023b      	lsls	r3, r7, #8
 8000674:	d5e3      	bpl.n	800063e <__aeabi_dadd+0x24a>
 8000676:	4b39      	ldr	r3, [pc, #228]	; (800075c <__aeabi_dadd+0x368>)
 8000678:	3601      	adds	r6, #1
 800067a:	429e      	cmp	r6, r3
 800067c:	d000      	beq.n	8000680 <__aeabi_dadd+0x28c>
 800067e:	e0b5      	b.n	80007ec <__aeabi_dadd+0x3f8>
 8000680:	0032      	movs	r2, r6
 8000682:	2700      	movs	r7, #0
 8000684:	2300      	movs	r3, #0
 8000686:	e74c      	b.n	8000522 <__aeabi_dadd+0x12e>
 8000688:	0742      	lsls	r2, r0, #29
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	4313      	orrs	r3, r2
 800068e:	08c0      	lsrs	r0, r0, #3
 8000690:	001a      	movs	r2, r3
 8000692:	4302      	orrs	r2, r0
 8000694:	d100      	bne.n	8000698 <__aeabi_dadd+0x2a4>
 8000696:	e1e1      	b.n	8000a5c <__aeabi_dadd+0x668>
 8000698:	2780      	movs	r7, #128	; 0x80
 800069a:	033f      	lsls	r7, r7, #12
 800069c:	4307      	orrs	r7, r0
 800069e:	033f      	lsls	r7, r7, #12
 80006a0:	4a2e      	ldr	r2, [pc, #184]	; (800075c <__aeabi_dadd+0x368>)
 80006a2:	0b3f      	lsrs	r7, r7, #12
 80006a4:	e73d      	b.n	8000522 <__aeabi_dadd+0x12e>
 80006a6:	0020      	movs	r0, r4
 80006a8:	f000 fcb2 	bl	8001010 <__clzsi2>
 80006ac:	0001      	movs	r1, r0
 80006ae:	3118      	adds	r1, #24
 80006b0:	291f      	cmp	r1, #31
 80006b2:	dc00      	bgt.n	80006b6 <__aeabi_dadd+0x2c2>
 80006b4:	e6fc      	b.n	80004b0 <__aeabi_dadd+0xbc>
 80006b6:	3808      	subs	r0, #8
 80006b8:	4084      	lsls	r4, r0
 80006ba:	0027      	movs	r7, r4
 80006bc:	2400      	movs	r4, #0
 80006be:	42b1      	cmp	r1, r6
 80006c0:	db00      	blt.n	80006c4 <__aeabi_dadd+0x2d0>
 80006c2:	e6ff      	b.n	80004c4 <__aeabi_dadd+0xd0>
 80006c4:	4a26      	ldr	r2, [pc, #152]	; (8000760 <__aeabi_dadd+0x36c>)
 80006c6:	1a76      	subs	r6, r6, r1
 80006c8:	4017      	ands	r7, r2
 80006ca:	e70d      	b.n	80004e8 <__aeabi_dadd+0xf4>
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	d02f      	beq.n	8000730 <__aeabi_dadd+0x33c>
 80006d0:	464a      	mov	r2, r9
 80006d2:	1b92      	subs	r2, r2, r6
 80006d4:	4694      	mov	ip, r2
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d100      	bne.n	80006dc <__aeabi_dadd+0x2e8>
 80006da:	e0ad      	b.n	8000838 <__aeabi_dadd+0x444>
 80006dc:	4a1f      	ldr	r2, [pc, #124]	; (800075c <__aeabi_dadd+0x368>)
 80006de:	4591      	cmp	r9, r2
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x2f0>
 80006e2:	e10f      	b.n	8000904 <__aeabi_dadd+0x510>
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0412      	lsls	r2, r2, #16
 80006e8:	4310      	orrs	r0, r2
 80006ea:	4662      	mov	r2, ip
 80006ec:	2a38      	cmp	r2, #56	; 0x38
 80006ee:	dd00      	ble.n	80006f2 <__aeabi_dadd+0x2fe>
 80006f0:	e10f      	b.n	8000912 <__aeabi_dadd+0x51e>
 80006f2:	2a1f      	cmp	r2, #31
 80006f4:	dd00      	ble.n	80006f8 <__aeabi_dadd+0x304>
 80006f6:	e180      	b.n	80009fa <__aeabi_dadd+0x606>
 80006f8:	4664      	mov	r4, ip
 80006fa:	2220      	movs	r2, #32
 80006fc:	001e      	movs	r6, r3
 80006fe:	1b12      	subs	r2, r2, r4
 8000700:	4667      	mov	r7, ip
 8000702:	0004      	movs	r4, r0
 8000704:	4093      	lsls	r3, r2
 8000706:	4094      	lsls	r4, r2
 8000708:	40fe      	lsrs	r6, r7
 800070a:	1e5a      	subs	r2, r3, #1
 800070c:	4193      	sbcs	r3, r2
 800070e:	40f8      	lsrs	r0, r7
 8000710:	4334      	orrs	r4, r6
 8000712:	431c      	orrs	r4, r3
 8000714:	4480      	add	r8, r0
 8000716:	1864      	adds	r4, r4, r1
 8000718:	428c      	cmp	r4, r1
 800071a:	41bf      	sbcs	r7, r7
 800071c:	427f      	negs	r7, r7
 800071e:	464e      	mov	r6, r9
 8000720:	4447      	add	r7, r8
 8000722:	e7a6      	b.n	8000672 <__aeabi_dadd+0x27e>
 8000724:	4642      	mov	r2, r8
 8000726:	430a      	orrs	r2, r1
 8000728:	0011      	movs	r1, r2
 800072a:	1e4a      	subs	r2, r1, #1
 800072c:	4191      	sbcs	r1, r2
 800072e:	e6ad      	b.n	800048c <__aeabi_dadd+0x98>
 8000730:	4c0c      	ldr	r4, [pc, #48]	; (8000764 <__aeabi_dadd+0x370>)
 8000732:	1c72      	adds	r2, r6, #1
 8000734:	4222      	tst	r2, r4
 8000736:	d000      	beq.n	800073a <__aeabi_dadd+0x346>
 8000738:	e0a1      	b.n	800087e <__aeabi_dadd+0x48a>
 800073a:	0002      	movs	r2, r0
 800073c:	431a      	orrs	r2, r3
 800073e:	2e00      	cmp	r6, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_dadd+0x350>
 8000742:	e0fa      	b.n	800093a <__aeabi_dadd+0x546>
 8000744:	2a00      	cmp	r2, #0
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x356>
 8000748:	e145      	b.n	80009d6 <__aeabi_dadd+0x5e2>
 800074a:	003a      	movs	r2, r7
 800074c:	430a      	orrs	r2, r1
 800074e:	d000      	beq.n	8000752 <__aeabi_dadd+0x35e>
 8000750:	e146      	b.n	80009e0 <__aeabi_dadd+0x5ec>
 8000752:	0742      	lsls	r2, r0, #29
 8000754:	08db      	lsrs	r3, r3, #3
 8000756:	4313      	orrs	r3, r2
 8000758:	08c0      	lsrs	r0, r0, #3
 800075a:	e77b      	b.n	8000654 <__aeabi_dadd+0x260>
 800075c:	000007ff 	.word	0x000007ff
 8000760:	ff7fffff 	.word	0xff7fffff
 8000764:	000007fe 	.word	0x000007fe
 8000768:	4647      	mov	r7, r8
 800076a:	1a5c      	subs	r4, r3, r1
 800076c:	1bc2      	subs	r2, r0, r7
 800076e:	42a3      	cmp	r3, r4
 8000770:	41bf      	sbcs	r7, r7
 8000772:	427f      	negs	r7, r7
 8000774:	46b9      	mov	r9, r7
 8000776:	0017      	movs	r7, r2
 8000778:	464a      	mov	r2, r9
 800077a:	1abf      	subs	r7, r7, r2
 800077c:	023a      	lsls	r2, r7, #8
 800077e:	d500      	bpl.n	8000782 <__aeabi_dadd+0x38e>
 8000780:	e08d      	b.n	800089e <__aeabi_dadd+0x4aa>
 8000782:	0023      	movs	r3, r4
 8000784:	433b      	orrs	r3, r7
 8000786:	d000      	beq.n	800078a <__aeabi_dadd+0x396>
 8000788:	e68a      	b.n	80004a0 <__aeabi_dadd+0xac>
 800078a:	2000      	movs	r0, #0
 800078c:	2500      	movs	r5, #0
 800078e:	e761      	b.n	8000654 <__aeabi_dadd+0x260>
 8000790:	4cb4      	ldr	r4, [pc, #720]	; (8000a64 <__aeabi_dadd+0x670>)
 8000792:	45a1      	cmp	r9, r4
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x3a4>
 8000796:	e0ad      	b.n	80008f4 <__aeabi_dadd+0x500>
 8000798:	2480      	movs	r4, #128	; 0x80
 800079a:	0424      	lsls	r4, r4, #16
 800079c:	4320      	orrs	r0, r4
 800079e:	4664      	mov	r4, ip
 80007a0:	2c38      	cmp	r4, #56	; 0x38
 80007a2:	dc3d      	bgt.n	8000820 <__aeabi_dadd+0x42c>
 80007a4:	4662      	mov	r2, ip
 80007a6:	2c1f      	cmp	r4, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x3b8>
 80007aa:	e0b7      	b.n	800091c <__aeabi_dadd+0x528>
 80007ac:	2520      	movs	r5, #32
 80007ae:	001e      	movs	r6, r3
 80007b0:	1b2d      	subs	r5, r5, r4
 80007b2:	0004      	movs	r4, r0
 80007b4:	40ab      	lsls	r3, r5
 80007b6:	40ac      	lsls	r4, r5
 80007b8:	40d6      	lsrs	r6, r2
 80007ba:	40d0      	lsrs	r0, r2
 80007bc:	4642      	mov	r2, r8
 80007be:	1e5d      	subs	r5, r3, #1
 80007c0:	41ab      	sbcs	r3, r5
 80007c2:	4334      	orrs	r4, r6
 80007c4:	1a12      	subs	r2, r2, r0
 80007c6:	4690      	mov	r8, r2
 80007c8:	4323      	orrs	r3, r4
 80007ca:	e02c      	b.n	8000826 <__aeabi_dadd+0x432>
 80007cc:	0742      	lsls	r2, r0, #29
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	08c0      	lsrs	r0, r0, #3
 80007d4:	e73b      	b.n	800064e <__aeabi_dadd+0x25a>
 80007d6:	185c      	adds	r4, r3, r1
 80007d8:	429c      	cmp	r4, r3
 80007da:	419b      	sbcs	r3, r3
 80007dc:	4440      	add	r0, r8
 80007de:	425b      	negs	r3, r3
 80007e0:	18c7      	adds	r7, r0, r3
 80007e2:	2601      	movs	r6, #1
 80007e4:	023b      	lsls	r3, r7, #8
 80007e6:	d400      	bmi.n	80007ea <__aeabi_dadd+0x3f6>
 80007e8:	e729      	b.n	800063e <__aeabi_dadd+0x24a>
 80007ea:	2602      	movs	r6, #2
 80007ec:	4a9e      	ldr	r2, [pc, #632]	; (8000a68 <__aeabi_dadd+0x674>)
 80007ee:	0863      	lsrs	r3, r4, #1
 80007f0:	4017      	ands	r7, r2
 80007f2:	2201      	movs	r2, #1
 80007f4:	4014      	ands	r4, r2
 80007f6:	431c      	orrs	r4, r3
 80007f8:	07fb      	lsls	r3, r7, #31
 80007fa:	431c      	orrs	r4, r3
 80007fc:	087f      	lsrs	r7, r7, #1
 80007fe:	e673      	b.n	80004e8 <__aeabi_dadd+0xf4>
 8000800:	4644      	mov	r4, r8
 8000802:	3a20      	subs	r2, #32
 8000804:	40d4      	lsrs	r4, r2
 8000806:	4662      	mov	r2, ip
 8000808:	2a20      	cmp	r2, #32
 800080a:	d005      	beq.n	8000818 <__aeabi_dadd+0x424>
 800080c:	4667      	mov	r7, ip
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	1bd2      	subs	r2, r2, r7
 8000812:	4647      	mov	r7, r8
 8000814:	4097      	lsls	r7, r2
 8000816:	4339      	orrs	r1, r7
 8000818:	1e4a      	subs	r2, r1, #1
 800081a:	4191      	sbcs	r1, r2
 800081c:	4321      	orrs	r1, r4
 800081e:	e635      	b.n	800048c <__aeabi_dadd+0x98>
 8000820:	4303      	orrs	r3, r0
 8000822:	1e58      	subs	r0, r3, #1
 8000824:	4183      	sbcs	r3, r0
 8000826:	1acc      	subs	r4, r1, r3
 8000828:	42a1      	cmp	r1, r4
 800082a:	41bf      	sbcs	r7, r7
 800082c:	4643      	mov	r3, r8
 800082e:	427f      	negs	r7, r7
 8000830:	4655      	mov	r5, sl
 8000832:	464e      	mov	r6, r9
 8000834:	1bdf      	subs	r7, r3, r7
 8000836:	e62e      	b.n	8000496 <__aeabi_dadd+0xa2>
 8000838:	0002      	movs	r2, r0
 800083a:	431a      	orrs	r2, r3
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x44c>
 800083e:	e0bd      	b.n	80009bc <__aeabi_dadd+0x5c8>
 8000840:	4662      	mov	r2, ip
 8000842:	4664      	mov	r4, ip
 8000844:	3a01      	subs	r2, #1
 8000846:	2c01      	cmp	r4, #1
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x458>
 800084a:	e0e5      	b.n	8000a18 <__aeabi_dadd+0x624>
 800084c:	4c85      	ldr	r4, [pc, #532]	; (8000a64 <__aeabi_dadd+0x670>)
 800084e:	45a4      	cmp	ip, r4
 8000850:	d058      	beq.n	8000904 <__aeabi_dadd+0x510>
 8000852:	4694      	mov	ip, r2
 8000854:	e749      	b.n	80006ea <__aeabi_dadd+0x2f6>
 8000856:	4664      	mov	r4, ip
 8000858:	2220      	movs	r2, #32
 800085a:	1b12      	subs	r2, r2, r4
 800085c:	4644      	mov	r4, r8
 800085e:	4094      	lsls	r4, r2
 8000860:	000f      	movs	r7, r1
 8000862:	46a1      	mov	r9, r4
 8000864:	4664      	mov	r4, ip
 8000866:	4091      	lsls	r1, r2
 8000868:	40e7      	lsrs	r7, r4
 800086a:	464c      	mov	r4, r9
 800086c:	1e4a      	subs	r2, r1, #1
 800086e:	4191      	sbcs	r1, r2
 8000870:	433c      	orrs	r4, r7
 8000872:	4642      	mov	r2, r8
 8000874:	430c      	orrs	r4, r1
 8000876:	4661      	mov	r1, ip
 8000878:	40ca      	lsrs	r2, r1
 800087a:	1880      	adds	r0, r0, r2
 800087c:	e6f4      	b.n	8000668 <__aeabi_dadd+0x274>
 800087e:	4c79      	ldr	r4, [pc, #484]	; (8000a64 <__aeabi_dadd+0x670>)
 8000880:	42a2      	cmp	r2, r4
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x492>
 8000884:	e6fd      	b.n	8000682 <__aeabi_dadd+0x28e>
 8000886:	1859      	adds	r1, r3, r1
 8000888:	4299      	cmp	r1, r3
 800088a:	419b      	sbcs	r3, r3
 800088c:	4440      	add	r0, r8
 800088e:	425f      	negs	r7, r3
 8000890:	19c7      	adds	r7, r0, r7
 8000892:	07fc      	lsls	r4, r7, #31
 8000894:	0849      	lsrs	r1, r1, #1
 8000896:	0016      	movs	r6, r2
 8000898:	430c      	orrs	r4, r1
 800089a:	087f      	lsrs	r7, r7, #1
 800089c:	e6cf      	b.n	800063e <__aeabi_dadd+0x24a>
 800089e:	1acc      	subs	r4, r1, r3
 80008a0:	42a1      	cmp	r1, r4
 80008a2:	41bf      	sbcs	r7, r7
 80008a4:	4643      	mov	r3, r8
 80008a6:	427f      	negs	r7, r7
 80008a8:	1a18      	subs	r0, r3, r0
 80008aa:	4655      	mov	r5, sl
 80008ac:	1bc7      	subs	r7, r0, r7
 80008ae:	e5f7      	b.n	80004a0 <__aeabi_dadd+0xac>
 80008b0:	08c9      	lsrs	r1, r1, #3
 80008b2:	077b      	lsls	r3, r7, #29
 80008b4:	4655      	mov	r5, sl
 80008b6:	430b      	orrs	r3, r1
 80008b8:	08f8      	lsrs	r0, r7, #3
 80008ba:	e6c8      	b.n	800064e <__aeabi_dadd+0x25a>
 80008bc:	2c00      	cmp	r4, #0
 80008be:	d000      	beq.n	80008c2 <__aeabi_dadd+0x4ce>
 80008c0:	e081      	b.n	80009c6 <__aeabi_dadd+0x5d2>
 80008c2:	4643      	mov	r3, r8
 80008c4:	430b      	orrs	r3, r1
 80008c6:	d115      	bne.n	80008f4 <__aeabi_dadd+0x500>
 80008c8:	2080      	movs	r0, #128	; 0x80
 80008ca:	2500      	movs	r5, #0
 80008cc:	0300      	lsls	r0, r0, #12
 80008ce:	e6e3      	b.n	8000698 <__aeabi_dadd+0x2a4>
 80008d0:	1a5c      	subs	r4, r3, r1
 80008d2:	42a3      	cmp	r3, r4
 80008d4:	419b      	sbcs	r3, r3
 80008d6:	1bc7      	subs	r7, r0, r7
 80008d8:	425b      	negs	r3, r3
 80008da:	2601      	movs	r6, #1
 80008dc:	1aff      	subs	r7, r7, r3
 80008de:	e5da      	b.n	8000496 <__aeabi_dadd+0xa2>
 80008e0:	0742      	lsls	r2, r0, #29
 80008e2:	08db      	lsrs	r3, r3, #3
 80008e4:	4313      	orrs	r3, r2
 80008e6:	08c0      	lsrs	r0, r0, #3
 80008e8:	e6d2      	b.n	8000690 <__aeabi_dadd+0x29c>
 80008ea:	0742      	lsls	r2, r0, #29
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	08c0      	lsrs	r0, r0, #3
 80008f2:	e6ac      	b.n	800064e <__aeabi_dadd+0x25a>
 80008f4:	4643      	mov	r3, r8
 80008f6:	4642      	mov	r2, r8
 80008f8:	08c9      	lsrs	r1, r1, #3
 80008fa:	075b      	lsls	r3, r3, #29
 80008fc:	4655      	mov	r5, sl
 80008fe:	430b      	orrs	r3, r1
 8000900:	08d0      	lsrs	r0, r2, #3
 8000902:	e6c5      	b.n	8000690 <__aeabi_dadd+0x29c>
 8000904:	4643      	mov	r3, r8
 8000906:	4642      	mov	r2, r8
 8000908:	075b      	lsls	r3, r3, #29
 800090a:	08c9      	lsrs	r1, r1, #3
 800090c:	430b      	orrs	r3, r1
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	e6be      	b.n	8000690 <__aeabi_dadd+0x29c>
 8000912:	4303      	orrs	r3, r0
 8000914:	001c      	movs	r4, r3
 8000916:	1e63      	subs	r3, r4, #1
 8000918:	419c      	sbcs	r4, r3
 800091a:	e6fc      	b.n	8000716 <__aeabi_dadd+0x322>
 800091c:	0002      	movs	r2, r0
 800091e:	3c20      	subs	r4, #32
 8000920:	40e2      	lsrs	r2, r4
 8000922:	0014      	movs	r4, r2
 8000924:	4662      	mov	r2, ip
 8000926:	2a20      	cmp	r2, #32
 8000928:	d003      	beq.n	8000932 <__aeabi_dadd+0x53e>
 800092a:	2540      	movs	r5, #64	; 0x40
 800092c:	1aad      	subs	r5, r5, r2
 800092e:	40a8      	lsls	r0, r5
 8000930:	4303      	orrs	r3, r0
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4183      	sbcs	r3, r0
 8000936:	4323      	orrs	r3, r4
 8000938:	e775      	b.n	8000826 <__aeabi_dadd+0x432>
 800093a:	2a00      	cmp	r2, #0
 800093c:	d0e2      	beq.n	8000904 <__aeabi_dadd+0x510>
 800093e:	003a      	movs	r2, r7
 8000940:	430a      	orrs	r2, r1
 8000942:	d0cd      	beq.n	80008e0 <__aeabi_dadd+0x4ec>
 8000944:	0742      	lsls	r2, r0, #29
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	4313      	orrs	r3, r2
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	08c0      	lsrs	r0, r0, #3
 800094e:	0312      	lsls	r2, r2, #12
 8000950:	4210      	tst	r0, r2
 8000952:	d006      	beq.n	8000962 <__aeabi_dadd+0x56e>
 8000954:	08fc      	lsrs	r4, r7, #3
 8000956:	4214      	tst	r4, r2
 8000958:	d103      	bne.n	8000962 <__aeabi_dadd+0x56e>
 800095a:	0020      	movs	r0, r4
 800095c:	08cb      	lsrs	r3, r1, #3
 800095e:	077a      	lsls	r2, r7, #29
 8000960:	4313      	orrs	r3, r2
 8000962:	0f5a      	lsrs	r2, r3, #29
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	0752      	lsls	r2, r2, #29
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	4313      	orrs	r3, r2
 800096c:	e690      	b.n	8000690 <__aeabi_dadd+0x29c>
 800096e:	4643      	mov	r3, r8
 8000970:	430b      	orrs	r3, r1
 8000972:	d100      	bne.n	8000976 <__aeabi_dadd+0x582>
 8000974:	e709      	b.n	800078a <__aeabi_dadd+0x396>
 8000976:	4643      	mov	r3, r8
 8000978:	4642      	mov	r2, r8
 800097a:	08c9      	lsrs	r1, r1, #3
 800097c:	075b      	lsls	r3, r3, #29
 800097e:	4655      	mov	r5, sl
 8000980:	430b      	orrs	r3, r1
 8000982:	08d0      	lsrs	r0, r2, #3
 8000984:	e666      	b.n	8000654 <__aeabi_dadd+0x260>
 8000986:	1acc      	subs	r4, r1, r3
 8000988:	42a1      	cmp	r1, r4
 800098a:	4189      	sbcs	r1, r1
 800098c:	1a3f      	subs	r7, r7, r0
 800098e:	4249      	negs	r1, r1
 8000990:	4655      	mov	r5, sl
 8000992:	2601      	movs	r6, #1
 8000994:	1a7f      	subs	r7, r7, r1
 8000996:	e57e      	b.n	8000496 <__aeabi_dadd+0xa2>
 8000998:	4642      	mov	r2, r8
 800099a:	1a5c      	subs	r4, r3, r1
 800099c:	1a87      	subs	r7, r0, r2
 800099e:	42a3      	cmp	r3, r4
 80009a0:	4192      	sbcs	r2, r2
 80009a2:	4252      	negs	r2, r2
 80009a4:	1abf      	subs	r7, r7, r2
 80009a6:	023a      	lsls	r2, r7, #8
 80009a8:	d53d      	bpl.n	8000a26 <__aeabi_dadd+0x632>
 80009aa:	1acc      	subs	r4, r1, r3
 80009ac:	42a1      	cmp	r1, r4
 80009ae:	4189      	sbcs	r1, r1
 80009b0:	4643      	mov	r3, r8
 80009b2:	4249      	negs	r1, r1
 80009b4:	1a1f      	subs	r7, r3, r0
 80009b6:	4655      	mov	r5, sl
 80009b8:	1a7f      	subs	r7, r7, r1
 80009ba:	e595      	b.n	80004e8 <__aeabi_dadd+0xf4>
 80009bc:	077b      	lsls	r3, r7, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	430b      	orrs	r3, r1
 80009c2:	08f8      	lsrs	r0, r7, #3
 80009c4:	e643      	b.n	800064e <__aeabi_dadd+0x25a>
 80009c6:	4644      	mov	r4, r8
 80009c8:	08db      	lsrs	r3, r3, #3
 80009ca:	430c      	orrs	r4, r1
 80009cc:	d130      	bne.n	8000a30 <__aeabi_dadd+0x63c>
 80009ce:	0742      	lsls	r2, r0, #29
 80009d0:	4313      	orrs	r3, r2
 80009d2:	08c0      	lsrs	r0, r0, #3
 80009d4:	e65c      	b.n	8000690 <__aeabi_dadd+0x29c>
 80009d6:	077b      	lsls	r3, r7, #29
 80009d8:	08c9      	lsrs	r1, r1, #3
 80009da:	430b      	orrs	r3, r1
 80009dc:	08f8      	lsrs	r0, r7, #3
 80009de:	e639      	b.n	8000654 <__aeabi_dadd+0x260>
 80009e0:	185c      	adds	r4, r3, r1
 80009e2:	429c      	cmp	r4, r3
 80009e4:	419b      	sbcs	r3, r3
 80009e6:	4440      	add	r0, r8
 80009e8:	425b      	negs	r3, r3
 80009ea:	18c7      	adds	r7, r0, r3
 80009ec:	023b      	lsls	r3, r7, #8
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_dadd+0x5fe>
 80009f0:	e625      	b.n	800063e <__aeabi_dadd+0x24a>
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <__aeabi_dadd+0x674>)
 80009f4:	2601      	movs	r6, #1
 80009f6:	401f      	ands	r7, r3
 80009f8:	e621      	b.n	800063e <__aeabi_dadd+0x24a>
 80009fa:	0004      	movs	r4, r0
 80009fc:	3a20      	subs	r2, #32
 80009fe:	40d4      	lsrs	r4, r2
 8000a00:	4662      	mov	r2, ip
 8000a02:	2a20      	cmp	r2, #32
 8000a04:	d004      	beq.n	8000a10 <__aeabi_dadd+0x61c>
 8000a06:	2240      	movs	r2, #64	; 0x40
 8000a08:	4666      	mov	r6, ip
 8000a0a:	1b92      	subs	r2, r2, r6
 8000a0c:	4090      	lsls	r0, r2
 8000a0e:	4303      	orrs	r3, r0
 8000a10:	1e5a      	subs	r2, r3, #1
 8000a12:	4193      	sbcs	r3, r2
 8000a14:	431c      	orrs	r4, r3
 8000a16:	e67e      	b.n	8000716 <__aeabi_dadd+0x322>
 8000a18:	185c      	adds	r4, r3, r1
 8000a1a:	428c      	cmp	r4, r1
 8000a1c:	4189      	sbcs	r1, r1
 8000a1e:	4440      	add	r0, r8
 8000a20:	4249      	negs	r1, r1
 8000a22:	1847      	adds	r7, r0, r1
 8000a24:	e6dd      	b.n	80007e2 <__aeabi_dadd+0x3ee>
 8000a26:	0023      	movs	r3, r4
 8000a28:	433b      	orrs	r3, r7
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x63a>
 8000a2c:	e6ad      	b.n	800078a <__aeabi_dadd+0x396>
 8000a2e:	e606      	b.n	800063e <__aeabi_dadd+0x24a>
 8000a30:	0744      	lsls	r4, r0, #29
 8000a32:	4323      	orrs	r3, r4
 8000a34:	2480      	movs	r4, #128	; 0x80
 8000a36:	08c0      	lsrs	r0, r0, #3
 8000a38:	0324      	lsls	r4, r4, #12
 8000a3a:	4220      	tst	r0, r4
 8000a3c:	d008      	beq.n	8000a50 <__aeabi_dadd+0x65c>
 8000a3e:	4642      	mov	r2, r8
 8000a40:	08d6      	lsrs	r6, r2, #3
 8000a42:	4226      	tst	r6, r4
 8000a44:	d104      	bne.n	8000a50 <__aeabi_dadd+0x65c>
 8000a46:	4655      	mov	r5, sl
 8000a48:	0030      	movs	r0, r6
 8000a4a:	08cb      	lsrs	r3, r1, #3
 8000a4c:	0751      	lsls	r1, r2, #29
 8000a4e:	430b      	orrs	r3, r1
 8000a50:	0f5a      	lsrs	r2, r3, #29
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	0752      	lsls	r2, r2, #29
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	e619      	b.n	8000690 <__aeabi_dadd+0x29c>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	4a01      	ldr	r2, [pc, #4]	; (8000a64 <__aeabi_dadd+0x670>)
 8000a60:	001f      	movs	r7, r3
 8000a62:	e55e      	b.n	8000522 <__aeabi_dadd+0x12e>
 8000a64:	000007ff 	.word	0x000007ff
 8000a68:	ff7fffff 	.word	0xff7fffff

08000a6c <__aeabi_dmul>:
 8000a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6e:	4657      	mov	r7, sl
 8000a70:	464e      	mov	r6, r9
 8000a72:	4645      	mov	r5, r8
 8000a74:	46de      	mov	lr, fp
 8000a76:	b5e0      	push	{r5, r6, r7, lr}
 8000a78:	4698      	mov	r8, r3
 8000a7a:	030c      	lsls	r4, r1, #12
 8000a7c:	004b      	lsls	r3, r1, #1
 8000a7e:	0006      	movs	r6, r0
 8000a80:	4692      	mov	sl, r2
 8000a82:	b087      	sub	sp, #28
 8000a84:	0b24      	lsrs	r4, r4, #12
 8000a86:	0d5b      	lsrs	r3, r3, #21
 8000a88:	0fcf      	lsrs	r7, r1, #31
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dmul+0x24>
 8000a8e:	e15c      	b.n	8000d4a <__aeabi_dmul+0x2de>
 8000a90:	4ad9      	ldr	r2, [pc, #868]	; (8000df8 <__aeabi_dmul+0x38c>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dmul+0x2c>
 8000a96:	e175      	b.n	8000d84 <__aeabi_dmul+0x318>
 8000a98:	0f42      	lsrs	r2, r0, #29
 8000a9a:	00e4      	lsls	r4, r4, #3
 8000a9c:	4314      	orrs	r4, r2
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	0412      	lsls	r2, r2, #16
 8000aa2:	4314      	orrs	r4, r2
 8000aa4:	4ad5      	ldr	r2, [pc, #852]	; (8000dfc <__aeabi_dmul+0x390>)
 8000aa6:	00c5      	lsls	r5, r0, #3
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	4463      	add	r3, ip
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	4699      	mov	r9, r3
 8000ab2:	469b      	mov	fp, r3
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	4642      	mov	r2, r8
 8000ab8:	031e      	lsls	r6, r3, #12
 8000aba:	0fd2      	lsrs	r2, r2, #31
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4650      	mov	r0, sl
 8000ac0:	4690      	mov	r8, r2
 8000ac2:	0b36      	lsrs	r6, r6, #12
 8000ac4:	0d5b      	lsrs	r3, r3, #21
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dmul+0x5e>
 8000ac8:	e120      	b.n	8000d0c <__aeabi_dmul+0x2a0>
 8000aca:	4acb      	ldr	r2, [pc, #812]	; (8000df8 <__aeabi_dmul+0x38c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dmul+0x66>
 8000ad0:	e162      	b.n	8000d98 <__aeabi_dmul+0x32c>
 8000ad2:	49ca      	ldr	r1, [pc, #808]	; (8000dfc <__aeabi_dmul+0x390>)
 8000ad4:	0f42      	lsrs	r2, r0, #29
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	9900      	ldr	r1, [sp, #0]
 8000ada:	4463      	add	r3, ip
 8000adc:	00f6      	lsls	r6, r6, #3
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4316      	orrs	r6, r2
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	449c      	add	ip, r3
 8000ae6:	0412      	lsls	r2, r2, #16
 8000ae8:	4663      	mov	r3, ip
 8000aea:	4316      	orrs	r6, r2
 8000aec:	00c2      	lsls	r2, r0, #3
 8000aee:	2000      	movs	r0, #0
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	9900      	ldr	r1, [sp, #0]
 8000af4:	4643      	mov	r3, r8
 8000af6:	3101      	adds	r1, #1
 8000af8:	468c      	mov	ip, r1
 8000afa:	4649      	mov	r1, r9
 8000afc:	407b      	eors	r3, r7
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	290f      	cmp	r1, #15
 8000b02:	d826      	bhi.n	8000b52 <__aeabi_dmul+0xe6>
 8000b04:	4bbe      	ldr	r3, [pc, #760]	; (8000e00 <__aeabi_dmul+0x394>)
 8000b06:	0089      	lsls	r1, r1, #2
 8000b08:	5859      	ldr	r1, [r3, r1]
 8000b0a:	468f      	mov	pc, r1
 8000b0c:	4643      	mov	r3, r8
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	0034      	movs	r4, r6
 8000b12:	0015      	movs	r5, r2
 8000b14:	4683      	mov	fp, r0
 8000b16:	465b      	mov	r3, fp
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d016      	beq.n	8000b4a <__aeabi_dmul+0xde>
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dmul+0xb6>
 8000b20:	e203      	b.n	8000f2a <__aeabi_dmul+0x4be>
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d000      	beq.n	8000b28 <__aeabi_dmul+0xbc>
 8000b26:	e0cd      	b.n	8000cc4 <__aeabi_dmul+0x258>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2400      	movs	r4, #0
 8000b2c:	2500      	movs	r5, #0
 8000b2e:	9b01      	ldr	r3, [sp, #4]
 8000b30:	0512      	lsls	r2, r2, #20
 8000b32:	4322      	orrs	r2, r4
 8000b34:	07db      	lsls	r3, r3, #31
 8000b36:	431a      	orrs	r2, r3
 8000b38:	0028      	movs	r0, r5
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	b007      	add	sp, #28
 8000b3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000b40:	46bb      	mov	fp, r7
 8000b42:	46b2      	mov	sl, r6
 8000b44:	46a9      	mov	r9, r5
 8000b46:	46a0      	mov	r8, r4
 8000b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b4a:	2400      	movs	r4, #0
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	4aaa      	ldr	r2, [pc, #680]	; (8000df8 <__aeabi_dmul+0x38c>)
 8000b50:	e7ed      	b.n	8000b2e <__aeabi_dmul+0xc2>
 8000b52:	0c28      	lsrs	r0, r5, #16
 8000b54:	042d      	lsls	r5, r5, #16
 8000b56:	0c2d      	lsrs	r5, r5, #16
 8000b58:	002b      	movs	r3, r5
 8000b5a:	0c11      	lsrs	r1, r2, #16
 8000b5c:	0412      	lsls	r2, r2, #16
 8000b5e:	0c12      	lsrs	r2, r2, #16
 8000b60:	4353      	muls	r3, r2
 8000b62:	4698      	mov	r8, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	002f      	movs	r7, r5
 8000b68:	4343      	muls	r3, r0
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	434f      	muls	r7, r1
 8000b6e:	444f      	add	r7, r9
 8000b70:	46bb      	mov	fp, r7
 8000b72:	4647      	mov	r7, r8
 8000b74:	000b      	movs	r3, r1
 8000b76:	0c3f      	lsrs	r7, r7, #16
 8000b78:	46ba      	mov	sl, r7
 8000b7a:	4343      	muls	r3, r0
 8000b7c:	44da      	add	sl, fp
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	45d1      	cmp	r9, sl
 8000b82:	d904      	bls.n	8000b8e <__aeabi_dmul+0x122>
 8000b84:	2780      	movs	r7, #128	; 0x80
 8000b86:	027f      	lsls	r7, r7, #9
 8000b88:	46b9      	mov	r9, r7
 8000b8a:	444b      	add	r3, r9
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	4653      	mov	r3, sl
 8000b90:	0c1b      	lsrs	r3, r3, #16
 8000b92:	469b      	mov	fp, r3
 8000b94:	4653      	mov	r3, sl
 8000b96:	041f      	lsls	r7, r3, #16
 8000b98:	4643      	mov	r3, r8
 8000b9a:	041b      	lsls	r3, r3, #16
 8000b9c:	0c1b      	lsrs	r3, r3, #16
 8000b9e:	4698      	mov	r8, r3
 8000ba0:	003b      	movs	r3, r7
 8000ba2:	4443      	add	r3, r8
 8000ba4:	9304      	str	r3, [sp, #16]
 8000ba6:	0c33      	lsrs	r3, r6, #16
 8000ba8:	0436      	lsls	r6, r6, #16
 8000baa:	0c36      	lsrs	r6, r6, #16
 8000bac:	4698      	mov	r8, r3
 8000bae:	0033      	movs	r3, r6
 8000bb0:	4343      	muls	r3, r0
 8000bb2:	4699      	mov	r9, r3
 8000bb4:	4643      	mov	r3, r8
 8000bb6:	4343      	muls	r3, r0
 8000bb8:	002f      	movs	r7, r5
 8000bba:	469a      	mov	sl, r3
 8000bbc:	4643      	mov	r3, r8
 8000bbe:	4377      	muls	r7, r6
 8000bc0:	435d      	muls	r5, r3
 8000bc2:	0c38      	lsrs	r0, r7, #16
 8000bc4:	444d      	add	r5, r9
 8000bc6:	1945      	adds	r5, r0, r5
 8000bc8:	45a9      	cmp	r9, r5
 8000bca:	d903      	bls.n	8000bd4 <__aeabi_dmul+0x168>
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	025b      	lsls	r3, r3, #9
 8000bd0:	4699      	mov	r9, r3
 8000bd2:	44ca      	add	sl, r9
 8000bd4:	043f      	lsls	r7, r7, #16
 8000bd6:	0c28      	lsrs	r0, r5, #16
 8000bd8:	0c3f      	lsrs	r7, r7, #16
 8000bda:	042d      	lsls	r5, r5, #16
 8000bdc:	19ed      	adds	r5, r5, r7
 8000bde:	0c27      	lsrs	r7, r4, #16
 8000be0:	0424      	lsls	r4, r4, #16
 8000be2:	0c24      	lsrs	r4, r4, #16
 8000be4:	0003      	movs	r3, r0
 8000be6:	0020      	movs	r0, r4
 8000be8:	4350      	muls	r0, r2
 8000bea:	437a      	muls	r2, r7
 8000bec:	4691      	mov	r9, r2
 8000bee:	003a      	movs	r2, r7
 8000bf0:	4453      	add	r3, sl
 8000bf2:	9305      	str	r3, [sp, #20]
 8000bf4:	0c03      	lsrs	r3, r0, #16
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	434a      	muls	r2, r1
 8000bfa:	4361      	muls	r1, r4
 8000bfc:	4449      	add	r1, r9
 8000bfe:	4451      	add	r1, sl
 8000c00:	44ab      	add	fp, r5
 8000c02:	4589      	cmp	r9, r1
 8000c04:	d903      	bls.n	8000c0e <__aeabi_dmul+0x1a2>
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	025b      	lsls	r3, r3, #9
 8000c0a:	4699      	mov	r9, r3
 8000c0c:	444a      	add	r2, r9
 8000c0e:	0400      	lsls	r0, r0, #16
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	0c00      	lsrs	r0, r0, #16
 8000c14:	0409      	lsls	r1, r1, #16
 8000c16:	1809      	adds	r1, r1, r0
 8000c18:	0020      	movs	r0, r4
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	4643      	mov	r3, r8
 8000c1e:	4370      	muls	r0, r6
 8000c20:	435c      	muls	r4, r3
 8000c22:	437e      	muls	r6, r7
 8000c24:	435f      	muls	r7, r3
 8000c26:	0c03      	lsrs	r3, r0, #16
 8000c28:	4698      	mov	r8, r3
 8000c2a:	19a4      	adds	r4, r4, r6
 8000c2c:	4444      	add	r4, r8
 8000c2e:	444a      	add	r2, r9
 8000c30:	9703      	str	r7, [sp, #12]
 8000c32:	42a6      	cmp	r6, r4
 8000c34:	d904      	bls.n	8000c40 <__aeabi_dmul+0x1d4>
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	025b      	lsls	r3, r3, #9
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	4447      	add	r7, r8
 8000c3e:	9703      	str	r7, [sp, #12]
 8000c40:	0423      	lsls	r3, r4, #16
 8000c42:	9e02      	ldr	r6, [sp, #8]
 8000c44:	469a      	mov	sl, r3
 8000c46:	9b05      	ldr	r3, [sp, #20]
 8000c48:	445e      	add	r6, fp
 8000c4a:	4698      	mov	r8, r3
 8000c4c:	42ae      	cmp	r6, r5
 8000c4e:	41ad      	sbcs	r5, r5
 8000c50:	1876      	adds	r6, r6, r1
 8000c52:	428e      	cmp	r6, r1
 8000c54:	4189      	sbcs	r1, r1
 8000c56:	0400      	lsls	r0, r0, #16
 8000c58:	0c00      	lsrs	r0, r0, #16
 8000c5a:	4450      	add	r0, sl
 8000c5c:	4440      	add	r0, r8
 8000c5e:	426d      	negs	r5, r5
 8000c60:	1947      	adds	r7, r0, r5
 8000c62:	46b8      	mov	r8, r7
 8000c64:	4693      	mov	fp, r2
 8000c66:	4249      	negs	r1, r1
 8000c68:	4689      	mov	r9, r1
 8000c6a:	44c3      	add	fp, r8
 8000c6c:	44d9      	add	r9, fp
 8000c6e:	4298      	cmp	r0, r3
 8000c70:	4180      	sbcs	r0, r0
 8000c72:	45a8      	cmp	r8, r5
 8000c74:	41ad      	sbcs	r5, r5
 8000c76:	4593      	cmp	fp, r2
 8000c78:	4192      	sbcs	r2, r2
 8000c7a:	4589      	cmp	r9, r1
 8000c7c:	4189      	sbcs	r1, r1
 8000c7e:	426d      	negs	r5, r5
 8000c80:	4240      	negs	r0, r0
 8000c82:	4328      	orrs	r0, r5
 8000c84:	0c24      	lsrs	r4, r4, #16
 8000c86:	4252      	negs	r2, r2
 8000c88:	4249      	negs	r1, r1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	9b03      	ldr	r3, [sp, #12]
 8000c8e:	1900      	adds	r0, r0, r4
 8000c90:	1880      	adds	r0, r0, r2
 8000c92:	18c7      	adds	r7, r0, r3
 8000c94:	464b      	mov	r3, r9
 8000c96:	0ddc      	lsrs	r4, r3, #23
 8000c98:	9b04      	ldr	r3, [sp, #16]
 8000c9a:	0275      	lsls	r5, r6, #9
 8000c9c:	431d      	orrs	r5, r3
 8000c9e:	1e6a      	subs	r2, r5, #1
 8000ca0:	4195      	sbcs	r5, r2
 8000ca2:	464b      	mov	r3, r9
 8000ca4:	0df6      	lsrs	r6, r6, #23
 8000ca6:	027f      	lsls	r7, r7, #9
 8000ca8:	4335      	orrs	r5, r6
 8000caa:	025a      	lsls	r2, r3, #9
 8000cac:	433c      	orrs	r4, r7
 8000cae:	4315      	orrs	r5, r2
 8000cb0:	01fb      	lsls	r3, r7, #7
 8000cb2:	d400      	bmi.n	8000cb6 <__aeabi_dmul+0x24a>
 8000cb4:	e11c      	b.n	8000ef0 <__aeabi_dmul+0x484>
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	086a      	lsrs	r2, r5, #1
 8000cba:	400d      	ands	r5, r1
 8000cbc:	4315      	orrs	r5, r2
 8000cbe:	07e2      	lsls	r2, r4, #31
 8000cc0:	4315      	orrs	r5, r2
 8000cc2:	0864      	lsrs	r4, r4, #1
 8000cc4:	494f      	ldr	r1, [pc, #316]	; (8000e04 <__aeabi_dmul+0x398>)
 8000cc6:	4461      	add	r1, ip
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	dc00      	bgt.n	8000cce <__aeabi_dmul+0x262>
 8000ccc:	e0b0      	b.n	8000e30 <__aeabi_dmul+0x3c4>
 8000cce:	076b      	lsls	r3, r5, #29
 8000cd0:	d009      	beq.n	8000ce6 <__aeabi_dmul+0x27a>
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	402a      	ands	r2, r5
 8000cd6:	2a04      	cmp	r2, #4
 8000cd8:	d005      	beq.n	8000ce6 <__aeabi_dmul+0x27a>
 8000cda:	1d2a      	adds	r2, r5, #4
 8000cdc:	42aa      	cmp	r2, r5
 8000cde:	41ad      	sbcs	r5, r5
 8000ce0:	426d      	negs	r5, r5
 8000ce2:	1964      	adds	r4, r4, r5
 8000ce4:	0015      	movs	r5, r2
 8000ce6:	01e3      	lsls	r3, r4, #7
 8000ce8:	d504      	bpl.n	8000cf4 <__aeabi_dmul+0x288>
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	4a46      	ldr	r2, [pc, #280]	; (8000e08 <__aeabi_dmul+0x39c>)
 8000cee:	00c9      	lsls	r1, r1, #3
 8000cf0:	4014      	ands	r4, r2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	4a45      	ldr	r2, [pc, #276]	; (8000e0c <__aeabi_dmul+0x3a0>)
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dmul+0x290>
 8000cfa:	e726      	b.n	8000b4a <__aeabi_dmul+0xde>
 8000cfc:	0762      	lsls	r2, r4, #29
 8000cfe:	08ed      	lsrs	r5, r5, #3
 8000d00:	0264      	lsls	r4, r4, #9
 8000d02:	0549      	lsls	r1, r1, #21
 8000d04:	4315      	orrs	r5, r2
 8000d06:	0b24      	lsrs	r4, r4, #12
 8000d08:	0d4a      	lsrs	r2, r1, #21
 8000d0a:	e710      	b.n	8000b2e <__aeabi_dmul+0xc2>
 8000d0c:	4652      	mov	r2, sl
 8000d0e:	4332      	orrs	r2, r6
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dmul+0x2a8>
 8000d12:	e07f      	b.n	8000e14 <__aeabi_dmul+0x3a8>
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dmul+0x2ae>
 8000d18:	e0dc      	b.n	8000ed4 <__aeabi_dmul+0x468>
 8000d1a:	0030      	movs	r0, r6
 8000d1c:	f000 f978 	bl	8001010 <__clzsi2>
 8000d20:	0002      	movs	r2, r0
 8000d22:	3a0b      	subs	r2, #11
 8000d24:	231d      	movs	r3, #29
 8000d26:	0001      	movs	r1, r0
 8000d28:	1a9b      	subs	r3, r3, r2
 8000d2a:	4652      	mov	r2, sl
 8000d2c:	3908      	subs	r1, #8
 8000d2e:	40da      	lsrs	r2, r3
 8000d30:	408e      	lsls	r6, r1
 8000d32:	4316      	orrs	r6, r2
 8000d34:	4652      	mov	r2, sl
 8000d36:	408a      	lsls	r2, r1
 8000d38:	9b00      	ldr	r3, [sp, #0]
 8000d3a:	4935      	ldr	r1, [pc, #212]	; (8000e10 <__aeabi_dmul+0x3a4>)
 8000d3c:	1a18      	subs	r0, r3, r0
 8000d3e:	0003      	movs	r3, r0
 8000d40:	468c      	mov	ip, r1
 8000d42:	4463      	add	r3, ip
 8000d44:	2000      	movs	r0, #0
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	e6d3      	b.n	8000af2 <__aeabi_dmul+0x86>
 8000d4a:	0025      	movs	r5, r4
 8000d4c:	4305      	orrs	r5, r0
 8000d4e:	d04a      	beq.n	8000de6 <__aeabi_dmul+0x37a>
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dmul+0x2ea>
 8000d54:	e0b0      	b.n	8000eb8 <__aeabi_dmul+0x44c>
 8000d56:	0020      	movs	r0, r4
 8000d58:	f000 f95a 	bl	8001010 <__clzsi2>
 8000d5c:	0001      	movs	r1, r0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	390b      	subs	r1, #11
 8000d62:	231d      	movs	r3, #29
 8000d64:	0010      	movs	r0, r2
 8000d66:	1a5b      	subs	r3, r3, r1
 8000d68:	0031      	movs	r1, r6
 8000d6a:	0035      	movs	r5, r6
 8000d6c:	3808      	subs	r0, #8
 8000d6e:	4084      	lsls	r4, r0
 8000d70:	40d9      	lsrs	r1, r3
 8000d72:	4085      	lsls	r5, r0
 8000d74:	430c      	orrs	r4, r1
 8000d76:	4826      	ldr	r0, [pc, #152]	; (8000e10 <__aeabi_dmul+0x3a4>)
 8000d78:	1a83      	subs	r3, r0, r2
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4699      	mov	r9, r3
 8000d80:	469b      	mov	fp, r3
 8000d82:	e697      	b.n	8000ab4 <__aeabi_dmul+0x48>
 8000d84:	0005      	movs	r5, r0
 8000d86:	4325      	orrs	r5, r4
 8000d88:	d126      	bne.n	8000dd8 <__aeabi_dmul+0x36c>
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2302      	movs	r3, #2
 8000d90:	2400      	movs	r4, #0
 8000d92:	4691      	mov	r9, r2
 8000d94:	469b      	mov	fp, r3
 8000d96:	e68d      	b.n	8000ab4 <__aeabi_dmul+0x48>
 8000d98:	4652      	mov	r2, sl
 8000d9a:	9b00      	ldr	r3, [sp, #0]
 8000d9c:	4332      	orrs	r2, r6
 8000d9e:	d110      	bne.n	8000dc2 <__aeabi_dmul+0x356>
 8000da0:	4915      	ldr	r1, [pc, #84]	; (8000df8 <__aeabi_dmul+0x38c>)
 8000da2:	2600      	movs	r6, #0
 8000da4:	468c      	mov	ip, r1
 8000da6:	4463      	add	r3, ip
 8000da8:	4649      	mov	r1, r9
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2302      	movs	r3, #2
 8000dae:	4319      	orrs	r1, r3
 8000db0:	4689      	mov	r9, r1
 8000db2:	2002      	movs	r0, #2
 8000db4:	e69d      	b.n	8000af2 <__aeabi_dmul+0x86>
 8000db6:	465b      	mov	r3, fp
 8000db8:	9701      	str	r7, [sp, #4]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_dmul+0x354>
 8000dbe:	e6ad      	b.n	8000b1c <__aeabi_dmul+0xb0>
 8000dc0:	e6c3      	b.n	8000b4a <__aeabi_dmul+0xde>
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <__aeabi_dmul+0x38c>)
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	4694      	mov	ip, r2
 8000dc8:	4463      	add	r3, ip
 8000dca:	464a      	mov	r2, r9
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2303      	movs	r3, #3
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	4691      	mov	r9, r2
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	e68c      	b.n	8000af2 <__aeabi_dmul+0x86>
 8000dd8:	220c      	movs	r2, #12
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2303      	movs	r3, #3
 8000dde:	0005      	movs	r5, r0
 8000de0:	4691      	mov	r9, r2
 8000de2:	469b      	mov	fp, r3
 8000de4:	e666      	b.n	8000ab4 <__aeabi_dmul+0x48>
 8000de6:	2304      	movs	r3, #4
 8000de8:	4699      	mov	r9, r3
 8000dea:	2300      	movs	r3, #0
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	2400      	movs	r4, #0
 8000df2:	469b      	mov	fp, r3
 8000df4:	e65e      	b.n	8000ab4 <__aeabi_dmul+0x48>
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	000007ff 	.word	0x000007ff
 8000dfc:	fffffc01 	.word	0xfffffc01
 8000e00:	080044dc 	.word	0x080044dc
 8000e04:	000003ff 	.word	0x000003ff
 8000e08:	feffffff 	.word	0xfeffffff
 8000e0c:	000007fe 	.word	0x000007fe
 8000e10:	fffffc0d 	.word	0xfffffc0d
 8000e14:	4649      	mov	r1, r9
 8000e16:	2301      	movs	r3, #1
 8000e18:	4319      	orrs	r1, r3
 8000e1a:	4689      	mov	r9, r1
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	2001      	movs	r0, #1
 8000e20:	e667      	b.n	8000af2 <__aeabi_dmul+0x86>
 8000e22:	2300      	movs	r3, #0
 8000e24:	2480      	movs	r4, #128	; 0x80
 8000e26:	2500      	movs	r5, #0
 8000e28:	4a43      	ldr	r2, [pc, #268]	; (8000f38 <__aeabi_dmul+0x4cc>)
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	0324      	lsls	r4, r4, #12
 8000e2e:	e67e      	b.n	8000b2e <__aeabi_dmul+0xc2>
 8000e30:	2001      	movs	r0, #1
 8000e32:	1a40      	subs	r0, r0, r1
 8000e34:	2838      	cmp	r0, #56	; 0x38
 8000e36:	dd00      	ble.n	8000e3a <__aeabi_dmul+0x3ce>
 8000e38:	e676      	b.n	8000b28 <__aeabi_dmul+0xbc>
 8000e3a:	281f      	cmp	r0, #31
 8000e3c:	dd5b      	ble.n	8000ef6 <__aeabi_dmul+0x48a>
 8000e3e:	221f      	movs	r2, #31
 8000e40:	0023      	movs	r3, r4
 8000e42:	4252      	negs	r2, r2
 8000e44:	1a51      	subs	r1, r2, r1
 8000e46:	40cb      	lsrs	r3, r1
 8000e48:	0019      	movs	r1, r3
 8000e4a:	2820      	cmp	r0, #32
 8000e4c:	d003      	beq.n	8000e56 <__aeabi_dmul+0x3ea>
 8000e4e:	4a3b      	ldr	r2, [pc, #236]	; (8000f3c <__aeabi_dmul+0x4d0>)
 8000e50:	4462      	add	r2, ip
 8000e52:	4094      	lsls	r4, r2
 8000e54:	4325      	orrs	r5, r4
 8000e56:	1e6a      	subs	r2, r5, #1
 8000e58:	4195      	sbcs	r5, r2
 8000e5a:	002a      	movs	r2, r5
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	2107      	movs	r1, #7
 8000e60:	000d      	movs	r5, r1
 8000e62:	2400      	movs	r4, #0
 8000e64:	4015      	ands	r5, r2
 8000e66:	4211      	tst	r1, r2
 8000e68:	d05b      	beq.n	8000f22 <__aeabi_dmul+0x4b6>
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	4011      	ands	r1, r2
 8000e70:	2904      	cmp	r1, #4
 8000e72:	d053      	beq.n	8000f1c <__aeabi_dmul+0x4b0>
 8000e74:	1d11      	adds	r1, r2, #4
 8000e76:	4291      	cmp	r1, r2
 8000e78:	4192      	sbcs	r2, r2
 8000e7a:	4252      	negs	r2, r2
 8000e7c:	18a4      	adds	r4, r4, r2
 8000e7e:	000a      	movs	r2, r1
 8000e80:	0223      	lsls	r3, r4, #8
 8000e82:	d54b      	bpl.n	8000f1c <__aeabi_dmul+0x4b0>
 8000e84:	2201      	movs	r2, #1
 8000e86:	2400      	movs	r4, #0
 8000e88:	2500      	movs	r5, #0
 8000e8a:	e650      	b.n	8000b2e <__aeabi_dmul+0xc2>
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	031b      	lsls	r3, r3, #12
 8000e90:	421c      	tst	r4, r3
 8000e92:	d009      	beq.n	8000ea8 <__aeabi_dmul+0x43c>
 8000e94:	421e      	tst	r6, r3
 8000e96:	d107      	bne.n	8000ea8 <__aeabi_dmul+0x43c>
 8000e98:	4333      	orrs	r3, r6
 8000e9a:	031c      	lsls	r4, r3, #12
 8000e9c:	4643      	mov	r3, r8
 8000e9e:	0015      	movs	r5, r2
 8000ea0:	0b24      	lsrs	r4, r4, #12
 8000ea2:	4a25      	ldr	r2, [pc, #148]	; (8000f38 <__aeabi_dmul+0x4cc>)
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	e642      	b.n	8000b2e <__aeabi_dmul+0xc2>
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	0312      	lsls	r2, r2, #12
 8000eac:	4314      	orrs	r4, r2
 8000eae:	0324      	lsls	r4, r4, #12
 8000eb0:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <__aeabi_dmul+0x4cc>)
 8000eb2:	0b24      	lsrs	r4, r4, #12
 8000eb4:	9701      	str	r7, [sp, #4]
 8000eb6:	e63a      	b.n	8000b2e <__aeabi_dmul+0xc2>
 8000eb8:	f000 f8aa 	bl	8001010 <__clzsi2>
 8000ebc:	0001      	movs	r1, r0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	3115      	adds	r1, #21
 8000ec2:	3220      	adds	r2, #32
 8000ec4:	291c      	cmp	r1, #28
 8000ec6:	dc00      	bgt.n	8000eca <__aeabi_dmul+0x45e>
 8000ec8:	e74b      	b.n	8000d62 <__aeabi_dmul+0x2f6>
 8000eca:	0034      	movs	r4, r6
 8000ecc:	3808      	subs	r0, #8
 8000ece:	2500      	movs	r5, #0
 8000ed0:	4084      	lsls	r4, r0
 8000ed2:	e750      	b.n	8000d76 <__aeabi_dmul+0x30a>
 8000ed4:	f000 f89c 	bl	8001010 <__clzsi2>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	001a      	movs	r2, r3
 8000edc:	3215      	adds	r2, #21
 8000ede:	3020      	adds	r0, #32
 8000ee0:	2a1c      	cmp	r2, #28
 8000ee2:	dc00      	bgt.n	8000ee6 <__aeabi_dmul+0x47a>
 8000ee4:	e71e      	b.n	8000d24 <__aeabi_dmul+0x2b8>
 8000ee6:	4656      	mov	r6, sl
 8000ee8:	3b08      	subs	r3, #8
 8000eea:	2200      	movs	r2, #0
 8000eec:	409e      	lsls	r6, r3
 8000eee:	e723      	b.n	8000d38 <__aeabi_dmul+0x2cc>
 8000ef0:	9b00      	ldr	r3, [sp, #0]
 8000ef2:	469c      	mov	ip, r3
 8000ef4:	e6e6      	b.n	8000cc4 <__aeabi_dmul+0x258>
 8000ef6:	4912      	ldr	r1, [pc, #72]	; (8000f40 <__aeabi_dmul+0x4d4>)
 8000ef8:	0022      	movs	r2, r4
 8000efa:	4461      	add	r1, ip
 8000efc:	002e      	movs	r6, r5
 8000efe:	408d      	lsls	r5, r1
 8000f00:	408a      	lsls	r2, r1
 8000f02:	40c6      	lsrs	r6, r0
 8000f04:	1e69      	subs	r1, r5, #1
 8000f06:	418d      	sbcs	r5, r1
 8000f08:	4332      	orrs	r2, r6
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	40c4      	lsrs	r4, r0
 8000f0e:	0753      	lsls	r3, r2, #29
 8000f10:	d0b6      	beq.n	8000e80 <__aeabi_dmul+0x414>
 8000f12:	210f      	movs	r1, #15
 8000f14:	4011      	ands	r1, r2
 8000f16:	2904      	cmp	r1, #4
 8000f18:	d1ac      	bne.n	8000e74 <__aeabi_dmul+0x408>
 8000f1a:	e7b1      	b.n	8000e80 <__aeabi_dmul+0x414>
 8000f1c:	0765      	lsls	r5, r4, #29
 8000f1e:	0264      	lsls	r4, r4, #9
 8000f20:	0b24      	lsrs	r4, r4, #12
 8000f22:	08d2      	lsrs	r2, r2, #3
 8000f24:	4315      	orrs	r5, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	e601      	b.n	8000b2e <__aeabi_dmul+0xc2>
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	0312      	lsls	r2, r2, #12
 8000f2e:	4314      	orrs	r4, r2
 8000f30:	0324      	lsls	r4, r4, #12
 8000f32:	4a01      	ldr	r2, [pc, #4]	; (8000f38 <__aeabi_dmul+0x4cc>)
 8000f34:	0b24      	lsrs	r4, r4, #12
 8000f36:	e5fa      	b.n	8000b2e <__aeabi_dmul+0xc2>
 8000f38:	000007ff 	.word	0x000007ff
 8000f3c:	0000043e 	.word	0x0000043e
 8000f40:	0000041e 	.word	0x0000041e

08000f44 <__aeabi_d2iz>:
 8000f44:	000a      	movs	r2, r1
 8000f46:	b530      	push	{r4, r5, lr}
 8000f48:	4c13      	ldr	r4, [pc, #76]	; (8000f98 <__aeabi_d2iz+0x54>)
 8000f4a:	0053      	lsls	r3, r2, #1
 8000f4c:	0309      	lsls	r1, r1, #12
 8000f4e:	0005      	movs	r5, r0
 8000f50:	0b09      	lsrs	r1, r1, #12
 8000f52:	2000      	movs	r0, #0
 8000f54:	0d5b      	lsrs	r3, r3, #21
 8000f56:	0fd2      	lsrs	r2, r2, #31
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	dd04      	ble.n	8000f66 <__aeabi_d2iz+0x22>
 8000f5c:	480f      	ldr	r0, [pc, #60]	; (8000f9c <__aeabi_d2iz+0x58>)
 8000f5e:	4283      	cmp	r3, r0
 8000f60:	dd02      	ble.n	8000f68 <__aeabi_d2iz+0x24>
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <__aeabi_d2iz+0x5c>)
 8000f64:	18d0      	adds	r0, r2, r3
 8000f66:	bd30      	pop	{r4, r5, pc}
 8000f68:	2080      	movs	r0, #128	; 0x80
 8000f6a:	0340      	lsls	r0, r0, #13
 8000f6c:	4301      	orrs	r1, r0
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <__aeabi_d2iz+0x60>)
 8000f70:	1ac0      	subs	r0, r0, r3
 8000f72:	281f      	cmp	r0, #31
 8000f74:	dd08      	ble.n	8000f88 <__aeabi_d2iz+0x44>
 8000f76:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <__aeabi_d2iz+0x64>)
 8000f78:	1ac3      	subs	r3, r0, r3
 8000f7a:	40d9      	lsrs	r1, r3
 8000f7c:	000b      	movs	r3, r1
 8000f7e:	4258      	negs	r0, r3
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	d1f0      	bne.n	8000f66 <__aeabi_d2iz+0x22>
 8000f84:	0018      	movs	r0, r3
 8000f86:	e7ee      	b.n	8000f66 <__aeabi_d2iz+0x22>
 8000f88:	4c08      	ldr	r4, [pc, #32]	; (8000fac <__aeabi_d2iz+0x68>)
 8000f8a:	40c5      	lsrs	r5, r0
 8000f8c:	46a4      	mov	ip, r4
 8000f8e:	4463      	add	r3, ip
 8000f90:	4099      	lsls	r1, r3
 8000f92:	000b      	movs	r3, r1
 8000f94:	432b      	orrs	r3, r5
 8000f96:	e7f2      	b.n	8000f7e <__aeabi_d2iz+0x3a>
 8000f98:	000003fe 	.word	0x000003fe
 8000f9c:	0000041d 	.word	0x0000041d
 8000fa0:	7fffffff 	.word	0x7fffffff
 8000fa4:	00000433 	.word	0x00000433
 8000fa8:	00000413 	.word	0x00000413
 8000fac:	fffffbed 	.word	0xfffffbed

08000fb0 <__aeabi_i2d>:
 8000fb0:	b570      	push	{r4, r5, r6, lr}
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d016      	beq.n	8000fe4 <__aeabi_i2d+0x34>
 8000fb6:	17c3      	asrs	r3, r0, #31
 8000fb8:	18c5      	adds	r5, r0, r3
 8000fba:	405d      	eors	r5, r3
 8000fbc:	0fc4      	lsrs	r4, r0, #31
 8000fbe:	0028      	movs	r0, r5
 8000fc0:	f000 f826 	bl	8001010 <__clzsi2>
 8000fc4:	4a11      	ldr	r2, [pc, #68]	; (800100c <__aeabi_i2d+0x5c>)
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	280a      	cmp	r0, #10
 8000fca:	dc16      	bgt.n	8000ffa <__aeabi_i2d+0x4a>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	002e      	movs	r6, r5
 8000fd0:	3315      	adds	r3, #21
 8000fd2:	409e      	lsls	r6, r3
 8000fd4:	230b      	movs	r3, #11
 8000fd6:	1a18      	subs	r0, r3, r0
 8000fd8:	40c5      	lsrs	r5, r0
 8000fda:	0552      	lsls	r2, r2, #21
 8000fdc:	032d      	lsls	r5, r5, #12
 8000fde:	0b2d      	lsrs	r5, r5, #12
 8000fe0:	0d53      	lsrs	r3, r2, #21
 8000fe2:	e003      	b.n	8000fec <__aeabi_i2d+0x3c>
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	2500      	movs	r5, #0
 8000fea:	2600      	movs	r6, #0
 8000fec:	051b      	lsls	r3, r3, #20
 8000fee:	432b      	orrs	r3, r5
 8000ff0:	07e4      	lsls	r4, r4, #31
 8000ff2:	4323      	orrs	r3, r4
 8000ff4:	0030      	movs	r0, r6
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
 8000ffa:	380b      	subs	r0, #11
 8000ffc:	4085      	lsls	r5, r0
 8000ffe:	0552      	lsls	r2, r2, #21
 8001000:	032d      	lsls	r5, r5, #12
 8001002:	2600      	movs	r6, #0
 8001004:	0b2d      	lsrs	r5, r5, #12
 8001006:	0d53      	lsrs	r3, r2, #21
 8001008:	e7f0      	b.n	8000fec <__aeabi_i2d+0x3c>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	0000041e 	.word	0x0000041e

08001010 <__clzsi2>:
 8001010:	211c      	movs	r1, #28
 8001012:	2301      	movs	r3, #1
 8001014:	041b      	lsls	r3, r3, #16
 8001016:	4298      	cmp	r0, r3
 8001018:	d301      	bcc.n	800101e <__clzsi2+0xe>
 800101a:	0c00      	lsrs	r0, r0, #16
 800101c:	3910      	subs	r1, #16
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	4298      	cmp	r0, r3
 8001022:	d301      	bcc.n	8001028 <__clzsi2+0x18>
 8001024:	0a00      	lsrs	r0, r0, #8
 8001026:	3908      	subs	r1, #8
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	4298      	cmp	r0, r3
 800102c:	d301      	bcc.n	8001032 <__clzsi2+0x22>
 800102e:	0900      	lsrs	r0, r0, #4
 8001030:	3904      	subs	r1, #4
 8001032:	a202      	add	r2, pc, #8	; (adr r2, 800103c <__clzsi2+0x2c>)
 8001034:	5c10      	ldrb	r0, [r2, r0]
 8001036:	1840      	adds	r0, r0, r1
 8001038:	4770      	bx	lr
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	02020304 	.word	0x02020304
 8001040:	01010101 	.word	0x01010101
	...

0800104c <readCounter>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t readCounter()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  return (m_counter*65535) + TIM3->CNT;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <readCounter+0x28>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	0013      	movs	r3, r2
 8001056:	041b      	lsls	r3, r3, #16
 8001058:	1a9a      	subs	r2, r3, r2
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <readCounter+0x2c>)
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	18d3      	adds	r3, r2, r3
 8001060:	0018      	movs	r0, r3
 8001062:	2300      	movs	r3, #0
 8001064:	0019      	movs	r1, r3
 8001066:	0002      	movs	r2, r0
 8001068:	000b      	movs	r3, r1
}
 800106a:	0010      	movs	r0, r2
 800106c:	0019      	movs	r1, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	20000168 	.word	0x20000168
 8001078:	40000400 	.word	0x40000400

0800107c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001088:	429a      	cmp	r2, r3
 800108a:	d104      	bne.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x1a>
        m_counter++;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001094:	601a      	str	r2, [r3, #0]
    }
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	2000007c 	.word	0x2000007c
 80010a4:	20000168 	.word	0x20000168

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f000 fc36 	bl	800191e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f98d 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f000 fa99 	bl	80015ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80010ba:	f000 f9cd 	bl	8001458 <MX_I2C1_Init>
  MX_TIM3_Init();
 80010be:	f000 fa0b 	bl	80014d8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80010c2:	f000 fa5f 	bl	8001584 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80010c6:	4bad      	ldr	r3, [pc, #692]	; (800137c <main+0x2d4>)
 80010c8:	0018      	movs	r0, r3
 80010ca:	f002 f991 	bl	80033f0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,  GPIO_PIN_SET);
 80010ce:	23a0      	movs	r3, #160	; 0xa0
 80010d0:	05db      	lsls	r3, r3, #23
 80010d2:	2201      	movs	r2, #1
 80010d4:	2110      	movs	r1, #16
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 fee4 	bl	8001ea4 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 1000);
 80010dc:	4ba8      	ldr	r3, [pc, #672]	; (8001380 <main+0x2d8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b299      	uxth	r1, r3
 80010e2:	4aa8      	ldr	r2, [pc, #672]	; (8001384 <main+0x2dc>)
 80010e4:	48a8      	ldr	r0, [pc, #672]	; (8001388 <main+0x2e0>)
 80010e6:	23fa      	movs	r3, #250	; 0xfa
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	f000 ff8d 	bl	800200c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, &rcvBuf, 2, 1000);
 80010f2:	4ba3      	ldr	r3, [pc, #652]	; (8001380 <main+0x2d8>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b299      	uxth	r1, r3
 80010f8:	4aa4      	ldr	r2, [pc, #656]	; (800138c <main+0x2e4>)
 80010fa:	48a3      	ldr	r0, [pc, #652]	; (8001388 <main+0x2e0>)
 80010fc:	23fa      	movs	r3, #250	; 0xfa
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2302      	movs	r3, #2
 8001104:	f001 f88a 	bl	800221c <HAL_I2C_Master_Receive>
    Angle = rcvBuf[0]*256 + rcvBuf[1];
 8001108:	4ba0      	ldr	r3, [pc, #640]	; (800138c <main+0x2e4>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b9e      	ldr	r3, [pc, #632]	; (800138c <main+0x2e4>)
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	b29b      	uxth	r3, r3
 8001118:	18d3      	adds	r3, r2, r3
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b9c      	ldr	r3, [pc, #624]	; (8001390 <main+0x2e8>)
 800111e:	801a      	strh	r2, [r3, #0]

    if(Angle-pAngle>0 && abs(Angle-pAngle)<4000){
 8001120:	4b9b      	ldr	r3, [pc, #620]	; (8001390 <main+0x2e8>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	001a      	movs	r2, r3
 8001126:	4b9b      	ldr	r3, [pc, #620]	; (8001394 <main+0x2ec>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	dd1e      	ble.n	800116e <main+0xc6>
 8001130:	4b97      	ldr	r3, [pc, #604]	; (8001390 <main+0x2e8>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	001a      	movs	r2, r3
 8001136:	4b97      	ldr	r3, [pc, #604]	; (8001394 <main+0x2ec>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4a96      	ldr	r2, [pc, #600]	; (8001398 <main+0x2f0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	db15      	blt.n	800116e <main+0xc6>
 8001142:	4b93      	ldr	r3, [pc, #588]	; (8001390 <main+0x2e8>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	001a      	movs	r2, r3
 8001148:	4b92      	ldr	r3, [pc, #584]	; (8001394 <main+0x2ec>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	1ad2      	subs	r2, r2, r3
 800114e:	23fa      	movs	r3, #250	; 0xfa
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	429a      	cmp	r2, r3
 8001154:	da0b      	bge.n	800116e <main+0xc6>
      totalAng = totalAng + (Angle-pAngle);
 8001156:	4b8e      	ldr	r3, [pc, #568]	; (8001390 <main+0x2e8>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	001a      	movs	r2, r3
 800115c:	4b8d      	ldr	r3, [pc, #564]	; (8001394 <main+0x2ec>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	1ad2      	subs	r2, r2, r3
 8001162:	4b8e      	ldr	r3, [pc, #568]	; (800139c <main+0x2f4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	18d2      	adds	r2, r2, r3
 8001168:	4b8c      	ldr	r3, [pc, #560]	; (800139c <main+0x2f4>)
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e06f      	b.n	800124e <main+0x1a6>
    }else if(Angle-pAngle<0 && abs(Angle-pAngle)<4000){
 800116e:	4b88      	ldr	r3, [pc, #544]	; (8001390 <main+0x2e8>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	001a      	movs	r2, r3
 8001174:	4b87      	ldr	r3, [pc, #540]	; (8001394 <main+0x2ec>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	d51e      	bpl.n	80011ba <main+0x112>
 800117c:	4b84      	ldr	r3, [pc, #528]	; (8001390 <main+0x2e8>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	001a      	movs	r2, r3
 8001182:	4b84      	ldr	r3, [pc, #528]	; (8001394 <main+0x2ec>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	4a83      	ldr	r2, [pc, #524]	; (8001398 <main+0x2f0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	db15      	blt.n	80011ba <main+0x112>
 800118e:	4b80      	ldr	r3, [pc, #512]	; (8001390 <main+0x2e8>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	001a      	movs	r2, r3
 8001194:	4b7f      	ldr	r3, [pc, #508]	; (8001394 <main+0x2ec>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	1ad2      	subs	r2, r2, r3
 800119a:	23fa      	movs	r3, #250	; 0xfa
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	429a      	cmp	r2, r3
 80011a0:	da0b      	bge.n	80011ba <main+0x112>
      totalAng = totalAng + (Angle-pAngle);
 80011a2:	4b7b      	ldr	r3, [pc, #492]	; (8001390 <main+0x2e8>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	001a      	movs	r2, r3
 80011a8:	4b7a      	ldr	r3, [pc, #488]	; (8001394 <main+0x2ec>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	1ad2      	subs	r2, r2, r3
 80011ae:	4b7b      	ldr	r3, [pc, #492]	; (800139c <main+0x2f4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	18d2      	adds	r2, r2, r3
 80011b4:	4b79      	ldr	r3, [pc, #484]	; (800139c <main+0x2f4>)
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e049      	b.n	800124e <main+0x1a6>
    }else if(Angle-pAngle>0 && abs(Angle-pAngle)>4000){
 80011ba:	4b75      	ldr	r3, [pc, #468]	; (8001390 <main+0x2e8>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	001a      	movs	r2, r3
 80011c0:	4b74      	ldr	r3, [pc, #464]	; (8001394 <main+0x2ec>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	dd1a      	ble.n	8001200 <main+0x158>
 80011ca:	4b71      	ldr	r3, [pc, #452]	; (8001390 <main+0x2e8>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	001a      	movs	r2, r3
 80011d0:	4b70      	ldr	r3, [pc, #448]	; (8001394 <main+0x2ec>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	17d9      	asrs	r1, r3, #31
 80011d8:	185a      	adds	r2, r3, r1
 80011da:	404a      	eors	r2, r1
 80011dc:	23fa      	movs	r3, #250	; 0xfa
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dd0d      	ble.n	8001200 <main+0x158>
      totalAng = totalAng - ((4095-Angle)+pAngle);
 80011e4:	4b6d      	ldr	r3, [pc, #436]	; (800139c <main+0x2f4>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <main+0x2e8>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	0019      	movs	r1, r3
 80011ee:	4b6c      	ldr	r3, [pc, #432]	; (80013a0 <main+0x2f8>)
 80011f0:	1a5b      	subs	r3, r3, r1
 80011f2:	4968      	ldr	r1, [pc, #416]	; (8001394 <main+0x2ec>)
 80011f4:	8809      	ldrh	r1, [r1, #0]
 80011f6:	185b      	adds	r3, r3, r1
 80011f8:	1ad2      	subs	r2, r2, r3
 80011fa:	4b68      	ldr	r3, [pc, #416]	; (800139c <main+0x2f4>)
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	e026      	b.n	800124e <main+0x1a6>
    }else if(Angle-pAngle<0 && abs(Angle-pAngle)>4000){
 8001200:	4b63      	ldr	r3, [pc, #396]	; (8001390 <main+0x2e8>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	001a      	movs	r2, r3
 8001206:	4b63      	ldr	r3, [pc, #396]	; (8001394 <main+0x2ec>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	d51b      	bpl.n	8001246 <main+0x19e>
 800120e:	4b60      	ldr	r3, [pc, #384]	; (8001390 <main+0x2e8>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	001a      	movs	r2, r3
 8001214:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <main+0x2ec>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	17d9      	asrs	r1, r3, #31
 800121c:	185a      	adds	r2, r3, r1
 800121e:	404a      	eors	r2, r1
 8001220:	23fa      	movs	r3, #250	; 0xfa
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	429a      	cmp	r2, r3
 8001226:	dd0e      	ble.n	8001246 <main+0x19e>
      totalAng = totalAng + Angle + (4095-pAngle);
 8001228:	4b59      	ldr	r3, [pc, #356]	; (8001390 <main+0x2e8>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	001a      	movs	r2, r3
 800122e:	4b5b      	ldr	r3, [pc, #364]	; (800139c <main+0x2f4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	18d2      	adds	r2, r2, r3
 8001234:	4b57      	ldr	r3, [pc, #348]	; (8001394 <main+0x2ec>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	0019      	movs	r1, r3
 800123a:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <main+0x2f8>)
 800123c:	1a5b      	subs	r3, r3, r1
 800123e:	18d2      	adds	r2, r2, r3
 8001240:	4b56      	ldr	r3, [pc, #344]	; (800139c <main+0x2f4>)
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e003      	b.n	800124e <main+0x1a6>
    }else{
      totalAng = totalAng;
 8001246:	4b55      	ldr	r3, [pc, #340]	; (800139c <main+0x2f4>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b54      	ldr	r3, [pc, #336]	; (800139c <main+0x2f4>)
 800124c:	601a      	str	r2, [r3, #0]
    }

    micro_time = readCounter();
 800124e:	f7ff fefd 	bl	800104c <readCounter>
 8001252:	0002      	movs	r2, r0
 8001254:	000b      	movs	r3, r1
 8001256:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <main+0x2fc>)
 8001258:	601a      	str	r2, [r3, #0]
    dtime = micro_time - pmicro_time;
 800125a:	4b52      	ldr	r3, [pc, #328]	; (80013a4 <main+0x2fc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b51      	ldr	r3, [pc, #324]	; (80013a8 <main+0x300>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	b29b      	uxth	r3, r3
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <main+0x304>)
 800126e:	801a      	strh	r2, [r3, #0]
    speed = (totalAng - ptotalAng)*7666/ dtime;
 8001270:	4b4a      	ldr	r3, [pc, #296]	; (800139c <main+0x2f4>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <main+0x308>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1ad1      	subs	r1, r2, r3
 800127a:	000b      	movs	r3, r1
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	1a5b      	subs	r3, r3, r1
 8001280:	025a      	lsls	r2, r3, #9
 8001282:	1ad2      	subs	r2, r2, r3
 8001284:	1852      	adds	r2, r2, r1
 8001286:	4b49      	ldr	r3, [pc, #292]	; (80013ac <main+0x304>)
 8001288:	2100      	movs	r1, #0
 800128a:	5e5b      	ldrsh	r3, [r3, r1]
 800128c:	0019      	movs	r1, r3
 800128e:	0010      	movs	r0, r2
 8001290:	f7fe ffc4 	bl	800021c <__divsi3>
 8001294:	0003      	movs	r3, r0
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <main+0x30c>)
 800129a:	801a      	strh	r2, [r3, #0]
    speed = (0.8*speed) + (0.2*pspeed);
 800129c:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <main+0x30c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	5e9b      	ldrsh	r3, [r3, r2]
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff fe84 	bl	8000fb0 <__aeabi_i2d>
 80012a8:	4a43      	ldr	r2, [pc, #268]	; (80013b8 <main+0x310>)
 80012aa:	4b44      	ldr	r3, [pc, #272]	; (80013bc <main+0x314>)
 80012ac:	f7ff fbde 	bl	8000a6c <__aeabi_dmul>
 80012b0:	0002      	movs	r2, r0
 80012b2:	000b      	movs	r3, r1
 80012b4:	0014      	movs	r4, r2
 80012b6:	001d      	movs	r5, r3
 80012b8:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <main+0x318>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	5e9b      	ldrsh	r3, [r3, r2]
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff fe76 	bl	8000fb0 <__aeabi_i2d>
 80012c4:	4a3c      	ldr	r2, [pc, #240]	; (80013b8 <main+0x310>)
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <main+0x31c>)
 80012c8:	f7ff fbd0 	bl	8000a6c <__aeabi_dmul>
 80012cc:	0002      	movs	r2, r0
 80012ce:	000b      	movs	r3, r1
 80012d0:	0020      	movs	r0, r4
 80012d2:	0029      	movs	r1, r5
 80012d4:	f7ff f88e 	bl	80003f4 <__aeabi_dadd>
 80012d8:	0002      	movs	r2, r0
 80012da:	000b      	movs	r3, r1
 80012dc:	0010      	movs	r0, r2
 80012de:	0019      	movs	r1, r3
 80012e0:	f7ff fe30 	bl	8000f44 <__aeabi_d2iz>
 80012e4:	0003      	movs	r3, r0
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <main+0x30c>)
 80012ea:	801a      	strh	r2, [r3, #0]

    speed += 1000;
 80012ec:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <main+0x30c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	5e9b      	ldrsh	r3, [r3, r2]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	22fa      	movs	r2, #250	; 0xfa
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4694      	mov	ip, r2
 80012fa:	4463      	add	r3, ip
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b21a      	sxth	r2, r3
 8001300:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <main+0x30c>)
 8001302:	801a      	strh	r2, [r3, #0]
    for(int i = 1; i <3 ;i++){
 8001304:	2301      	movs	r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	e01c      	b.n	8001344 <main+0x29c>
    	sndBuf[i] = speed%100;
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <main+0x30c>)
 800130c:	2200      	movs	r2, #0
 800130e:	5e9b      	ldrsh	r3, [r3, r2]
 8001310:	2164      	movs	r1, #100	; 0x64
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff f868 	bl	80003e8 <__aeabi_idivmod>
 8001318:	000b      	movs	r3, r1
 800131a:	b21b      	sxth	r3, r3
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4a2a      	ldr	r2, [pc, #168]	; (80013c8 <main+0x320>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	18d3      	adds	r3, r2, r3
 8001324:	1c0a      	adds	r2, r1, #0
 8001326:	701a      	strb	r2, [r3, #0]
    	speed = (int)speed/100;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <main+0x30c>)
 800132a:	2200      	movs	r2, #0
 800132c:	5e9b      	ldrsh	r3, [r3, r2]
 800132e:	2164      	movs	r1, #100	; 0x64
 8001330:	0018      	movs	r0, r3
 8001332:	f7fe ff73 	bl	800021c <__divsi3>
 8001336:	0003      	movs	r3, r0
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <main+0x30c>)
 800133c:	801a      	strh	r2, [r3, #0]
    for(int i = 1; i <3 ;i++){
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b02      	cmp	r3, #2
 8001348:	dddf      	ble.n	800130a <main+0x262>
    }
//    uint8_t abc = 99;

    HAL_UART_Transmit(&huart2, &sndBuf, 3, 5);
 800134a:	491f      	ldr	r1, [pc, #124]	; (80013c8 <main+0x320>)
 800134c:	481f      	ldr	r0, [pc, #124]	; (80013cc <main+0x324>)
 800134e:	2305      	movs	r3, #5
 8001350:	2203      	movs	r2, #3
 8001352:	f002 fc9b 	bl	8003c8c <HAL_UART_Transmit>




    ptotalAng = totalAng;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <main+0x2f4>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <main+0x308>)
 800135c:	601a      	str	r2, [r3, #0]
    pAngle = Angle;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <main+0x2e8>)
 8001360:	881a      	ldrh	r2, [r3, #0]
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <main+0x2ec>)
 8001364:	801a      	strh	r2, [r3, #0]
    pmicro_time = micro_time;
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <main+0x2fc>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <main+0x300>)
 800136c:	601a      	str	r2, [r3, #0]
    pspeed = speed;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <main+0x30c>)
 8001370:	2200      	movs	r2, #0
 8001372:	5e9a      	ldrsh	r2, [r3, r2]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <main+0x318>)
 8001376:	801a      	strh	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 1000);
 8001378:	e6b0      	b.n	80010dc <main+0x34>
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	2000007c 	.word	0x2000007c
 8001380:	20000000 	.word	0x20000000
 8001384:	20000001 	.word	0x20000001
 8001388:	20000030 	.word	0x20000030
 800138c:	20000158 	.word	0x20000158
 8001390:	20000164 	.word	0x20000164
 8001394:	20000166 	.word	0x20000166
 8001398:	fffff061 	.word	0xfffff061
 800139c:	2000015c 	.word	0x2000015c
 80013a0:	00000fff 	.word	0x00000fff
 80013a4:	2000016c 	.word	0x2000016c
 80013a8:	20000170 	.word	0x20000170
 80013ac:	20000174 	.word	0x20000174
 80013b0:	20000160 	.word	0x20000160
 80013b4:	20000176 	.word	0x20000176
 80013b8:	9999999a 	.word	0x9999999a
 80013bc:	3fe99999 	.word	0x3fe99999
 80013c0:	20000178 	.word	0x20000178
 80013c4:	3fc99999 	.word	0x3fc99999
 80013c8:	20000004 	.word	0x20000004
 80013cc:	200000c8 	.word	0x200000c8

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b08d      	sub	sp, #52	; 0x34
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	2414      	movs	r4, #20
 80013d8:	193b      	adds	r3, r7, r4
 80013da:	0018      	movs	r0, r3
 80013dc:	231c      	movs	r3, #28
 80013de:	001a      	movs	r2, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	f003 f867 	bl	80044b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e6:	003b      	movs	r3, r7
 80013e8:	0018      	movs	r0, r3
 80013ea:	2314      	movs	r3, #20
 80013ec:	001a      	movs	r2, r3
 80013ee:	2100      	movs	r1, #0
 80013f0:	f003 f860 	bl	80044b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f4:	193b      	adds	r3, r7, r4
 80013f6:	2202      	movs	r2, #2
 80013f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fa:	193b      	adds	r3, r7, r4
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	0052      	lsls	r2, r2, #1
 8001400:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8001402:	193b      	adds	r3, r7, r4
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	0152      	lsls	r2, r2, #5
 8001408:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140a:	193b      	adds	r3, r7, r4
 800140c:	2240      	movs	r2, #64	; 0x40
 800140e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001410:	193b      	adds	r3, r7, r4
 8001412:	0018      	movs	r0, r3
 8001414:	f001 fb3e 	bl	8002a94 <HAL_RCC_OscConfig>
 8001418:	1e03      	subs	r3, r0, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800141c:	f000 f92a 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001420:	003b      	movs	r3, r7
 8001422:	2207      	movs	r2, #7
 8001424:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001426:	003b      	movs	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	003b      	movs	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001432:	003b      	movs	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001438:	003b      	movs	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800143e:	003b      	movs	r3, r7
 8001440:	2100      	movs	r1, #0
 8001442:	0018      	movs	r0, r3
 8001444:	f001 fd20 	bl	8002e88 <HAL_RCC_ClockConfig>
 8001448:	1e03      	subs	r3, r0, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800144c:	f000 f912 	bl	8001674 <Error_Handler>
  }
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b00d      	add	sp, #52	; 0x34
 8001456:	bd90      	pop	{r4, r7, pc}

08001458 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_I2C1_Init+0x74>)
 800145e:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <MX_I2C1_Init+0x78>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_I2C1_Init+0x74>)
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <MX_I2C1_Init+0x7c>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_I2C1_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_I2C1_Init+0x74>)
 8001470:	2201      	movs	r2, #1
 8001472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_I2C1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_I2C1_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_I2C1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_I2C1_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_I2C1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_I2C1_Init+0x74>)
 8001494:	0018      	movs	r0, r3
 8001496:	f000 fd23 	bl	8001ee0 <HAL_I2C_Init>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d001      	beq.n	80014a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800149e:	f000 f8e9 	bl	8001674 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_I2C1_Init+0x74>)
 80014a4:	2100      	movs	r1, #0
 80014a6:	0018      	movs	r0, r3
 80014a8:	f001 fa5c 	bl	8002964 <HAL_I2CEx_ConfigAnalogFilter>
 80014ac:	1e03      	subs	r3, r0, #0
 80014ae:	d001      	beq.n	80014b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014b0:	f000 f8e0 	bl	8001674 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <MX_I2C1_Init+0x74>)
 80014b6:	2100      	movs	r1, #0
 80014b8:	0018      	movs	r0, r3
 80014ba:	f001 fa9f 	bl	80029fc <HAL_I2CEx_ConfigDigitalFilter>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d001      	beq.n	80014c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014c2:	f000 f8d7 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000030 	.word	0x20000030
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40000a0b 	.word	0x40000a0b

080014d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	2310      	movs	r3, #16
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	0018      	movs	r0, r3
 80014e4:	2310      	movs	r3, #16
 80014e6:	001a      	movs	r2, r3
 80014e8:	2100      	movs	r1, #0
 80014ea:	f002 ffe3 	bl	80044b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	0018      	movs	r0, r3
 80014f2:	230c      	movs	r3, #12
 80014f4:	001a      	movs	r2, r3
 80014f6:	2100      	movs	r1, #0
 80014f8:	f002 ffdc 	bl	80044b4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_TIM3_Init+0xa0>)
 80014fe:	4a1f      	ldr	r2, [pc, #124]	; (800157c <MX_TIM3_Init+0xa4>)
 8001500:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_TIM3_Init+0xa0>)
 8001504:	220b      	movs	r2, #11
 8001506:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_TIM3_Init+0xa0>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_TIM3_Init+0xa0>)
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <MX_TIM3_Init+0xa8>)
 8001512:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_TIM3_Init+0xa0>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_TIM3_Init+0xa0>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_TIM3_Init+0xa0>)
 8001522:	0018      	movs	r0, r3
 8001524:	f001 ff0c 	bl	8003340 <HAL_TIM_Base_Init>
 8001528:	1e03      	subs	r3, r0, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800152c:	f000 f8a2 	bl	8001674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001530:	2110      	movs	r1, #16
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2280      	movs	r2, #128	; 0x80
 8001536:	0152      	lsls	r2, r2, #5
 8001538:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800153a:	187a      	adds	r2, r7, r1
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_TIM3_Init+0xa0>)
 800153e:	0011      	movs	r1, r2
 8001540:	0018      	movs	r0, r3
 8001542:	f002 f8d5 	bl	80036f0 <HAL_TIM_ConfigClockSource>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800154a:	f000 f893 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800155a:	1d3a      	adds	r2, r7, #4
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_TIM3_Init+0xa0>)
 800155e:	0011      	movs	r1, r2
 8001560:	0018      	movs	r0, r3
 8001562:	f002 fac3 	bl	8003aec <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800156a:	f000 f883 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b008      	add	sp, #32
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	2000007c 	.word	0x2000007c
 800157c:	40000400 	.word	0x40000400
 8001580:	0000ffff 	.word	0x0000ffff

08001584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 800158a:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <MX_USART2_UART_Init+0x64>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 8001590:	22e1      	movs	r2, #225	; 0xe1
 8001592:	0252      	lsls	r2, r2, #9
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <MX_USART2_UART_Init+0x60>)
 80015ce:	0018      	movs	r0, r3
 80015d0:	f002 fb06 	bl	8003be0 <HAL_UART_Init>
 80015d4:	1e03      	subs	r3, r0, #0
 80015d6:	d001      	beq.n	80015dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 f84c 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	200000c8 	.word	0x200000c8
 80015e8:	40004400 	.word	0x40004400

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	240c      	movs	r4, #12
 80015f4:	193b      	adds	r3, r7, r4
 80015f6:	0018      	movs	r0, r3
 80015f8:	2314      	movs	r3, #20
 80015fa:	001a      	movs	r2, r3
 80015fc:	2100      	movs	r1, #0
 80015fe:	f002 ff59 	bl	80044b4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_GPIO_Init+0x84>)
 8001604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_GPIO_Init+0x84>)
 8001608:	2102      	movs	r1, #2
 800160a:	430a      	orrs	r2, r1
 800160c:	635a      	str	r2, [r3, #52]	; 0x34
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_GPIO_Init+0x84>)
 8001610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_GPIO_Init+0x84>)
 800161c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <MX_GPIO_Init+0x84>)
 8001620:	2101      	movs	r1, #1
 8001622:	430a      	orrs	r2, r1
 8001624:	635a      	str	r2, [r3, #52]	; 0x34
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_GPIO_Init+0x84>)
 8001628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162a:	2201      	movs	r2, #1
 800162c:	4013      	ands	r3, r2
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001632:	23a0      	movs	r3, #160	; 0xa0
 8001634:	05db      	lsls	r3, r3, #23
 8001636:	2200      	movs	r2, #0
 8001638:	2110      	movs	r1, #16
 800163a:	0018      	movs	r0, r3
 800163c:	f000 fc32 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001640:	0021      	movs	r1, r4
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2210      	movs	r2, #16
 8001646:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	187b      	adds	r3, r7, r1
 800164a:	2201      	movs	r2, #1
 800164c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	187b      	adds	r3, r7, r1
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	187b      	adds	r3, r7, r1
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800165a:	187a      	adds	r2, r7, r1
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	05db      	lsls	r3, r3, #23
 8001660:	0011      	movs	r1, r2
 8001662:	0018      	movs	r0, r3
 8001664:	f000 fab4 	bl	8001bd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b009      	add	sp, #36	; 0x24
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	40021000 	.word	0x40021000

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	e7fe      	b.n	800167c <Error_Handler+0x8>
	...

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_MspInit+0x44>)
 8001688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_MspInit+0x44>)
 800168c:	2101      	movs	r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_MspInit+0x44>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	2201      	movs	r2, #1
 8001698:	4013      	ands	r3, r2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_MspInit+0x44>)
 80016a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_MspInit+0x44>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0549      	lsls	r1, r1, #21
 80016a8:	430a      	orrs	r2, r1
 80016aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_MspInit+0x44>)
 80016ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	055b      	lsls	r3, r3, #21
 80016b4:	4013      	ands	r3, r2
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b091      	sub	sp, #68	; 0x44
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	232c      	movs	r3, #44	; 0x2c
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	0018      	movs	r0, r3
 80016d6:	2314      	movs	r3, #20
 80016d8:	001a      	movs	r2, r3
 80016da:	2100      	movs	r1, #0
 80016dc:	f002 feea 	bl	80044b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	2410      	movs	r4, #16
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	0018      	movs	r0, r3
 80016e6:	231c      	movs	r3, #28
 80016e8:	001a      	movs	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	f002 fee2 	bl	80044b4 <memset>
  if(hi2c->Instance==I2C1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a22      	ldr	r2, [pc, #136]	; (8001780 <HAL_I2C_MspInit+0xb8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d13d      	bne.n	8001776 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	2240      	movs	r2, #64	; 0x40
 80016fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001706:	193b      	adds	r3, r7, r4
 8001708:	0018      	movs	r0, r3
 800170a:	f001 fd2b 	bl	8003164 <HAL_RCCEx_PeriphCLKConfig>
 800170e:	1e03      	subs	r3, r0, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001712:	f7ff ffaf 	bl	8001674 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_I2C_MspInit+0xbc>)
 8001718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_I2C_MspInit+0xbc>)
 800171c:	2102      	movs	r1, #2
 800171e:	430a      	orrs	r2, r1
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_I2C_MspInit+0xbc>)
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001726:	2202      	movs	r2, #2
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800172e:	212c      	movs	r1, #44	; 0x2c
 8001730:	187b      	adds	r3, r7, r1
 8001732:	22c0      	movs	r2, #192	; 0xc0
 8001734:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2212      	movs	r2, #18
 800173a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	187b      	adds	r3, r7, r1
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2206      	movs	r2, #6
 800174c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	187b      	adds	r3, r7, r1
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_I2C_MspInit+0xc0>)
 8001752:	0019      	movs	r1, r3
 8001754:	0010      	movs	r0, r2
 8001756:	f000 fa3b 	bl	8001bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_I2C_MspInit+0xbc>)
 800175c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_I2C_MspInit+0xbc>)
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	0389      	lsls	r1, r1, #14
 8001764:	430a      	orrs	r2, r1
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_I2C_MspInit+0xbc>)
 800176a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	039b      	lsls	r3, r3, #14
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b011      	add	sp, #68	; 0x44
 800177c:	bd90      	pop	{r4, r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	40005400 	.word	0x40005400
 8001784:	40021000 	.word	0x40021000
 8001788:	50000400 	.word	0x50000400

0800178c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <HAL_TIM_Base_MspInit+0x44>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d113      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_TIM_Base_MspInit+0x48>)
 80017a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_TIM_Base_MspInit+0x48>)
 80017a4:	2102      	movs	r1, #2
 80017a6:	430a      	orrs	r2, r1
 80017a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_TIM_Base_MspInit+0x48>)
 80017ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ae:	2202      	movs	r2, #2
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2010      	movs	r0, #16
 80017bc:	f000 f9d6 	bl	8001b6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017c0:	2010      	movs	r0, #16
 80017c2:	f000 f9e8 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b004      	add	sp, #16
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40000400 	.word	0x40000400
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b08b      	sub	sp, #44	; 0x2c
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	2414      	movs	r4, #20
 80017e2:	193b      	adds	r3, r7, r4
 80017e4:	0018      	movs	r0, r3
 80017e6:	2314      	movs	r3, #20
 80017e8:	001a      	movs	r2, r3
 80017ea:	2100      	movs	r1, #0
 80017ec:	f002 fe62 	bl	80044b4 <memset>
  if(huart->Instance==USART2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <HAL_UART_MspInit+0x8c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d130      	bne.n	800185c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_UART_MspInit+0x90>)
 80017fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <HAL_UART_MspInit+0x90>)
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	0289      	lsls	r1, r1, #10
 8001804:	430a      	orrs	r2, r1
 8001806:	63da      	str	r2, [r3, #60]	; 0x3c
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_UART_MspInit+0x90>)
 800180a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_UART_MspInit+0x90>)
 8001818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <HAL_UART_MspInit+0x90>)
 800181c:	2101      	movs	r1, #1
 800181e:	430a      	orrs	r2, r1
 8001820:	635a      	str	r2, [r3, #52]	; 0x34
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_UART_MspInit+0x90>)
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001826:	2201      	movs	r2, #1
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800182e:	0021      	movs	r1, r4
 8001830:	187b      	adds	r3, r7, r1
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	187b      	adds	r3, r7, r1
 8001838:	2202      	movs	r2, #2
 800183a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	187b      	adds	r3, r7, r1
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	187b      	adds	r3, r7, r1
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001848:	187b      	adds	r3, r7, r1
 800184a:	2201      	movs	r2, #1
 800184c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	187a      	adds	r2, r7, r1
 8001850:	23a0      	movs	r3, #160	; 0xa0
 8001852:	05db      	lsls	r3, r3, #23
 8001854:	0011      	movs	r1, r2
 8001856:	0018      	movs	r0, r3
 8001858:	f000 f9ba 	bl	8001bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b00b      	add	sp, #44	; 0x2c
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	40004400 	.word	0x40004400
 8001868:	40021000 	.word	0x40021000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 f8a6 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <TIM3_IRQHandler+0x14>)
 80018a2:	0018      	movs	r0, r3
 80018a4:	f001 fdf2 	bl	800348c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	2000007c 	.word	0x2000007c

080018b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <SystemInit+0x14>)
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	0512      	lsls	r2, r2, #20
 80018be:	609a      	str	r2, [r3, #8]
#endif
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018d2:	e003      	b.n	80018dc <LoopCopyDataInit>

080018d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80018d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018da:	3104      	adds	r1, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <LoopForever+0xa>)
  ldr r3, =_edata
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <LoopForever+0xe>)
  adds r2, r0, r1
 80018e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018e4:	d3f6      	bcc.n	80018d4 <CopyDataInit>
  ldr r2, =_sbss
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <LoopForever+0x12>)
  b LoopFillZerobss
 80018e8:	e002      	b.n	80018f0 <LoopFillZerobss>

080018ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  str  r3, [r2]
 80018ec:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ee:	3204      	adds	r2, #4

080018f0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <LoopForever+0x16>)
  cmp r2, r3
 80018f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018f4:	d3f9      	bcc.n	80018ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018f6:	f7ff ffdd 	bl	80018b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80018fa:	f002 fdb7 	bl	800446c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018fe:	f7ff fbd3 	bl	80010a8 <main>

08001902 <LoopForever>:

LoopForever:
    b LoopForever
 8001902:	e7fe      	b.n	8001902 <LoopForever>
  ldr   r0, =_estack
 8001904:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8001908:	0800459c 	.word	0x0800459c
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001910:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001914:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001918:	20000180 	.word	0x20000180

0800191c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC1_IRQHandler>

0800191e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001924:	1dfb      	adds	r3, r7, #7
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192a:	2003      	movs	r0, #3
 800192c:	f000 f80e 	bl	800194c <HAL_InitTick>
 8001930:	1e03      	subs	r3, r0, #0
 8001932:	d003      	beq.n	800193c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e001      	b.n	8001940 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800193c:	f7ff fea0 	bl	8001680 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001940:	1dfb      	adds	r3, r7, #7
 8001942:	781b      	ldrb	r3, [r3, #0]
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b002      	add	sp, #8
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001954:	230f      	movs	r3, #15
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_InitTick+0x88>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d02b      	beq.n	80019bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001964:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <HAL_InitTick+0x8c>)
 8001966:	681c      	ldr	r4, [r3, #0]
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_InitTick+0x88>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	0019      	movs	r1, r3
 800196e:	23fa      	movs	r3, #250	; 0xfa
 8001970:	0098      	lsls	r0, r3, #2
 8001972:	f7fe fbc9 	bl	8000108 <__udivsi3>
 8001976:	0003      	movs	r3, r0
 8001978:	0019      	movs	r1, r3
 800197a:	0020      	movs	r0, r4
 800197c:	f7fe fbc4 	bl	8000108 <__udivsi3>
 8001980:	0003      	movs	r3, r0
 8001982:	0018      	movs	r0, r3
 8001984:	f000 f917 	bl	8001bb6 <HAL_SYSTICK_Config>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d112      	bne.n	80019b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d80a      	bhi.n	80019a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	2301      	movs	r3, #1
 8001996:	425b      	negs	r3, r3
 8001998:	2200      	movs	r2, #0
 800199a:	0018      	movs	r0, r3
 800199c:	f000 f8e6 	bl	8001b6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_InitTick+0x90>)
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e00d      	b.n	80019c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80019a8:	230f      	movs	r3, #15
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	e008      	b.n	80019c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019b2:	230f      	movs	r3, #15
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	e003      	b.n	80019c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019bc:	230f      	movs	r3, #15
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80019c4:	230f      	movs	r3, #15
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	781b      	ldrb	r3, [r3, #0]
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b005      	add	sp, #20
 80019d0:	bd90      	pop	{r4, r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	20000010 	.word	0x20000010
 80019d8:	20000008 	.word	0x20000008
 80019dc:	2000000c 	.word	0x2000000c

080019e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <HAL_IncTick+0x18>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_IncTick+0x1c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	18d2      	adds	r2, r2, r3
 80019ee:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <HAL_IncTick+0x18>)
 80019f0:	601a      	str	r2, [r3, #0]
}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	2000017c 	.word	0x2000017c
 80019fc:	20000010 	.word	0x20000010

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <HAL_GetTick+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	2000017c 	.word	0x2000017c

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	1dfb      	adds	r3, r7, #7
 8001a1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	1dfb      	adds	r3, r7, #7
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b7f      	cmp	r3, #127	; 0x7f
 8001a26:	d809      	bhi.n	8001a3c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a28:	1dfb      	adds	r3, r7, #7
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	231f      	movs	r3, #31
 8001a30:	401a      	ands	r2, r3
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_EnableIRQ+0x30>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	4091      	lsls	r1, r2
 8001a38:	000a      	movs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b002      	add	sp, #8
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	e000e100 	.word	0xe000e100

08001a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	0002      	movs	r2, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a5c:	d828      	bhi.n	8001ab0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a5e:	4a2f      	ldr	r2, [pc, #188]	; (8001b1c <__NVIC_SetPriority+0xd4>)
 8001a60:	1dfb      	adds	r3, r7, #7
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	33c0      	adds	r3, #192	; 0xc0
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	589b      	ldr	r3, [r3, r2]
 8001a6e:	1dfa      	adds	r2, r7, #7
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	0011      	movs	r1, r2
 8001a74:	2203      	movs	r2, #3
 8001a76:	400a      	ands	r2, r1
 8001a78:	00d2      	lsls	r2, r2, #3
 8001a7a:	21ff      	movs	r1, #255	; 0xff
 8001a7c:	4091      	lsls	r1, r2
 8001a7e:	000a      	movs	r2, r1
 8001a80:	43d2      	mvns	r2, r2
 8001a82:	401a      	ands	r2, r3
 8001a84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	019b      	lsls	r3, r3, #6
 8001a8a:	22ff      	movs	r2, #255	; 0xff
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	1dfb      	adds	r3, r7, #7
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	0018      	movs	r0, r3
 8001a94:	2303      	movs	r3, #3
 8001a96:	4003      	ands	r3, r0
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a9c:	481f      	ldr	r0, [pc, #124]	; (8001b1c <__NVIC_SetPriority+0xd4>)
 8001a9e:	1dfb      	adds	r3, r7, #7
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	33c0      	adds	r3, #192	; 0xc0
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001aae:	e031      	b.n	8001b14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <__NVIC_SetPriority+0xd8>)
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	230f      	movs	r3, #15
 8001aba:	400b      	ands	r3, r1
 8001abc:	3b08      	subs	r3, #8
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3306      	adds	r3, #6
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	18d3      	adds	r3, r2, r3
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	1dfa      	adds	r2, r7, #7
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	0011      	movs	r1, r2
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	00d2      	lsls	r2, r2, #3
 8001ad6:	21ff      	movs	r1, #255	; 0xff
 8001ad8:	4091      	lsls	r1, r2
 8001ada:	000a      	movs	r2, r1
 8001adc:	43d2      	mvns	r2, r2
 8001ade:	401a      	ands	r2, r3
 8001ae0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	019b      	lsls	r3, r3, #6
 8001ae6:	22ff      	movs	r2, #255	; 0xff
 8001ae8:	401a      	ands	r2, r3
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	0018      	movs	r0, r3
 8001af0:	2303      	movs	r3, #3
 8001af2:	4003      	ands	r3, r0
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af8:	4809      	ldr	r0, [pc, #36]	; (8001b20 <__NVIC_SetPriority+0xd8>)
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	001c      	movs	r4, r3
 8001b00:	230f      	movs	r3, #15
 8001b02:	4023      	ands	r3, r4
 8001b04:	3b08      	subs	r3, #8
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	3306      	adds	r3, #6
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	18c3      	adds	r3, r0, r3
 8001b10:	3304      	adds	r3, #4
 8001b12:	601a      	str	r2, [r3, #0]
}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b003      	add	sp, #12
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1e5a      	subs	r2, r3, #1
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	045b      	lsls	r3, r3, #17
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d301      	bcc.n	8001b3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e010      	b.n	8001b5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <SysTick_Config+0x44>)
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	3a01      	subs	r2, #1
 8001b42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b44:	2301      	movs	r3, #1
 8001b46:	425b      	negs	r3, r3
 8001b48:	2103      	movs	r1, #3
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f7ff ff7c 	bl	8001a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <SysTick_Config+0x44>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <SysTick_Config+0x44>)
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b002      	add	sp, #8
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	210f      	movs	r1, #15
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	1c02      	adds	r2, r0, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	0011      	movs	r1, r2
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7ff ff5d 	bl	8001a48 <__NVIC_SetPriority>
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b004      	add	sp, #16
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b25b      	sxtb	r3, r3
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff ff33 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b002      	add	sp, #8
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff ffaf 	bl	8001b24 <SysTick_Config>
 8001bc6:	0003      	movs	r3, r0
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001bde:	e14d      	b.n	8001e7c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4091      	lsls	r1, r2
 8001bea:	000a      	movs	r2, r1
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d100      	bne.n	8001bf8 <HAL_GPIO_Init+0x28>
 8001bf6:	e13e      	b.n	8001e76 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x38>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b12      	cmp	r3, #18
 8001c06:	d125      	bne.n	8001c54 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	58d3      	ldr	r3, [r2, r3]
 8001c14:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2207      	movs	r2, #7
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	409a      	lsls	r2, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	43da      	mvns	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	220f      	movs	r2, #15
 8001c32:	401a      	ands	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2107      	movs	r1, #7
 8001c38:	400b      	ands	r3, r1
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	0013      	movs	r3, r2
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	6979      	ldr	r1, [r7, #20]
 8001c52:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	409a      	lsls	r2, r3
 8001c62:	0013      	movs	r3, r2
 8001c64:	43da      	mvns	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	401a      	ands	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	0013      	movs	r3, r2
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d00b      	beq.n	8001ca8 <HAL_GPIO_Init+0xd8>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d007      	beq.n	8001ca8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c9c:	2b11      	cmp	r3, #17
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b12      	cmp	r3, #18
 8001ca6:	d130      	bne.n	8001d0a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	0013      	movs	r3, r2
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	0013      	movs	r3, r2
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	4013      	ands	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	0013      	movs	r3, r2
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d017      	beq.n	8001d42 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	0013      	movs	r3, r2
 8001d22:	43da      	mvns	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	4013      	ands	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	409a      	lsls	r2, r3
 8001d34:	0013      	movs	r3, r2
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	055b      	lsls	r3, r3, #21
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d100      	bne.n	8001d50 <HAL_GPIO_Init+0x180>
 8001d4e:	e092      	b.n	8001e76 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001d50:	4a50      	ldr	r2, [pc, #320]	; (8001e94 <HAL_GPIO_Init+0x2c4>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3318      	adds	r3, #24
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	589b      	ldr	r3, [r3, r2]
 8001d5c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2203      	movs	r2, #3
 8001d62:	4013      	ands	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	220f      	movs	r2, #15
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	0013      	movs	r3, r2
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	4013      	ands	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	23a0      	movs	r3, #160	; 0xa0
 8001d78:	05db      	lsls	r3, r3, #23
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0x1d6>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a45      	ldr	r2, [pc, #276]	; (8001e98 <HAL_GPIO_Init+0x2c8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00d      	beq.n	8001da2 <HAL_GPIO_Init+0x1d2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a44      	ldr	r2, [pc, #272]	; (8001e9c <HAL_GPIO_Init+0x2cc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d007      	beq.n	8001d9e <HAL_GPIO_Init+0x1ce>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a43      	ldr	r2, [pc, #268]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_GPIO_Init+0x1ca>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x1d8>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e004      	b.n	8001da8 <HAL_GPIO_Init+0x1d8>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e002      	b.n	8001da8 <HAL_GPIO_Init+0x1d8>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_GPIO_Init+0x1d8>
 8001da6:	2300      	movs	r3, #0
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	2103      	movs	r1, #3
 8001dac:	400a      	ands	r2, r1
 8001dae:	00d2      	lsls	r2, r2, #3
 8001db0:	4093      	lsls	r3, r2
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001db8:	4936      	ldr	r1, [pc, #216]	; (8001e94 <HAL_GPIO_Init+0x2c4>)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	3318      	adds	r3, #24
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001dc6:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <HAL_GPIO_Init+0x2c4>)
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	58d3      	ldr	r3, [r2, r3]
 8001dcc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	025b      	lsls	r3, r3, #9
 8001de0:	4013      	ands	r3, r2
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001dec:	4929      	ldr	r1, [pc, #164]	; (8001e94 <HAL_GPIO_Init+0x2c4>)
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_GPIO_Init+0x2c4>)
 8001df6:	2384      	movs	r3, #132	; 0x84
 8001df8:	58d3      	ldr	r3, [r2, r3]
 8001dfa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	4013      	ands	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	029b      	lsls	r3, r3, #10
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001e1a:	491e      	ldr	r1, [pc, #120]	; (8001e94 <HAL_GPIO_Init+0x2c4>)
 8001e1c:	2284      	movs	r2, #132	; 0x84
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_GPIO_Init+0x2c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	035b      	lsls	r3, r3, #13
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_GPIO_Init+0x2c4>)
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_GPIO_Init+0x2c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43da      	mvns	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	039b      	lsls	r3, r3, #14
 8001e64:	4013      	ands	r3, r2
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_GPIO_Init+0x2c4>)
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	40da      	lsrs	r2, r3
 8001e84:	1e13      	subs	r3, r2, #0
 8001e86:	d000      	beq.n	8001e8a <HAL_GPIO_Init+0x2ba>
 8001e88:	e6aa      	b.n	8001be0 <HAL_GPIO_Init+0x10>
  }
}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b006      	add	sp, #24
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021800 	.word	0x40021800
 8001e98:	50000400 	.word	0x50000400
 8001e9c:	50000800 	.word	0x50000800
 8001ea0:	50001400 	.word	0x50001400

08001ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	0008      	movs	r0, r1
 8001eae:	0011      	movs	r1, r2
 8001eb0:	1cbb      	adds	r3, r7, #2
 8001eb2:	1c02      	adds	r2, r0, #0
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	1c7b      	adds	r3, r7, #1
 8001eb8:	1c0a      	adds	r2, r1, #0
 8001eba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ebc:	1c7b      	adds	r3, r7, #1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ec4:	1cbb      	adds	r3, r7, #2
 8001ec6:	881a      	ldrh	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ece:	1cbb      	adds	r3, r7, #2
 8001ed0:	881a      	ldrh	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e082      	b.n	8001ff8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2241      	movs	r2, #65	; 0x41
 8001ef6:	5c9b      	ldrb	r3, [r3, r2]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d107      	bne.n	8001f0e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff fbdd 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2241      	movs	r2, #65	; 0x41
 8001f12:	2124      	movs	r1, #36	; 0x24
 8001f14:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	438a      	bics	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4934      	ldr	r1, [pc, #208]	; (8002000 <HAL_I2C_Init+0x120>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4931      	ldr	r1, [pc, #196]	; (8002004 <HAL_I2C_Init+0x124>)
 8001f40:	400a      	ands	r2, r1
 8001f42:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d108      	bne.n	8001f5e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	0209      	lsls	r1, r1, #8
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	e007      	b.n	8001f6e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2184      	movs	r1, #132	; 0x84
 8001f68:	0209      	lsls	r1, r1, #8
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d104      	bne.n	8001f80 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	491f      	ldr	r1, [pc, #124]	; (8002008 <HAL_I2C_Init+0x128>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	491a      	ldr	r1, [pc, #104]	; (8002004 <HAL_I2C_Init+0x124>)
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69d9      	ldr	r1, [r3, #28]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2241      	movs	r2, #65	; 0x41
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2242      	movs	r2, #66	; 0x42
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	f0ffffff 	.word	0xf0ffffff
 8002004:	ffff7fff 	.word	0xffff7fff
 8002008:	02008000 	.word	0x02008000

0800200c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	0008      	movs	r0, r1
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	0019      	movs	r1, r3
 800201a:	230a      	movs	r3, #10
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	1c02      	adds	r2, r0, #0
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	2308      	movs	r3, #8
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	1c0a      	adds	r2, r1, #0
 8002028:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2241      	movs	r2, #65	; 0x41
 800202e:	5c9b      	ldrb	r3, [r3, r2]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b20      	cmp	r3, #32
 8002034:	d000      	beq.n	8002038 <HAL_I2C_Master_Transmit+0x2c>
 8002036:	e0e7      	b.n	8002208 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	5c9b      	ldrb	r3, [r3, r2]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_I2C_Master_Transmit+0x3a>
 8002042:	2302      	movs	r3, #2
 8002044:	e0e1      	b.n	800220a <HAL_I2C_Master_Transmit+0x1fe>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2240      	movs	r2, #64	; 0x40
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800204e:	f7ff fcd7 	bl	8001a00 <HAL_GetTick>
 8002052:	0003      	movs	r3, r0
 8002054:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	0219      	lsls	r1, r3, #8
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2319      	movs	r3, #25
 8002062:	2201      	movs	r2, #1
 8002064:	f000 fa04 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8002068:	1e03      	subs	r3, r0, #0
 800206a:	d001      	beq.n	8002070 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0cc      	b.n	800220a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2241      	movs	r2, #65	; 0x41
 8002074:	2121      	movs	r1, #33	; 0x21
 8002076:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2242      	movs	r2, #66	; 0x42
 800207c:	2110      	movs	r1, #16
 800207e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2208      	movs	r2, #8
 8002090:	18ba      	adds	r2, r7, r2
 8002092:	8812      	ldrh	r2, [r2, #0]
 8002094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2bff      	cmp	r3, #255	; 0xff
 80020a4:	d911      	bls.n	80020ca <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	22ff      	movs	r2, #255	; 0xff
 80020aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	045c      	lsls	r4, r3, #17
 80020b6:	230a      	movs	r3, #10
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	8819      	ldrh	r1, [r3, #0]
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	4b55      	ldr	r3, [pc, #340]	; (8002214 <HAL_I2C_Master_Transmit+0x208>)
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	0023      	movs	r3, r4
 80020c4:	f000 fc14 	bl	80028f0 <I2C_TransferConfig>
 80020c8:	e075      	b.n	80021b6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	049c      	lsls	r4, r3, #18
 80020de:	230a      	movs	r3, #10
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	8819      	ldrh	r1, [r3, #0]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_I2C_Master_Transmit+0x208>)
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	0023      	movs	r3, r4
 80020ec:	f000 fc00 	bl	80028f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80020f0:	e061      	b.n	80021b6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 f9f8 	bl	80024ee <I2C_WaitOnTXISFlagUntilTimeout>
 80020fe:	1e03      	subs	r3, r0, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e081      	b.n	800220a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d03a      	beq.n	80021b6 <HAL_I2C_Master_Transmit+0x1aa>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	2b00      	cmp	r3, #0
 8002146:	d136      	bne.n	80021b6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	0013      	movs	r3, r2
 8002152:	2200      	movs	r2, #0
 8002154:	2180      	movs	r1, #128	; 0x80
 8002156:	f000 f98b 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e053      	b.n	800220a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002166:	b29b      	uxth	r3, r3
 8002168:	2bff      	cmp	r3, #255	; 0xff
 800216a:	d911      	bls.n	8002190 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	22ff      	movs	r2, #255	; 0xff
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	b2da      	uxtb	r2, r3
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	045c      	lsls	r4, r3, #17
 800217c:	230a      	movs	r3, #10
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	8819      	ldrh	r1, [r3, #0]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	2300      	movs	r3, #0
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	0023      	movs	r3, r4
 800218a:	f000 fbb1 	bl	80028f0 <I2C_TransferConfig>
 800218e:	e012      	b.n	80021b6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	049c      	lsls	r4, r3, #18
 80021a4:	230a      	movs	r3, #10
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	8819      	ldrh	r1, [r3, #0]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	2300      	movs	r3, #0
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	0023      	movs	r3, r4
 80021b2:	f000 fb9d 	bl	80028f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d198      	bne.n	80020f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 f9d0 	bl	800256c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021cc:	1e03      	subs	r3, r0, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e01a      	b.n	800220a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2220      	movs	r2, #32
 80021da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	490c      	ldr	r1, [pc, #48]	; (8002218 <HAL_I2C_Master_Transmit+0x20c>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2241      	movs	r2, #65	; 0x41
 80021f0:	2120      	movs	r1, #32
 80021f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2242      	movs	r2, #66	; 0x42
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e000      	b.n	800220a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
  }
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b007      	add	sp, #28
 8002210:	bd90      	pop	{r4, r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	80002000 	.word	0x80002000
 8002218:	fe00e800 	.word	0xfe00e800

0800221c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	0008      	movs	r0, r1
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	0019      	movs	r1, r3
 800222a:	230a      	movs	r3, #10
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	1c02      	adds	r2, r0, #0
 8002230:	801a      	strh	r2, [r3, #0]
 8002232:	2308      	movs	r3, #8
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	1c0a      	adds	r2, r1, #0
 8002238:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2241      	movs	r2, #65	; 0x41
 800223e:	5c9b      	ldrb	r3, [r3, r2]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b20      	cmp	r3, #32
 8002244:	d000      	beq.n	8002248 <HAL_I2C_Master_Receive+0x2c>
 8002246:	e0e8      	b.n	800241a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2240      	movs	r2, #64	; 0x40
 800224c:	5c9b      	ldrb	r3, [r3, r2]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_I2C_Master_Receive+0x3a>
 8002252:	2302      	movs	r3, #2
 8002254:	e0e2      	b.n	800241c <HAL_I2C_Master_Receive+0x200>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2240      	movs	r2, #64	; 0x40
 800225a:	2101      	movs	r1, #1
 800225c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800225e:	f7ff fbcf 	bl	8001a00 <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	0219      	lsls	r1, r3, #8
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2319      	movs	r3, #25
 8002272:	2201      	movs	r2, #1
 8002274:	f000 f8fc 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0cd      	b.n	800241c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2241      	movs	r2, #65	; 0x41
 8002284:	2122      	movs	r1, #34	; 0x22
 8002286:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2242      	movs	r2, #66	; 0x42
 800228c:	2110      	movs	r1, #16
 800228e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2208      	movs	r2, #8
 80022a0:	18ba      	adds	r2, r7, r2
 80022a2:	8812      	ldrh	r2, [r2, #0]
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2bff      	cmp	r3, #255	; 0xff
 80022b4:	d911      	bls.n	80022da <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	22ff      	movs	r2, #255	; 0xff
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	045c      	lsls	r4, r3, #17
 80022c6:	230a      	movs	r3, #10
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	8819      	ldrh	r1, [r3, #0]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	4b55      	ldr	r3, [pc, #340]	; (8002424 <HAL_I2C_Master_Receive+0x208>)
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	0023      	movs	r3, r4
 80022d4:	f000 fb0c 	bl	80028f0 <I2C_TransferConfig>
 80022d8:	e076      	b.n	80023c8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	049c      	lsls	r4, r3, #18
 80022ee:	230a      	movs	r3, #10
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	8819      	ldrh	r1, [r3, #0]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <HAL_I2C_Master_Receive+0x208>)
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	0023      	movs	r3, r4
 80022fc:	f000 faf8 	bl	80028f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002300:	e062      	b.n	80023c8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 f96b 	bl	80025e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e082      	b.n	800241c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d03a      	beq.n	80023c8 <HAL_I2C_Master_Receive+0x1ac>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002356:	2b00      	cmp	r3, #0
 8002358:	d136      	bne.n	80023c8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800235a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	0013      	movs	r3, r2
 8002364:	2200      	movs	r2, #0
 8002366:	2180      	movs	r1, #128	; 0x80
 8002368:	f000 f882 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 800236c:	1e03      	subs	r3, r0, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e053      	b.n	800241c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	2bff      	cmp	r3, #255	; 0xff
 800237c:	d911      	bls.n	80023a2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	22ff      	movs	r2, #255	; 0xff
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	b2da      	uxtb	r2, r3
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	045c      	lsls	r4, r3, #17
 800238e:	230a      	movs	r3, #10
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	8819      	ldrh	r1, [r3, #0]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	2300      	movs	r3, #0
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	0023      	movs	r3, r4
 800239c:	f000 faa8 	bl	80028f0 <I2C_TransferConfig>
 80023a0:	e012      	b.n	80023c8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	049c      	lsls	r4, r3, #18
 80023b6:	230a      	movs	r3, #10
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	8819      	ldrh	r1, [r3, #0]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	2300      	movs	r3, #0
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	0023      	movs	r3, r4
 80023c4:	f000 fa94 	bl	80028f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d197      	bne.n	8002302 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 f8c7 	bl	800256c <I2C_WaitOnSTOPFlagUntilTimeout>
 80023de:	1e03      	subs	r3, r0, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e01a      	b.n	800241c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2220      	movs	r2, #32
 80023ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	490b      	ldr	r1, [pc, #44]	; (8002428 <HAL_I2C_Master_Receive+0x20c>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2241      	movs	r2, #65	; 0x41
 8002402:	2120      	movs	r1, #32
 8002404:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2242      	movs	r2, #66	; 0x42
 800240a:	2100      	movs	r1, #0
 800240c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	2100      	movs	r1, #0
 8002414:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800241a:	2302      	movs	r3, #2
  }
}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b007      	add	sp, #28
 8002422:	bd90      	pop	{r4, r7, pc}
 8002424:	80002400 	.word	0x80002400
 8002428:	fe00e800 	.word	0xfe00e800

0800242c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2202      	movs	r2, #2
 800243c:	4013      	ands	r3, r2
 800243e:	2b02      	cmp	r3, #2
 8002440:	d103      	bne.n	800244a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2200      	movs	r2, #0
 8002448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2201      	movs	r2, #1
 8002452:	4013      	ands	r3, r2
 8002454:	2b01      	cmp	r3, #1
 8002456:	d007      	beq.n	8002468 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2101      	movs	r1, #1
 8002464:	430a      	orrs	r2, r1
 8002466:	619a      	str	r2, [r3, #24]
  }
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}

08002470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002480:	e021      	b.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	d01e      	beq.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002488:	f7ff faba 	bl	8001a00 <HAL_GetTick>
 800248c:	0002      	movs	r2, r0
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d302      	bcc.n	800249e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d113      	bne.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	2220      	movs	r2, #32
 80024a4:	431a      	orrs	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2241      	movs	r2, #65	; 0x41
 80024ae:	2120      	movs	r1, #32
 80024b0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2242      	movs	r2, #66	; 0x42
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2240      	movs	r2, #64	; 0x40
 80024be:	2100      	movs	r1, #0
 80024c0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00f      	b.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	425a      	negs	r2, r3
 80024d6:	4153      	adcs	r3, r2
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	001a      	movs	r2, r3
 80024dc:	1dfb      	adds	r3, r7, #7
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d0ce      	beq.n	8002482 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	0018      	movs	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b004      	add	sp, #16
 80024ec:	bd80      	pop	{r7, pc}

080024ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024fa:	e02b      	b.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	0018      	movs	r0, r3
 8002504:	f000 f8e8 	bl	80026d8 <I2C_IsErrorOccurred>
 8002508:	1e03      	subs	r3, r0, #0
 800250a:	d001      	beq.n	8002510 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e029      	b.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	3301      	adds	r3, #1
 8002514:	d01e      	beq.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002516:	f7ff fa73 	bl	8001a00 <HAL_GetTick>
 800251a:	0002      	movs	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	429a      	cmp	r2, r3
 8002524:	d302      	bcc.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d113      	bne.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	2220      	movs	r2, #32
 8002532:	431a      	orrs	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2241      	movs	r2, #65	; 0x41
 800253c:	2120      	movs	r1, #32
 800253e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2242      	movs	r2, #66	; 0x42
 8002544:	2100      	movs	r1, #0
 8002546:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2240      	movs	r2, #64	; 0x40
 800254c:	2100      	movs	r1, #0
 800254e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e007      	b.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2202      	movs	r2, #2
 800255c:	4013      	ands	r3, r2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d1cc      	bne.n	80024fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b004      	add	sp, #16
 800256a:	bd80      	pop	{r7, pc}

0800256c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002578:	e028      	b.n	80025cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f8a9 	bl	80026d8 <I2C_IsErrorOccurred>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d001      	beq.n	800258e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e026      	b.n	80025dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258e:	f7ff fa37 	bl	8001a00 <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	429a      	cmp	r2, r3
 800259c:	d302      	bcc.n	80025a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d113      	bne.n	80025cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	2220      	movs	r2, #32
 80025aa:	431a      	orrs	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2241      	movs	r2, #65	; 0x41
 80025b4:	2120      	movs	r1, #32
 80025b6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2242      	movs	r2, #66	; 0x42
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	2100      	movs	r1, #0
 80025c6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e007      	b.n	80025dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2220      	movs	r2, #32
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d1cf      	bne.n	800257a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025f0:	e064      	b.n	80026bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f86d 	bl	80026d8 <I2C_IsErrorOccurred>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d001      	beq.n	8002606 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e062      	b.n	80026cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2220      	movs	r2, #32
 800260e:	4013      	ands	r3, r2
 8002610:	2b20      	cmp	r3, #32
 8002612:	d138      	bne.n	8002686 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2204      	movs	r2, #4
 800261c:	4013      	ands	r3, r2
 800261e:	2b04      	cmp	r3, #4
 8002620:	d105      	bne.n	800262e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e04e      	b.n	80026cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2210      	movs	r2, #16
 8002636:	4013      	ands	r3, r2
 8002638:	2b10      	cmp	r3, #16
 800263a:	d107      	bne.n	800264c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2210      	movs	r2, #16
 8002642:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2204      	movs	r2, #4
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
 800264a:	e002      	b.n	8002652 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2220      	movs	r2, #32
 8002658:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	491b      	ldr	r1, [pc, #108]	; (80026d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002666:	400a      	ands	r2, r1
 8002668:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2241      	movs	r2, #65	; 0x41
 800266e:	2120      	movs	r1, #32
 8002670:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2242      	movs	r2, #66	; 0x42
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2240      	movs	r2, #64	; 0x40
 800267e:	2100      	movs	r1, #0
 8002680:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e022      	b.n	80026cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002686:	f7ff f9bb 	bl	8001a00 <HAL_GetTick>
 800268a:	0002      	movs	r2, r0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10f      	bne.n	80026bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	2220      	movs	r2, #32
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2241      	movs	r2, #65	; 0x41
 80026ac:	2120      	movs	r1, #32
 80026ae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2240      	movs	r2, #64	; 0x40
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e007      	b.n	80026cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2204      	movs	r2, #4
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d193      	bne.n	80025f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	0018      	movs	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b004      	add	sp, #16
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	fe00e800 	.word	0xfe00e800

080026d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b08b      	sub	sp, #44	; 0x2c
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e4:	2327      	movs	r3, #39	; 0x27
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2210      	movs	r2, #16
 8002700:	4013      	ands	r3, r2
 8002702:	d100      	bne.n	8002706 <I2C_IsErrorOccurred+0x2e>
 8002704:	e08e      	b.n	8002824 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2210      	movs	r2, #16
 800270c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800270e:	e06c      	b.n	80027ea <I2C_IsErrorOccurred+0x112>
 8002710:	2427      	movs	r4, #39	; 0x27
 8002712:	193b      	adds	r3, r7, r4
 8002714:	193a      	adds	r2, r7, r4
 8002716:	7812      	ldrb	r2, [r2, #0]
 8002718:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3301      	adds	r3, #1
 800271e:	d064      	beq.n	80027ea <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002720:	f7ff f96e 	bl	8001a00 <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	429a      	cmp	r2, r3
 800272e:	d306      	bcc.n	800273e <I2C_IsErrorOccurred+0x66>
 8002730:	193b      	adds	r3, r7, r4
 8002732:	193a      	adds	r2, r7, r4
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d155      	bne.n	80027ea <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	01db      	lsls	r3, r3, #7
 8002748:	4013      	ands	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800274c:	2013      	movs	r0, #19
 800274e:	183b      	adds	r3, r7, r0
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	2142      	movs	r1, #66	; 0x42
 8002754:	5c52      	ldrb	r2, [r2, r1]
 8002756:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	401a      	ands	r2, r3
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	429a      	cmp	r2, r3
 800276a:	d137      	bne.n	80027dc <I2C_IsErrorOccurred+0x104>
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	01db      	lsls	r3, r3, #7
 8002772:	429a      	cmp	r2, r3
 8002774:	d032      	beq.n	80027dc <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8002776:	183b      	adds	r3, r7, r0
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b20      	cmp	r3, #32
 800277c:	d02e      	beq.n	80027dc <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	01c9      	lsls	r1, r1, #7
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002790:	f7ff f936 	bl	8001a00 <HAL_GetTick>
 8002794:	0003      	movs	r3, r0
 8002796:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002798:	e020      	b.n	80027dc <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800279a:	f7ff f931 	bl	8001a00 <HAL_GetTick>
 800279e:	0002      	movs	r2, r0
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2027      	movs	r0, #39	; 0x27
 80027a6:	183a      	adds	r2, r7, r0
 80027a8:	1839      	adds	r1, r7, r0
 80027aa:	7809      	ldrb	r1, [r1, #0]
 80027ac:	7011      	strb	r1, [r2, #0]
 80027ae:	2b19      	cmp	r3, #25
 80027b0:	d914      	bls.n	80027dc <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	2220      	movs	r2, #32
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2241      	movs	r2, #65	; 0x41
 80027c2:	2120      	movs	r1, #32
 80027c4:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2242      	movs	r2, #66	; 0x42
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2240      	movs	r2, #64	; 0x40
 80027d2:	2100      	movs	r1, #0
 80027d4:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 80027d6:	183b      	adds	r3, r7, r0
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2220      	movs	r2, #32
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d1d7      	bne.n	800279a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2220      	movs	r2, #32
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d004      	beq.n	8002802 <I2C_IsErrorOccurred+0x12a>
 80027f8:	2327      	movs	r3, #39	; 0x27
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d086      	beq.n	8002710 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002802:	2327      	movs	r3, #39	; 0x27
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2220      	movs	r2, #32
 8002812:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	2204      	movs	r2, #4
 8002818:	4313      	orrs	r3, r2
 800281a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800281c:	2327      	movs	r3, #39	; 0x27
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4013      	ands	r3, r2
 8002834:	d00c      	beq.n	8002850 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	2201      	movs	r2, #1
 800283a:	4313      	orrs	r3, r2
 800283c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	0052      	lsls	r2, r2, #1
 8002846:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002848:	2327      	movs	r3, #39	; 0x27
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4013      	ands	r3, r2
 8002858:	d00c      	beq.n	8002874 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2208      	movs	r2, #8
 800285e:	4313      	orrs	r3, r2
 8002860:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	00d2      	lsls	r2, r2, #3
 800286a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800286c:	2327      	movs	r3, #39	; 0x27
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4013      	ands	r3, r2
 800287c:	d00c      	beq.n	8002898 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2202      	movs	r2, #2
 8002882:	4313      	orrs	r3, r2
 8002884:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	0092      	lsls	r2, r2, #2
 800288e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002890:	2327      	movs	r3, #39	; 0x27
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002898:	2327      	movs	r3, #39	; 0x27
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01d      	beq.n	80028de <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7ff fdc1 	bl	800242c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	490d      	ldr	r1, [pc, #52]	; (80028ec <I2C_IsErrorOccurred+0x214>)
 80028b6:	400a      	ands	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2241      	movs	r2, #65	; 0x41
 80028ca:	2120      	movs	r1, #32
 80028cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2242      	movs	r2, #66	; 0x42
 80028d2:	2100      	movs	r1, #0
 80028d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2240      	movs	r2, #64	; 0x40
 80028da:	2100      	movs	r1, #0
 80028dc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80028de:	2327      	movs	r3, #39	; 0x27
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	781b      	ldrb	r3, [r3, #0]
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b00b      	add	sp, #44	; 0x2c
 80028ea:	bd90      	pop	{r4, r7, pc}
 80028ec:	fe00e800 	.word	0xfe00e800

080028f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	0008      	movs	r0, r1
 80028fa:	0011      	movs	r1, r2
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	240a      	movs	r4, #10
 8002900:	193b      	adds	r3, r7, r4
 8002902:	1c02      	adds	r2, r0, #0
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	2009      	movs	r0, #9
 8002908:	183b      	adds	r3, r7, r0
 800290a:	1c0a      	adds	r2, r1, #0
 800290c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800290e:	193b      	adds	r3, r7, r4
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	059b      	lsls	r3, r3, #22
 8002914:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002916:	183b      	adds	r3, r7, r0
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	0419      	lsls	r1, r3, #16
 800291c:	23ff      	movs	r3, #255	; 0xff
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002922:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	4313      	orrs	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800293a:	0d51      	lsrs	r1, r2, #21
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	00d2      	lsls	r2, r2, #3
 8002940:	400a      	ands	r2, r1
 8002942:	4907      	ldr	r1, [pc, #28]	; (8002960 <I2C_TransferConfig+0x70>)
 8002944:	430a      	orrs	r2, r1
 8002946:	43d2      	mvns	r2, r2
 8002948:	401a      	ands	r2, r3
 800294a:	0011      	movs	r1, r2
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b007      	add	sp, #28
 800295c:	bd90      	pop	{r4, r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	03ff63ff 	.word	0x03ff63ff

08002964 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2241      	movs	r2, #65	; 0x41
 8002972:	5c9b      	ldrb	r3, [r3, r2]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b20      	cmp	r3, #32
 8002978:	d138      	bne.n	80029ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2240      	movs	r2, #64	; 0x40
 800297e:	5c9b      	ldrb	r3, [r3, r2]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002984:	2302      	movs	r3, #2
 8002986:	e032      	b.n	80029ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	2101      	movs	r1, #1
 800298e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2241      	movs	r2, #65	; 0x41
 8002994:	2124      	movs	r1, #36	; 0x24
 8002996:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2101      	movs	r1, #1
 80029a4:	438a      	bics	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4911      	ldr	r1, [pc, #68]	; (80029f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6819      	ldr	r1, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2101      	movs	r1, #1
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2241      	movs	r2, #65	; 0x41
 80029dc:	2120      	movs	r1, #32
 80029de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2240      	movs	r2, #64	; 0x40
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	ffffefff 	.word	0xffffefff

080029fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2241      	movs	r2, #65	; 0x41
 8002a0a:	5c9b      	ldrb	r3, [r3, r2]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d139      	bne.n	8002a86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2240      	movs	r2, #64	; 0x40
 8002a16:	5c9b      	ldrb	r3, [r3, r2]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e033      	b.n	8002a88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	2101      	movs	r1, #1
 8002a26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2241      	movs	r2, #65	; 0x41
 8002a2c:	2124      	movs	r1, #36	; 0x24
 8002a2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2241      	movs	r2, #65	; 0x41
 8002a76:	2120      	movs	r1, #32
 8002a78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2240      	movs	r2, #64	; 0x40
 8002a7e:	2100      	movs	r1, #0
 8002a80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
  }
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b004      	add	sp, #16
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	fffff0ff 	.word	0xfffff0ff

08002a94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e1e5      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4013      	ands	r3, r2
 8002aae:	d100      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x1e>
 8002ab0:	e06f      	b.n	8002b92 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab2:	4bc4      	ldr	r3, [pc, #784]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2238      	movs	r2, #56	; 0x38
 8002ab8:	4013      	ands	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d10b      	bne.n	8002ada <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac2:	4bc0      	ldr	r3, [pc, #768]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	029b      	lsls	r3, r3, #10
 8002aca:	4013      	ands	r3, r2
 8002acc:	d061      	beq.n	8002b92 <HAL_RCC_OscConfig+0xfe>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d15d      	bne.n	8002b92 <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e1cb      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	025b      	lsls	r3, r3, #9
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_OscConfig+0x62>
 8002ae6:	4bb7      	ldr	r3, [pc, #732]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4bb6      	ldr	r3, [pc, #728]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	0249      	lsls	r1, r1, #9
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e020      	b.n	8002b38 <HAL_RCC_OscConfig+0xa4>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	23a0      	movs	r3, #160	; 0xa0
 8002afc:	02db      	lsls	r3, r3, #11
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10e      	bne.n	8002b20 <HAL_RCC_OscConfig+0x8c>
 8002b02:	4bb0      	ldr	r3, [pc, #704]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4baf      	ldr	r3, [pc, #700]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	02c9      	lsls	r1, r1, #11
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	4bac      	ldr	r3, [pc, #688]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4bab      	ldr	r3, [pc, #684]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	0249      	lsls	r1, r1, #9
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0xa4>
 8002b20:	4ba8      	ldr	r3, [pc, #672]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4ba7      	ldr	r3, [pc, #668]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002b26:	49a8      	ldr	r1, [pc, #672]	; (8002dc8 <HAL_RCC_OscConfig+0x334>)
 8002b28:	400a      	ands	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	4ba5      	ldr	r3, [pc, #660]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4ba4      	ldr	r3, [pc, #656]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002b32:	49a6      	ldr	r1, [pc, #664]	; (8002dcc <HAL_RCC_OscConfig+0x338>)
 8002b34:	400a      	ands	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d014      	beq.n	8002b6a <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe ff5e 	bl	8001a00 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b4a:	f7fe ff59 	bl	8001a00 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b64      	cmp	r3, #100	; 0x64
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e18a      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5c:	4b99      	ldr	r3, [pc, #612]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	029b      	lsls	r3, r3, #10
 8002b64:	4013      	ands	r3, r2
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0xb6>
 8002b68:	e013      	b.n	8002b92 <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6a:	f7fe ff49 	bl	8001a00 <HAL_GetTick>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe ff44 	bl	8001a00 <HAL_GetTick>
 8002b78:	0002      	movs	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e175      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b86:	4b8f      	ldr	r3, [pc, #572]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	029b      	lsls	r3, r3, #10
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2202      	movs	r2, #2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <HAL_RCC_OscConfig+0x10a>
 8002b9c:	e08c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9e:	4b89      	ldr	r3, [pc, #548]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2238      	movs	r2, #56	; 0x38
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d135      	bne.n	8002c1a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bae:	4b85      	ldr	r3, [pc, #532]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x132>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e155      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc6:	4b7f      	ldr	r3, [pc, #508]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4a81      	ldr	r2, [pc, #516]	; (8002dd0 <HAL_RCC_OscConfig+0x33c>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	021a      	lsls	r2, r3, #8
 8002bd6:	4b7b      	ldr	r3, [pc, #492]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d112      	bne.n	8002c08 <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002be2:	4b78      	ldr	r3, [pc, #480]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7b      	ldr	r2, [pc, #492]	; (8002dd4 <HAL_RCC_OscConfig+0x340>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	4b74      	ldr	r3, [pc, #464]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002bf6:	4b73      	ldr	r3, [pc, #460]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0adb      	lsrs	r3, r3, #11
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	4013      	ands	r3, r2
 8002c00:	4a75      	ldr	r2, [pc, #468]	; (8002dd8 <HAL_RCC_OscConfig+0x344>)
 8002c02:	40da      	lsrs	r2, r3
 8002c04:	4b75      	ldr	r3, [pc, #468]	; (8002ddc <HAL_RCC_OscConfig+0x348>)
 8002c06:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c08:	4b75      	ldr	r3, [pc, #468]	; (8002de0 <HAL_RCC_OscConfig+0x34c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f7fe fe9d 	bl	800194c <HAL_InitTick>
 8002c12:	1e03      	subs	r3, r0, #0
 8002c14:	d050      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e12b      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d030      	beq.n	8002c84 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c22:	4b68      	ldr	r3, [pc, #416]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6b      	ldr	r2, [pc, #428]	; (8002dd4 <HAL_RCC_OscConfig+0x340>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002c36:	4b63      	ldr	r3, [pc, #396]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b62      	ldr	r3, [pc, #392]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002c3c:	2180      	movs	r1, #128	; 0x80
 8002c3e:	0049      	lsls	r1, r1, #1
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fedc 	bl	8001a00 <HAL_GetTick>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fed7 	bl	8001a00 <HAL_GetTick>
 8002c52:	0002      	movs	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e108      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c60:	4b58      	ldr	r3, [pc, #352]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b55      	ldr	r3, [pc, #340]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a57      	ldr	r2, [pc, #348]	; (8002dd0 <HAL_RCC_OscConfig+0x33c>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	0019      	movs	r1, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	021a      	lsls	r2, r3, #8
 8002c7c:	4b51      	ldr	r3, [pc, #324]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	e019      	b.n	8002cb8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002c84:	4b4f      	ldr	r3, [pc, #316]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b4e      	ldr	r3, [pc, #312]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002c8a:	4956      	ldr	r1, [pc, #344]	; (8002de4 <HAL_RCC_OscConfig+0x350>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe feb6 	bl	8001a00 <HAL_GetTick>
 8002c94:	0003      	movs	r3, r0
 8002c96:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9a:	f7fe feb1 	bl	8001a00 <HAL_GetTick>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0e2      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cac:	4b45      	ldr	r3, [pc, #276]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d047      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002cc2:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2238      	movs	r2, #56	; 0x38
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b18      	cmp	r3, #24
 8002ccc:	d10a      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002cce:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d03c      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2be>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d138      	bne.n	8002d52 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0c6      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d019      	beq.n	8002d20 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002cec:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002cee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fe82 	bl	8001a00 <HAL_GetTick>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d02:	f7fe fe7d 	bl	8001a00 <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e0ae      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d18:	2202      	movs	r2, #2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d0f1      	beq.n	8002d02 <HAL_RCC_OscConfig+0x26e>
 8002d1e:	e018      	b.n	8002d52 <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002d22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002d26:	2101      	movs	r1, #1
 8002d28:	438a      	bics	r2, r1
 8002d2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fe68 	bl	8001a00 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d36:	f7fe fe63 	bl	8001a00 <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e094      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d1f1      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2204      	movs	r2, #4
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d100      	bne.n	8002d5e <HAL_RCC_OscConfig+0x2ca>
 8002d5c:	e088      	b.n	8002e70 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	230f      	movs	r3, #15
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2238      	movs	r2, #56	; 0x38
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	2202      	movs	r2, #2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d100      	bne.n	8002d7e <HAL_RCC_OscConfig+0x2ea>
 8002d7c:	e078      	b.n	8002e70 <HAL_RCC_OscConfig+0x3dc>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d000      	beq.n	8002d88 <HAL_RCC_OscConfig+0x2f4>
 8002d86:	e073      	b.n	8002e70 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e072      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d106      	bne.n	8002da2 <HAL_RCC_OscConfig+0x30e>
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002da0:	e02e      	b.n	8002e00 <HAL_RCC_OscConfig+0x36c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b05      	cmp	r3, #5
 8002da8:	d11e      	bne.n	8002de8 <HAL_RCC_OscConfig+0x354>
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002dac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002db0:	2104      	movs	r1, #4
 8002db2:	430a      	orrs	r2, r1
 8002db4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db6:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002db8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dba:	4b02      	ldr	r3, [pc, #8]	; (8002dc4 <HAL_RCC_OscConfig+0x330>)
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dc2:	e01d      	b.n	8002e00 <HAL_RCC_OscConfig+0x36c>
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	fffeffff 	.word	0xfffeffff
 8002dcc:	fffbffff 	.word	0xfffbffff
 8002dd0:	ffff80ff 	.word	0xffff80ff
 8002dd4:	ffffc7ff 	.word	0xffffc7ff
 8002dd8:	02dc6c00 	.word	0x02dc6c00
 8002ddc:	20000008 	.word	0x20000008
 8002de0:	2000000c 	.word	0x2000000c
 8002de4:	fffffeff 	.word	0xfffffeff
 8002de8:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_RCC_OscConfig+0x3e8>)
 8002dea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dec:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <HAL_RCC_OscConfig+0x3e8>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	438a      	bics	r2, r1
 8002df2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002df4:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <HAL_RCC_OscConfig+0x3e8>)
 8002df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_RCC_OscConfig+0x3e8>)
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d014      	beq.n	8002e32 <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fdfa 	bl	8001a00 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002e10:	e009      	b.n	8002e26 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe fdf5 	bl	8001a00 <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <HAL_RCC_OscConfig+0x3ec>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e025      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_RCC_OscConfig+0x3e8>)
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x37e>
 8002e30:	e013      	b.n	8002e5a <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe fde5 	bl	8001a00 <HAL_GetTick>
 8002e36:	0003      	movs	r3, r0
 8002e38:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002e3a:	e009      	b.n	8002e50 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fde0 	bl	8001a00 <HAL_GetTick>
 8002e40:	0002      	movs	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <HAL_RCC_OscConfig+0x3ec>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e010      	b.n	8002e72 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_RCC_OscConfig+0x3e8>)
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	2202      	movs	r2, #2
 8002e56:	4013      	ands	r3, r2
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e5a:	230f      	movs	r3, #15
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_RCC_OscConfig+0x3e8>)
 8002e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <HAL_RCC_OscConfig+0x3e8>)
 8002e6a:	4906      	ldr	r1, [pc, #24]	; (8002e84 <HAL_RCC_OscConfig+0x3f0>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b006      	add	sp, #24
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	00001388 	.word	0x00001388
 8002e84:	efffffff 	.word	0xefffffff

08002e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0e9      	b.n	8003070 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d91e      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b73      	ldr	r3, [pc, #460]	; (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2207      	movs	r2, #7
 8002eb0:	4393      	bics	r3, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	4b70      	ldr	r3, [pc, #448]	; (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ebc:	f7fe fda0 	bl	8001a00 <HAL_GetTick>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ec4:	e009      	b.n	8002eda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec6:	f7fe fd9b 	bl	8001a00 <HAL_GetTick>
 8002eca:	0002      	movs	r2, r0
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	4a6a      	ldr	r2, [pc, #424]	; (800307c <HAL_RCC_ClockConfig+0x1f4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0ca      	b.n	8003070 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eda:	4b67      	ldr	r3, [pc, #412]	; (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2207      	movs	r2, #7
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1ee      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2202      	movs	r2, #2
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d017      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002efc:	4b60      	ldr	r3, [pc, #384]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a60      	ldr	r2, [pc, #384]	; (8003084 <HAL_RCC_ClockConfig+0x1fc>)
 8002f02:	401a      	ands	r2, r3
 8002f04:	4b5e      	ldr	r3, [pc, #376]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002f06:	21b0      	movs	r1, #176	; 0xb0
 8002f08:	0109      	lsls	r1, r1, #4
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0e:	4b5c      	ldr	r3, [pc, #368]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	4a5d      	ldr	r2, [pc, #372]	; (8003088 <HAL_RCC_ClockConfig+0x200>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	0019      	movs	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	4b58      	ldr	r3, [pc, #352]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2201      	movs	r2, #1
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d055      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002f2c:	4b54      	ldr	r3, [pc, #336]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	221c      	movs	r2, #28
 8002f32:	4393      	bics	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	4b51      	ldr	r3, [pc, #324]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f48:	4b4d      	ldr	r3, [pc, #308]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	029b      	lsls	r3, r3, #10
 8002f50:	4013      	ands	r3, r2
 8002f52:	d11f      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e08b      	b.n	8003070 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f60:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d113      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e07f      	b.n	8003070 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002f78:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d108      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e074      	b.n	8003070 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f86:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e06d      	b.n	8003070 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f94:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2207      	movs	r2, #7
 8002f9a:	4393      	bics	r3, r2
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	4b37      	ldr	r3, [pc, #220]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fd2a 	bl	8001a00 <HAL_GetTick>
 8002fac:	0003      	movs	r3, r0
 8002fae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb0:	e009      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb2:	f7fe fd25 	bl	8001a00 <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	4a2f      	ldr	r2, [pc, #188]	; (800307c <HAL_RCC_ClockConfig+0x1f4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e054      	b.n	8003070 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2238      	movs	r2, #56	; 0x38
 8002fcc:	401a      	ands	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1ec      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b27      	ldr	r3, [pc, #156]	; (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2207      	movs	r2, #7
 8002fde:	4013      	ands	r3, r2
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d21e      	bcs.n	8003024 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b24      	ldr	r3, [pc, #144]	; (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2207      	movs	r2, #7
 8002fec:	4393      	bics	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe fd02 	bl	8001a00 <HAL_GetTick>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003000:	e009      	b.n	8003016 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003002:	f7fe fcfd 	bl	8001a00 <HAL_GetTick>
 8003006:	0002      	movs	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	4a1b      	ldr	r2, [pc, #108]	; (800307c <HAL_RCC_ClockConfig+0x1f4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e02c      	b.n	8003070 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2207      	movs	r2, #7
 800301c:	4013      	ands	r3, r2
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d1ee      	bne.n	8003002 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2204      	movs	r2, #4
 800302a:	4013      	ands	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4a16      	ldr	r2, [pc, #88]	; (800308c <HAL_RCC_ClockConfig+0x204>)
 8003034:	4013      	ands	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 800303e:	430a      	orrs	r2, r1
 8003040:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003042:	f000 f82b 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8003046:	0001      	movs	r1, r0
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	220f      	movs	r2, #15
 8003050:	401a      	ands	r2, r3
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <HAL_RCC_ClockConfig+0x208>)
 8003054:	0092      	lsls	r2, r2, #2
 8003056:	58d3      	ldr	r3, [r2, r3]
 8003058:	221f      	movs	r2, #31
 800305a:	4013      	ands	r3, r2
 800305c:	000a      	movs	r2, r1
 800305e:	40da      	lsrs	r2, r3
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_RCC_ClockConfig+0x20c>)
 8003062:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <HAL_RCC_ClockConfig+0x210>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0018      	movs	r0, r3
 800306a:	f7fe fc6f 	bl	800194c <HAL_InitTick>
 800306e:	0003      	movs	r3, r0
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	b004      	add	sp, #16
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40022000 	.word	0x40022000
 800307c:	00001388 	.word	0x00001388
 8003080:	40021000 	.word	0x40021000
 8003084:	ffff84ff 	.word	0xffff84ff
 8003088:	fffff0ff 	.word	0xfffff0ff
 800308c:	ffff8fff 	.word	0xffff8fff
 8003090:	0800451c 	.word	0x0800451c
 8003094:	20000008 	.word	0x20000008
 8003098:	2000000c 	.word	0x2000000c

0800309c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030a2:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <HAL_RCC_GetSysClockFreq+0x78>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2238      	movs	r2, #56	; 0x38
 80030a8:	4013      	ands	r3, r2
 80030aa:	d10f      	bne.n	80030cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCC_GetSysClockFreq+0x78>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0adb      	lsrs	r3, r3, #11
 80030b2:	2207      	movs	r2, #7
 80030b4:	4013      	ands	r3, r2
 80030b6:	2201      	movs	r2, #1
 80030b8:	409a      	lsls	r2, r3
 80030ba:	0013      	movs	r3, r2
 80030bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80030be:	6839      	ldr	r1, [r7, #0]
 80030c0:	4815      	ldr	r0, [pc, #84]	; (8003118 <HAL_RCC_GetSysClockFreq+0x7c>)
 80030c2:	f7fd f821 	bl	8000108 <__udivsi3>
 80030c6:	0003      	movs	r3, r0
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	e01e      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030cc:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_RCC_GetSysClockFreq+0x78>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2238      	movs	r2, #56	; 0x38
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d102      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030d8:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_RCC_GetSysClockFreq+0x80>)
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	e015      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_RCC_GetSysClockFreq+0x78>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2238      	movs	r2, #56	; 0x38
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d103      	bne.n	80030f2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	e00b      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <HAL_RCC_GetSysClockFreq+0x78>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2238      	movs	r2, #56	; 0x38
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b18      	cmp	r3, #24
 80030fc:	d103      	bne.n	8003106 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80030fe:	23fa      	movs	r3, #250	; 0xfa
 8003100:	01db      	lsls	r3, r3, #7
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	e001      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800310a:	687b      	ldr	r3, [r7, #4]
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	02dc6c00 	.word	0x02dc6c00
 800311c:	007a1200 	.word	0x007a1200

08003120 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003124:	4b02      	ldr	r3, [pc, #8]	; (8003130 <HAL_RCC_GetHCLKFreq+0x10>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	20000008 	.word	0x20000008

08003134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003138:	f7ff fff2 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 800313c:	0001      	movs	r1, r0
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0b1b      	lsrs	r3, r3, #12
 8003144:	2207      	movs	r2, #7
 8003146:	401a      	ands	r2, r3
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800314a:	0092      	lsls	r2, r2, #2
 800314c:	58d3      	ldr	r3, [r2, r3]
 800314e:	221f      	movs	r2, #31
 8003150:	4013      	ands	r3, r2
 8003152:	40d9      	lsrs	r1, r3
 8003154:	000b      	movs	r3, r1
}
 8003156:	0018      	movs	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	0800455c 	.word	0x0800455c

08003164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800316c:	2313      	movs	r3, #19
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003174:	2312      	movs	r3, #18
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	029b      	lsls	r3, r3, #10
 8003184:	4013      	ands	r3, r2
 8003186:	d100      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003188:	e079      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318a:	2011      	movs	r0, #17
 800318c:	183b      	adds	r3, r7, r0
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b64      	ldr	r3, [pc, #400]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	055b      	lsls	r3, r3, #21
 800319a:	4013      	ands	r3, r2
 800319c:	d110      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a2:	4b60      	ldr	r3, [pc, #384]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	0549      	lsls	r1, r1, #21
 80031a8:	430a      	orrs	r2, r1
 80031aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80031ac:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	055b      	lsls	r3, r3, #21
 80031b4:	4013      	ands	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	183b      	adds	r3, r7, r0
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80031c0:	4b58      	ldr	r3, [pc, #352]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031c4:	23c0      	movs	r3, #192	; 0xc0
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4013      	ands	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d019      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d014      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80031dc:	4b51      	ldr	r3, [pc, #324]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	4a51      	ldr	r2, [pc, #324]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031e6:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031ea:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	0249      	lsls	r1, r1, #9
 80031f0:	430a      	orrs	r2, r1
 80031f2:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031f4:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031f8:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031fa:	494c      	ldr	r1, [pc, #304]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80031fc:	400a      	ands	r2, r1
 80031fe:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003200:	4b48      	ldr	r3, [pc, #288]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2201      	movs	r2, #1
 800320a:	4013      	ands	r3, r2
 800320c:	d016      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320e:	f7fe fbf7 	bl	8001a00 <HAL_GetTick>
 8003212:	0003      	movs	r3, r0
 8003214:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003216:	e00c      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fe fbf2 	bl	8001a00 <HAL_GetTick>
 800321c:	0002      	movs	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	4a43      	ldr	r2, [pc, #268]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d904      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8003228:	2313      	movs	r3, #19
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2203      	movs	r2, #3
 800322e:	701a      	strb	r2, [r3, #0]
          break;
 8003230:	e004      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003232:	4b3c      	ldr	r3, [pc, #240]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2202      	movs	r2, #2
 8003238:	4013      	ands	r3, r2
 800323a:	d0ed      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 800323c:	2313      	movs	r3, #19
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003246:	4b37      	ldr	r3, [pc, #220]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	4a37      	ldr	r2, [pc, #220]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	4b33      	ldr	r3, [pc, #204]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003256:	430a      	orrs	r2, r1
 8003258:	65da      	str	r2, [r3, #92]	; 0x5c
 800325a:	e005      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	2312      	movs	r3, #18
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2213      	movs	r2, #19
 8003262:	18ba      	adds	r2, r7, r2
 8003264:	7812      	ldrb	r2, [r2, #0]
 8003266:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003268:	2311      	movs	r3, #17
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d105      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003272:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003276:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003278:	492e      	ldr	r1, [pc, #184]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327a:	400a      	ands	r2, r1
 800327c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2201      	movs	r2, #1
 8003284:	4013      	ands	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003288:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	2203      	movs	r2, #3
 800328e:	4393      	bics	r3, r2
 8003290:	0019      	movs	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003298:	430a      	orrs	r2, r1
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2240      	movs	r2, #64	; 0x40
 80032a2:	4013      	ands	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032a6:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032aa:	4a23      	ldr	r2, [pc, #140]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032b6:	430a      	orrs	r2, r1
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	01db      	lsls	r3, r3, #7
 80032c2:	4013      	ands	r3, r2
 80032c4:	d008      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c6:	4b17      	ldr	r3, [pc, #92]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	0899      	lsrs	r1, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032d4:	430a      	orrs	r2, r1
 80032d6:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4013      	ands	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	4a14      	ldr	r2, [pc, #80]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032f4:	430a      	orrs	r2, r1
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da09      	bge.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	22e0      	movs	r2, #224	; 0xe0
 8003306:	4393      	bics	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003314:	2312      	movs	r3, #18
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	781b      	ldrb	r3, [r3, #0]
}
 800331a:	0018      	movs	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	b006      	add	sp, #24
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	40021000 	.word	0x40021000
 8003328:	fffffcff 	.word	0xfffffcff
 800332c:	fffeffff 	.word	0xfffeffff
 8003330:	00001388 	.word	0x00001388
 8003334:	efffffff 	.word	0xefffffff
 8003338:	ffffcfff 	.word	0xffffcfff
 800333c:	ffff3fff 	.word	0xffff3fff

08003340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e04a      	b.n	80033e8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	223d      	movs	r2, #61	; 0x3d
 8003356:	5c9b      	ldrb	r3, [r3, r2]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d107      	bne.n	800336e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	223c      	movs	r2, #60	; 0x3c
 8003362:	2100      	movs	r1, #0
 8003364:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	0018      	movs	r0, r3
 800336a:	f7fe fa0f 	bl	800178c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	223d      	movs	r2, #61	; 0x3d
 8003372:	2102      	movs	r1, #2
 8003374:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	0019      	movs	r1, r3
 8003380:	0010      	movs	r0, r2
 8003382:	f000 faab 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2248      	movs	r2, #72	; 0x48
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	223e      	movs	r2, #62	; 0x3e
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	223f      	movs	r2, #63	; 0x3f
 800339a:	2101      	movs	r1, #1
 800339c:	5499      	strb	r1, [r3, r2]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2240      	movs	r2, #64	; 0x40
 80033a2:	2101      	movs	r1, #1
 80033a4:	5499      	strb	r1, [r3, r2]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2241      	movs	r2, #65	; 0x41
 80033aa:	2101      	movs	r1, #1
 80033ac:	5499      	strb	r1, [r3, r2]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2242      	movs	r2, #66	; 0x42
 80033b2:	2101      	movs	r1, #1
 80033b4:	5499      	strb	r1, [r3, r2]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2243      	movs	r2, #67	; 0x43
 80033ba:	2101      	movs	r1, #1
 80033bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2244      	movs	r2, #68	; 0x44
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2245      	movs	r2, #69	; 0x45
 80033ca:	2101      	movs	r1, #1
 80033cc:	5499      	strb	r1, [r3, r2]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2246      	movs	r2, #70	; 0x46
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2247      	movs	r2, #71	; 0x47
 80033da:	2101      	movs	r1, #1
 80033dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	223d      	movs	r2, #61	; 0x3d
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	0018      	movs	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b002      	add	sp, #8
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	223d      	movs	r2, #61	; 0x3d
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d001      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e037      	b.n	8003478 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	223d      	movs	r2, #61	; 0x3d
 800340c:	2102      	movs	r1, #2
 800340e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2101      	movs	r1, #1
 800341c:	430a      	orrs	r2, r1
 800341e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a16      	ldr	r2, [pc, #88]	; (8003480 <HAL_TIM_Base_Start_IT+0x90>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x44>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a15      	ldr	r2, [pc, #84]	; (8003484 <HAL_TIM_Base_Start_IT+0x94>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d116      	bne.n	8003462 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	4a13      	ldr	r2, [pc, #76]	; (8003488 <HAL_TIM_Base_Start_IT+0x98>)
 800343c:	4013      	ands	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b06      	cmp	r3, #6
 8003444:	d016      	beq.n	8003474 <HAL_TIM_Base_Start_IT+0x84>
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	025b      	lsls	r3, r3, #9
 800344c:	429a      	cmp	r2, r3
 800344e:	d011      	beq.n	8003474 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2101      	movs	r1, #1
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003460:	e008      	b.n	8003474 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2101      	movs	r1, #1
 800346e:	430a      	orrs	r2, r1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e000      	b.n	8003476 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b004      	add	sp, #16
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40000400 	.word	0x40000400
 8003488:	00010007 	.word	0x00010007

0800348c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2202      	movs	r2, #2
 800349c:	4013      	ands	r3, r2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d124      	bne.n	80034ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2202      	movs	r2, #2
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d11d      	bne.n	80034ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2203      	movs	r2, #3
 80034b6:	4252      	negs	r2, r2
 80034b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2203      	movs	r2, #3
 80034c8:	4013      	ands	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 f9ec 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 80034d4:	e007      	b.n	80034e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 f9df 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 f9eb 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2204      	movs	r2, #4
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d125      	bne.n	8003546 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2204      	movs	r2, #4
 8003502:	4013      	ands	r3, r2
 8003504:	2b04      	cmp	r3, #4
 8003506:	d11e      	bne.n	8003546 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2205      	movs	r2, #5
 800350e:	4252      	negs	r2, r2
 8003510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	23c0      	movs	r3, #192	; 0xc0
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4013      	ands	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	0018      	movs	r0, r3
 800352a:	f000 f9bf 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 800352e:	e007      	b.n	8003540 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	0018      	movs	r0, r3
 8003534:	f000 f9b2 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	0018      	movs	r0, r3
 800353c:	f000 f9be 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2208      	movs	r2, #8
 800354e:	4013      	ands	r3, r2
 8003550:	2b08      	cmp	r3, #8
 8003552:	d124      	bne.n	800359e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2208      	movs	r2, #8
 800355c:	4013      	ands	r3, r2
 800355e:	2b08      	cmp	r3, #8
 8003560:	d11d      	bne.n	800359e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2209      	movs	r2, #9
 8003568:	4252      	negs	r2, r2
 800356a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2204      	movs	r2, #4
 8003570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	2203      	movs	r2, #3
 800357a:	4013      	ands	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	f000 f993 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 8003586:	e007      	b.n	8003598 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 f986 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0018      	movs	r0, r3
 8003594:	f000 f992 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2210      	movs	r2, #16
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d125      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2210      	movs	r2, #16
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d11e      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2211      	movs	r2, #17
 80035c0:	4252      	negs	r2, r2
 80035c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2208      	movs	r2, #8
 80035c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	23c0      	movs	r3, #192	; 0xc0
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4013      	ands	r3, r2
 80035d6:	d004      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f966 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 80035e0:	e007      	b.n	80035f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 f959 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 f965 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2201      	movs	r2, #1
 8003600:	4013      	ands	r3, r2
 8003602:	2b01      	cmp	r3, #1
 8003604:	d10f      	bne.n	8003626 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	4013      	ands	r3, r2
 8003610:	2b01      	cmp	r3, #1
 8003612:	d108      	bne.n	8003626 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2202      	movs	r2, #2
 800361a:	4252      	negs	r2, r2
 800361c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	0018      	movs	r0, r3
 8003622:	f7fd fd2b 	bl	800107c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2280      	movs	r2, #128	; 0x80
 800362e:	4013      	ands	r3, r2
 8003630:	2b80      	cmp	r3, #128	; 0x80
 8003632:	d10f      	bne.n	8003654 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	4013      	ands	r3, r2
 800363e:	2b80      	cmp	r3, #128	; 0x80
 8003640:	d108      	bne.n	8003654 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2281      	movs	r2, #129	; 0x81
 8003648:	4252      	negs	r2, r2
 800364a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 fab6 	bl	8003bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	401a      	ands	r2, r3
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	429a      	cmp	r2, r3
 8003666:	d10e      	bne.n	8003686 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	4013      	ands	r3, r2
 8003672:	2b80      	cmp	r3, #128	; 0x80
 8003674:	d107      	bne.n	8003686 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <HAL_TIM_IRQHandler+0x260>)
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 faa5 	bl	8003bd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2240      	movs	r2, #64	; 0x40
 800368e:	4013      	ands	r3, r2
 8003690:	2b40      	cmp	r3, #64	; 0x40
 8003692:	d10f      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2240      	movs	r2, #64	; 0x40
 800369c:	4013      	ands	r3, r2
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d108      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2241      	movs	r2, #65	; 0x41
 80036a8:	4252      	negs	r2, r2
 80036aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 f90c 	bl	80038cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2220      	movs	r2, #32
 80036bc:	4013      	ands	r3, r2
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d10f      	bne.n	80036e2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d108      	bne.n	80036e2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2221      	movs	r2, #33	; 0x21
 80036d6:	4252      	negs	r2, r2
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 fa67 	bl	8003bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b002      	add	sp, #8
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	fffffeff 	.word	0xfffffeff

080036f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fa:	230f      	movs	r3, #15
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	223c      	movs	r2, #60	; 0x3c
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_TIM_ConfigClockSource+0x20>
 800370c:	2302      	movs	r3, #2
 800370e:	e0bc      	b.n	800388a <HAL_TIM_ConfigClockSource+0x19a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	223c      	movs	r2, #60	; 0x3c
 8003714:	2101      	movs	r1, #1
 8003716:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	223d      	movs	r2, #61	; 0x3d
 800371c:	2102      	movs	r1, #2
 800371e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4a5a      	ldr	r2, [pc, #360]	; (8003894 <HAL_TIM_ConfigClockSource+0x1a4>)
 800372c:	4013      	ands	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4a59      	ldr	r2, [pc, #356]	; (8003898 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003734:	4013      	ands	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2280      	movs	r2, #128	; 0x80
 8003746:	0192      	lsls	r2, r2, #6
 8003748:	4293      	cmp	r3, r2
 800374a:	d040      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0xde>
 800374c:	2280      	movs	r2, #128	; 0x80
 800374e:	0192      	lsls	r2, r2, #6
 8003750:	4293      	cmp	r3, r2
 8003752:	d900      	bls.n	8003756 <HAL_TIM_ConfigClockSource+0x66>
 8003754:	e088      	b.n	8003868 <HAL_TIM_ConfigClockSource+0x178>
 8003756:	2280      	movs	r2, #128	; 0x80
 8003758:	0152      	lsls	r2, r2, #5
 800375a:	4293      	cmp	r3, r2
 800375c:	d100      	bne.n	8003760 <HAL_TIM_ConfigClockSource+0x70>
 800375e:	e088      	b.n	8003872 <HAL_TIM_ConfigClockSource+0x182>
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	0152      	lsls	r2, r2, #5
 8003764:	4293      	cmp	r3, r2
 8003766:	d900      	bls.n	800376a <HAL_TIM_ConfigClockSource+0x7a>
 8003768:	e07e      	b.n	8003868 <HAL_TIM_ConfigClockSource+0x178>
 800376a:	2b70      	cmp	r3, #112	; 0x70
 800376c:	d018      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0xb0>
 800376e:	d900      	bls.n	8003772 <HAL_TIM_ConfigClockSource+0x82>
 8003770:	e07a      	b.n	8003868 <HAL_TIM_ConfigClockSource+0x178>
 8003772:	2b60      	cmp	r3, #96	; 0x60
 8003774:	d04f      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x126>
 8003776:	d900      	bls.n	800377a <HAL_TIM_ConfigClockSource+0x8a>
 8003778:	e076      	b.n	8003868 <HAL_TIM_ConfigClockSource+0x178>
 800377a:	2b50      	cmp	r3, #80	; 0x50
 800377c:	d03b      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0x106>
 800377e:	d900      	bls.n	8003782 <HAL_TIM_ConfigClockSource+0x92>
 8003780:	e072      	b.n	8003868 <HAL_TIM_ConfigClockSource+0x178>
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d057      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x146>
 8003786:	d900      	bls.n	800378a <HAL_TIM_ConfigClockSource+0x9a>
 8003788:	e06e      	b.n	8003868 <HAL_TIM_ConfigClockSource+0x178>
 800378a:	2b30      	cmp	r3, #48	; 0x30
 800378c:	d063      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x166>
 800378e:	d86b      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x178>
 8003790:	2b20      	cmp	r3, #32
 8003792:	d060      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x166>
 8003794:	d868      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x178>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d05d      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x166>
 800379a:	2b10      	cmp	r3, #16
 800379c:	d05b      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x166>
 800379e:	e063      	b.n	8003868 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6899      	ldr	r1, [r3, #8]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f000 f97c 	bl	8003aac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2277      	movs	r2, #119	; 0x77
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	609a      	str	r2, [r3, #8]
      break;
 80037cc:	e052      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6899      	ldr	r1, [r3, #8]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f000 f965 	bl	8003aac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2180      	movs	r1, #128	; 0x80
 80037ee:	01c9      	lsls	r1, r1, #7
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]
      break;
 80037f4:	e03e      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	001a      	movs	r2, r3
 8003804:	f000 f8d6 	bl	80039b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2150      	movs	r1, #80	; 0x50
 800380e:	0018      	movs	r0, r3
 8003810:	f000 f930 	bl	8003a74 <TIM_ITRx_SetConfig>
      break;
 8003814:	e02e      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	001a      	movs	r2, r3
 8003824:	f000 f8f4 	bl	8003a10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2160      	movs	r1, #96	; 0x60
 800382e:	0018      	movs	r0, r3
 8003830:	f000 f920 	bl	8003a74 <TIM_ITRx_SetConfig>
      break;
 8003834:	e01e      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	001a      	movs	r2, r3
 8003844:	f000 f8b6 	bl	80039b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2140      	movs	r1, #64	; 0x40
 800384e:	0018      	movs	r0, r3
 8003850:	f000 f910 	bl	8003a74 <TIM_ITRx_SetConfig>
      break;
 8003854:	e00e      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	0019      	movs	r1, r3
 8003860:	0010      	movs	r0, r2
 8003862:	f000 f907 	bl	8003a74 <TIM_ITRx_SetConfig>
      break;
 8003866:	e005      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003868:	230f      	movs	r3, #15
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
      break;
 8003870:	e000      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003872:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	223d      	movs	r2, #61	; 0x3d
 8003878:	2101      	movs	r1, #1
 800387a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	223c      	movs	r2, #60	; 0x3c
 8003880:	2100      	movs	r1, #0
 8003882:	5499      	strb	r1, [r3, r2]

  return status;
 8003884:	230f      	movs	r3, #15
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	781b      	ldrb	r3, [r3, #0]
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	b004      	add	sp, #16
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	ffceff88 	.word	0xffceff88
 8003898:	ffff00ff 	.word	0xffff00ff

0800389c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b002      	add	sp, #8
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b002      	add	sp, #8
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b002      	add	sp, #8
 80038da:	bd80      	pop	{r7, pc}

080038dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a2b      	ldr	r2, [pc, #172]	; (800399c <TIM_Base_SetConfig+0xc0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0x20>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <TIM_Base_SetConfig+0xc4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d108      	bne.n	800390e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2270      	movs	r2, #112	; 0x70
 8003900:	4393      	bics	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a22      	ldr	r2, [pc, #136]	; (800399c <TIM_Base_SetConfig+0xc0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00f      	beq.n	8003936 <TIM_Base_SetConfig+0x5a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a21      	ldr	r2, [pc, #132]	; (80039a0 <TIM_Base_SetConfig+0xc4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00b      	beq.n	8003936 <TIM_Base_SetConfig+0x5a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a20      	ldr	r2, [pc, #128]	; (80039a4 <TIM_Base_SetConfig+0xc8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d007      	beq.n	8003936 <TIM_Base_SetConfig+0x5a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1f      	ldr	r2, [pc, #124]	; (80039a8 <TIM_Base_SetConfig+0xcc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_Base_SetConfig+0x5a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <TIM_Base_SetConfig+0xd0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d108      	bne.n	8003948 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4a1d      	ldr	r2, [pc, #116]	; (80039b0 <TIM_Base_SetConfig+0xd4>)
 800393a:	4013      	ands	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2280      	movs	r2, #128	; 0x80
 800394c:	4393      	bics	r3, r2
 800394e:	001a      	movs	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a0a      	ldr	r2, [pc, #40]	; (800399c <TIM_Base_SetConfig+0xc0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <TIM_Base_SetConfig+0xaa>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <TIM_Base_SetConfig+0xcc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_Base_SetConfig+0xaa>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <TIM_Base_SetConfig+0xd0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d103      	bne.n	800398e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	615a      	str	r2, [r3, #20]
}
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b004      	add	sp, #16
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40002000 	.word	0x40002000
 80039a8:	40014400 	.word	0x40014400
 80039ac:	40014800 	.word	0x40014800
 80039b0:	fffffcff 	.word	0xfffffcff

080039b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	2201      	movs	r2, #1
 80039cc:	4393      	bics	r3, r2
 80039ce:	001a      	movs	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	22f0      	movs	r2, #240	; 0xf0
 80039de:	4393      	bics	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	220a      	movs	r2, #10
 80039f0:	4393      	bics	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b006      	add	sp, #24
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	2210      	movs	r2, #16
 8003a22:	4393      	bics	r3, r2
 8003a24:	001a      	movs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	4a0d      	ldr	r2, [pc, #52]	; (8003a70 <TIM_TI2_ConfigInputStage+0x60>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	031b      	lsls	r3, r3, #12
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	22a0      	movs	r2, #160	; 0xa0
 8003a4c:	4393      	bics	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b006      	add	sp, #24
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	ffff0fff 	.word	0xffff0fff

08003a74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a08      	ldr	r2, [pc, #32]	; (8003aa8 <TIM_ITRx_SetConfig+0x34>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	2207      	movs	r2, #7
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	609a      	str	r2, [r3, #8]
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b004      	add	sp, #16
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	ffcfff8f 	.word	0xffcfff8f

08003aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <TIM_ETR_SetConfig+0x3c>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	021a      	lsls	r2, r3, #8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	609a      	str	r2, [r3, #8]
}
 8003ae0:	46c0      	nop			; (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b006      	add	sp, #24
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	ffff00ff 	.word	0xffff00ff

08003aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	223c      	movs	r2, #60	; 0x3c
 8003afa:	5c9b      	ldrb	r3, [r3, r2]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e04a      	b.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	223c      	movs	r2, #60	; 0x3c
 8003b08:	2101      	movs	r1, #1
 8003b0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	223d      	movs	r2, #61	; 0x3d
 8003b10:	2102      	movs	r1, #2
 8003b12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1e      	ldr	r2, [pc, #120]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2270      	movs	r2, #112	; 0x70
 8003b44:	4393      	bics	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a10      	ldr	r2, [pc, #64]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10c      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2280      	movs	r2, #128	; 0x80
 8003b72:	4393      	bics	r3, r2
 8003b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	223d      	movs	r2, #61	; 0x3d
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	223c      	movs	r2, #60	; 0x3c
 8003b94:	2100      	movs	r1, #0
 8003b96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	ff0fffff 	.word	0xff0fffff
 8003bac:	40000400 	.word	0x40000400

08003bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e046      	b.n	8003c80 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2284      	movs	r2, #132	; 0x84
 8003bf6:	589b      	ldr	r3, [r3, r2]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2280      	movs	r2, #128	; 0x80
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f7fd fde6 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2284      	movs	r2, #132	; 0x84
 8003c10:	2124      	movs	r1, #36	; 0x24
 8003c12:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2101      	movs	r1, #1
 8003c20:	438a      	bics	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 f8dc 	bl	8003de4 <UART_SetConfig>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e024      	b.n	8003c80 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 fa4d 	bl	80040e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	490d      	ldr	r1, [pc, #52]	; (8003c88 <HAL_UART_Init+0xa8>)
 8003c52:	400a      	ands	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	212a      	movs	r1, #42	; 0x2a
 8003c62:	438a      	bics	r2, r1
 8003c64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2101      	movs	r1, #1
 8003c72:	430a      	orrs	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f000 fae5 	bl	8004248 <UART_CheckIdleState>
 8003c7e:	0003      	movs	r3, r0
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	ffffb7ff 	.word	0xffffb7ff

08003c8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	; 0x28
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	1dbb      	adds	r3, r7, #6
 8003c9a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2284      	movs	r2, #132	; 0x84
 8003ca0:	589b      	ldr	r3, [r3, r2]
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d000      	beq.n	8003ca8 <HAL_UART_Transmit+0x1c>
 8003ca6:	e097      	b.n	8003dd8 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_UART_Transmit+0x2a>
 8003cae:	1dbb      	adds	r3, r7, #6
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e08f      	b.n	8003dda <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	015b      	lsls	r3, r3, #5
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d109      	bne.n	8003cda <HAL_UART_Transmit+0x4e>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d001      	beq.n	8003cda <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e07f      	b.n	8003dda <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	5c9b      	ldrb	r3, [r3, r2]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_UART_Transmit+0x5c>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e078      	b.n	8003dda <HAL_UART_Transmit+0x14e>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2280      	movs	r2, #128	; 0x80
 8003cec:	2101      	movs	r1, #1
 8003cee:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	228c      	movs	r2, #140	; 0x8c
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2284      	movs	r2, #132	; 0x84
 8003cfc:	2121      	movs	r1, #33	; 0x21
 8003cfe:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d00:	f7fd fe7e 	bl	8001a00 <HAL_GetTick>
 8003d04:	0003      	movs	r3, r0
 8003d06:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1dba      	adds	r2, r7, #6
 8003d0c:	2154      	movs	r1, #84	; 0x54
 8003d0e:	8812      	ldrh	r2, [r2, #0]
 8003d10:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1dba      	adds	r2, r7, #6
 8003d16:	2156      	movs	r1, #86	; 0x56
 8003d18:	8812      	ldrh	r2, [r2, #0]
 8003d1a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	015b      	lsls	r3, r3, #5
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d108      	bne.n	8003d3a <HAL_UART_Transmit+0xae>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e003      	b.n	8003d42 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2280      	movs	r2, #128	; 0x80
 8003d46:	2100      	movs	r1, #0
 8003d48:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003d4a:	e02c      	b.n	8003da6 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	0013      	movs	r3, r2
 8003d56:	2200      	movs	r2, #0
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	f000 fabf 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 8003d5e:	1e03      	subs	r3, r0, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e039      	b.n	8003dda <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	001a      	movs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	05d2      	lsls	r2, r2, #23
 8003d78:	0dd2      	lsrs	r2, r2, #23
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	3302      	adds	r3, #2
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	e007      	b.n	8003d94 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	781a      	ldrb	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3301      	adds	r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2256      	movs	r2, #86	; 0x56
 8003d98:	5a9b      	ldrh	r3, [r3, r2]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b299      	uxth	r1, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2256      	movs	r2, #86	; 0x56
 8003da4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2256      	movs	r2, #86	; 0x56
 8003daa:	5a9b      	ldrh	r3, [r3, r2]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1cc      	bne.n	8003d4c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	0013      	movs	r3, r2
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2140      	movs	r1, #64	; 0x40
 8003dc0:	f000 fa8c 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 8003dc4:	1e03      	subs	r3, r0, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e006      	b.n	8003dda <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2284      	movs	r2, #132	; 0x84
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b008      	add	sp, #32
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dec:	231e      	movs	r3, #30
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4aab      	ldr	r2, [pc, #684]	; (80040c0 <UART_SetConfig+0x2dc>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4aa6      	ldr	r2, [pc, #664]	; (80040c4 <UART_SetConfig+0x2e0>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a9d      	ldr	r2, [pc, #628]	; (80040c8 <UART_SetConfig+0x2e4>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	0019      	movs	r1, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	220f      	movs	r2, #15
 8003e68:	4393      	bics	r3, r2
 8003e6a:	0019      	movs	r1, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a93      	ldr	r2, [pc, #588]	; (80040cc <UART_SetConfig+0x2e8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d127      	bne.n	8003ed2 <UART_SetConfig+0xee>
 8003e82:	4b93      	ldr	r3, [pc, #588]	; (80040d0 <UART_SetConfig+0x2ec>)
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	2203      	movs	r2, #3
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d017      	beq.n	8003ebe <UART_SetConfig+0xda>
 8003e8e:	d81b      	bhi.n	8003ec8 <UART_SetConfig+0xe4>
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d00a      	beq.n	8003eaa <UART_SetConfig+0xc6>
 8003e94:	d818      	bhi.n	8003ec8 <UART_SetConfig+0xe4>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <UART_SetConfig+0xbc>
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d00a      	beq.n	8003eb4 <UART_SetConfig+0xd0>
 8003e9e:	e013      	b.n	8003ec8 <UART_SetConfig+0xe4>
 8003ea0:	231f      	movs	r3, #31
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
 8003ea8:	e021      	b.n	8003eee <UART_SetConfig+0x10a>
 8003eaa:	231f      	movs	r3, #31
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	2202      	movs	r2, #2
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e01c      	b.n	8003eee <UART_SetConfig+0x10a>
 8003eb4:	231f      	movs	r3, #31
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	2204      	movs	r2, #4
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e017      	b.n	8003eee <UART_SetConfig+0x10a>
 8003ebe:	231f      	movs	r3, #31
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	e012      	b.n	8003eee <UART_SetConfig+0x10a>
 8003ec8:	231f      	movs	r3, #31
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	2210      	movs	r2, #16
 8003ece:	701a      	strb	r2, [r3, #0]
 8003ed0:	e00d      	b.n	8003eee <UART_SetConfig+0x10a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a7f      	ldr	r2, [pc, #508]	; (80040d4 <UART_SetConfig+0x2f0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d104      	bne.n	8003ee6 <UART_SetConfig+0x102>
 8003edc:	231f      	movs	r3, #31
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e003      	b.n	8003eee <UART_SetConfig+0x10a>
 8003ee6:	231f      	movs	r3, #31
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	2210      	movs	r2, #16
 8003eec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d000      	beq.n	8003efc <UART_SetConfig+0x118>
 8003efa:	e06f      	b.n	8003fdc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003efc:	231f      	movs	r3, #31
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d01f      	beq.n	8003f46 <UART_SetConfig+0x162>
 8003f06:	dc22      	bgt.n	8003f4e <UART_SetConfig+0x16a>
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d017      	beq.n	8003f3c <UART_SetConfig+0x158>
 8003f0c:	dc1f      	bgt.n	8003f4e <UART_SetConfig+0x16a>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <UART_SetConfig+0x134>
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d005      	beq.n	8003f22 <UART_SetConfig+0x13e>
 8003f16:	e01a      	b.n	8003f4e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7ff f90c 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	61bb      	str	r3, [r7, #24]
        break;
 8003f20:	e01c      	b.n	8003f5c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003f22:	4b6b      	ldr	r3, [pc, #428]	; (80040d0 <UART_SetConfig+0x2ec>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2207      	movs	r2, #7
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	0019      	movs	r1, r3
 8003f30:	4869      	ldr	r0, [pc, #420]	; (80040d8 <UART_SetConfig+0x2f4>)
 8003f32:	f7fc f8e9 	bl	8000108 <__udivsi3>
 8003f36:	0003      	movs	r3, r0
 8003f38:	61bb      	str	r3, [r7, #24]
        break;
 8003f3a:	e00f      	b.n	8003f5c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3c:	f7ff f8ae 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8003f40:	0003      	movs	r3, r0
 8003f42:	61bb      	str	r3, [r7, #24]
        break;
 8003f44:	e00a      	b.n	8003f5c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	61bb      	str	r3, [r7, #24]
        break;
 8003f4c:	e006      	b.n	8003f5c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f52:	231e      	movs	r3, #30
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
        break;
 8003f5a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d100      	bne.n	8003f64 <UART_SetConfig+0x180>
 8003f62:	e097      	b.n	8004094 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f68:	4b5c      	ldr	r3, [pc, #368]	; (80040dc <UART_SetConfig+0x2f8>)
 8003f6a:	0052      	lsls	r2, r2, #1
 8003f6c:	5ad3      	ldrh	r3, [r2, r3]
 8003f6e:	0019      	movs	r1, r3
 8003f70:	69b8      	ldr	r0, [r7, #24]
 8003f72:	f7fc f8c9 	bl	8000108 <__udivsi3>
 8003f76:	0003      	movs	r3, r0
 8003f78:	005a      	lsls	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	18d2      	adds	r2, r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	0019      	movs	r1, r3
 8003f88:	0010      	movs	r0, r2
 8003f8a:	f7fc f8bd 	bl	8000108 <__udivsi3>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b0f      	cmp	r3, #15
 8003f96:	d91c      	bls.n	8003fd2 <UART_SetConfig+0x1ee>
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	025b      	lsls	r3, r3, #9
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d217      	bcs.n	8003fd2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	200e      	movs	r0, #14
 8003fa8:	183b      	adds	r3, r7, r0
 8003faa:	210f      	movs	r1, #15
 8003fac:	438a      	bics	r2, r1
 8003fae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2207      	movs	r2, #7
 8003fb8:	4013      	ands	r3, r2
 8003fba:	b299      	uxth	r1, r3
 8003fbc:	183b      	adds	r3, r7, r0
 8003fbe:	183a      	adds	r2, r7, r0
 8003fc0:	8812      	ldrh	r2, [r2, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	183a      	adds	r2, r7, r0
 8003fcc:	8812      	ldrh	r2, [r2, #0]
 8003fce:	60da      	str	r2, [r3, #12]
 8003fd0:	e060      	b.n	8004094 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd2:	231e      	movs	r3, #30
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e05b      	b.n	8004094 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fdc:	231f      	movs	r3, #31
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d01f      	beq.n	8004026 <UART_SetConfig+0x242>
 8003fe6:	dc22      	bgt.n	800402e <UART_SetConfig+0x24a>
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d017      	beq.n	800401c <UART_SetConfig+0x238>
 8003fec:	dc1f      	bgt.n	800402e <UART_SetConfig+0x24a>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <UART_SetConfig+0x214>
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d005      	beq.n	8004002 <UART_SetConfig+0x21e>
 8003ff6:	e01a      	b.n	800402e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7ff f89c 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	61bb      	str	r3, [r7, #24]
        break;
 8004000:	e01c      	b.n	800403c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004002:	4b33      	ldr	r3, [pc, #204]	; (80040d0 <UART_SetConfig+0x2ec>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2207      	movs	r2, #7
 800400a:	4013      	ands	r3, r2
 800400c:	3301      	adds	r3, #1
 800400e:	0019      	movs	r1, r3
 8004010:	4831      	ldr	r0, [pc, #196]	; (80040d8 <UART_SetConfig+0x2f4>)
 8004012:	f7fc f879 	bl	8000108 <__udivsi3>
 8004016:	0003      	movs	r3, r0
 8004018:	61bb      	str	r3, [r7, #24]
        break;
 800401a:	e00f      	b.n	800403c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401c:	f7ff f83e 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8004020:	0003      	movs	r3, r0
 8004022:	61bb      	str	r3, [r7, #24]
        break;
 8004024:	e00a      	b.n	800403c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	61bb      	str	r3, [r7, #24]
        break;
 800402c:	e006      	b.n	800403c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004032:	231e      	movs	r3, #30
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
        break;
 800403a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d028      	beq.n	8004094 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004046:	4b25      	ldr	r3, [pc, #148]	; (80040dc <UART_SetConfig+0x2f8>)
 8004048:	0052      	lsls	r2, r2, #1
 800404a:	5ad3      	ldrh	r3, [r2, r3]
 800404c:	0019      	movs	r1, r3
 800404e:	69b8      	ldr	r0, [r7, #24]
 8004050:	f7fc f85a 	bl	8000108 <__udivsi3>
 8004054:	0003      	movs	r3, r0
 8004056:	001a      	movs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	085b      	lsrs	r3, r3, #1
 800405e:	18d2      	adds	r2, r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	0019      	movs	r1, r3
 8004066:	0010      	movs	r0, r2
 8004068:	f7fc f84e 	bl	8000108 <__udivsi3>
 800406c:	0003      	movs	r3, r0
 800406e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b0f      	cmp	r3, #15
 8004074:	d90a      	bls.n	800408c <UART_SetConfig+0x2a8>
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	025b      	lsls	r3, r3, #9
 800407c:	429a      	cmp	r2, r3
 800407e:	d205      	bcs.n	800408c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	e003      	b.n	8004094 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800408c:	231e      	movs	r3, #30
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	226a      	movs	r2, #106	; 0x6a
 8004098:	2101      	movs	r1, #1
 800409a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2268      	movs	r2, #104	; 0x68
 80040a0:	2101      	movs	r1, #1
 80040a2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80040b0:	231e      	movs	r3, #30
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	781b      	ldrb	r3, [r3, #0]
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b008      	add	sp, #32
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	cfff69f3 	.word	0xcfff69f3
 80040c4:	ffffcfff 	.word	0xffffcfff
 80040c8:	11fff4ff 	.word	0x11fff4ff
 80040cc:	40013800 	.word	0x40013800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40004400 	.word	0x40004400
 80040d8:	02dc6c00 	.word	0x02dc6c00
 80040dc:	0800457c 	.word	0x0800457c

080040e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	d00b      	beq.n	800410a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4a4a      	ldr	r2, [pc, #296]	; (8004224 <UART_AdvFeatureConfig+0x144>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	0019      	movs	r1, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	2202      	movs	r2, #2
 8004110:	4013      	ands	r3, r2
 8004112:	d00b      	beq.n	800412c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4a43      	ldr	r2, [pc, #268]	; (8004228 <UART_AdvFeatureConfig+0x148>)
 800411c:	4013      	ands	r3, r2
 800411e:	0019      	movs	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	2204      	movs	r2, #4
 8004132:	4013      	ands	r3, r2
 8004134:	d00b      	beq.n	800414e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	4a3b      	ldr	r2, [pc, #236]	; (800422c <UART_AdvFeatureConfig+0x14c>)
 800413e:	4013      	ands	r3, r2
 8004140:	0019      	movs	r1, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	2208      	movs	r2, #8
 8004154:	4013      	ands	r3, r2
 8004156:	d00b      	beq.n	8004170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4a34      	ldr	r2, [pc, #208]	; (8004230 <UART_AdvFeatureConfig+0x150>)
 8004160:	4013      	ands	r3, r2
 8004162:	0019      	movs	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	2210      	movs	r2, #16
 8004176:	4013      	ands	r3, r2
 8004178:	d00b      	beq.n	8004192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a2c      	ldr	r2, [pc, #176]	; (8004234 <UART_AdvFeatureConfig+0x154>)
 8004182:	4013      	ands	r3, r2
 8004184:	0019      	movs	r1, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	2220      	movs	r2, #32
 8004198:	4013      	ands	r3, r2
 800419a:	d00b      	beq.n	80041b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4a25      	ldr	r2, [pc, #148]	; (8004238 <UART_AdvFeatureConfig+0x158>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	2240      	movs	r2, #64	; 0x40
 80041ba:	4013      	ands	r3, r2
 80041bc:	d01d      	beq.n	80041fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a1d      	ldr	r2, [pc, #116]	; (800423c <UART_AdvFeatureConfig+0x15c>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	0019      	movs	r1, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	035b      	lsls	r3, r3, #13
 80041de:	429a      	cmp	r2, r3
 80041e0:	d10b      	bne.n	80041fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a15      	ldr	r2, [pc, #84]	; (8004240 <UART_AdvFeatureConfig+0x160>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	0019      	movs	r1, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	2280      	movs	r2, #128	; 0x80
 8004200:	4013      	ands	r3, r2
 8004202:	d00b      	beq.n	800421c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4a0e      	ldr	r2, [pc, #56]	; (8004244 <UART_AdvFeatureConfig+0x164>)
 800420c:	4013      	ands	r3, r2
 800420e:	0019      	movs	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
  }
}
 800421c:	46c0      	nop			; (mov r8, r8)
 800421e:	46bd      	mov	sp, r7
 8004220:	b002      	add	sp, #8
 8004222:	bd80      	pop	{r7, pc}
 8004224:	fffdffff 	.word	0xfffdffff
 8004228:	fffeffff 	.word	0xfffeffff
 800422c:	fffbffff 	.word	0xfffbffff
 8004230:	ffff7fff 	.word	0xffff7fff
 8004234:	ffffefff 	.word	0xffffefff
 8004238:	ffffdfff 	.word	0xffffdfff
 800423c:	ffefffff 	.word	0xffefffff
 8004240:	ff9fffff 	.word	0xff9fffff
 8004244:	fff7ffff 	.word	0xfff7ffff

08004248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af02      	add	r7, sp, #8
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	228c      	movs	r2, #140	; 0x8c
 8004254:	2100      	movs	r1, #0
 8004256:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004258:	f7fd fbd2 	bl	8001a00 <HAL_GetTick>
 800425c:	0003      	movs	r3, r0
 800425e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2208      	movs	r2, #8
 8004268:	4013      	ands	r3, r2
 800426a:	2b08      	cmp	r3, #8
 800426c:	d10c      	bne.n	8004288 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	0391      	lsls	r1, r2, #14
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <UART_CheckIdleState+0x90>)
 8004278:	9200      	str	r2, [sp, #0]
 800427a:	2200      	movs	r2, #0
 800427c:	f000 f82e 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 8004280:	1e03      	subs	r3, r0, #0
 8004282:	d001      	beq.n	8004288 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e023      	b.n	80042d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2204      	movs	r2, #4
 8004290:	4013      	ands	r3, r2
 8004292:	2b04      	cmp	r3, #4
 8004294:	d10c      	bne.n	80042b0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2280      	movs	r2, #128	; 0x80
 800429a:	03d1      	lsls	r1, r2, #15
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4a0e      	ldr	r2, [pc, #56]	; (80042d8 <UART_CheckIdleState+0x90>)
 80042a0:	9200      	str	r2, [sp, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f000 f81a 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 80042a8:	1e03      	subs	r3, r0, #0
 80042aa:	d001      	beq.n	80042b0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e00f      	b.n	80042d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2284      	movs	r2, #132	; 0x84
 80042b4:	2120      	movs	r1, #32
 80042b6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2288      	movs	r2, #136	; 0x88
 80042bc:	2120      	movs	r1, #32
 80042be:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2280      	movs	r2, #128	; 0x80
 80042ca:	2100      	movs	r1, #0
 80042cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	0018      	movs	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b004      	add	sp, #16
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	01ffffff 	.word	0x01ffffff

080042dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b094      	sub	sp, #80	; 0x50
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	1dfb      	adds	r3, r7, #7
 80042ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ec:	e0a7      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f0:	3301      	adds	r3, #1
 80042f2:	d100      	bne.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80042f4:	e0a3      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f6:	f7fd fb83 	bl	8001a00 <HAL_GetTick>
 80042fa:	0002      	movs	r2, r0
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004302:	429a      	cmp	r2, r3
 8004304:	d302      	bcc.n	800430c <UART_WaitOnFlagUntilTimeout+0x30>
 8004306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004308:	2b00      	cmp	r3, #0
 800430a:	d13f      	bne.n	800438c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430c:	f3ef 8310 	mrs	r3, PRIMASK
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
 8004316:	2301      	movs	r3, #1
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	f383 8810 	msr	PRIMASK, r3
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	494e      	ldr	r1, [pc, #312]	; (8004468 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800432e:	400a      	ands	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	f383 8810 	msr	PRIMASK, r3
}
 800433c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800433e:	f3ef 8310 	mrs	r3, PRIMASK
 8004342:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004346:	643b      	str	r3, [r7, #64]	; 0x40
 8004348:	2301      	movs	r3, #1
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	f383 8810 	msr	PRIMASK, r3
}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2101      	movs	r1, #1
 8004360:	438a      	bics	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436a:	f383 8810 	msr	PRIMASK, r3
}
 800436e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2284      	movs	r2, #132	; 0x84
 8004374:	2120      	movs	r1, #32
 8004376:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2288      	movs	r2, #136	; 0x88
 800437c:	2120      	movs	r1, #32
 800437e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2280      	movs	r2, #128	; 0x80
 8004384:	2100      	movs	r1, #0
 8004386:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e069      	b.n	8004460 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2204      	movs	r2, #4
 8004394:	4013      	ands	r3, r2
 8004396:	d052      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	401a      	ands	r2, r3
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d148      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2280      	movs	r2, #128	; 0x80
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ba:	613b      	str	r3, [r7, #16]
  return(result);
 80043bc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c0:	2301      	movs	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f383 8810 	msr	PRIMASK, r3
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4924      	ldr	r1, [pc, #144]	; (8004468 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80043d8:	400a      	ands	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	f383 8810 	msr	PRIMASK, r3
}
 80043e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80043ee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f2:	2301      	movs	r3, #1
 80043f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f383 8810 	msr	PRIMASK, r3
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2101      	movs	r1, #1
 800440a:	438a      	bics	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	f383 8810 	msr	PRIMASK, r3
}
 8004418:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2284      	movs	r2, #132	; 0x84
 800441e:	2120      	movs	r1, #32
 8004420:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2288      	movs	r2, #136	; 0x88
 8004426:	2120      	movs	r1, #32
 8004428:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	228c      	movs	r2, #140	; 0x8c
 800442e:	2120      	movs	r1, #32
 8004430:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2280      	movs	r2, #128	; 0x80
 8004436:	2100      	movs	r1, #0
 8004438:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e010      	b.n	8004460 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	425a      	negs	r2, r3
 800444e:	4153      	adcs	r3, r2
 8004450:	b2db      	uxtb	r3, r3
 8004452:	001a      	movs	r2, r3
 8004454:	1dfb      	adds	r3, r7, #7
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d100      	bne.n	800445e <UART_WaitOnFlagUntilTimeout+0x182>
 800445c:	e747      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	b014      	add	sp, #80	; 0x50
 8004466:	bd80      	pop	{r7, pc}
 8004468:	fffffe5f 	.word	0xfffffe5f

0800446c <__libc_init_array>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	2600      	movs	r6, #0
 8004470:	4d0c      	ldr	r5, [pc, #48]	; (80044a4 <__libc_init_array+0x38>)
 8004472:	4c0d      	ldr	r4, [pc, #52]	; (80044a8 <__libc_init_array+0x3c>)
 8004474:	1b64      	subs	r4, r4, r5
 8004476:	10a4      	asrs	r4, r4, #2
 8004478:	42a6      	cmp	r6, r4
 800447a:	d109      	bne.n	8004490 <__libc_init_array+0x24>
 800447c:	2600      	movs	r6, #0
 800447e:	f000 f821 	bl	80044c4 <_init>
 8004482:	4d0a      	ldr	r5, [pc, #40]	; (80044ac <__libc_init_array+0x40>)
 8004484:	4c0a      	ldr	r4, [pc, #40]	; (80044b0 <__libc_init_array+0x44>)
 8004486:	1b64      	subs	r4, r4, r5
 8004488:	10a4      	asrs	r4, r4, #2
 800448a:	42a6      	cmp	r6, r4
 800448c:	d105      	bne.n	800449a <__libc_init_array+0x2e>
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	00b3      	lsls	r3, r6, #2
 8004492:	58eb      	ldr	r3, [r5, r3]
 8004494:	4798      	blx	r3
 8004496:	3601      	adds	r6, #1
 8004498:	e7ee      	b.n	8004478 <__libc_init_array+0xc>
 800449a:	00b3      	lsls	r3, r6, #2
 800449c:	58eb      	ldr	r3, [r5, r3]
 800449e:	4798      	blx	r3
 80044a0:	3601      	adds	r6, #1
 80044a2:	e7f2      	b.n	800448a <__libc_init_array+0x1e>
 80044a4:	08004594 	.word	0x08004594
 80044a8:	08004594 	.word	0x08004594
 80044ac:	08004594 	.word	0x08004594
 80044b0:	08004598 	.word	0x08004598

080044b4 <memset>:
 80044b4:	0003      	movs	r3, r0
 80044b6:	1882      	adds	r2, r0, r2
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d100      	bne.n	80044be <memset+0xa>
 80044bc:	4770      	bx	lr
 80044be:	7019      	strb	r1, [r3, #0]
 80044c0:	3301      	adds	r3, #1
 80044c2:	e7f9      	b.n	80044b8 <memset+0x4>

080044c4 <_init>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ca:	bc08      	pop	{r3}
 80044cc:	469e      	mov	lr, r3
 80044ce:	4770      	bx	lr

080044d0 <_fini>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr
